describe("Connection", function() {

    // Stored query ids.
    var STORED_QUERY_OBSERVATION = "fmi::observations::weather::multipointcoverage";
    var STORED_QUERY_FORECAST = "fmi::forecast::hirlam::surface::point::multipointcoverage";

    // Timeout value for an asynchronous test.
    var TEST_TIME_OUT = 20000;
    var TEST_TIME_OUT_LONG = 60000;

    /**
     * Notice, if fi.fmi.metoclient.test.SPEC_RUNNER_BASE_STR
     * is defined outside of this class as a global string,
     * it will be used as part of the path.
     */
    function getLocalUrlBase() {
        var urlBase = fi.fmi.metoclient.test && fi.fmi.metoclient.test.GruntSpecConfig && fi.fmi.metoclient.test.GruntSpecConfig.SPEC_RUNNER_BASE_STR ? fi.fmi.metoclient.test.GruntSpecConfig.SPEC_RUNNER_BASE_STR : "";
        if (undefined !== window.__karma__) {
            // Change the base path for Karma tests. The base path always starts with 'base'.
            urlBase = "base/" + urlBase + "data/karma/connection/";

        } else if (urlBase) {
            // Change the base path for Grunt tests because urlBase has been defined.
            urlBase += "data/grunt/connection/";

        } else {
            // Neither Grunt or Karma is used for tests. So, use the default path.
            urlBase = "data/default/connection/";
        }
        return urlBase;
    }

    /**
     * Notice, if fi.fmi.metoclient.test.SPEC_RUNNER_BASE_STR
     * is defined outside of this class as a global string,
     * it will be used as part of the path.
     */
    function getLocalCommonUrlBase() {
        var urlBase = fi.fmi.metoclient.test && fi.fmi.metoclient.test.GruntSpecConfig && fi.fmi.metoclient.test.GruntSpecConfig.SPEC_RUNNER_BASE_STR ? fi.fmi.metoclient.test.GruntSpecConfig.SPEC_RUNNER_BASE_STR : "";
        if (undefined !== window.__karma__) {
            // Change the base path for Karma tests.The base path always starts with 'base'.
            urlBase = "base/" + urlBase + "data/common/";

        } else if (urlBase) {
            // Change the base path for Grunt tests because urlBase has been defined.
            urlBase += "data/common/";

        } else {
            // Neither Grunt or Karma is used for tests. So, use the default path.
            urlBase = "data/common/";
        }
        return urlBase;
    }

    function isOnlyLocalTests() {
        return fi.fmi.metoclient.test && fi.fmi.metoclient.test.SpecConfig && fi.fmi.metoclient.test.SpecConfig.SPEC_RUNNER_ONLY_LOCAL_TESTS;
    }

    function getSpecRunnerTestServerUrl() {
        return fi.fmi.metoclient.test && fi.fmi.metoclient.test.SpecConfig && fi.fmi.metoclient.test.SpecConfig.SPEC_RUNNER_TEST_SERVER_URL ? fi.fmi.metoclient.test.SpecConfig.SPEC_RUNNER_TEST_SERVER_URL : "";
    }

    function testKumpulaHkiTd(connection, cb) {
        var progressCalled = false;
        if (!connection.getData({
            requestParameter : "td",
            // Notice, exact hours are not used here to test time adjusting also.
            // Integer values are used to init dates for older browsers.
            // (new Date("2013-05-10T08:03:00Z")).getTime()
            // (new Date("2013-05-12T09:57:00Z")).getTime()
            begin : new Date(1368172980000),
            end : new Date(1368352620000),
            timestep : 60 * 60 * 1000,
            sites : "Kumpula, Helsinki",
            crs : "EPSG::4258",
            callback : function(data, errors) {
                // Notice, the values here are the correct values for time period defined above.
                // Connection may request extra values around the given times. Therefore, XML may contain more values than just these.
                // Times that XML should provide. Notice, these are in seconds.
                var times = [1368172800, 1368176400, 1368180000, 1368183600, 1368187200, 1368190800, 1368194400, 1368198000, 1368201600, 1368205200, 1368208800, 1368212400, 1368216000, 1368219600, 1368223200, 1368226800, 1368230400, 1368234000, 1368237600, 1368241200, 1368244800, 1368248400, 1368252000, 1368255600, 1368259200, 1368262800, 1368266400, 1368270000, 1368273600, 1368277200, 1368280800, 1368284400, 1368288000, 1368291600, 1368295200, 1368298800, 1368302400, 1368306000, 1368309600, 1368313200, 1368316800, 1368320400, 1368324000, 1368327600, 1368331200, 1368334800, 1368338400, 1368342000, 1368345600, 1368349200, 1368352800];
                var values = [10.5, 11.0, 9.8, 10.6, 10.6, 9.8, 9.8, 10.5, 10.7, 9.9, 9.3, 9.4, 9.5, 9.9, 8.6, 8.3, 9.0, 8.2, 8.2, 6.3, 7.2, 8.0, 8.2, 9.4, 8.4, 8.5, 7.3, 7.5, 8.3, 8.0, 8.0, 7.1, 5.8, 5.6, 6.1, 6.5, 6.4, 6.3, 5.9, 5.4, 5.5, 5.2, 5.2, 5.2, 5.6, 5.8, 4.5, 4.6, 3.9, 4.2, 4.0];
                var locationInfo = data && data.locations && data.locations.length && data.locations[0] ? data.locations[0].info : undefined;
                var infoCheck = locationInfo && locationInfo.id === "101004" && locationInfo.wmo === "2998" && locationInfo.name === "Helsinki Kumpula" && locationInfo.region === "Helsinki";
                var propertyData = data && data.properties ? data.properties.td : undefined;
                var propertyCheck = propertyData && propertyData.label === "Dew-point temperature" && propertyData.phenomenon === "Humidity" && propertyData.unit === "degC" && propertyData.statisticalFunction === "avg" && propertyData.statisticalPeriod === "PT1M";
                var success = infoCheck && propertyCheck && fi.fmi.metoclient.test.SpecUtils.checkData(data, times, values);
                if (cb) {
                    cb(success && progressCalled);
                }
            },
            progressCallback : function(err, partStart, partEnd) {
                // Simple check to test that progress has been called during the flow.
                progressCalled = !isNaN(partStart) && !isNaN(partEnd);
            }
        })) {
            if (cb) {
                cb(false);
            }
        }
    }

    function testHkiTd(connection, cb) {
        var progressCalled = false;
        if (!connection.getData({
            requestParameter : "td",
            // Notice, exact hours are not used here to test time adjusting also.
            // Integer values are used to init dates for older browsers.
            // (new Date("2013-05-10T08:03:00Z")).getTime()
            // (new Date("2013-05-12T09:57:00Z")).getTime()
            begin : new Date(1368172980000),
            end : new Date(1368352620000),
            timestep : 60 * 60 * 1000,
            sites : "Helsinki",
            callback : function(data, errors) {
                // Notice, the values here are the correct values for time period defined above.
                // Connection may request extra values around the given times. Therefore, XML may contain more values than just these.
                // Times that XML should provide. Notice, these are in seconds.
                var times = [1368172800, 1368176400, 1368180000, 1368183600, 1368187200, 1368190800, 1368194400, 1368198000, 1368201600, 1368205200, 1368208800, 1368212400, 1368216000, 1368219600, 1368223200, 1368226800, 1368230400, 1368234000, 1368237600, 1368241200, 1368244800, 1368248400, 1368252000, 1368255600, 1368259200, 1368262800, 1368266400, 1368270000, 1368273600, 1368277200, 1368280800, 1368284400, 1368288000, 1368291600, 1368295200, 1368298800, 1368302400, 1368306000, 1368309600, 1368313200, 1368316800, 1368320400, 1368324000, 1368327600, 1368331200, 1368334800, 1368338400, 1368342000, 1368345600, 1368349200, 1368352800];
                var values = [10.7, 10.1, 10.7, 11.7, 10.7, 9.6, 9.2, 10.2, 9.8, 9.6, 9.2, 10.0, 9.9, 9.0, 6.7, 9.0, 9.1, 8.6, 7.9, 5.7, 7.3, 7.8, 8.6, 8.0, 7.9, 7.2, 7.0, 7.0, 7.1, 6.4, 6.9, 6.8, 5.4, 5.7, 6.0, 6.4, 6.6, 6.6, 5.9, 5.9, 6.0, 5.9, 5.8, 5.6, 5.5, 5.2, 4.2, 4.3, 3.7, 3.7, 3.9];
                var locationInfo = data && data.locations && data.locations.length && data.locations[0] ? data.locations[0].info : undefined;
                var infoCheck = locationInfo && locationInfo.id === "101007" && locationInfo.wmo === "2934" && locationInfo.name === "Helsinki Rautatientori" && locationInfo.region === "Helsinki";
                var propertyData = data && data.properties ? data.properties.td : undefined;
                var propertyCheck = propertyData && propertyData.label === "Dew-point temperature" && propertyData.phenomenon === "Humidity" && propertyData.unit === "degC" && propertyData.statisticalFunction === "avg" && propertyData.statisticalPeriod === "PT1M";
                var success = infoCheck && propertyCheck && fi.fmi.metoclient.test.SpecUtils.checkData(data, times, values);
                if (cb) {
                    cb(success && progressCalled);
                }
            },
            progressCallback : function(err, partStart, partEnd) {
                // Simple check to test that progress has been called during the flow.
                progressCalled = !isNaN(partStart) && !isNaN(partEnd);
            }
        })) {
            if (cb) {
                cb(false);
            }
        }
    }

    function testHkiTurkuTdWindspeed(connection, cb) {
        var progressCalled = false;
        if (!connection.getData({
            requestParameter : "td,ws_10min",
            // Integer values are used to init dates for older browsers.
            // (new Date("2013-05-10T08:00:00Z")).getTime()
            // (new Date("2013-05-12T10:00:00Z")).getTime()
            begin : new Date(1368172800000),
            end : new Date(1368352800000),
            timestep : 60 * 60 * 1000,
            sites : ["Kaisaniemi,Helsinki", "Turku"],
            callback : function(data, errors) {
                // Notice, the values here are the correct values for time period defined above.
                // Connection may request extra values around the given times. Therefore, XML may contain more values than just these.
                // Times that XML should provide. Notice, these are in seconds.
                var times = [1368172800, 1368176400, 1368180000, 1368183600, 1368187200, 1368190800, 1368194400, 1368198000, 1368201600, 1368205200, 1368208800, 1368212400, 1368216000, 1368219600, 1368223200, 1368226800, 1368230400, 1368234000, 1368237600, 1368241200, 1368244800, 1368248400, 1368252000, 1368255600, 1368259200, 1368262800, 1368266400, 1368270000, 1368273600, 1368277200, 1368280800, 1368284400, 1368288000, 1368291600, 1368295200, 1368298800, 1368302400, 1368306000, 1368309600, 1368313200, 1368316800, 1368320400, 1368324000, 1368327600, 1368331200, 1368334800, 1368338400, 1368342000, 1368345600, 1368349200, 1368352800, 1368172800, 1368176400, 1368180000, 1368183600, 1368187200, 1368190800, 1368194400, 1368198000, 1368201600, 1368205200, 1368208800, 1368212400, 1368216000, 1368219600, 1368223200, 1368226800, 1368230400, 1368234000, 1368237600, 1368241200, 1368244800, 1368248400, 1368252000, 1368255600, 1368259200, 1368262800, 1368266400, 1368270000, 1368273600, 1368277200, 1368280800, 1368284400, 1368288000, 1368291600, 1368295200, 1368298800, 1368302400, 1368306000, 1368309600, 1368313200, 1368316800, 1368320400, 1368324000, 1368327600, 1368331200, 1368334800, 1368338400, 1368342000, 1368345600, 1368349200, 1368352800];
                // Notice, the values are here in the order that Helsinki data is first and after that Turku.
                // So, XML values can not be just copy-pasted here because location order is changed for this case.
                // In other words if data is changed make sure that the order is correctly set here for value array content.
                var values = [10.2, 2.5, 10.1, 2.9, 9.9, 4.5, 11.5, 3.4, 10.3, 2.8, 8.9, 4.3, 9.8, 3.3, 10.7, 3.6, 11.1, 2.6, 10.5, 2.5, 10.0, 2.9, 10.5, 2.5, 10.1, 2.4, 9.8, 1.1, 7.3, 1.2, 8.3, 1.9, 9.4, 1.5, 8.7, 1.0, 8.6, 1.2, 6.5, 1.6, 6.9, 1.3, 7.8, 1.4, 8.1, 1.4, 9.5, 1.0, 8.9, 1.2, 8.7, 2.7, 8.3, 2.5, 8.0, 2.0, 8.7, 2.9, 7.4, 3.0, 8.6, 3.1, 8.0, 3.0, 6.9, 3.1, 6.7, 2.8, 6.9, 3.7, 7.2, 3.6, 7.5, 4.2, 7.4, 4.0, 6.8, 3.2, 6.7, 2.5, 6.3, 2.3, 6.3, 1.4, 6.3, 1.8, 6.5, 1.1, 7.3, 0.6, 6.3, 0.6, 6.4, 1.1, 5.8, 2.0, 5.6, 1.6, 4.6, 2.0, 5.9, 3.0, 9.2, 3.2, 9.7, 2.4, 10.3, 2.0, 10.5, 3.4, 9.9, 4.0, 10.5, 3.7, 11.3, 3.8, 11.3, 3.0, 11.6, 1.9, 9.5, 3.5, 9.4, 5.1, 9.5, 1.2, 9.3, 0.9, 9.0, 0.4, 9.1, 1.1, 8.6, 2.2, 7.8, 1.4, 7.2, 0.4, 6.4, 1.2, 6.0, 1.5, 6.1, 1.4, 6.7, 1.3, 7.5, 2.2, 6.9, 1.5, 7.8, 2.0, 8.3, 2.7, 9.2, 4.0, 7.0, 3.1, 5.5, 4.3, 6.0, 4.8, 5.4, 3.3, 3.5, 3.0, 4.6, 2.1, 5.3, 2.1, 6.2, 2.4, 6.1, 2.4, 5.8, 1.9, 5.7, 0.9, 5.5, 0.0, 4.9, 1.2, 5.0, 1.2, 5.4, 1.1, 5.5, 1.1, 5.5, 1.5, 5.7, 1.1, 6.4, 1.9, 6.3, 2.5, 6.9, 2.7, 6.9, 3.7, 6.9, 3.4, 6.9, 2.7];
                var success = fi.fmi.metoclient.test.SpecUtils.checkData(data, times, values);
                if (cb) {
                    cb(success && progressCalled);
                }
            },
            progressCallback : function(err, partStart, partEnd) {
                // Simple check to test that progress has been called during the flow.
                progressCalled = !isNaN(partStart) && !isNaN(partEnd);
            }
        })) {
            if (cb) {
                cb(false);
            }
        }
    }

    function testKumpulaHkiTurkuTdWindspeed(connection, cb) {
        var progressCalled = false;
        if (!connection.getData({
            requestParameter : "td,ws_10min",
            // Integer values are used to init dates for older browsers.
            // (new Date("2013-05-10T08:00:00Z")).getTime()
            // (new Date("2013-05-12T10:00:00Z")).getTime()
            begin : new Date(1368172800000),
            end : new Date(1368352800000),
            timestep : 60 * 60 * 1000,
            sites : ["Kumpula,Helsinki", "Turku"],
            callback : function(data, errors) {
                // Notice, the values here are the correct values for time period defined above.
                // Connection may request extra values around the given times. Therefore, XML may contain more values than just these.
                // Times that XML should provide. Notice, these are in seconds.
                var times = [1368172800, 1368176400, 1368180000, 1368183600, 1368187200, 1368190800, 1368194400, 1368198000, 1368201600, 1368205200, 1368208800, 1368212400, 1368216000, 1368219600, 1368223200, 1368226800, 1368230400, 1368234000, 1368237600, 1368241200, 1368244800, 1368248400, 1368252000, 1368255600, 1368259200, 1368262800, 1368266400, 1368270000, 1368273600, 1368277200, 1368280800, 1368284400, 1368288000, 1368291600, 1368295200, 1368298800, 1368302400, 1368306000, 1368309600, 1368313200, 1368316800, 1368320400, 1368324000, 1368327600, 1368331200, 1368334800, 1368338400, 1368342000, 1368345600, 1368349200, 1368352800, 1368172800, 1368176400, 1368180000, 1368183600, 1368187200, 1368190800, 1368194400, 1368198000, 1368201600, 1368205200, 1368208800, 1368212400, 1368216000, 1368219600, 1368223200, 1368226800, 1368230400, 1368234000, 1368237600, 1368241200, 1368244800, 1368248400, 1368252000, 1368255600, 1368259200, 1368262800, 1368266400, 1368270000, 1368273600, 1368277200, 1368280800, 1368284400, 1368288000, 1368291600, 1368295200, 1368298800, 1368302400, 1368306000, 1368309600, 1368313200, 1368316800, 1368320400, 1368324000, 1368327600, 1368331200, 1368334800, 1368338400, 1368342000, 1368345600, 1368349200, 1368352800];
                // Notice, the values are here in the order that Helsinki data is first and after that Turku.
                // So, XML values can not be just copy-pasted here because location order is changed for this case.
                // In other words if data is changed make sure that the order is correctly set here for value array content.
                var values = [10.5, 3.1, 11.0, 3.3, 9.8, 5.3, 10.6, 4.1, 10.6, 5.2, 9.8, 3.9, 9.8, 5.9, 10.5, 5.0, 10.7, 4.2, 9.9, 5.0, 9.3, 3.6, 9.4, 3.0, 9.5, 3.0, 9.9, 2.7, 8.6, 1.3, 8.3, 2.8, 9.0, 1.8, 8.2, 1.6, 8.2, 1.3, 6.3, 1.2, 7.2, 1.3, 8.0, 1.2, 8.2, 1.9, 9.4, 1.3, 8.4, 2.4, 8.5, 4.2, 7.3, 5.1, 7.5, 5.3, 8.3, 5.8, 8.0, 5.7, 8.0, 6.5, 7.1, 6.9, 5.8, 6.4, 5.6, 5.6, 6.1, 5.0, 6.5, 4.3, 6.4, 4.5, 6.3, 4.7, 5.9, 3.6, 5.4, 3.4, 5.5, 3.3, 5.2, 2.7, 5.2, 2.0, 5.2, 1.8, 5.6, 1.1, 5.8, 0.0, 4.5, 1.1, 4.6, 1.9, 3.9, 2.0, 4.2, 3.0, 4.0, 4.1, 9.2, 3.2, 9.7, 2.4, 10.3, 2.0, 10.5, 3.4, 9.9, 4.0, 10.5, 3.7, 11.3, 3.8, 11.3, 3.0, 11.6, 1.9, 9.5, 3.5, 9.4, 5.1, 9.5, 1.2, 9.3, 0.9, 9.0, 0.4, 9.1, 1.1, 8.6, 2.2, 7.8, 1.4, 7.2, 0.4, 6.4, 1.2, 6.0, 1.5, 6.1, 1.4, 6.7, 1.3, 7.5, 2.2, 6.9, 1.5, 7.8, 2.0, 8.3, 2.7, 9.2, 4.0, 7.0, 3.1, 5.5, 4.3, 6.0, 4.8, 5.4, 3.3, 3.5, 3.0, 4.6, 2.1, 5.3, 2.1, 6.2, 2.4, 6.1, 2.4, 5.8, 1.9, 5.7, 0.9, 5.5, 0.0, 4.9, 1.2, 5.0, 1.2, 5.4, 1.1, 5.5, 1.1, 5.5, 1.5, 5.7, 1.1, 6.4, 1.9, 6.3, 2.5, 6.9, 2.7, 6.9, 3.7, 6.9, 3.4, 6.9, 2.7];
                var success = fi.fmi.metoclient.test.SpecUtils.checkData(data, times, values);
                if (cb) {
                    cb(success && progressCalled);
                }
            },
            progressCallback : function(err, partStart, partEnd) {
                // Simple check to test that progress has been called during the flow.
                progressCalled = !isNaN(partStart) && !isNaN(partEnd);
            }
        })) {
            if (cb) {
                cb(false);
            }
        }
    }

    function testSpatialTdWindspeed(connection, cb) {
        var progressCalled = false;
        if (!connection.getData({
            requestParameter : "td,ws_10min",
            // Integer values are used to init dates for older browsers.
            // (new Date("2013-05-10T08:00:00Z")).getTime()
            // (new Date("2013-05-12T10:00:00Z")).getTime()
            begin : new Date(1368172800000),
            end : new Date(1368352800000),
            timestep : 60 * 60 * 1000,
            bbox : "21,60,24,65",
            callback : function(data, errors) {
                // Notice, the values here are the correct values for time period defined above.
                // Connection may request extra values around the given times. Therefore, XML may contain more values than just these.
                // Times that XML should provide. Notice, these are in seconds.
                var times = [1368172800, 1368176400, 1368180000, 1368183600, 1368187200, 1368190800, 1368194400, 1368198000, 1368201600, 1368205200, 1368208800, 1368212400, 1368216000, 1368219600, 1368223200, 1368226800, 1368230400, 1368234000, 1368237600, 1368241200, 1368244800, 1368248400, 1368252000, 1368255600, 1368259200, 1368262800, 1368266400, 1368270000, 1368273600, 1368277200, 1368280800, 1368284400, 1368288000, 1368291600, 1368295200, 1368298800, 1368302400, 1368306000, 1368309600, 1368313200, 1368316800, 1368320400, 1368324000, 1368327600, 1368331200, 1368334800, 1368338400, 1368342000, 1368345600, 1368349200, 1368352800, 1368172800, 1368176400, 1368180000, 1368183600, 1368187200, 1368190800, 1368194400, 1368198000, 1368201600, 1368205200, 1368208800, 1368212400, 1368216000, 1368219600, 1368223200, 1368226800, 1368230400, 1368234000, 1368237600, 1368241200, 1368244800, 1368248400, 1368252000, 1368255600, 1368259200, 1368262800, 1368266400, 1368270000, 1368273600, 1368277200, 1368280800, 1368284400, 1368288000, 1368291600, 1368295200, 1368298800, 1368302400, 1368306000, 1368309600, 1368313200, 1368316800, 1368320400, 1368324000, 1368327600, 1368331200, 1368334800, 1368338400, 1368342000, 1368345600, 1368349200, 1368352800, 1368172800, 1368176400, 1368180000, 1368183600, 1368187200, 1368190800, 1368194400, 1368198000, 1368201600, 1368205200, 1368208800, 1368212400, 1368216000, 1368219600, 1368223200, 1368226800, 1368230400, 1368234000, 1368237600, 1368241200, 1368244800, 1368248400, 1368252000, 1368255600, 1368259200, 1368262800, 1368266400, 1368270000, 1368273600, 1368277200, 1368280800, 1368284400, 1368288000, 1368291600, 1368295200, 1368298800, 1368302400, 1368306000, 1368309600, 1368313200, 1368316800, 1368320400, 1368324000, 1368327600, 1368331200, 1368334800, 1368338400, 1368342000, 1368345600, 1368349200, 1368352800, 1368172800, 1368176400, 1368180000, 1368183600, 1368187200, 1368190800, 1368194400, 1368198000, 1368201600, 1368205200, 1368208800, 1368212400, 1368216000, 1368219600, 1368223200, 1368226800, 1368230400, 1368234000, 1368237600, 1368241200, 1368244800, 1368248400, 1368252000, 1368255600, 1368259200, 1368262800, 1368266400, 1368270000, 1368273600, 1368277200, 1368280800, 1368284400, 1368288000, 1368291600, 1368295200, 1368298800, 1368302400, 1368306000, 1368309600, 1368313200, 1368316800, 1368320400, 1368324000, 1368327600, 1368331200, 1368334800, 1368338400, 1368342000, 1368345600, 1368349200, 1368352800, 1368172800, 1368176400, 1368180000, 1368183600, 1368187200, 1368190800, 1368194400, 1368198000, 1368201600, 1368205200, 1368208800, 1368212400, 1368216000, 1368219600, 1368223200, 1368226800, 1368230400, 1368234000, 1368237600, 1368241200, 1368244800, 1368248400, 1368252000, 1368255600, 1368259200, 1368262800, 1368266400, 1368270000, 1368273600, 1368277200, 1368280800, 1368284400, 1368288000, 1368291600, 1368295200, 1368298800, 1368302400, 1368306000, 1368309600, 1368313200, 1368316800, 1368320400, 1368324000, 1368327600, 1368331200, 1368334800, 1368338400, 1368342000, 1368345600, 1368349200, 1368352800, 1368172800, 1368176400, 1368180000, 1368183600, 1368187200, 1368190800, 1368194400, 1368198000, 1368201600, 1368205200, 1368208800, 1368212400, 1368216000, 1368219600, 1368223200, 1368226800, 1368230400, 1368234000, 1368237600, 1368241200, 1368244800, 1368248400, 1368252000, 1368255600, 1368259200, 1368262800, 1368266400, 1368270000, 1368273600, 1368277200, 1368280800, 1368284400, 1368288000, 1368291600, 1368295200, 1368298800, 1368302400, 1368306000, 1368309600, 1368313200, 1368316800, 1368320400, 1368324000, 1368327600, 1368331200, 1368334800, 1368338400, 1368342000, 1368345600, 1368349200, 1368352800, 1368172800, 1368176400, 1368180000, 1368183600, 1368187200, 1368190800, 1368194400, 1368198000, 1368201600, 1368205200, 1368208800, 1368212400, 1368216000, 1368219600, 1368223200, 1368226800, 1368230400, 1368234000, 1368237600, 1368241200, 1368244800, 1368248400, 1368252000, 1368255600, 1368259200, 1368262800, 1368266400, 1368270000, 1368273600, 1368277200, 1368280800, 1368284400, 1368288000, 1368291600, 1368295200, 1368298800, 1368302400, 1368306000, 1368309600, 1368313200, 1368316800, 1368320400, 1368324000, 1368327600, 1368331200, 1368334800, 1368338400, 1368342000, 1368345600, 1368349200, 1368352800, 1368172800, 1368176400, 1368180000, 1368183600, 1368187200, 1368190800, 1368194400, 1368198000, 1368201600, 1368205200, 1368208800, 1368212400, 1368216000, 1368219600, 1368223200, 1368226800, 1368230400, 1368234000, 1368237600, 1368241200, 1368244800, 1368248400, 1368252000, 1368255600, 1368259200, 1368262800, 1368266400, 1368270000, 1368273600, 1368277200, 1368280800, 1368284400, 1368288000, 1368291600, 1368295200, 1368298800, 1368302400, 1368306000, 1368309600, 1368313200, 1368316800, 1368320400, 1368324000, 1368327600, 1368331200, 1368334800, 1368338400, 1368342000, 1368345600, 1368349200, 1368352800, 1368172800, 1368176400, 1368180000, 1368183600, 1368187200, 1368190800, 1368194400, 1368198000, 1368201600, 1368205200, 1368208800, 1368212400, 1368216000, 1368219600, 1368223200, 1368226800, 1368230400, 1368234000, 1368237600, 1368241200, 1368244800, 1368248400, 1368252000, 1368255600, 1368259200, 1368262800, 1368266400, 1368270000, 1368273600, 1368277200, 1368280800, 1368284400, 1368288000, 1368291600, 1368295200, 1368298800, 1368302400, 1368306000, 1368309600, 1368313200, 1368316800, 1368320400, 1368324000, 1368327600, 1368331200, 1368334800, 1368338400, 1368342000, 1368345600, 1368349200, 1368352800, 1368172800, 1368176400, 1368180000, 1368183600, 1368187200, 1368190800, 1368194400, 1368198000, 1368201600, 1368205200, 1368208800, 1368212400, 1368216000, 1368219600, 1368223200, 1368226800, 1368230400, 1368234000, 1368237600, 1368241200, 1368244800, 1368248400, 1368252000, 1368255600, 1368259200, 1368262800, 1368266400, 1368270000, 1368273600, 1368277200, 1368280800, 1368284400, 1368288000, 1368291600, 1368295200, 1368298800, 1368302400, 1368306000, 1368309600, 1368313200, 1368316800, 1368320400, 1368324000, 1368327600, 1368331200, 1368334800, 1368338400, 1368342000, 1368345600, 1368349200, 1368352800, 1368172800, 1368176400, 1368180000, 1368183600, 1368187200, 1368190800, 1368194400, 1368198000, 1368201600, 1368205200, 1368208800, 1368212400, 1368216000, 1368219600, 1368223200, 1368226800, 1368230400, 1368234000, 1368237600, 1368241200, 1368244800, 1368248400, 1368252000, 1368255600, 1368259200, 1368262800, 1368266400, 1368270000, 1368273600, 1368277200, 1368280800, 1368284400, 1368288000, 1368291600, 1368295200, 1368298800, 1368302400, 1368306000, 1368309600, 1368313200, 1368316800, 1368320400, 1368324000, 1368327600, 1368331200, 1368334800, 1368338400, 1368342000, 1368345600, 1368349200, 1368352800, 1368172800, 1368176400, 1368180000, 1368183600, 1368187200, 1368190800, 1368194400, 1368198000, 1368201600, 1368205200, 1368208800, 1368212400, 1368216000, 1368219600, 1368223200, 1368226800, 1368230400, 1368234000, 1368237600, 1368241200, 1368244800, 1368248400, 1368252000, 1368255600, 1368259200, 1368262800, 1368266400, 1368270000, 1368273600, 1368277200, 1368280800, 1368284400, 1368288000, 1368291600, 1368295200, 1368298800, 1368302400, 1368306000, 1368309600, 1368313200, 1368316800, 1368320400, 1368324000, 1368327600, 1368331200, 1368334800, 1368338400, 1368342000, 1368345600, 1368349200, 1368352800, 1368172800, 1368176400, 1368180000, 1368183600, 1368187200, 1368190800, 1368194400, 1368198000, 1368201600, 1368205200, 1368208800, 1368212400, 1368216000, 1368219600, 1368223200, 1368226800, 1368230400, 1368234000, 1368237600, 1368241200, 1368244800, 1368248400, 1368252000, 1368255600, 1368259200, 1368262800, 1368266400, 1368270000, 1368273600, 1368277200, 1368280800, 1368284400, 1368288000, 1368291600, 1368295200, 1368298800, 1368302400, 1368306000, 1368309600, 1368313200, 1368316800, 1368320400, 1368324000, 1368327600, 1368331200, 1368334800, 1368338400, 1368342000, 1368345600, 1368349200, 1368352800, 1368172800, 1368176400, 1368180000, 1368183600, 1368187200, 1368190800, 1368194400, 1368198000, 1368201600, 1368205200, 1368208800, 1368212400, 1368216000, 1368219600, 1368223200, 1368226800, 1368230400, 1368234000, 1368237600, 1368241200, 1368244800, 1368248400, 1368252000, 1368255600, 1368259200, 1368262800, 1368266400, 1368270000, 1368273600, 1368277200, 1368280800, 1368284400, 1368288000, 1368291600, 1368295200, 1368298800, 1368302400, 1368306000, 1368309600, 1368313200, 1368316800, 1368320400, 1368324000, 1368327600, 1368331200, 1368334800, 1368338400, 1368342000, 1368345600, 1368349200, 1368352800, 1368172800, 1368176400, 1368180000, 1368183600, 1368187200, 1368190800, 1368194400, 1368198000, 1368201600, 1368205200, 1368208800, 1368212400, 1368216000, 1368219600, 1368223200, 1368226800, 1368230400, 1368234000, 1368237600, 1368241200, 1368244800, 1368248400, 1368252000, 1368255600, 1368259200, 1368262800, 1368266400, 1368270000, 1368273600, 1368277200, 1368280800, 1368284400, 1368288000, 1368291600, 1368295200, 1368298800, 1368302400, 1368306000, 1368309600, 1368313200, 1368316800, 1368320400, 1368324000, 1368327600, 1368331200, 1368334800, 1368338400, 1368342000, 1368345600, 1368349200, 1368352800, 1368172800, 1368176400, 1368180000, 1368183600, 1368187200, 1368190800, 1368194400, 1368198000, 1368201600, 1368205200, 1368208800, 1368212400, 1368216000, 1368219600, 1368223200, 1368226800, 1368230400, 1368234000, 1368237600, 1368241200, 1368244800, 1368248400, 1368252000, 1368255600, 1368259200, 1368262800, 1368266400, 1368270000, 1368273600, 1368277200, 1368280800, 1368284400, 1368288000, 1368291600, 1368295200, 1368298800, 1368302400, 1368306000, 1368309600, 1368313200, 1368316800, 1368320400, 1368324000, 1368327600, 1368331200, 1368334800, 1368338400, 1368342000, 1368345600, 1368349200, 1368352800, 1368172800, 1368176400, 1368180000, 1368183600, 1368187200, 1368190800, 1368194400, 1368198000, 1368201600, 1368205200, 1368208800, 1368212400, 1368216000, 1368219600, 1368223200, 1368226800, 1368230400, 1368234000, 1368237600, 1368241200, 1368244800, 1368248400, 1368252000, 1368255600, 1368259200, 1368262800, 1368266400, 1368270000, 1368273600, 1368277200, 1368280800, 1368284400, 1368288000, 1368291600, 1368295200, 1368298800, 1368302400, 1368306000, 1368309600, 1368313200, 1368316800, 1368320400, 1368324000, 1368327600, 1368331200, 1368334800, 1368338400, 1368342000, 1368345600, 1368349200, 1368352800, 1368172800, 1368176400, 1368180000, 1368183600, 1368187200, 1368190800, 1368194400, 1368198000, 1368201600, 1368205200, 1368208800, 1368212400, 1368216000, 1368219600, 1368223200, 1368226800, 1368230400, 1368234000, 1368237600, 1368241200, 1368244800, 1368248400, 1368252000, 1368255600, 1368259200, 1368262800, 1368266400, 1368270000, 1368273600, 1368277200, 1368280800, 1368284400, 1368288000, 1368291600, 1368295200, 1368298800, 1368302400, 1368306000, 1368309600, 1368313200, 1368316800, 1368320400, 1368324000, 1368327600, 1368331200, 1368334800, 1368338400, 1368342000, 1368345600, 1368349200, 1368352800, 1368172800, 1368176400, 1368180000, 1368183600, 1368187200, 1368190800, 1368194400, 1368198000, 1368201600, 1368205200, 1368208800, 1368212400, 1368216000, 1368219600, 1368223200, 1368226800, 1368230400, 1368234000, 1368237600, 1368241200, 1368244800, 1368248400, 1368252000, 1368255600, 1368259200, 1368262800, 1368266400, 1368270000, 1368273600, 1368277200, 1368280800, 1368284400, 1368288000, 1368291600, 1368295200, 1368298800, 1368302400, 1368306000, 1368309600, 1368313200, 1368316800, 1368320400, 1368324000, 1368327600, 1368331200, 1368334800, 1368338400, 1368342000, 1368345600, 1368349200, 1368352800, 1368172800, 1368176400, 1368180000, 1368183600, 1368187200, 1368190800, 1368194400, 1368198000, 1368201600, 1368205200, 1368208800, 1368212400, 1368216000, 1368219600, 1368223200, 1368226800, 1368230400, 1368234000, 1368237600, 1368241200, 1368244800, 1368248400, 1368252000, 1368255600, 1368259200, 1368262800, 1368266400, 1368270000, 1368273600, 1368277200, 1368280800, 1368284400, 1368288000, 1368291600, 1368295200, 1368298800, 1368302400, 1368306000, 1368309600, 1368313200, 1368316800, 1368320400, 1368324000, 1368327600, 1368331200, 1368334800, 1368338400, 1368342000, 1368345600, 1368349200, 1368352800, 1368172800, 1368176400, 1368180000, 1368183600, 1368187200, 1368190800, 1368194400, 1368198000, 1368201600, 1368205200, 1368208800, 1368212400, 1368216000, 1368219600, 1368223200, 1368226800, 1368230400, 1368234000, 1368237600, 1368241200, 1368244800, 1368248400, 1368252000, 1368255600, 1368259200, 1368262800, 1368266400, 1368270000, 1368273600, 1368277200, 1368280800, 1368284400, 1368288000, 1368291600, 1368295200, 1368298800, 1368302400, 1368306000, 1368309600, 1368313200, 1368316800, 1368320400, 1368324000, 1368327600, 1368331200, 1368334800, 1368338400, 1368342000, 1368345600, 1368349200, 1368352800, 1368172800, 1368176400, 1368180000, 1368183600, 1368187200, 1368190800, 1368194400, 1368198000, 1368201600, 1368205200, 1368208800, 1368212400, 1368216000, 1368219600, 1368223200, 1368226800, 1368230400, 1368234000, 1368237600, 1368241200, 1368244800, 1368248400, 1368252000, 1368255600, 1368259200, 1368262800, 1368266400, 1368270000, 1368273600, 1368277200, 1368280800, 1368284400, 1368288000, 1368291600, 1368295200, 1368298800, 1368302400, 1368306000, 1368309600, 1368313200, 1368316800, 1368320400, 1368324000, 1368327600, 1368331200, 1368334800, 1368338400, 1368342000, 1368345600, 1368349200, 1368352800, 1368172800, 1368176400, 1368180000, 1368183600, 1368187200, 1368190800, 1368194400, 1368198000, 1368201600, 1368205200, 1368208800, 1368212400, 1368216000, 1368219600, 1368223200, 1368226800, 1368230400, 1368234000, 1368237600, 1368241200, 1368244800, 1368248400, 1368252000, 1368255600, 1368259200, 1368262800, 1368266400, 1368270000, 1368273600, 1368277200, 1368280800, 1368284400, 1368288000, 1368291600, 1368295200, 1368298800, 1368302400, 1368306000, 1368309600, 1368313200, 1368316800, 1368320400, 1368324000, 1368327600, 1368331200, 1368334800, 1368338400, 1368342000, 1368345600, 1368349200, 1368352800, 1368172800, 1368176400, 1368180000, 1368183600, 1368187200, 1368190800, 1368194400, 1368198000, 1368201600, 1368205200, 1368208800, 1368212400, 1368216000, 1368219600, 1368223200, 1368226800, 1368230400, 1368234000, 1368237600, 1368241200, 1368244800, 1368248400, 1368252000, 1368255600, 1368259200, 1368262800, 1368266400, 1368270000, 1368273600, 1368277200, 1368280800, 1368284400, 1368288000, 1368291600, 1368295200, 1368298800, 1368302400, 1368306000, 1368309600, 1368313200, 1368316800, 1368320400, 1368324000, 1368327600, 1368331200, 1368334800, 1368338400, 1368342000, 1368345600, 1368349200, 1368352800, 1368172800, 1368176400, 1368180000, 1368183600, 1368187200, 1368190800, 1368194400, 1368198000, 1368201600, 1368205200, 1368208800, 1368212400, 1368216000, 1368219600, 1368223200, 1368226800, 1368230400, 1368234000, 1368237600, 1368241200, 1368244800, 1368248400, 1368252000, 1368255600, 1368259200, 1368262800, 1368266400, 1368270000, 1368273600, 1368277200, 1368280800, 1368284400, 1368288000, 1368291600, 1368295200, 1368298800, 1368302400, 1368306000, 1368309600, 1368313200, 1368316800, 1368320400, 1368324000, 1368327600, 1368331200, 1368334800, 1368338400, 1368342000, 1368345600, 1368349200, 1368352800, 1368172800, 1368176400, 1368180000, 1368183600, 1368187200, 1368190800, 1368194400, 1368198000, 1368201600, 1368205200, 1368208800, 1368212400, 1368216000, 1368219600, 1368223200, 1368226800, 1368230400, 1368234000, 1368237600, 1368241200, 1368244800, 1368248400, 1368252000, 1368255600, 1368259200, 1368262800, 1368266400, 1368270000, 1368273600, 1368277200, 1368280800, 1368284400, 1368288000, 1368291600, 1368295200, 1368298800, 1368302400, 1368306000, 1368309600, 1368313200, 1368316800, 1368320400, 1368324000, 1368327600, 1368331200, 1368334800, 1368338400, 1368342000, 1368345600, 1368349200, 1368352800, 1368172800, 1368176400, 1368180000, 1368183600, 1368187200, 1368190800, 1368194400, 1368198000, 1368201600, 1368205200, 1368208800, 1368212400, 1368216000, 1368219600, 1368223200, 1368226800, 1368230400, 1368234000, 1368237600, 1368241200, 1368244800, 1368248400, 1368252000, 1368255600, 1368259200, 1368262800, 1368266400, 1368270000, 1368273600, 1368277200, 1368280800, 1368284400, 1368288000, 1368291600, 1368295200, 1368298800, 1368302400, 1368306000, 1368309600, 1368313200, 1368316800, 1368320400, 1368324000, 1368327600, 1368331200, 1368334800, 1368338400, 1368342000, 1368345600, 1368349200, 1368352800, 1368172800, 1368176400, 1368180000, 1368183600, 1368187200, 1368190800, 1368194400, 1368198000, 1368201600, 1368205200, 1368208800, 1368212400, 1368216000, 1368219600, 1368223200, 1368226800, 1368230400, 1368234000, 1368237600, 1368241200, 1368244800, 1368248400, 1368252000, 1368255600, 1368259200, 1368262800, 1368266400, 1368270000, 1368273600, 1368277200, 1368280800, 1368284400, 1368288000, 1368291600, 1368295200, 1368298800, 1368302400, 1368306000, 1368309600, 1368313200, 1368316800, 1368320400, 1368324000, 1368327600, 1368331200, 1368334800, 1368338400, 1368342000, 1368345600, 1368349200, 1368352800, 1368172800, 1368176400, 1368180000, 1368183600, 1368187200, 1368190800, 1368194400, 1368198000, 1368201600, 1368205200, 1368208800, 1368212400, 1368216000, 1368219600, 1368223200, 1368226800, 1368230400, 1368234000, 1368237600, 1368241200, 1368244800, 1368248400, 1368252000, 1368255600, 1368259200, 1368262800, 1368266400, 1368270000, 1368273600, 1368277200, 1368280800, 1368284400, 1368288000, 1368291600, 1368295200, 1368298800, 1368302400, 1368306000, 1368309600, 1368313200, 1368316800, 1368320400, 1368324000, 1368327600, 1368331200, 1368334800, 1368338400, 1368342000, 1368345600, 1368349200, 1368352800, 1368172800, 1368176400, 1368180000, 1368183600, 1368187200, 1368190800, 1368194400, 1368198000, 1368201600, 1368205200, 1368208800, 1368212400, 1368216000, 1368219600, 1368223200, 1368226800, 1368230400, 1368234000, 1368237600, 1368241200, 1368244800, 1368248400, 1368252000, 1368255600, 1368259200, 1368262800, 1368266400, 1368270000, 1368273600, 1368277200, 1368280800, 1368284400, 1368288000, 1368291600, 1368295200, 1368298800, 1368302400, 1368306000, 1368309600, 1368313200, 1368316800, 1368320400, 1368324000, 1368327600, 1368331200, 1368334800, 1368338400, 1368342000, 1368345600, 1368349200, 1368352800, 1368172800, 1368176400, 1368180000, 1368183600, 1368187200, 1368190800, 1368194400, 1368198000, 1368201600, 1368205200, 1368208800, 1368212400, 1368216000, 1368219600, 1368223200, 1368226800, 1368230400, 1368234000, 1368237600, 1368241200, 1368244800, 1368248400, 1368252000, 1368255600, 1368259200, 1368262800, 1368266400, 1368270000, 1368273600, 1368277200, 1368280800, 1368284400, 1368288000, 1368291600, 1368295200, 1368298800, 1368302400, 1368306000, 1368309600, 1368313200, 1368316800, 1368320400, 1368324000, 1368327600, 1368331200, 1368334800, 1368338400, 1368342000, 1368345600, 1368349200, 1368352800, 1368172800, 1368176400, 1368180000, 1368183600, 1368187200, 1368190800, 1368194400, 1368198000, 1368201600, 1368205200, 1368208800, 1368212400, 1368216000, 1368219600, 1368223200, 1368226800, 1368230400, 1368234000, 1368237600, 1368241200, 1368244800, 1368248400, 1368252000, 1368255600, 1368259200, 1368262800, 1368266400, 1368270000, 1368273600, 1368277200, 1368280800, 1368284400, 1368288000, 1368291600, 1368295200, 1368298800, 1368302400, 1368306000, 1368309600, 1368313200, 1368316800, 1368320400, 1368324000, 1368327600, 1368331200, 1368334800, 1368338400, 1368342000, 1368345600, 1368349200, 1368352800];
                var values = [6.4, 3.4, 6.7, 2.7, 6.6, 3.0, 6.4, 4.0, 7.7, 3.1, 8.0, 3.3, 6.5, 3.9, 7.1, 3.1, 6.5, 2.4, 6.4, 1.9, 6.4, 2.0, 6.1, 2.2, 5.5, 2.4, 5.9, 2.7, 5.6, 3.0, 5.4, 2.8, 5.4, 2.9, 5.0, 1.8, 4.9, 2.3, 5.2, 1.5, 4.8, 2.1, 4.7, 2.4, 5.5, 2.5, 6.0, 2.4, 7.4, 2.6, 9.3, 1.4, 8.9, 4.2, 7.8, 4.6, 7.4, 5.2, 6.4, 5.8, 4.8, 5.0, 5.7, 4.6, 5.5, 2.0, 5.7, 1.2, 5.5, 2.3, 5.5, 2.5, 5.5, 2.3, 5.4, 1.9, 5.5, 2.0, 5.4, 2.4, 5.6, 2.9, 5.4, 2.4, 5.3, 2.3, 5.8, 3.0, 6.0, 3.5, 6.2, 2.9, 6.2, 3.5, 6.3, 3.2, 6.6, 3.4, 5.8, 3.0, 5.6, 3.5, 11.2, 1.3, 9.8, 2.8, 9.6, 2.7, 9.9, 3.4, 10.3, 2.5, 9.4, 2.6, 10.2, 2.5, 9.9, 2.9, 9.8, 1.9, 9.3, 2.5, 9.1, 1.4, 9.3, 1.4, 8.6, 0.8, 8.1, 0.5, 8.1, 0.3, 7.7, 1.1, 7.0, 1.8, 6.5, 0.7, 6.0, 1.3, 5.5, 0.9, 5.8, 1.3, 6.1, 0.3, 7.1, 1.1, 7.1, 1.8, 8.9, 1.6, 8.5, 2.1, 9.3, 2.0, 9.4, 2.8, 5.4, 3.1, 5.8, 2.4, 6.1, 2.5, 5.7, 1.8, 4.3, 1.9, 5.9, 1.9, 6.6, 0.8, 6.4, 0.2, 5.7, 0.3, 5.1, 0.0, 4.2, 0.0, 3.9, 0.2, 3.1, 0.0, 3.2, 0.0, 3.2, 0.1, 4.1, 0.0, 6.5, 0.2, 6.1, 1.2, 7.1, 0.8, 7.1, 1.2, 7.3, 1.9, 7.9, 2.3, 7.5, 1.7, 7.5, 4.6, 7.7, 3.9, 7.8, 4.6, 7.9, 5.6, 8.4, 6.3, 8.5, 5.8, 9.1, 5.0, 8.8, 4.7, 7.9, 5.9, 7.6, 6.7, 7.8, 5.5, 7.7, 4.4, 6.9, 2.7, 7.2, 1.3, 7.7, 3.4, 6.6, 4.8, 6.0, 3.3, 5.6, 3.2, 5.0, 2.9, 5.2, 2.0, 4.8, 1.9, 5.7, 0.7, 4.7, 5.4, 5.4, 3.7, 6.1, 4.8, 7.4, 5.5, 8.6, 5.2, 8.0, 5.0, 6.7, 4.3, 6.9, 4.5, 5.5, 5.1, 5.2, 4.6, 6.0, 4.0, 6.5, 4.6, 6.2, 3.0, 6.1, 2.1, 6.1, 1.8, 6.8, 2.6, 6.9, 2.4, 6.3, 3.0, 6.0, 1.8, 6.4, 2.3, 6.0, 2.5, 5.9, 2.7, 5.9, 3.0, 6.4, 3.0, 6.4, 1.9, 6.6, 4.2, 6.7, 6.1, 6.8, 5.1, 6.7, 4.5, 9.2, 3.2, 9.7, 2.4, 10.3, 2.0, 10.5, 3.4, 9.9, 4.0, 10.5, 3.7, 11.3, 3.8, 11.3, 3.0, 11.6, 1.9, 9.5, 3.5, 9.4, 5.1, 9.5, 1.2, 9.3, 0.9, 9.0, 0.4, 9.1, 1.1, 8.6, 2.2, 7.8, 1.4, 7.2, 0.4, 6.4, 1.2, 6.0, 1.5, 6.1, 1.4, 6.7, 1.3, 7.5, 2.2, 6.9, 1.5, 7.8, 2.0, 8.3, 2.7, 9.2, 4.0, 7.0, 3.1, 5.5, 4.3, 6.0, 4.8, 5.4, 3.3, 3.5, 3.0, 4.6, 2.1, 5.3, 2.1, 6.2, 2.4, 6.1, 2.4, 5.8, 1.9, 5.7, 0.9, 5.5, 0.0, 4.9, 1.2, 5.0, 1.2, 5.4, 1.1, 5.5, 1.1, 5.5, 1.5, 5.7, 1.1, 6.4, 1.9, 6.3, 2.5, 6.9, 2.7, 6.9, 3.7, 6.9, 3.4, 6.9, 2.7, 10.0, 2.7, 11.1, 2.8, 11.5, 1.8, 12.4, 1.6, 13.2, 3.6, 12.6, 4.7, 12.9, 3.5, 12.2, 3.2, 11.9, 2.5, 11.2, 2.8, 10.4, 2.6, 10.2, 2.4, 9.7, 1.6, 9.3, 1.4, 8.6, 1.7, 8.2, 2.5, 7.9, 2.4, 7.3, 1.3, 6.7, 2.4, 6.2, 1.7, 6.4, 1.4, 6.7, 0.9, 8.1, 3.0, 9.6, 2.0, 11.1, 2.6, 10.7, 2.6, 10.5, 4.1, 9.3, 5.3, 7.6, 4.7, 8.1, 4.9, 9.1, 4.6, 8.3, 4.8, 7.1, 5.0, 6.1, 4.0, 5.9, 3.9, 5.8, 2.9, 5.5, 1.9, 4.1, 2.2, 3.7, 0.8, 3.1, 0.6, 2.4, 0.6, 2.9, 0.0, 2.3, 0.0, 3.1, 0.6, 5.5, 0.0, 7.3, 1.4, 7.5, 2.6, 7.2, 4.2, 8.2, 3.1, 8.3, 3.2, 6.3, 4.0, 12.4, NaN, 12.3, NaN, 11.9, NaN, 11.6, NaN, 12.4, NaN, 12.7, NaN, 12.3, NaN, 12.6, NaN, 12.0, NaN, 12.1, NaN, 11.6, NaN, 10.4, NaN, 10.5, NaN, 10.0, NaN, 10.0, NaN, 9.9, NaN, 9.6, NaN, 9.3, NaN, 8.5, NaN, 8.2, NaN, 7.8, NaN, 8.1, NaN, 8.9, NaN, 8.9, NaN, 9.3, NaN, 9.4, NaN, 9.5, NaN, 9.6, NaN, 7.4, NaN, 4.2, NaN, 6.3, NaN, 5.8, NaN, 5.1, NaN, 6.3, NaN, 7.1, NaN, 6.5, NaN, 6.2, NaN, 6.5, NaN, 4.4, NaN, 3.6, NaN, 3.2, NaN, 3.0, NaN, 3.1, NaN, 3.1, NaN, 4.5, NaN, 5.8, NaN, 6.5, NaN, 5.3, NaN, 4.3, NaN, 5.7, NaN, 6.1, NaN, 12.4, 1.9, 12.5, 3.0, 12.6, 3.6, 12.8, 3.1, 12.1, 3.8, 12.0, 4.2, 11.3, 4.3, 11.0, 3.7, 11.4, 4.8, 11.4, 3.8, 11.6, 1.9, 11.3, 1.6, 11.0, 2.0, 10.6, 1.9, 9.9, 1.1, 9.4, 0.8, 9.4, 1.2, 9.1, 1.5, 8.7, 1.5, 8.6, 0.7, 8.2, 1.4, 8.7, 1.6, 11.4, 0.8, 10.1, 0.8, 8.8, 3.6, 8.2, 4.5, 6.7, 4.3, 6.3, 4.5, 5.8, 5.9, 4.4, 5.6, 3.1, 5.2, 4.2, 4.6, 4.6, 5.0, 4.7, 4.4, 4.4, 2.4, 4.5, 2.2, 6.1, 2.5, 6.1, 2.0, 5.2, 1.6, 4.4, 1.3, 3.8, 0.9, 2.2, 1.5, 2.3, 0.9, 3.9, 0.7, 6.0, 0.2, 6.0, 1.2, 5.4, 2.0, 5.8, 2.4, 4.7, 3.0, 4.8, 2.1, 3.5, 1.6, 7.5, 2.9, 6.7, 3.5, 7.1, 2.9, 7.1, 3.4, 7.0, 5.7, 7.9, 3.2, 7.7, 2.9, 5.0, 2.4, 6.6, 3.6, 6.5, 5.8, 6.6, 8.9, 6.5, 8.4, 6.3, 8.5, 5.5, 7.1, 5.0, 6.6, 4.9, 5.9, 4.9, 6.4, 5.2, 6.8, 4.5, 6.3, 4.8, 2.1, 5.0, 4.2, 5.4, 5.6, 5.2, 5.8, 5.3, 6.6, 5.8, 5.8, 10.0, 4.4, 8.7, 6.2, 7.9, 6.4, 6.6, 5.2, 5.7, 4.0, 4.2, 5.3, 5.8, 2.9, 4.7, 2.5, 4.2, 2.1, 4.5, 2.2, 4.6, 0.7, 3.9, 1.5, 4.3, 3.5, 4.7, 4.8, 5.1, 5.5, 5.2, 5.3, 5.2, 5.1, 5.1, 4.9, 5.0, 3.9, 5.4, 4.4, 5.6, 3.8, 5.7, 5.0, 5.8, 5.7, 6.1, 6.7, 5.9, 8.0, 6.4, 5.8, 9.2, 3.5, 9.4, 1.7, 7.7, 3.4, 6.5, 6.6, 7.2, 1.5, 7.1, 3.5, 6.7, 4.2, 6.6, 1.9, 6.5, 1.8, 6.3, 2.8, 5.9, 3.0, 6.0, 1.1, 6.5, 1.9, 6.3, 2.2, 6.6, 3.3, 6.7, 6.3, 7.7, 5.1, 8.0, 3.5, 6.4, 4.9, 5.8, 6.6, 6.9, 4.2, 7.6, 4.3, 8.1, 4.0, 6.4, 5.8, 6.5, 8.4, 7.7, 8.0, 7.1, 8.0, 6.3, 6.9, 5.9, 8.0, 6.2, 7.5, 5.9, 7.3, 6.4, 6.5, 5.3, 6.5, 5.0, 3.5, 4.9, 3.3, 5.1, 3.0, 5.2, 5.3, 5.3, 5.8, 5.7, 3.4, 6.0, 0.8, 6.4, 1.7, 5.5, 4.2, 5.2, 3.5, 5.2, 3.4, 5.3, 4.5, 5.9, 4.0, 6.3, 2.7, 6.9, 2.1, 7.5, 2.1, 7.6, 5.1, 6.7, 9.4, 10.1, 1.3, 10.2, 1.1, 10.6, 1.2, 11.4, 1.2, 11.4, 0.8, 11.3, 1.0, 12.2, 1.5, 10.6, 2.9, 10.2, 2.5, 10.1, 1.5, 9.8, 1.5, 9.9, 1.6, 9.9, 1.0, 10.2, 1.2, 10.0, 1.7, 9.2, 2.2, 8.7, 1.5, 8.6, 2.1, 8.1, 1.9, 7.5, 1.7, 7.2, 1.2, 7.9, 1.8, 8.2, 1.8, 8.4, 1.7, 7.8, 2.4, 5.4, 1.9, 8.1, 3.4, 5.6, 3.9, 6.3, 5.2, 5.6, 5.2, 4.9, 5.1, 5.5, 3.9, 4.7, 3.8, 4.6, 3.5, 4.3, 2.3, 4.9, 0.9, 4.8, 1.1, 4.5, 0.6, 4.4, 1.0, 4.3, 0.6, 4.0, 1.2, 3.2, 0.9, 3.2, 2.0, 3.6, 1.6, 4.2, 1.8, 5.3, 2.3, 5.3, 2.7, 6.1, 3.0, 6.3, 2.6, 5.1, 2.7, 4.7, 2.3, 10.3, 0.0, 11.2, 2.6, 11.1, 0.9, 11.7, 0.9, 11.5, 2.2, 11.8, 2.6, 12.3, 1.4, 11.8, 2.7, 12.3, 3.5, 11.3, 3.4, 11.2, 2.8, 11.0, 1.9, 10.6, 1.3, 10.0, 0.7, 9.5, 0.8, 9.1, 1.2, 9.8, 1.4, 9.3, 2.1, 8.9, 1.8, 8.3, 1.2, 7.9, 2.1, 8.1, 1.8, 7.9, 2.2, 8.7, 2.0, 7.6, 1.0, 6.6, 3.8, 7.0, 5.7, 6.9, 6.1, 6.8, 7.2, 6.1, 7.4, 4.9, 6.8, 4.5, 5.9, 3.4, 4.7, 4.8, 4.3, 4.8, 3.4, 4.4, 2.2, 5.0, 1.9, 4.1, 0.7, 3.8, 1.2, 3.4, 1.1, 2.7, 1.0, 2.2, 1.5, 1.9, 1.4, 2.7, 1.3, 3.9, 1.0, 4.8, 2.3, 5.7, 2.1, 6.4, 1.7, 5.4, 3.3, 5.6, 2.6, 5.7, 4.3, 11.7, 1.3, 12.0, 1.4, 12.6, 3.1, 12.5, 2.7, 12.0, 4.4, 12.5, 3.6, 12.3, 3.6, 11.6, 4.6, 11.6, 3.9, 11.6, 4.1, 11.8, 2.6, 11.6, 3.0, 11.4, 2.2, 11.2, 2.9, 10.7, 2.8, 9.7, 1.9, 9.0, 0.8, 8.9, 1.2, 8.4, 2.0, 8.4, 2.0, 8.6, 2.1, 8.8, 1.1, 9.2, 2.3, 10.9, 0.7, 11.1, 1.4, 8.6, 3.8, 8.2, 5.7, 7.3, 4.9, 6.9, 4.8, 7.0, 4.3, 4.7, 4.8, 4.7, 2.9, 3.8, 4.1, 3.2, 3.4, 2.8, 2.5, 3.3, 2.5, 3.8, 2.3, 4.0, 2.0, 3.8, 2.2, 3.9, 2.3, 2.8, 1.0, 2.5, 0.9, 2.2, 0.7, 3.1, 1.4, 5.3, 0.6, 5.2, 2.4, 5.5, 1.5, 5.6, 2.5, 5.4, 3.8, 4.6, 3.2, 3.9, 2.1, 9.8, NaN, 9.9, NaN, 10.3, NaN, 10.5, NaN, 10.9, NaN, 11.8, NaN, 11.8, NaN, 12.0, NaN, 11.5, NaN, 11.4, NaN, 11.6, NaN, 10.5, NaN, 10.1, NaN, 9.6, NaN, 8.9, NaN, 8.2, NaN, 7.7, NaN, 8.0, NaN, 8.0, NaN, 8.6, NaN, 8.3, NaN, 10.6, NaN, 10.2, NaN, 10.2, NaN, 4.5, NaN, 3.4, NaN, 4.0, NaN, 4.6, NaN, 6.4, NaN, 5.7, NaN, 5.2, NaN, 4.5, NaN, 3.7, NaN, 2.7, NaN, 2.6, NaN, 3.5, NaN, 3.7, NaN, 3.5, NaN, 3.1, NaN, 2.5, NaN, 1.8, NaN, 1.3, NaN, 1.3, NaN, 2.1, NaN, 4.2, NaN, 5.2, NaN, 3.7, NaN, 3.8, NaN, 3.9, NaN, 4.4, NaN, 4.1, NaN, 12.3, 1.9, 12.4, 1.7, 12.6, 2.9, 12.2, 3.4, 12.4, 2.7, 11.7, 2.9, 11.8, 2.5, 11.7, 2.9, 11.9, 3.0, 11.4, 3.5, 11.6, 2.5, 11.1, 2.1, 10.7, 2.2, 10.6, 2.7, 10.3, 2.0, 9.6, 1.5, 9.3, 1.3, 9.1, 1.2, 8.9, 1.5, 8.7, 1.4, 8.6, 1.0, 8.9, 1.2, 9.7, 1.4, 10.8, 0.6, 9.9, 3.6, 9.4, 3.6, 7.7, 3.2, 6.3, 4.7, 7.1, 3.2, 5.4, 4.4, 4.5, 3.0, 4.0, 3.8, 2.8, 3.8, 4.4, 2.9, 4.1, 2.4, 3.6, 2.4, 3.5, 2.8, 3.3, 2.1, 3.5, 2.3, 3.6, 2.3, 3.5, 2.4, 3.7, 2.2, 2.4, 2.1, 3.6, 1.5, 4.5, 1.6, 5.6, 1.3, 4.3, 1.8, 4.2, 2.1, 4.2, 1.5, 4.5, 2.5, 4.0, 1.8, 6.8, 2.5, 7.1, 1.3, 7.3, 2.3, 7.2, 1.6, 7.8, 2.1, 7.8, 1.6, 8.1, 2.3, 7.4, 1.4, 7.3, 0.0, 8.1, 1.1, 7.7, 1.7, 7.7, 3.1, 8.2, 1.9, 8.6, 4.1, 8.6, 3.4, 8.5, 4.0, 7.8, 4.7, 7.8, 4.5, 7.6, 3.0, 5.8, 6.8, 5.2, 4.8, 6.3, 3.7, 7.5, 2.8, 7.9, 2.3, 8.5, 4.2, 5.7, 4.5, 5.9, 3.8, 6.1, 5.5, 6.1, 6.1, 6.1, 4.3, 6.2, 4.2, 6.2, 3.5, 6.0, 3.8, 5.6, 3.3, 5.2, 4.0, 5.1, 4.1, 5.4, 4.2, 5.6, 4.3, 4.8, 4.3, 5.3, 2.3, 6.0, 2.2, 6.2, 2.4, 6.4, 2.7, 6.4, 3.0, 5.8, 2.5, 6.5, 2.7, 6.7, 2.4, 6.9, 2.9, 7.0, 2.2, 6.6, 2.5, 7.3, 2.8, 2.8, 3.6, 3.1, 2.8, 3.7, 1.7, 4.3, 0.0, 4.8, 2.1, 5.0, 1.5, 5.5, 2.0, 5.5, 2.2, 5.7, 1.6, 5.7, 1.6, 6.3, 1.0, 8.5, 2.0, 7.5, 1.0, 8.1, 3.1, 9.2, 4.3, 7.0, 3.9, 7.2, 2.7, 6.1, 6.1, 5.3, 6.9, 5.7, 5.3, 3.7, 4.3, 3.9, 3.5, 5.3, 3.3, 5.6, 6.4, 5.1, 5.8, 3.4, 5.2, 3.5, 4.8, 4.0, 5.9, 3.7, 5.4, 3.5, 4.0, 3.7, 2.2, 4.1, 2.9, 4.3, 2.4, 4.4, 5.6, 4.1, 5.6, 3.8, 6.2, 3.5, 5.2, 3.6, 4.4, 3.8, 4.6, 3.8, 3.3, 4.2, 5.4, 3.8, 4.1, 4.7, 3.3, 5.0, 3.4, 4.6, 2.8, 4.8, 4.5, 5.3, 4.0, 4.7, 4.3, 4.2, 4.0, 4.3, 3.4, 5.2, 6.1, 8.3, NaN, 8.3, NaN, 9.0, NaN, 9.1, NaN, 9.5, NaN, 9.9, NaN, 10.2, NaN, 10.2, NaN, 10.3, NaN, 10.3, NaN, 10.2, NaN, 9.8, NaN, 8.4, NaN, 8.6, NaN, 8.5, NaN, 7.8, NaN, 6.5, NaN, 7.3, NaN, 9.2, NaN, 8.1, NaN, 9.1, NaN, 8.1, NaN, 7.0, NaN, 6.7, NaN, 6.1, NaN, 5.0, NaN, 3.1, NaN, 3.6, NaN, 5.2, NaN, 5.2, NaN, 4.5, NaN, 4.5, NaN, 3.7, NaN, 3.3, NaN, 3.5, NaN, 3.9, NaN, 3.2, NaN, 2.9, NaN, 2.0, NaN, 1.6, NaN, 1.3, NaN, 0.5, NaN, -0.1, NaN, 0.4, NaN, 2.9, NaN, 5.5, NaN, 4.8, NaN, 3.9, NaN, 4.1, NaN, 4.3, NaN, 4.9, NaN, 7.0, 1.8, 7.2, 1.6, 7.7, 1.3, 8.8, 1.6, 8.5, 1.7, 9.1, 0.8, 9.2, 0.5, 9.8, 1.3, 9.9, 1.5, 10.2, 1.5, 10.0, 1.3, 9.9, 0.6, 9.3, 1.5, 9.2, 1.4, 9.0, 1.6, 8.7, 1.7, 8.3, 0.9, 8.4, 0.4, 8.4, 0.5, 7.8, 1.7, 8.0, 2.3, 7.4, 3.5, 7.0, 2.7, 7.5, 1.8, 8.4, 2.0, 6.3, 3.7, 5.9, 4.5, 6.7, 3.9, 7.0, 3.9, 6.2, 4.8, 5.5, 5.5, 5.1, 4.6, 4.7, 4.7, 4.5, 3.1, 5.0, 1.7, 4.8, 1.3, 4.6, 1.7, 3.9, 2.0, 3.4, 1.4, 2.1, 1.3, 1.5, 1.6, 1.1, 1.4, 0.9, 0.8, 1.8, 1.4, 3.8, 0.9, 4.8, 0.9, 5.8, 1.8, 5.0, 2.5, 4.5, 2.8, 4.5, 1.7, 4.9, 1.1, 9.5, 1.3, 9.8, 2.0, 9.9, 2.0, 10.8, 1.7, 10.7, 2.8, 10.9, 1.5, 10.9, 1.9, 11.1, 1.6, 11.0, 1.9, 10.8, 2.1, 10.7, 0.8, 10.6, 0.0, 10.6, 1.8, 10.5, 0.5, 9.9, 1.3, 9.5, 1.9, 9.5, 0.2, 9.3, 1.3, 8.6, 2.2, 8.1, 1.2, 7.7, 1.7, 8.0, 2.3, 8.3, 0.6, 8.1, 0.9, 8.3, 0.6, 3.6, 2.2, 4.1, 4.3, 5.2, 5.1, 5.2, 5.3, 6.0, 4.7, 4.6, 4.9, 3.7, 4.0, 3.7, 4.1, 3.8, 3.5, 3.9, 2.5, 4.2, 1.5, 4.4, 1.3, 4.2, 1.4, 3.5, 0.5, 3.4, 0.6, 2.4, 0.5, 1.2, 0.8, 0.7, 0.8, 1.5, 1.1, 3.8, 0.9, 5.7, 1.0, 6.2, 0.7, 4.3, 3.2, 4.3, 3.7, 4.5, 3.0, 4.1, 2.7, 9.1, 3.3, 9.4, 3.7, 9.6, 3.6, 9.6, 2.8, 9.6, 2.8, 9.6, 4.1, 10.4, 1.8, 10.3, 2.4, 10.4, 1.3, 10.2, 1.5, 10.3, 1.3, 10.1, 0.0, 8.9, 0.0, 6.8, 1.4, 8.0, 0.0, 8.8, 1.3, 6.5, 0.9, 5.8, 0.5, 5.7, 0.6, 7.2, 1.5, 9.3, 1.5, 9.9, 2.1, 5.5, 2.2, 6.8, 3.8, 7.4, 1.9, 5.8, 1.9, 5.9, 1.1, 5.4, 2.7, 6.2, 5.1, 5.7, 4.8, 5.8, 6.1, 5.0, 6.3, 5.0, 4.2, 4.5, 4.4, 4.4, 4.8, 4.1, 3.2, 3.9, 1.0, 3.2, 0.0, 1.6, 0.5, 1.6, 0.0, 0.4, 0.6, -0.4, 0.0, -0.9, 0.0, -0.3, 0.0, 1.9, 0.0, 4.9, 0.0, 5.2, 2.1, 5.3, 2.3, 4.8, 3.0, 4.0, 2.9, 3.1, 2.1, 9.8, 2.4, 9.7, 3.0, 9.9, 3.1, 10.1, 0.5, 10.0, 3.0, 9.7, 3.2, 11.3, 4.7, 11.3, 2.9, 11.1, 2.3, 11.3, 2.6, 11.2, 1.6, 11.6, 1.3, 11.2, 0.0, 9.5, 0.6, 8.8, 1.2, 9.6, 1.4, 10.7, 2.3, 9.4, 0.0, 9.0, 0.7, 9.9, 1.5, 7.6, 0.5, 7.7, 0.9, 8.8, 2.8, 9.8, 2.5, 7.5, 3.2, 6.7, 2.0, 3.1, 1.2, 4.3, 7.1, 6.0, 6.4, 5.4, 9.4, 5.6, 7.6, 5.1, 7.0, 4.9, 7.6, 3.6, 6.5, 3.2, 5.8, 4.0, 4.7, 4.3, 2.6, 4.4, 3.9, 4.5, 3.1, 4.4, 1.1, 3.7, 0.0, 5.0, 0.0, 3.7, 1.0, 3.8, 0.6, 3.9, 0.6, 4.5, 1.1, 4.8, 1.6, 5.6, 1.0, 4.8, 1.6, 4.8, 0.6, 5.2, 1.7, 4.1, 5.7, 4.6, 4.3, 5.1, 4.3, 5.1, 2.7, 4.7, 1.8, 4.3, 2.6, 4.4, 1.6, 4.3, 1.4, 3.8, 1.9, 3.9, 2.2, 3.8, 2.0, 3.5, 2.7, 3.3, 2.4, 3.1, 3.0, 3.2, 3.1, 3.0, 4.2, 2.9, 5.0, 2.5, 4.3, 2.4, 7.2, 2.4, 5.5, 2.5, 6.4, 2.5, 7.2, 2.4, 5.5, 2.6, 5.1, 2.7, 5.2, 2.8, 4.5, 3.0, 4.3, 3.1, 2.0, 3.0, 2.6, 4.0, 3.8, 5.2, 0.5, 5.3, 2.4, 5.1, 3.2, 4.7, 2.3, 4.6, 2.7, 4.0, 2.5, 3.5, 2.1, 3.3, 1.4, 3.3, 0.5, 3.0, 1.1, 2.6, 0.0, 2.1, 0.0, 1.7, 0.0, 1.9, 1.1, 2.2, 1.1, 2.2, 1.2, 2.3, 1.6, 3.1, 1.2, 5.9, 1.0, 4.8, 1.0, 4.3, 1.3, 5.5, 1.6, 5.3, 3.6, 5.4, 2.6, 5.3, 4.1, 5.1, 2.9, 5.3, 3.8, 5.6, 3.5, 5.8, 4.3, 5.7, 3.9, 5.4, 3.6, 5.9, 3.2, 5.7, 4.1, 5.3, 4.7, 5.1, 4.8, 4.9, 5.7, 4.9, 5.8, 4.8, 5.9, 4.7, 6.2, 4.9, 6.0, 4.9, 5.8, 5.1, 4.7, 5.8, 2.8, 5.0, 3.8, 5.1, 5.1, 5.0, 4.4, 5.0, 5.1, 5.3, 7.3, 4.8, 5.9, 4.5, 3.9, 4.5, 4.0, 4.6, 6.7, 4.0, 5.8, 3.5, 4.8, 3.1, 3.4, 3.3, 4.7, 2.9, 2.7, 2.7, 1.5, 2.5, 1.1, 2.7, 0.9, 2.8, 0.8, 3.5, 2.9, 3.2, 2.0, 3.2, 1.1, 4.4, 1.6, 4.9, 1.4, 6.3, 1.6, 6.5, 0.7, 6.4, 4.1, 6.2, 4.1, 6.1, 4.7, 6.5, 2.9, 5.3, 2.6, 4.7, 3.2, 4.7, 3.5, 4.5, 2.6, 5.0, 2.3, 5.3, 2.7, 5.5, 1.9, 5.2, 3.0, 5.2, 2.5, 5.1, 3.1, 4.9, 3.0, 4.1, 3.0, 3.7, 3.5, 3.7, 3.4, 3.6, 3.2, 3.5, 3.0, 3.5, 3.2, 3.5, 3.1, 3.6, 3.4, 3.8, 2.5, 4.3, 2.6, 5.4, 2.5, 5.8, 1.2, 7.3, 1.8, 7.7, 2.3, 7.7, 2.6, 7.4, 2.9, 6.6, 5.3, 5.1, 6.3, 5.1, 3.4, 6.4, 3.7, 5.8, 4.7, 4.7, 4.6, 4.9, 3.7, 4.6, 2.4, 4.3, 2.4, 3.7, 2.1, 3.5, 1.8, 3.4, 1.1, 3.3, 1.0, 3.0, 0.7, 2.7, 0.8, 2.4, 1.0, 1.9, 1.3, 2.3, 1.2, 4.0, 1.8, 4.9, 2.0, 5.6, 1.9, 5.7, 3.5, 5.7, 2.8, 5.5, 3.3, 7.0, 1.7, 7.8, 1.9, 8.2, 2.1, 8.4, 1.6, 7.8, 1.6, 7.5, 0.9, 7.8, 1.2, 7.6, 1.5, 7.3, 1.5, 6.8, 0.9, 6.6, 1.3, 6.2, 0.8, 6.1, 0.7, 5.6, 0.6, 5.7, 0.9, 5.7, 1.8, 5.8, 1.1, 5.7, 1.0, 5.6, 1.2, 5.8, 0.6, 6.1, 0.1, 6.8, 0.5, 7.8, 0.5, 9.1, 3.3, 8.9, 1.6, 7.9, 2.4, 8.3, 3.2, 8.9, 3.5, 8.9, 4.3, 7.6, 7.0, 8.3, 1.6, 6.7, 5.5, 6.4, 4.8, 5.3, 4.0, 5.9, 2.1, 5.9, 0.9, 4.9, 0.2, 4.1, 0.4, 3.2, 0.4, 2.4, 0.3, 1.4, 0.8, 1.0, 0.2, 1.2, 0.5, 0.6, 0.3, 2.5, 0.5, 5.2, 0.5, 4.9, 0.5, 6.2, 0.9, 6.5, 1.7, 5.4, 1.1, 4.4, 0.8, 6.8, NaN, 7.0, NaN, 7.2, NaN, 7.9, NaN, 7.9, NaN, 7.9, NaN, 7.6, NaN, 7.8, NaN, 7.1, NaN, 6.5, NaN, 6.2, NaN, 5.8, NaN, 5.7, NaN, 5.3, NaN, 5.2, NaN, 5.2, NaN, 5.4, NaN, 5.4, NaN, 5.3, NaN, 5.5, NaN, 6.1, NaN, 6.8, NaN, 7.8, NaN, 8.5, NaN, 9.5, NaN, 8.4, NaN, 7.5, NaN, 7.0, NaN, 5.7, NaN, 7.4, NaN, 10.2, NaN, 7.9, NaN, 7.1, NaN, 5.8, NaN, 4.5, NaN, 4.6, NaN, 4.7, NaN, 4.5, NaN, 3.1, NaN, 2.0, NaN, 1.6, NaN, 1.2, NaN, 0.6, NaN, 0.9, NaN, 1.8, NaN, 2.5, NaN, 4.2, NaN, 7.3, NaN, 5.3, NaN, 5.5, NaN, 5.0, NaN, 2.5, 3.2, 2.6, 2.5, 2.3, 3.9, 2.3, 5.3, 2.4, 5.3, 2.5, 5.3, 2.5, 4.8, 2.6, 4.7, 2.5, 4.7, 2.5, 1.4, 2.5, 3.5, 2.3, 3.5, 2.3, 3.4, 1.6, 4.5, 1.7, 3.6, 1.4, 2.1, 1.3, 1.9, 1.5, 1.6, 1.8, 0.5, 2.1, 4.0, 2.9, 3.2, 3.2, 1.5, 2.8, 3.6, 3.1, 4.9, 3.3, 3.4, 2.7, 5.5, 2.9, 4.3, 3.4, 4.2, 3.8, 2.9, 3.1, 3.1, 3.3, 2.6, 4.7, 0.1, 3.6, 2.1, 2.3, 2.3, 1.6, 3.0, 1.9, 2.2, 2.2, 2.6, 2.9, 2.6, 2.9, 3.7, 2.6, 3.5, 2.3, 2.7, 2.4, 2.2, 2.3, 2.6, 2.6, 2.6, 2.5, 2.3, 2.8, 2.3, 2.9, 2.6, 3.7, 1.6, 4.8, 1.6, 4.5, 0.3, 3.8, 1.6, 4.0, 0.9, 4.1, 1.0, 4.3, 2.2, 4.3, 4.5, 3.4, 5.0, 3.3, 4.7, 2.9, 5.0, 2.8, 4.2, 2.6, 4.5, 2.6, 3.9, 2.6, 5.3, 2.3, 4.7, 2.1, 4.7, 2.1, 4.4, 1.9, 3.8, 1.6, 4.0, 1.2, 3.1, 1.2, 1.9, 1.3, 1.0, 1.7, 1.3, 1.7, 3.7, 1.6, 1.8, 1.7, 1.7, 1.9, 2.8, 2.1, 3.2, 2.1, 4.4, 2.2, 2.0, 2.5, 2.5, 2.3, 3.5, 2.5, 1.9, 2.5, 1.4, 2.8, 1.4, 2.4, 1.6, 2.6, 1.0, 2.7, 4.4, 2.2, 2.7, 2.0, 2.3, 1.8, 4.0, 2.1, 4.6, 2.5, 4.7, 2.5, 4.2, 2.5, 3.1, -2.8, 2.7, -2.6, 3.1, -2.0, 3.3, -2.8, 2.7, -2.2, 1.9, -1.9, 1.6, -1.3, 1.9, -0.3, 1.5, -1.8, 2.8, 2.8, 6.8, 2.8, 4.1, 3.5, 1.5, 3.2, 3.3, 3.6, 2.9, 4.2, 2.7, 2.4, 4.6, 2.2, 3.7, 1.7, 4.0, 1.2, 5.2, 1.2, 5.3, 1.1, 5.2, 1.0, 4.0, 1.0, 4.8, 1.0, 5.5, 1.0, 5.9, 0.9, 5.9, 0.8, 6.4, 0.5, 4.9, 0.6, 4.4, 0.4, 5.6, 0.8, 2.4, 0.9, 1.7, 1.1, 1.9, 1.3, 0.9, 1.4, 2.4, 1.8, 2.9, 1.8, 2.9, 2.2, 2.0, 2.2, 1.9, 2.2, 2.7, 1.9, 0.8, 2.3, 0.4, 2.3, 1.1, 1.8, 3.8, 1.7, 3.6, 1.6, 2.5, 1.6, 2.4, 1.6, 4.1, 1.0, 5.3, 0.9, 5.4, 1.2, 4.9, 1.5, 4.0, 1.4, 4.1, 1.6, 4.9, 1.7, 4.5, 1.5, 4.0, 1.8, 5.2, 1.9, 3.8, 2.0, 2.7, 2.4, 1.9, 7.1, 1.7, 7.5, 1.7, 7.6, 2.9, 6.5, 3.9, 5.4, 3.9, 5.6, 3.7, 5.4, 3.3, 5.3, 2.3, 4.8, 3.3, 4.5, 2.5, 4.1, 3.1, 3.7, 3.1, 3.4, 2.1, 3.1, 2.1, 2.7, 1.6, 2.6, 3.0, 2.5, 1.6, 2.5, 0.0, 2.7, 0.5, 3.3, 0.8, 3.4, 2.3, 3.8, 0.7, 3.9, 0.9, 4.7, 1.8, 4.6, 1.8, 5.5, 1.2, 5.2, 2.3, 5.1, 2.7, 5.6, 2.3, 5.5, 1.8, 5.7, 3.2, 6.1, 0.8, 6.5, 1.3, 5.9, 1.8, 4.9, 1.1, 4.2, 2.4, 3.3, 1.2, 3.3, 1.2, 2.9, 2.2, 3.3, 1.5, 3.3, 1.7, 3.0, 0.9, 3.1, 1.4, 2.2, 3.3, 2.1, 1.6, 2.5, 1.8, 3.5, 2.6, 4.7, 1.8, 6.7, 1.3, 7.0, 1.1, 7.8, 1.5, 3.8, 8.1, 3.6, 7.6, 3.8, 8.1, 4.0, 7.8, 3.8, 8.1, 4.4, 8.4, 3.9, 7.8, 4.3, 8.5, 3.9, 7.4, 3.6, 3.3, 2.6, 5.8, 2.1, 4.7, 1.5, 6.3, 1.3, 6.0, 1.0, 5.8, 0.9, 4.9, 0.8, 4.7, 0.8, 6.2, 0.6, 6.0, 0.5, 5.3, 0.4, 6.2, 0.5, 5.4, 0.5, 4.2, 0.5, 2.7, 1.3, 2.9, 1.6, 3.0, 1.5, 2.8, 1.5, 2.9, 1.6, 2.4, 1.5, 1.6, 0.9, 0.9, 0.6, 4.8, 0.6, 5.1, 0.9, 2.0, 0.7, 4.2, 0.7, 4.7, 1.4, 3.2, 1.4, 3.7, 0.7, 4.5, 0.8, 5.1, 0.5, 4.5, 0.3, 4.5, 0.5, 3.5, 0.8, 5.1, 0.9, 4.6, 0.8, 6.0, 0.9, 5.4, 0.8, 3.9, 0.6, 2.9, 0.6, 3.7, 0.7, 3.4, 9.1, 1.3, 9.6, 0.8, 9.7, 0.7, 11.0, 0.6, 10.4, 1.0, 10.2, 1.1, 11.3, 1.3, 11.7, 0.8, 11.1, 1.0, 11.2, 0.9, 11.2, 0.5, 11.0, 0.0, 9.6, 0.0, 10.8, 0.0, 10.3, 0.0, 10.5, 0.0, 10.2, 0.5, 10.1, 0.7, 9.7, 0.8, 9.5, 0.5, 9.8, 0.7, 9.7, 0.7, 9.5, 0.6, 8.0, 1.5, 1.9, 1.1, 4.6, 1.2, 4.0, 1.0, 4.9, 3.1, 6.2, 1.9, 5.6, 2.1, 6.0, 2.4, 4.7, 1.9, 4.5, 1.7, 3.4, 1.3, 2.7, 1.3, 3.9, 1.0, 4.3, 0.7, 4.3, 0.8, 4.3, 0.5, 4.3, 0.6, 4.2, 0.0, 4.6, 0.5, 4.2, 0.0, 4.0, 0.6, 4.3, 0.5, 4.9, 0.8, 5.3, 0.5, 4.5, 0.9, 4.8, 0.7, 4.5, 0.9, 4.6, 0.7];
                var success = fi.fmi.metoclient.test.SpecUtils.checkData(data, times, values);
                if (cb) {
                    // Notice, because spatial data is requested, the data comes from the parser directly.
                    // Then, progress is not shown at all.
                    cb(success && !progressCalled);
                }
            },
            progressCallback : function(err, partStart, partEnd) {
                // Simple check to test that progress has been called during the flow.
                progressCalled = true;
            }
        })) {
            if (cb) {
                cb(false);
            }
        }
    }

    function testForecastHkiTemperature(connection, cb) {
        var progressCalled = false;
        if (!connection.getData({
            requestParameter : "temperature",
            // Integer values are used to init dates for older browsers.
            // (new Date("2013-05-10T08:00:00Z")).getTime()
            // (new Date("2013-05-12T10:00:00Z")).getTime()
            begin : new Date(1368172800000),
            end : new Date(1368352800000),
            timestep : 60 * 60 * 1000,
            sites : ["Helsinki"],
            callback : function(data, errors) {
                // Notice, the values here are the correct values for time period defined above.
                // Connection may request extra values around the given times. Therefore, XML may contain more values than just these.
                // Times that XML should provide. Notice, these are in seconds.
                var times = [1368172800, 1368176400, 1368180000, 1368183600, 1368187200, 1368190800, 1368194400, 1368198000, 1368201600, 1368205200, 1368208800, 1368212400, 1368216000, 1368219600, 1368223200, 1368226800, 1368230400, 1368234000, 1368237600, 1368241200, 1368244800, 1368248400, 1368252000, 1368255600, 1368259200, 1368262800, 1368266400, 1368270000, 1368273600, 1368277200, 1368280800, 1368284400, 1368288000, 1368291600, 1368295200, 1368298800, 1368302400, 1368306000, 1368309600, 1368313200, 1368316800, 1368320400, 1368324000, 1368327600, 1368331200, 1368334800, 1368338400, 1368342000, 1368345600, 1368349200, 1368352800];
                // Notice, server does not have forecast data of the past.
                // Therefore, all the values are NaN values if begin and end times define period in the past.
                // For local data tests proper values could be used. But, NaN needs to be used here if both local
                // and server data tests should be run.
                var values = [NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN];
                var success = fi.fmi.metoclient.test.SpecUtils.checkData(data, times, values);
                if (cb) {
                    cb(success && progressCalled);
                }
            },
            progressCallback : function(err, partStart, partEnd) {
                // Simple check to test that progress has been called during the flow.
                progressCalled = !isNaN(partStart) && !isNaN(partEnd);
            }
        })) {
            if (cb) {
                cb(false);
            }
        }
    }

    function testForecastHkiWindspeed(connection, cb) {
        var progressCalled = false;
        if (!connection.getData({
            requestParameter : "windspeedms",
            // Integer values are used to init dates for older browsers.
            // (new Date("2013-05-10T08:00:00Z")).getTime()
            // (new Date("2013-05-12T10:00:00Z")).getTime()
            begin : new Date(1368172800000),
            end : new Date(1368352800000),
            timestep : 60 * 60 * 1000,
            sites : ["Helsinki"],
            callback : function(data, errors) {
                // Notice, the values here are the correct values for time period defined above.
                // Connection may request extra values around the given times. Therefore, XML may contain more values than just these.
                // Times that XML should provide. Notice, these are in seconds.
                var times = [1368172800, 1368176400, 1368180000, 1368183600, 1368187200, 1368190800, 1368194400, 1368198000, 1368201600, 1368205200, 1368208800, 1368212400, 1368216000, 1368219600, 1368223200, 1368226800, 1368230400, 1368234000, 1368237600, 1368241200, 1368244800, 1368248400, 1368252000, 1368255600, 1368259200, 1368262800, 1368266400, 1368270000, 1368273600, 1368277200, 1368280800, 1368284400, 1368288000, 1368291600, 1368295200, 1368298800, 1368302400, 1368306000, 1368309600, 1368313200, 1368316800, 1368320400, 1368324000, 1368327600, 1368331200, 1368334800, 1368338400, 1368342000, 1368345600, 1368349200, 1368352800];
                // Notice, server does not have forecast data of the past.
                // Therefore, all the values are NaN values if begin and end times define period in the past.
                // For local data tests proper values could be used. But, NaN needs to be used here if both local
                // and server data tests should be run.
                var values = [NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN];
                var success = fi.fmi.metoclient.test.SpecUtils.checkData(data, times, values);
                if (cb) {
                    cb(success && progressCalled);
                }
            },
            progressCallback : function(err, partStart, partEnd) {
                // Simple check to test that progress has been called during the flow.
                progressCalled = !isNaN(partStart) && !isNaN(partEnd);
            }
        })) {
            if (cb) {
                cb(false);
            }
        }
    }

    function testForecastHkiTemperatureWindspeed(connection, cb) {
        var progressCalled = false;
        if (!connection.getData({
            requestParameter : "temperature,windspeedms",
            // Integer values are used to init dates for older browsers.
            // (new Date("2013-05-10T08:00:00Z")).getTime()
            // (new Date("2013-05-12T10:00:00Z")).getTime()
            begin : new Date(1368172800000),
            end : new Date(1368352800000),
            timestep : 60 * 60 * 1000,
            sites : ["Helsinki"],
            callback : function(data, errors) {
                // Notice, the values here are the correct values for time period defined above.
                // Connection may request extra values around the given times. Therefore, XML may contain more values than just these.
                // Times that XML should provide. Notice, these are in seconds.
                var times = [1368172800, 1368176400, 1368180000, 1368183600, 1368187200, 1368190800, 1368194400, 1368198000, 1368201600, 1368205200, 1368208800, 1368212400, 1368216000, 1368219600, 1368223200, 1368226800, 1368230400, 1368234000, 1368237600, 1368241200, 1368244800, 1368248400, 1368252000, 1368255600, 1368259200, 1368262800, 1368266400, 1368270000, 1368273600, 1368277200, 1368280800, 1368284400, 1368288000, 1368291600, 1368295200, 1368298800, 1368302400, 1368306000, 1368309600, 1368313200, 1368316800, 1368320400, 1368324000, 1368327600, 1368331200, 1368334800, 1368338400, 1368342000, 1368345600, 1368349200, 1368352800];
                // Notice, server does not have forecast data of the past.
                // Therefore, all the values are NaN values if begin and end times define period in the past.
                // For local data tests proper values could be used. But, NaN needs to be used here if both local
                // and server data tests should be run.
                var values = [NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN];
                var locationInfo = data && data.locations && data.locations.length && data.locations[0] ? data.locations[0].info : undefined;
                var infoCheck = locationInfo && locationInfo.id === "658225" && locationInfo.name === "Helsinki" && locationInfo.region === "Helsinki" && locationInfo.country === "Republic of Finland" && locationInfo.timezone === "Europe/Helsinki";
                var propertyDataTemperature = data && data.properties ? data.properties.temperature : undefined;
                var propertyTemperatureCheck = propertyDataTemperature && propertyDataTemperature.label === "Air temperature" && propertyDataTemperature.phenomenon === "Temperature" && propertyDataTemperature.unit === "degC" && propertyDataTemperature.statisticalFunction === "" && propertyDataTemperature.statisticalPeriod === "";
                var propertyDataWs = data && data.properties ? data.properties.windspeedms : undefined;
                var propertyWsCheck = propertyDataWs && propertyDataWs.label === "Wind speed" && propertyDataWs.phenomenon === "Wind" && propertyDataWs.unit === "m/s" && propertyDataWs.statisticalFunction === "avg" && propertyDataWs.statisticalPeriod === "PT1H";
                var success = infoCheck && propertyTemperatureCheck && propertyWsCheck && fi.fmi.metoclient.test.SpecUtils.checkData(data, times, values);
                if (cb) {
                    cb(success && progressCalled);
                }
            },
            progressCallback : function(err, partStart, partEnd) {
                // Simple check to test that progress has been called during the flow.
                progressCalled = !isNaN(partStart) && !isNaN(partEnd);
            }
        })) {
            if (cb) {
                cb(false);
            }
        }
    }

    function testForecastGeoidHelsinkiTemperature(connection, cb) {
        var progressCalled = false;
        if (!connection.getData({
            requestParameter : "temperature",
            // Integer values are used to init dates for older browsers.
            // (new Date("2013-05-10T08:00:00Z")).getTime()
            // (new Date("2013-05-12T10:00:00Z")).getTime()
            begin : new Date(1368172800000),
            end : new Date(1368352800000),
            timestep : 60 * 60 * 1000,
            geoid : 658225,
            callback : function(data, errors) {
                // Notice, the values here are the correct values for time period defined above.
                // Connection may request extra values around the given times. Therefore, XML may contain more values than just these.
                // Times that XML should provide. Notice, these are in seconds.
                var times = [1368172800, 1368176400, 1368180000, 1368183600, 1368187200, 1368190800, 1368194400, 1368198000, 1368201600, 1368205200, 1368208800, 1368212400, 1368216000, 1368219600, 1368223200, 1368226800, 1368230400, 1368234000, 1368237600, 1368241200, 1368244800, 1368248400, 1368252000, 1368255600, 1368259200, 1368262800, 1368266400, 1368270000, 1368273600, 1368277200, 1368280800, 1368284400, 1368288000, 1368291600, 1368295200, 1368298800, 1368302400, 1368306000, 1368309600, 1368313200, 1368316800, 1368320400, 1368324000, 1368327600, 1368331200, 1368334800, 1368338400, 1368342000, 1368345600, 1368349200, 1368352800];
                // Notice, server does not have forecast data of the past.
                // Therefore, all the values are NaN values if begin and end times define period in the past.
                // For local data tests proper values could be used. But, NaN needs to be used here if both local
                // and server data tests should be run.
                var values = [NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN];
                var locationInfo = data && data.locations && data.locations.length && data.locations[0] ? data.locations[0].info : undefined;
                var infoCheck = locationInfo && locationInfo.geoid === "658225";
                var success = infoCheck && fi.fmi.metoclient.test.SpecUtils.checkData(data, times, values);
                if (cb) {
                    cb(success && progressCalled);
                }
            },
            progressCallback : function(err, partStart, partEnd) {
                // Simple check to test that progress has been called during the flow.
                progressCalled = !isNaN(partStart) && !isNaN(partEnd);
            }
        })) {
            if (cb) {
                cb(false);
            }
        }
    }

    function testForecastGeoidHelsinkiGeoidKumpulaTemperature(connection, cb) {
        var progressCalled = false;
        if (!connection.getData({
            requestParameter : "temperature",
            // Integer values are used to init dates for older browsers.
            // (new Date("2013-05-10T08:00:00Z")).getTime()
            // (new Date("2013-05-12T10:00:00Z")).getTime()
            begin : new Date(1368172800000),
            end : new Date(1368352800000),
            timestep : 60 * 60 * 1000,
            // GeoId can be integer or string or multiple values in an array.
            geoid : [658225, "843429"],
            callback : function(data, errors) {
                // Notice, the values here are the correct values for time period defined above.
                // Connection may request extra values around the given times. Therefore, XML may contain more values than just these.
                // Times that XML should provide. Notice, these are in seconds.
                var times = [1368172800, 1368176400, 1368180000, 1368183600, 1368187200, 1368190800, 1368194400, 1368198000, 1368201600, 1368205200, 1368208800, 1368212400, 1368216000, 1368219600, 1368223200, 1368226800, 1368230400, 1368234000, 1368237600, 1368241200, 1368244800, 1368248400, 1368252000, 1368255600, 1368259200, 1368262800, 1368266400, 1368270000, 1368273600, 1368277200, 1368280800, 1368284400, 1368288000, 1368291600, 1368295200, 1368298800, 1368302400, 1368306000, 1368309600, 1368313200, 1368316800, 1368320400, 1368324000, 1368327600, 1368331200, 1368334800, 1368338400, 1368342000, 1368345600, 1368349200, 1368352800, 1368172800, 1368176400, 1368180000, 1368183600, 1368187200, 1368190800, 1368194400, 1368198000, 1368201600, 1368205200, 1368208800, 1368212400, 1368216000, 1368219600, 1368223200, 1368226800, 1368230400, 1368234000, 1368237600, 1368241200, 1368244800, 1368248400, 1368252000, 1368255600, 1368259200, 1368262800, 1368266400, 1368270000, 1368273600, 1368277200, 1368280800, 1368284400, 1368288000, 1368291600, 1368295200, 1368298800, 1368302400, 1368306000, 1368309600, 1368313200, 1368316800, 1368320400, 1368324000, 1368327600, 1368331200, 1368334800, 1368338400, 1368342000, 1368345600, 1368349200, 1368352800];
                // Notice, server does not have forecast data of the past.
                // Therefore, all the values are NaN values if begin and end times define period in the past.
                // For local data tests proper values could be used. But, NaN needs to be used here if both local
                // and server data tests should be run.
                var values = [NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN];
                var success = fi.fmi.metoclient.test.SpecUtils.checkData(data, times, values);
                if (cb) {
                    cb(success && progressCalled);
                }
            },
            progressCallback : function(err, partStart, partEnd) {
                // Simple check to test that progress has been called during the flow.
                progressCalled = !isNaN(partStart) && !isNaN(partEnd);
            }
        })) {
            if (cb) {
                cb(false);
            }
        }
    }

    function testWmoKumpulaTd(connection, cb) {
        var progressCalled = false;
        if (!connection.getData({
            requestParameter : "td",
            // Integer values are used to init dates for older browsers.
            // (new Date("2013-05-10T08:00:00Z")).getTime()
            // (new Date("2013-05-12T10:00:00Z")).getTime()
            begin : new Date(1368172800000),
            end : new Date(1368352800000),
            timestep : 60 * 60 * 1000,
            wmo : 2998,
            callback : function(data, errors) {
                // Notice, the values here are the correct values for time period defined above.
                // Connection may request extra values around the given times. Therefore, XML may contain more values than just these.
                // Times that XML should provide. Notice, these are in seconds.
                var times = [1368172800, 1368176400, 1368180000, 1368183600, 1368187200, 1368190800, 1368194400, 1368198000, 1368201600, 1368205200, 1368208800, 1368212400, 1368216000, 1368219600, 1368223200, 1368226800, 1368230400, 1368234000, 1368237600, 1368241200, 1368244800, 1368248400, 1368252000, 1368255600, 1368259200, 1368262800, 1368266400, 1368270000, 1368273600, 1368277200, 1368280800, 1368284400, 1368288000, 1368291600, 1368295200, 1368298800, 1368302400, 1368306000, 1368309600, 1368313200, 1368316800, 1368320400, 1368324000, 1368327600, 1368331200, 1368334800, 1368338400, 1368342000, 1368345600, 1368349200, 1368352800];
                var values = [10.5, 11.0, 9.8, 10.6, 10.6, 9.8, 9.8, 10.5, 10.7, 9.9, 9.3, 9.4, 9.5, 9.9, 8.6, 8.3, 9.0, 8.2, 8.2, 6.3, 7.2, 8.0, 8.2, 9.4, 8.4, 8.5, 7.3, 7.5, 8.3, 8.0, 8.0, 7.1, 5.8, 5.6, 6.1, 6.5, 6.4, 6.3, 5.9, 5.4, 5.5, 5.2, 5.2, 5.2, 5.6, 5.8, 4.5, 4.6, 3.9, 4.2, 4.0];
                var locationInfo = data && data.locations && data.locations.length && data.locations[0] ? data.locations[0].info : undefined;
                var infoCheck = locationInfo && locationInfo.wmo === "2998";
                var success = infoCheck && fi.fmi.metoclient.test.SpecUtils.checkData(data, times, values);
                if (cb) {
                    cb(success && progressCalled);
                }
            },
            progressCallback : function(err, partStart, partEnd) {
                // Simple check to test that progress has been called during the flow.
                progressCalled = !isNaN(partStart) && !isNaN(partEnd);
            }
        })) {
            if (cb) {
                cb(false);
            }
        }
    }

    function testWmoHelsinkiWmoKumpulaTd(connection, cb) {
        var progressCalled = false;
        if (!connection.getData({
            requestParameter : "td",
            // Integer values are used to init dates for older browsers.
            // (new Date("2013-05-10T08:00:00Z")).getTime()
            // (new Date("2013-05-12T10:00:00Z")).getTime()
            begin : new Date(1368172800000),
            end : new Date(1368352800000),
            timestep : 60 * 60 * 1000,
            // WMO can be integer or string or multiple values in an array.
            wmo : [2934, "2998"],
            callback : function(data, errors) {
                // Notice, the values here are the correct values for time period defined above.
                // Connection may request extra values around the given times. Therefore, XML may contain more values than just these.
                // Times that XML should provide. Notice, these are in seconds.
                var times = [1368172800, 1368176400, 1368180000, 1368183600, 1368187200, 1368190800, 1368194400, 1368198000, 1368201600, 1368205200, 1368208800, 1368212400, 1368216000, 1368219600, 1368223200, 1368226800, 1368230400, 1368234000, 1368237600, 1368241200, 1368244800, 1368248400, 1368252000, 1368255600, 1368259200, 1368262800, 1368266400, 1368270000, 1368273600, 1368277200, 1368280800, 1368284400, 1368288000, 1368291600, 1368295200, 1368298800, 1368302400, 1368306000, 1368309600, 1368313200, 1368316800, 1368320400, 1368324000, 1368327600, 1368331200, 1368334800, 1368338400, 1368342000, 1368345600, 1368349200, 1368352800, 1368172800, 1368176400, 1368180000, 1368183600, 1368187200, 1368190800, 1368194400, 1368198000, 1368201600, 1368205200, 1368208800, 1368212400, 1368216000, 1368219600, 1368223200, 1368226800, 1368230400, 1368234000, 1368237600, 1368241200, 1368244800, 1368248400, 1368252000, 1368255600, 1368259200, 1368262800, 1368266400, 1368270000, 1368273600, 1368277200, 1368280800, 1368284400, 1368288000, 1368291600, 1368295200, 1368298800, 1368302400, 1368306000, 1368309600, 1368313200, 1368316800, 1368320400, 1368324000, 1368327600, 1368331200, 1368334800, 1368338400, 1368342000, 1368345600, 1368349200, 1368352800];
                var values = [10.7, 10.1, 10.7, 11.7, 10.7, 9.6, 9.2, 10.2, 9.8, 9.6, 9.2, 10.0, 9.9, 9.0, 6.7, 9.0, 9.1, 8.6, 7.9, 5.7, 7.3, 7.8, 8.6, 8.0, 7.9, 7.2, 7.0, 7.0, 7.1, 6.4, 6.9, 6.8, 5.4, 5.7, 6.0, 6.4, 6.6, 6.6, 5.9, 5.9, 6.0, 5.9, 5.8, 5.6, 5.5, 5.2, 4.2, 4.3, 3.7, 3.7, 3.9, 10.5, 11.0, 9.8, 10.6, 10.6, 9.8, 9.8, 10.5, 10.7, 9.9, 9.3, 9.4, 9.5, 9.9, 8.6, 8.3, 9.0, 8.2, 8.2, 6.3, 7.2, 8.0, 8.2, 9.4, 8.4, 8.5, 7.3, 7.5, 8.3, 8.0, 8.0, 7.1, 5.8, 5.6, 6.1, 6.5, 6.4, 6.3, 5.9, 5.4, 5.5, 5.2, 5.2, 5.2, 5.6, 5.8, 4.5, 4.6, 3.9, 4.2, 4.0];
                var success = fi.fmi.metoclient.test.SpecUtils.checkData(data, times, values);
                if (cb) {
                    cb(success && progressCalled);
                }
            },
            progressCallback : function(err, partStart, partEnd) {
                // Simple check to test that progress has been called during the flow.
                progressCalled = !isNaN(partStart) && !isNaN(partEnd);
            }
        })) {
            if (cb) {
                cb(false);
            }
        }
    }

    function testFmisidKumpulaTd(connection, cb) {
        var progressCalled = false;
        if (!connection.getData({
            requestParameter : "td",
            // Integer values are used to init dates for older browsers.
            // (new Date("2013-05-10T08:00:00Z")).getTime()
            // (new Date("2013-05-12T10:00:00Z")).getTime()
            begin : new Date(1368172800000),
            end : new Date(1368352800000),
            timestep : 60 * 60 * 1000,
            fmisid : 101004,
            callback : function(data, errors) {
                // Notice, the values here are the correct values for time period defined above.
                // Connection may request extra values around the given times. Therefore, XML may contain more values than just these.
                // Times that XML should provide. Notice, these are in seconds.
                var times = [1368172800, 1368176400, 1368180000, 1368183600, 1368187200, 1368190800, 1368194400, 1368198000, 1368201600, 1368205200, 1368208800, 1368212400, 1368216000, 1368219600, 1368223200, 1368226800, 1368230400, 1368234000, 1368237600, 1368241200, 1368244800, 1368248400, 1368252000, 1368255600, 1368259200, 1368262800, 1368266400, 1368270000, 1368273600, 1368277200, 1368280800, 1368284400, 1368288000, 1368291600, 1368295200, 1368298800, 1368302400, 1368306000, 1368309600, 1368313200, 1368316800, 1368320400, 1368324000, 1368327600, 1368331200, 1368334800, 1368338400, 1368342000, 1368345600, 1368349200, 1368352800];
                var values = [10.5, 11.0, 9.8, 10.6, 10.6, 9.8, 9.8, 10.5, 10.7, 9.9, 9.3, 9.4, 9.5, 9.9, 8.6, 8.3, 9.0, 8.2, 8.2, 6.3, 7.2, 8.0, 8.2, 9.4, 8.4, 8.5, 7.3, 7.5, 8.3, 8.0, 8.0, 7.1, 5.8, 5.6, 6.1, 6.5, 6.4, 6.3, 5.9, 5.4, 5.5, 5.2, 5.2, 5.2, 5.6, 5.8, 4.5, 4.6, 3.9, 4.2, 4.0];
                var locationInfo = data && data.locations && data.locations.length && data.locations[0] ? data.locations[0].info : undefined;
                var infoCheck = locationInfo && locationInfo.fmisid === "101004";
                var success = infoCheck && fi.fmi.metoclient.test.SpecUtils.checkData(data, times, values);
                if (cb) {
                    cb(success && progressCalled);
                }
            },
            progressCallback : function(err, partStart, partEnd) {
                // Simple check to test that progress has been called during the flow.
                progressCalled = !isNaN(partStart) && !isNaN(partEnd);
            }
        })) {
            if (cb) {
                cb(false);
            }
        }
    }

    function testFmisidHelsinkiFmisidKumpulaTd(connection, cb) {
        var progressCalled = false;
        if (!connection.getData({
            requestParameter : "td",
            // Integer values are used to init dates for older browsers.
            // (new Date("2013-05-10T08:00:00Z")).getTime()
            // (new Date("2013-05-12T10:00:00Z")).getTime()
            begin : new Date(1368172800000),
            end : new Date(1368352800000),
            timestep : 60 * 60 * 1000,
            // Value can be integer or string or multiple values in an array.
            fmisid : [101007, "101004"],
            callback : function(data, errors) {
                // Notice, the values here are the correct values for time period defined above.
                // Connection may request extra values around the given times. Therefore, XML may contain more values than just these.
                // Times that XML should provide. Notice, these are in seconds.
                var times = [1368172800, 1368176400, 1368180000, 1368183600, 1368187200, 1368190800, 1368194400, 1368198000, 1368201600, 1368205200, 1368208800, 1368212400, 1368216000, 1368219600, 1368223200, 1368226800, 1368230400, 1368234000, 1368237600, 1368241200, 1368244800, 1368248400, 1368252000, 1368255600, 1368259200, 1368262800, 1368266400, 1368270000, 1368273600, 1368277200, 1368280800, 1368284400, 1368288000, 1368291600, 1368295200, 1368298800, 1368302400, 1368306000, 1368309600, 1368313200, 1368316800, 1368320400, 1368324000, 1368327600, 1368331200, 1368334800, 1368338400, 1368342000, 1368345600, 1368349200, 1368352800, 1368172800, 1368176400, 1368180000, 1368183600, 1368187200, 1368190800, 1368194400, 1368198000, 1368201600, 1368205200, 1368208800, 1368212400, 1368216000, 1368219600, 1368223200, 1368226800, 1368230400, 1368234000, 1368237600, 1368241200, 1368244800, 1368248400, 1368252000, 1368255600, 1368259200, 1368262800, 1368266400, 1368270000, 1368273600, 1368277200, 1368280800, 1368284400, 1368288000, 1368291600, 1368295200, 1368298800, 1368302400, 1368306000, 1368309600, 1368313200, 1368316800, 1368320400, 1368324000, 1368327600, 1368331200, 1368334800, 1368338400, 1368342000, 1368345600, 1368349200, 1368352800];
                var values = [10.7, 10.1, 10.7, 11.7, 10.7, 9.6, 9.2, 10.2, 9.8, 9.6, 9.2, 10.0, 9.9, 9.0, 6.7, 9.0, 9.1, 8.6, 7.9, 5.7, 7.3, 7.8, 8.6, 8.0, 7.9, 7.2, 7.0, 7.0, 7.1, 6.4, 6.9, 6.8, 5.4, 5.7, 6.0, 6.4, 6.6, 6.6, 5.9, 5.9, 6.0, 5.9, 5.8, 5.6, 5.5, 5.2, 4.2, 4.3, 3.7, 3.7, 3.9, 10.5, 11.0, 9.8, 10.6, 10.6, 9.8, 9.8, 10.5, 10.7, 9.9, 9.3, 9.4, 9.5, 9.9, 8.6, 8.3, 9.0, 8.2, 8.2, 6.3, 7.2, 8.0, 8.2, 9.4, 8.4, 8.5, 7.3, 7.5, 8.3, 8.0, 8.0, 7.1, 5.8, 5.6, 6.1, 6.5, 6.4, 6.3, 5.9, 5.4, 5.5, 5.2, 5.2, 5.2, 5.6, 5.8, 4.5, 4.6, 3.9, 4.2, 4.0];
                var success = fi.fmi.metoclient.test.SpecUtils.checkData(data, times, values);
                if (cb) {
                    cb(success && progressCalled);
                }
            },
            progressCallback : function(err, partStart, partEnd) {
                // Simple check to test that progress has been called during the flow.
                progressCalled = !isNaN(partStart) && !isNaN(partEnd);
            }
        })) {
            if (cb) {
                cb(false);
            }
        }
    }

    function testHkiQueryExtensionWmoKumpulaTd(connection, cb) {
        var progressCalled = false;
        if (!connection.getData({
            requestParameter : "td",
            // Integer values are used to init dates for older browsers.
            // (new Date("2013-05-10T08:00:00Z")).getTime()
            // (new Date("2013-05-12T10:00:00Z")).getTime()
            begin : new Date(1368172800000),
            end : new Date(1368352800000),
            timestep : 60 * 60 * 1000,
            // Notice, sites order is different here than when cache returns data.
            // So, check the order is data is changed.
            sites : ["Kumpula,Helsinki", "Helsinki"],
            queryExtension : {
                // Kumpula wmo
                wmo : "2998"
            },
            callback : function(data, errors) {
                // Notice, the values here are the correct values for time period defined above.
                // Connection may request extra values around the given times. Therefore, XML may contain more values than just these.
                // Times that XML should provide. Notice, these are in seconds.
                var times = [1368172800, 1368176400, 1368180000, 1368183600, 1368187200, 1368190800, 1368194400, 1368198000, 1368201600, 1368205200, 1368208800, 1368212400, 1368216000, 1368219600, 1368223200, 1368226800, 1368230400, 1368234000, 1368237600, 1368241200, 1368244800, 1368248400, 1368252000, 1368255600, 1368259200, 1368262800, 1368266400, 1368270000, 1368273600, 1368277200, 1368280800, 1368284400, 1368288000, 1368291600, 1368295200, 1368298800, 1368302400, 1368306000, 1368309600, 1368313200, 1368316800, 1368320400, 1368324000, 1368327600, 1368331200, 1368334800, 1368338400, 1368342000, 1368345600, 1368349200, 1368352800, 1368172800, 1368176400, 1368180000, 1368183600, 1368187200, 1368190800, 1368194400, 1368198000, 1368201600, 1368205200, 1368208800, 1368212400, 1368216000, 1368219600, 1368223200, 1368226800, 1368230400, 1368234000, 1368237600, 1368241200, 1368244800, 1368248400, 1368252000, 1368255600, 1368259200, 1368262800, 1368266400, 1368270000, 1368273600, 1368277200, 1368280800, 1368284400, 1368288000, 1368291600, 1368295200, 1368298800, 1368302400, 1368306000, 1368309600, 1368313200, 1368316800, 1368320400, 1368324000, 1368327600, 1368331200, 1368334800, 1368338400, 1368342000, 1368345600, 1368349200, 1368352800];
                var values = [10.5, 11.0, 9.8, 10.6, 10.6, 9.8, 9.8, 10.5, 10.7, 9.9, 9.3, 9.4, 9.5, 9.9, 8.6, 8.3, 9.0, 8.2, 8.2, 6.3, 7.2, 8.0, 8.2, 9.4, 8.4, 8.5, 7.3, 7.5, 8.3, 8.0, 8.0, 7.1, 5.8, 5.6, 6.1, 6.5, 6.4, 6.3, 5.9, 5.4, 5.5, 5.2, 5.2, 5.2, 5.6, 5.8, 4.5, 4.6, 3.9, 4.2, 4.0, 10.7, 10.1, 10.7, 11.7, 10.7, 9.6, 9.2, 10.2, 9.8, 9.6, 9.2, 10.0, 9.9, 9.0, 6.7, 9.0, 9.1, 8.6, 7.9, 5.7, 7.3, 7.8, 8.6, 8.0, 7.9, 7.2, 7.0, 7.0, 7.1, 6.4, 6.9, 6.8, 5.4, 5.7, 6.0, 6.4, 6.6, 6.6, 5.9, 5.9, 6.0, 5.9, 5.8, 5.6, 5.5, 5.2, 4.2, 4.3, 3.7, 3.7, 3.9];
                var success = fi.fmi.metoclient.test.SpecUtils.checkData(data, times, values);
                if (cb) {
                    cb(success && progressCalled);
                }
            },
            progressCallback : function(err, partStart, partEnd) {
                // Simple check to test that progress has been called during the flow.
                progressCalled = !isNaN(partStart) && !isNaN(partEnd);
            }
        })) {
            if (cb) {
                cb(false);
            }
        }
    }

    function testErrorResponse(connection, cb) {
        var progressCalled = true;
        if (!connection.getData({
            requestParameter : "td,ws_10min",
            // Integer values are used to init dates for older browsers.
            // (new Date("2013-05-10T08:00:00Z")).getTime()
            // (new Date("2013-05-12T10:00:00Z")).getTime()
            begin : new Date(1368172800000),
            end : new Date(1368352800000),
            // Timestep greater than 1 is required to use cache.
            timestep : 60 * 60 * 1000,
            denyTimeAdjusting : true,
            sites : "ErrorSite",
            callback : function(data, errors) {
                var cacheError = {
                    errorCode : "OperationProcessingFailed",
                    // Actual text is not checked in this test.
                    errorText : undefined
                };
                // Cache handles the data in separate parts and therefore error
                // may be given mulitple times in some cases. But, error is given
                // only once in this test.
                var correctErrors = [cacheError];
                // Notice, actual text is not checked if errorText in error object is left undefined in this test.
                var success = fi.fmi.metoclient.test.SpecUtils.checkErrorData(errors, correctErrors);
                if (cb) {
                    cb(success && progressCalled);
                }
            },
            progressCallback : function(err, partStart, partEnd) {
                // Simple check to test that progress has been called during the flow.
                progressCalled = err && !isNaN(partStart) && !isNaN(partEnd);
            }
        })) {
            if (cb) {
                cb(false);
            }
        }
    }

    function runFullTest(useLocalUrl, cb) {
        // Create connection and connect to URL.
        var connection = new fi.fmi.metoclient.metolib.WfsConnection();
        var forecastConnection = new fi.fmi.metoclient.metolib.WfsConnection();

        // Run test cases.
        // Notice, flow is continued when asynchronous functions call callback.
        // Synchronous functions do not need callbacks.
        expect(connection.connect( useLocalUrl ? (getLocalUrlBase() + "hki_td_missing_times.xml") : getSpecRunnerTestServerUrl(), STORED_QUERY_OBSERVATION)).toBeTruthy();
        // Insert components into the page when document has been loaded.
        testHkiTd(connection, function(success) {
            expect(success).toBeTruthy();
            // Retry same to test that cache works when same data is requested.
            testHkiTd(connection, function(success) {
                expect(success).toBeTruthy();
                // Disconnect before setting new URL.
                expect(connection.disconnect()).toBeTruthy();
                expect(forecastConnection.connect( useLocalUrl ? (getLocalUrlBase() + "forecast_hki_temperature.xml") : getSpecRunnerTestServerUrl(), STORED_QUERY_FORECAST)).toBeTruthy();
                // Insert components into the page when document has been loaded.
                testForecastHkiTemperature(forecastConnection, function(success) {
                    expect(success).toBeTruthy();
                    // Retry same to test that cache works when same data is requested.
                    testForecastHkiTemperature(forecastConnection, function(success) {
                        expect(success).toBeTruthy();
                        // Disconnect before setting new URL.
                        expect(forecastConnection.disconnect()).toBeTruthy();
                        expect(forecastConnection.connect( useLocalUrl ? (getLocalUrlBase() + "forecast_hki_windspeedms.xml") : getSpecRunnerTestServerUrl(), STORED_QUERY_FORECAST)).toBeTruthy();
                        // Insert components into the page when document has been loaded.
                        testForecastHkiWindspeed(forecastConnection, function(success) {
                            expect(success).toBeTruthy();
                            // Retry same to test that cache works when same data is requested.
                            testForecastHkiWindspeed(forecastConnection, function(success) {
                                expect(success).toBeTruthy();
                                // Disconnect before setting new URL.
                                expect(forecastConnection.disconnect()).toBeTruthy();
                                expect(forecastConnection.connect( useLocalUrl ? (getLocalUrlBase() + "forecast_hki_temperature_windspeedms.xml") : getSpecRunnerTestServerUrl(), STORED_QUERY_FORECAST)).toBeTruthy();
                                // Insert components into the page when document has been loaded.
                                testForecastHkiTemperatureWindspeed(forecastConnection, function(success) {
                                    // Retry same to test that cache works when same data is requested.
                                    testForecastHkiTemperatureWindspeed(forecastConnection, function(success) {
                                        expect(success).toBeTruthy();
                                        // Disconnect before setting new URL.
                                        expect(forecastConnection.disconnect()).toBeTruthy();
                                        expect(connection.connect( useLocalUrl ? (getLocalUrlBase() + "spatial_bbox_td_ws.xml") : getSpecRunnerTestServerUrl(), STORED_QUERY_OBSERVATION)).toBeTruthy();
                                        // Insert components into the page when document has been loaded.
                                        testSpatialTdWindspeed(connection, function(success) {
                                            expect(success).toBeTruthy();
                                            // Retry same to test that cache works when same data is requested.
                                            testSpatialTdWindspeed(connection, function(success) {
                                                expect(success).toBeTruthy();
                                                // Disconnect before setting new URL.
                                                expect(connection.disconnect()).toBeTruthy();
                                                expect(connection.connect( useLocalUrl ? (getLocalUrlBase() + "kumpula_hki_td.xml") : getSpecRunnerTestServerUrl(), STORED_QUERY_OBSERVATION)).toBeTruthy();
                                                testKumpulaHkiTd(connection, function(success) {
                                                    expect(success).toBeTruthy();
                                                    // Disconnect before setting new URL.
                                                    expect(connection.disconnect()).toBeTruthy();
                                                    expect(connection.connect( useLocalUrl ? (getLocalUrlBase() + "hki_turku_td_ws.xml") : getSpecRunnerTestServerUrl(), STORED_QUERY_OBSERVATION)).toBeTruthy();
                                                    testHkiTurkuTdWindspeed(connection, function(success) {
                                                        expect(success).toBeTruthy();
                                                        // Disconnect before setting new URL.
                                                        expect(connection.disconnect()).toBeTruthy();
                                                        expect(connection.connect( useLocalUrl ? (getLocalUrlBase() + "kumpula_hki_turku_td_ws.xml") : getSpecRunnerTestServerUrl(), STORED_QUERY_OBSERVATION)).toBeTruthy();
                                                        testKumpulaHkiTurkuTdWindspeed(connection, function(success) {
                                                            expect(success).toBeTruthy();
                                                            expect(connection.disconnect()).toBeTruthy();
                                                            cb();
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    }

    // Jasmin functions:

    beforeEach(function() {
    });

    afterEach(function() {
    });

    // The tests:

    /* ======================================== */
    it("Config check", function() {
        // Notice, requires specconfig.js source file.
        var checkPassed = isOnlyLocalTests() || getSpecRunnerTestServerUrl() && getSpecRunnerTestServerUrl().indexOf("insert-your-apikey-here") === -1;
        if (!checkPassed && "undefined" !== typeof console && console) {
            console.error("ERROR: Check js/specconfig.js source! SPEC_RUNNER_TEST_SERVER_URL should contain proper API-key!");
        }
        expect(checkPassed).toBeTruthy();
    });

    /* ======================================== */
    it("Local data, Helsinki, td", function() {
        var finished = false;

        // Start the async call in the first one:
        runs(function() {
            try {
                // Create connection and connect to URL.
                var connection = new fi.fmi.metoclient.metolib.WfsConnection();
                expect(connection.connect(getLocalUrlBase() + "hki_td_missing_times.xml", STORED_QUERY_OBSERVATION)).toBeTruthy();
                // Insert components into the page when document has been loaded.
                testHkiTd(connection, function(success) {
                    expect(success).toBeTruthy();
                    expect(connection.disconnect()).toBeTruthy();
                    finished = true;
                });

            } catch (exception) {
                finished = true;
                expect(false).toBeTruthy();
            }
        });

        // Wait max secs for all the async calls to finish:
        waitsFor(function() {
            return finished;
        }, "connection operations to finish!", TEST_TIME_OUT);
    });

    // Check if test should be run for server data.
    if (!isOnlyLocalTests()) {
        /* ======================================== */
        it("Server data, Helsinki, td", function() {
            var finished = false;

            // Start the async call in the first one:
            runs(function() {
                try {
                    // Create connection and connect to URL.
                    var connection = new fi.fmi.metoclient.metolib.WfsConnection();
                    expect(connection.connect(getSpecRunnerTestServerUrl(), STORED_QUERY_OBSERVATION)).toBeTruthy();
                    // Insert components into the page when document has been loaded.
                    testHkiTd(connection, function(success) {
                        expect(success).toBeTruthy();
                        expect(connection.disconnect()).toBeTruthy();
                        finished = true;
                    });

                } catch (exception) {
                    finished = true;
                    expect(false).toBeTruthy();
                }
            });

            // Wait max secs for all the async calls to finish:
            waitsFor(function() {
                return finished;
            }, "connection operations to finish!", TEST_TIME_OUT);
        });
    }

    /* ======================================== */
    it("Local data, Helsinki, td, double times", function() {
        var finished = false;

        // Start the async call in the first one:
        runs(function() {
            try {
                // Create connection and connect to URL.
                var connection = new fi.fmi.metoclient.metolib.WfsConnection();
                expect(connection.connect(getLocalUrlBase() + "hki_td_missing_times.xml", STORED_QUERY_OBSERVATION)).toBeTruthy();
                // Insert components into the page when document has been loaded.
                testHkiTd(connection, function(success) {
                    expect(success).toBeTruthy();
                    // Retry same to test that cache works when same data is requested.
                    testHkiTd(connection, function(success) {
                        expect(success).toBeTruthy();
                        // Disconnect before setting new URL.
                        expect(connection.disconnect()).toBeTruthy();
                        finished = true;
                    });
                });

            } catch (exception) {
                finished = true;
                expect(false).toBeTruthy();
            }
        });

        // Wait max secs for all the async calls to finish:
        waitsFor(function() {
            return finished;
        }, "connection operations to finish!", TEST_TIME_OUT);
    });

    // Check if test should be run for server data.
    if (!isOnlyLocalTests()) {
        /* ======================================== */
        it("Server data, Helsinki, td, double times", function() {
            var finished = false;

            // Start the async call in the first one:
            runs(function() {
                try {
                    // Create connection and connect to URL.
                    var connection = new fi.fmi.metoclient.metolib.WfsConnection();
                    expect(connection.connect(getSpecRunnerTestServerUrl(), STORED_QUERY_OBSERVATION)).toBeTruthy();
                    // Insert components into the page when document has been loaded.
                    testHkiTd(connection, function(success) {
                        expect(success).toBeTruthy();
                        // Retry same to test that cache works when same data is requested.
                        testHkiTd(connection, function(success) {
                            expect(success).toBeTruthy();
                            // Disconnect before setting new URL.
                            expect(connection.disconnect()).toBeTruthy();
                            finished = true;
                        });
                    });

                } catch (exception) {
                    finished = true;
                    expect(false).toBeTruthy();
                }
            });

            // Wait max secs for all the async calls to finish:
            waitsFor(function() {
                return finished;
            }, "connection operations to finish!", TEST_TIME_OUT);
        });
    }

    /* ======================================== */
    it("Local data, forecast, Helsinki, temperature", function() {
        var finished = false;

        // Start the async call in the first one:
        runs(function() {
            try {
                // Create connection and connect to URL.
                var forecastConnection = new fi.fmi.metoclient.metolib.WfsConnection();
                expect(forecastConnection.connect(getLocalUrlBase() + "forecast_hki_temperature.xml", STORED_QUERY_FORECAST)).toBeTruthy();
                // Insert components into the page when document has been loaded.
                testForecastHkiTemperature(forecastConnection, function(success) {
                    expect(success).toBeTruthy();
                    // Disconnect before setting new URL.
                    expect(forecastConnection.disconnect()).toBeTruthy();
                    finished = true;
                });

            } catch (exception) {
                finished = true;
                expect(false).toBeTruthy();
            }
        });

        // Wait max secs for all the async calls to finish:
        waitsFor(function() {
            return finished;
        }, "connection operations to finish!", TEST_TIME_OUT);
    });

    // Check if test should be run for server data.
    if (!isOnlyLocalTests()) {
        /* ======================================== */
        it("Server data, forecast, Helsinki, temperature", function() {
            var finished = false;

            // Start the async call in the first one:
            runs(function() {
                try {
                    // Create connection and connect to URL.
                    var forecastConnection = new fi.fmi.metoclient.metolib.WfsConnection();
                    expect(forecastConnection.connect(getSpecRunnerTestServerUrl(), STORED_QUERY_FORECAST)).toBeTruthy();
                    // Insert components into the page when document has been loaded.
                    testForecastHkiTemperature(forecastConnection, function(success) {
                        expect(success).toBeTruthy();
                        expect(forecastConnection.disconnect()).toBeTruthy();
                        finished = true;
                    });

                } catch (exception) {
                    finished = true;
                    expect(false).toBeTruthy();
                }
            });

            // Wait max secs for all the async calls to finish:
            waitsFor(function() {
                return finished;
            }, "connection operations to finish!", TEST_TIME_OUT);
        });
    }

    /* ======================================== */
    it("Local data, forecast, Helsinki, temperature, double times", function() {
        var finished = false;

        // Start the async call in the first one:
        runs(function() {
            try {
                // Create connection and connect to URL.
                var forecastConnection = new fi.fmi.metoclient.metolib.WfsConnection();
                expect(forecastConnection.connect(getLocalUrlBase() + "forecast_hki_temperature.xml", STORED_QUERY_FORECAST)).toBeTruthy();
                // Insert components into the page when document has been loaded.
                testForecastHkiTemperature(forecastConnection, function(success) {
                    expect(success).toBeTruthy();
                    // Retry same to test that cache works when same data is requested.
                    testForecastHkiTemperature(forecastConnection, function(success) {
                        expect(success).toBeTruthy();
                        // Disconnect before setting new URL.
                        expect(forecastConnection.disconnect()).toBeTruthy();
                        finished = true;
                    });
                });

            } catch (exception) {
                finished = true;
                expect(false).toBeTruthy();
            }
        });

        // Wait max secs for all the async calls to finish:
        waitsFor(function() {
            return finished;
        }, "connection operations to finish!", TEST_TIME_OUT);
    });

    // Check if test should be run for server data.
    if (!isOnlyLocalTests()) {
        /* ======================================== */
        it("Server data, forecast, Helsinki, temperature, double times", function() {
            var finished = false;

            // Start the async call in the first one:
            runs(function() {
                try {
                    // Create connection and connect to URL.
                    var forecastConnection = new fi.fmi.metoclient.metolib.WfsConnection();
                    expect(forecastConnection.connect(getSpecRunnerTestServerUrl(), STORED_QUERY_FORECAST)).toBeTruthy();
                    // Insert components into the page when document has been loaded.
                    testForecastHkiTemperature(forecastConnection, function(success) {
                        expect(success).toBeTruthy();
                        // Retry same to test that cache works when same data is requested.
                        testForecastHkiTemperature(forecastConnection, function(success) {
                            expect(success).toBeTruthy();
                            // Disconnect before setting new URL.
                            expect(forecastConnection.disconnect()).toBeTruthy();
                            finished = true;
                        });
                    });

                } catch (exception) {
                    finished = true;
                    expect(false).toBeTruthy();
                }
            });

            // Wait max secs for all the async calls to finish:
            waitsFor(function() {
                return finished;
            }, "connection operations to finish!", TEST_TIME_OUT);
        });
    }

    /* ======================================== */
    it("Local data, forecast, Helsinki, windspeedms, double times", function() {
        var finished = false;

        // Start the async call in the first one:
        runs(function() {
            try {
                // Create connection and connect to URL.
                var forecastConnection = new fi.fmi.metoclient.metolib.WfsConnection();
                expect(forecastConnection.connect(getLocalUrlBase() + "forecast_hki_windspeedms.xml", STORED_QUERY_FORECAST)).toBeTruthy();
                // Insert components into the page when document has been loaded.
                testForecastHkiWindspeed(forecastConnection, function(success) {
                    expect(success).toBeTruthy();
                    // Retry same to test that cache works when same data is requested.
                    testForecastHkiWindspeed(forecastConnection, function(success) {
                        expect(success).toBeTruthy();
                        // Disconnect before setting new URL.
                        expect(forecastConnection.disconnect()).toBeTruthy();
                        finished = true;
                    });
                });

            } catch (exception) {
                finished = true;
                expect(false).toBeTruthy();
            }
        });

        // Wait max secs for all the async calls to finish:
        waitsFor(function() {
            return finished;
        }, "connection operations to finish!", TEST_TIME_OUT);
    });

    // Check if test should be run for server data.
    if (!isOnlyLocalTests()) {
        /* ======================================== */
        it("Server data, forecast, Helsinki, windspeedms, double times", function() {
            var finished = false;

            // Start the async call in the first one:
            runs(function() {
                try {
                    // Create connection and connect to URL.
                    var forecastConnection = new fi.fmi.metoclient.metolib.WfsConnection();
                    expect(forecastConnection.connect(getSpecRunnerTestServerUrl(), STORED_QUERY_FORECAST)).toBeTruthy();
                    // Insert components into the page when document has been loaded.
                    testForecastHkiWindspeed(forecastConnection, function(success) {
                        expect(success).toBeTruthy();
                        // Retry same to test that cache works when same data is requested.
                        testForecastHkiWindspeed(forecastConnection, function(success) {
                            expect(success).toBeTruthy();
                            // Disconnect before setting new URL.
                            expect(forecastConnection.disconnect()).toBeTruthy();
                            finished = true;
                        });
                    });

                } catch (exception) {
                    finished = true;
                    expect(false).toBeTruthy();
                }
            });

            // Wait max secs for all the async calls to finish:
            waitsFor(function() {
                return finished;
            }, "connection operations to finish!", TEST_TIME_OUT);
        });
    }

    /* ======================================== */
    it("Local data, forecast, Helsinki, temperature, windspeedms, double times", function() {
        var finished = false;

        // Start the async call in the first one:
        runs(function() {
            try {
                var forecastConnection = new fi.fmi.metoclient.metolib.WfsConnection();
                expect(forecastConnection.connect(getLocalUrlBase() + "forecast_hki_temperature_windspeedms.xml", STORED_QUERY_FORECAST)).toBeTruthy();
                // Insert components into the page when document has been loaded.
                testForecastHkiTemperatureWindspeed(forecastConnection, function(success) {
                    // Retry same to test that cache works when same data is requested.
                    testForecastHkiTemperatureWindspeed(forecastConnection, function(success) {
                        expect(success).toBeTruthy();
                        // Disconnect before setting new URL.
                        expect(forecastConnection.disconnect()).toBeTruthy();
                        finished = true;
                    });
                    finished = true;
                });

            } catch (exception) {
                finished = true;
                expect(false).toBeTruthy();
            }
        });

        // Wait max secs for all the async calls to finish:
        waitsFor(function() {
            return finished;
        }, "connection operations to finish!", TEST_TIME_OUT);
    });

    // Check if test should be run for server data.
    if (!isOnlyLocalTests()) {
        /* ======================================== */
        it("Server data, forecast, Helsinki, temperature, windspeedms, double times", function() {
            var finished = false;

            // Start the async call in the first one:
            runs(function() {
                try {
                    var forecastConnection = new fi.fmi.metoclient.metolib.WfsConnection();
                    expect(forecastConnection.connect(getSpecRunnerTestServerUrl(), STORED_QUERY_FORECAST)).toBeTruthy();
                    // Insert components into the page when document has been loaded.
                    testForecastHkiTemperatureWindspeed(forecastConnection, function(success) {
                        // Retry same to test that cache works when same data is requested.
                        testForecastHkiTemperatureWindspeed(forecastConnection, function(success) {
                            expect(success).toBeTruthy();
                            // Disconnect before setting new URL.
                            expect(forecastConnection.disconnect()).toBeTruthy();
                            finished = true;
                        });
                    });

                } catch (exception) {
                    finished = true;
                    expect(false).toBeTruthy();
                }
            });

            // Wait max secs for all the async calls to finish:
            waitsFor(function() {
                return finished;
            }, "connection operations to finish!", TEST_TIME_OUT);
        });
    }

    /* ======================================== */
    it("Local data, spatial, td, ws_10min, double times", function() {
        var finished = false;

        // Start the async call in the first one:
        runs(function() {
            try {
                var connection = new fi.fmi.metoclient.metolib.WfsConnection();
                expect(connection.connect(getLocalUrlBase() + "spatial_bbox_td_ws.xml", STORED_QUERY_OBSERVATION)).toBeTruthy();
                // Insert components into the page when document has been loaded.
                testSpatialTdWindspeed(connection, function(success) {
                    expect(success).toBeTruthy();
                    // Retry same to test that cache works when same data is requested.
                    testSpatialTdWindspeed(connection, function(success) {
                        expect(success).toBeTruthy();
                        // Disconnect before setting new URL.
                        expect(connection.disconnect()).toBeTruthy();
                        finished = true;
                    });
                });

            } catch (exception) {
                finished = true;
                expect(false).toBeTruthy();
            }
        });

        // Wait max secs for all the async calls to finish:
        waitsFor(function() {
            return finished;
        }, "connection operations to finish!", TEST_TIME_OUT);
    });

    // Check if test should be run for server data.
    if (!isOnlyLocalTests()) {
        /* ======================================== */
        it("Server data, spatial, td, ws_10min, double times", function() {
            var finished = false;

            // Start the async call in the first one:
            runs(function() {
                try {
                    var connection = new fi.fmi.metoclient.metolib.WfsConnection();
                    expect(connection.connect(getSpecRunnerTestServerUrl(), STORED_QUERY_OBSERVATION)).toBeTruthy();
                    // Insert components into the page when document has been loaded.
                    testSpatialTdWindspeed(connection, function(success) {
                        expect(success).toBeTruthy();
                        // Retry same to test that cache works when same data is requested.
                        testSpatialTdWindspeed(connection, function(success) {
                            expect(success).toBeTruthy();
                            // Disconnect before setting new URL.
                            expect(connection.disconnect()).toBeTruthy();
                            finished = true;
                        });
                    });

                } catch (exception) {
                    finished = true;
                    expect(false).toBeTruthy();
                }
            });

            // Wait max secs for all the async calls to finish:
            waitsFor(function() {
                return finished;
            }, "connection operations to finish!", TEST_TIME_OUT);
        });
    }

    /* ======================================== */
    it("Local data, Kumpula Helsinki, td", function() {
        var finished = false;

        // Start the async call in the first one:
        runs(function() {
            try {
                var connection = new fi.fmi.metoclient.metolib.WfsConnection();
                expect(connection.connect(getLocalUrlBase() + "kumpula_hki_td.xml", STORED_QUERY_OBSERVATION)).toBeTruthy();
                testKumpulaHkiTd(connection, function(success) {
                    expect(success).toBeTruthy();
                    // Disconnect before setting new URL.
                    expect(connection.disconnect()).toBeTruthy();
                    finished = true;
                });

            } catch (exception) {
                finished = true;
                expect(false).toBeTruthy();
            }
        });

        // Wait max secs for all the async calls to finish:
        waitsFor(function() {
            return finished;
        }, "connection operations to finish!", TEST_TIME_OUT);
    });

    // Check if test should be run for server data.
    if (!isOnlyLocalTests()) {
        /* ======================================== */
        it("Server data, Kumpula Helsinki, td", function() {
            var finished = false;

            // Start the async call in the first one:
            runs(function() {
                try {
                    var connection = new fi.fmi.metoclient.metolib.WfsConnection();
                    expect(connection.connect(getSpecRunnerTestServerUrl(), STORED_QUERY_OBSERVATION)).toBeTruthy();
                    testKumpulaHkiTd(connection, function(success) {
                        expect(success).toBeTruthy();
                        // Disconnect before setting new URL.
                        expect(connection.disconnect()).toBeTruthy();
                        finished = true;
                    });

                } catch (exception) {
                    finished = true;
                    expect(false).toBeTruthy();
                }
            });

            // Wait max secs for all the async calls to finish:
            waitsFor(function() {
                return finished;
            }, "connection operations to finish!", TEST_TIME_OUT);
        });
    }

    /* ======================================== */
    it("Local data, Helsinki, Turku, td, ws_10min", function() {
        var finished = false;

        // Start the async call in the first one:
        runs(function() {
            try {
                var connection = new fi.fmi.metoclient.metolib.WfsConnection();
                expect(connection.connect(getLocalUrlBase() + "hki_turku_td_ws.xml", STORED_QUERY_OBSERVATION)).toBeTruthy();
                testHkiTurkuTdWindspeed(connection, function(success) {
                    expect(success).toBeTruthy();
                    // Disconnect before setting new URL.
                    expect(connection.disconnect()).toBeTruthy();
                    finished = true;
                });

            } catch (exception) {
                finished = true;
                expect(false).toBeTruthy();
            }
        });

        // Wait max secs for all the async calls to finish:
        waitsFor(function() {
            return finished;
        }, "connection operations to finish!", TEST_TIME_OUT);
    });

    // Check if test should be run for server data.
    if (!isOnlyLocalTests()) {
        /* ======================================== */
        it("Server data, Helsinki, Turku, td, ws_10min", function() {
            var finished = false;

            // Start the async call in the first one:
            runs(function() {
                try {
                    var connection = new fi.fmi.metoclient.metolib.WfsConnection();
                    expect(connection.connect(getSpecRunnerTestServerUrl(), STORED_QUERY_OBSERVATION)).toBeTruthy();
                    testHkiTurkuTdWindspeed(connection, function(success) {
                        expect(success).toBeTruthy();
                        // Disconnect before setting new URL.
                        expect(connection.disconnect()).toBeTruthy();
                        finished = true;
                    });

                } catch (exception) {
                    finished = true;
                    expect(false).toBeTruthy();
                }
            });

            // Wait max secs for all the async calls to finish:
            waitsFor(function() {
                return finished;
            }, "connection operations to finish!", TEST_TIME_OUT);
        });
    }

    /* ======================================== */
    it("Local data, Kumpula Helsinki, Turku, td, ws_10min", function() {
        var finished = false;

        // Start the async call in the first one:
        runs(function() {
            try {
                var connection = new fi.fmi.metoclient.metolib.WfsConnection();
                expect(connection.connect(getLocalUrlBase() + "kumpula_hki_turku_td_ws.xml", STORED_QUERY_OBSERVATION)).toBeTruthy();
                testKumpulaHkiTurkuTdWindspeed(connection, function(success) {
                    expect(success).toBeTruthy();
                    expect(connection.disconnect()).toBeTruthy();
                    finished = true;
                });

            } catch (exception) {
                finished = true;
                expect(false).toBeTruthy();
            }
        });

        // Wait max secs for all the async calls to finish:
        waitsFor(function() {
            return finished;
        }, "connection operations to finish!", TEST_TIME_OUT);
    });

    // Check if test should be run for server data.
    if (!isOnlyLocalTests()) {
        /* ======================================== */
        it("Server data, Kumpula Helsinki, Turku, td, ws_10min", function() {
            var finished = false;

            // Start the async call in the first one:
            runs(function() {
                try {
                    var connection = new fi.fmi.metoclient.metolib.WfsConnection();
                    expect(connection.connect(getSpecRunnerTestServerUrl(), STORED_QUERY_OBSERVATION)).toBeTruthy();
                    testKumpulaHkiTurkuTdWindspeed(connection, function(success) {
                        expect(success).toBeTruthy();
                        expect(connection.disconnect()).toBeTruthy();
                        finished = true;
                    });

                } catch (exception) {
                    finished = true;
                    expect(false).toBeTruthy();
                }
            });

            // Wait max secs for all the async calls to finish:
            waitsFor(function() {
                return finished;
            }, "connection operations to finish!", TEST_TIME_OUT);
        });
    }

    /* ======================================== */
    it("Local data, forecast, geoid Helsinki, temperature", function() {
        var finished = false;

        // Start the async call in the first one:
        runs(function() {
            try {
                var connection = new fi.fmi.metoclient.metolib.WfsConnection();
                expect(connection.connect(getLocalUrlBase() + "forecast_geoid_hki_temperature.xml", STORED_QUERY_FORECAST)).toBeTruthy();
                testForecastGeoidHelsinkiTemperature(connection, function(success) {
                    expect(success).toBeTruthy();
                    expect(connection.disconnect()).toBeTruthy();
                    finished = true;
                });

            } catch (exception) {
                finished = true;
                expect(false).toBeTruthy();
            }
        });

        // Wait max secs for all the async calls to finish:
        waitsFor(function() {
            return finished;
        }, "connection operations to finish!", TEST_TIME_OUT);
    });

    // Check if test should be run for server data.
    if (!isOnlyLocalTests()) {
        /* ======================================== */
        it("Server data, forecast, geoid Helsinki, temperature", function() {
            var finished = false;

            // Start the async call in the first one:
            runs(function() {
                try {
                    var connection = new fi.fmi.metoclient.metolib.WfsConnection();
                    expect(connection.connect(getSpecRunnerTestServerUrl(), STORED_QUERY_FORECAST)).toBeTruthy();
                    testForecastGeoidHelsinkiTemperature(connection, function(success) {
                        expect(success).toBeTruthy();
                        expect(connection.disconnect()).toBeTruthy();
                        finished = true;
                    });

                } catch (exception) {
                    finished = true;
                    expect(false).toBeTruthy();
                }
            });

            // Wait max secs for all the async calls to finish:
            waitsFor(function() {
                return finished;
            }, "connection operations to finish!", TEST_TIME_OUT);
        });
    }

    /* ======================================== */
    it("Local data, forecast, geoid Helsinki, geoid Kumpula, temperature", function() {
        var finished = false;

        // Start the async call in the first one:
        runs(function() {
            try {
                var connection = new fi.fmi.metoclient.metolib.WfsConnection();
                expect(connection.connect(getLocalUrlBase() + "forecast_geoid_hki_geoid_kumpula_temperature.xml", STORED_QUERY_FORECAST)).toBeTruthy();
                testForecastGeoidHelsinkiGeoidKumpulaTemperature(connection, function(success) {
                    expect(success).toBeTruthy();
                    expect(connection.disconnect()).toBeTruthy();
                    finished = true;
                });

            } catch (exception) {
                finished = true;
                expect(false).toBeTruthy();
            }
        });

        // Wait max secs for all the async calls to finish:
        waitsFor(function() {
            return finished;
        }, "connection operations to finish!", TEST_TIME_OUT);
    });

    // Check if test should be run for server data.
    if (!isOnlyLocalTests()) {
        /* ======================================== */
        it("Server data, forecast, geoid Helsinki, geoid Kumpula, temperature", function() {
            var finished = false;

            // Start the async call in the first one:
            runs(function() {
                try {
                    var connection = new fi.fmi.metoclient.metolib.WfsConnection();
                    expect(connection.connect(getSpecRunnerTestServerUrl(), STORED_QUERY_FORECAST)).toBeTruthy();
                    testForecastGeoidHelsinkiGeoidKumpulaTemperature(connection, function(success) {
                        expect(success).toBeTruthy();
                        expect(connection.disconnect()).toBeTruthy();
                        finished = true;
                    });

                } catch (exception) {
                    finished = true;
                    expect(false).toBeTruthy();
                }
            });

            // Wait max secs for all the async calls to finish:
            waitsFor(function() {
                return finished;
            }, "connection operations to finish!", TEST_TIME_OUT);
        });
    }

    /* ======================================== */
    it("Local data, wmo Kumpula, td", function() {
        var finished = false;

        // Start the async call in the first one:
        runs(function() {
            try {
                var connection = new fi.fmi.metoclient.metolib.WfsConnection();
                expect(connection.connect(getLocalUrlBase() + "wmo_kumpula_td.xml", STORED_QUERY_OBSERVATION)).toBeTruthy();
                testWmoKumpulaTd(connection, function(success) {
                    expect(success).toBeTruthy();
                    expect(connection.disconnect()).toBeTruthy();
                    finished = true;
                });

            } catch (exception) {
                finished = true;
                expect(false).toBeTruthy();
            }
        });

        // Wait max secs for all the async calls to finish:
        waitsFor(function() {
            return finished;
        }, "connection operations to finish!", TEST_TIME_OUT);
    });

    // Check if test should be run for server data.
    if (!isOnlyLocalTests()) {
        /* ======================================== */
        it("Server data, wmo Kumpula, td", function() {
            var finished = false;

            // Start the async call in the first one:
            runs(function() {
                try {
                    var connection = new fi.fmi.metoclient.metolib.WfsConnection();
                    expect(connection.connect(getSpecRunnerTestServerUrl(), STORED_QUERY_OBSERVATION)).toBeTruthy();
                    testWmoKumpulaTd(connection, function(success) {
                        expect(success).toBeTruthy();
                        expect(connection.disconnect()).toBeTruthy();
                        finished = true;
                    });

                } catch (exception) {
                    finished = true;
                    expect(false).toBeTruthy();
                }
            });

            // Wait max secs for all the async calls to finish:
            waitsFor(function() {
                return finished;
            }, "connection operations to finish!", TEST_TIME_OUT);
        });
    }

    /* ======================================== */
    it("Local data, wmo Helsinki, wmo Kumpula, td", function() {
        var finished = false;

        // Start the async call in the first one:
        runs(function() {
            try {
                var connection = new fi.fmi.metoclient.metolib.WfsConnection();
                expect(connection.connect(getLocalUrlBase() + "wmo_hki_wmo_kumpula_td.xml", STORED_QUERY_OBSERVATION)).toBeTruthy();
                testWmoHelsinkiWmoKumpulaTd(connection, function(success) {
                    expect(success).toBeTruthy();
                    expect(connection.disconnect()).toBeTruthy();
                    finished = true;
                });

            } catch (exception) {
                finished = true;
                expect(false).toBeTruthy();
            }
        });

        // Wait max secs for all the async calls to finish:
        waitsFor(function() {
            return finished;
        }, "connection operations to finish!", TEST_TIME_OUT);
    });

    // Check if test should be run for server data.
    if (!isOnlyLocalTests()) {
        /* ======================================== */
        it("Server data, wmo Helsinki, wmo Kumpula, td", function() {
            var finished = false;

            // Start the async call in the first one:
            runs(function() {
                try {
                    var connection = new fi.fmi.metoclient.metolib.WfsConnection();
                    expect(connection.connect(getSpecRunnerTestServerUrl(), STORED_QUERY_OBSERVATION)).toBeTruthy();
                    testWmoHelsinkiWmoKumpulaTd(connection, function(success) {
                        expect(success).toBeTruthy();
                        expect(connection.disconnect()).toBeTruthy();
                        finished = true;
                    });

                } catch (exception) {
                    finished = true;
                    expect(false).toBeTruthy();
                }
            });

            // Wait max secs for all the async calls to finish:
            waitsFor(function() {
                return finished;
            }, "connection operations to finish!", TEST_TIME_OUT);
        });
    }

    /* ======================================== */
    it("Local data, fmisid Kumpula, td", function() {
        var finished = false;

        // Start the async call in the first one:
        runs(function() {
            try {
                var connection = new fi.fmi.metoclient.metolib.WfsConnection();
                expect(connection.connect(getLocalUrlBase() + "fmisid_kumpula_td.xml", STORED_QUERY_OBSERVATION)).toBeTruthy();
                testFmisidKumpulaTd(connection, function(success) {
                    expect(success).toBeTruthy();
                    expect(connection.disconnect()).toBeTruthy();
                    finished = true;
                });

            } catch (exception) {
                finished = true;
                expect(false).toBeTruthy();
            }
        });

        // Wait max secs for all the async calls to finish:
        waitsFor(function() {
            return finished;
        }, "connection operations to finish!", TEST_TIME_OUT);
    });

    // Check if test should be run for server data.
    if (!isOnlyLocalTests()) {
        /* ======================================== */
        it("Server data, fmisid Kumpula, td", function() {
            var finished = false;

            // Start the async call in the first one:
            runs(function() {
                try {
                    var connection = new fi.fmi.metoclient.metolib.WfsConnection();
                    expect(connection.connect(getSpecRunnerTestServerUrl(), STORED_QUERY_OBSERVATION)).toBeTruthy();
                    testFmisidKumpulaTd(connection, function(success) {
                        expect(success).toBeTruthy();
                        expect(connection.disconnect()).toBeTruthy();
                        finished = true;
                    });

                } catch (exception) {
                    finished = true;
                    expect(false).toBeTruthy();
                }
            });

            // Wait max secs for all the async calls to finish:
            waitsFor(function() {
                return finished;
            }, "connection operations to finish!", TEST_TIME_OUT);
        });
    }

    /* ======================================== */
    it("Local data, fmisid Helsinki, fmisid Kumpula, td", function() {
        var finished = false;

        // Start the async call in the first one:
        runs(function() {
            try {
                var connection = new fi.fmi.metoclient.metolib.WfsConnection();
                expect(connection.connect(getLocalUrlBase() + "fmisid_hki_fmisid_kumpula_td.xml", STORED_QUERY_OBSERVATION)).toBeTruthy();
                testFmisidHelsinkiFmisidKumpulaTd(connection, function(success) {
                    expect(success).toBeTruthy();
                    expect(connection.disconnect()).toBeTruthy();
                    finished = true;
                });

            } catch (exception) {
                finished = true;
                expect(false).toBeTruthy();
            }
        });

        // Wait max secs for all the async calls to finish:
        waitsFor(function() {
            return finished;
        }, "connection operations to finish!", TEST_TIME_OUT);
    });

    // Check if test should be run for server data.
    if (!isOnlyLocalTests()) {
        /* ======================================== */
        it("Server data, fmisid Helsinki, fmisid Kumpula, td", function() {
            var finished = false;

            // Start the async call in the first one:
            runs(function() {
                try {
                    var connection = new fi.fmi.metoclient.metolib.WfsConnection();
                    expect(connection.connect(getSpecRunnerTestServerUrl(), STORED_QUERY_OBSERVATION)).toBeTruthy();
                    testFmisidHelsinkiFmisidKumpulaTd(connection, function(success) {
                        expect(success).toBeTruthy();
                        expect(connection.disconnect()).toBeTruthy();
                        finished = true;
                    });

                } catch (exception) {
                    finished = true;
                    expect(false).toBeTruthy();
                }
            });

            // Wait max secs for all the async calls to finish:
            waitsFor(function() {
                return finished;
            }, "connection operations to finish!", TEST_TIME_OUT);
        });
    }

    /* ======================================== */
    it("Local data, Helsinki, Kumpula (wmo, queryExtension), td", function() {
        var finished = false;

        // Start the async call in the first one:
        runs(function() {
            try {
                var connection = new fi.fmi.metoclient.metolib.WfsConnection();
                expect(connection.connect(getLocalUrlBase() + "hki_query_extension_wmo_kumpula_td.xml", STORED_QUERY_OBSERVATION)).toBeTruthy();
                testHkiQueryExtensionWmoKumpulaTd(connection, function(success) {
                    expect(success).toBeTruthy();
                    expect(connection.disconnect()).toBeTruthy();
                    finished = true;
                });

            } catch (exception) {
                finished = true;
                expect(false).toBeTruthy();
            }
        });

        // Wait max secs for all the async calls to finish:
        waitsFor(function() {
            return finished;
        }, "connection operations to finish!", TEST_TIME_OUT);
    });

    // Check if test should be run for server data.
    if (!isOnlyLocalTests()) {
        /* ======================================== */
        it("Server data, Helsinki, Kumpula (wmo, queryExtension), td", function() {
            var finished = false;

            // Start the async call in the first one:
            runs(function() {
                try {
                    var connection = new fi.fmi.metoclient.metolib.WfsConnection();
                    expect(connection.connect(getSpecRunnerTestServerUrl(), STORED_QUERY_OBSERVATION)).toBeTruthy();
                    testHkiQueryExtensionWmoKumpulaTd(connection, function(success) {
                        expect(success).toBeTruthy();
                        expect(connection.disconnect()).toBeTruthy();
                        finished = true;
                    });

                } catch (exception) {
                    finished = true;
                    expect(false).toBeTruthy();
                }
            });

            // Wait max secs for all the async calls to finish:
            waitsFor(function() {
                return finished;
            }, "connection operations to finish!", TEST_TIME_OUT);
        });
    }

    /* ======================================== */
    it("Local data, full test flow", function() {
        var finished = false;

        // Start the async call in the first one:
        runs(function() {
            try {
                runFullTest(true, function() {
                    finished = true;
                });

            } catch (exception) {
                finished = true;
                expect(false).toBeTruthy();
            }
        });

        // Wait max secs for all the async calls to finish:
        waitsFor(function() {
            return finished;
        }, "connection operations to finish!", TEST_TIME_OUT_LONG);
    });

    // Check if test should be run for server data.
    if (!isOnlyLocalTests()) {
        /* ======================================== */
        it("Server data, full test flow", function() {
            var finished = false;

            // Start the async call in the first one:
            runs(function() {
                try {
                    runFullTest(false, function() {
                        finished = true;
                    });

                } catch (exception) {
                    finished = true;
                    expect(false).toBeTruthy();
                }
            });

            // Wait max secs for all the async calls to finish:
            waitsFor(function() {
                return finished;
            }, "connection operations to finish!", TEST_TIME_OUT_LONG);
        });
    }

    /* ======================================== */
    it("Local data, error response", function() {
        var finished = false;

        // Start the async call in the first one:
        runs(function() {
            try {
                var errorConnection = new fi.fmi.metoclient.metolib.WfsConnection();
                // Notice, jQuery.ajax may not parse error response correctly
                // if parser JS file domain is different than in given URL.
                // Therefore, use local also for the testing here.
                expect(errorConnection.connect(getLocalCommonUrlBase() + "error_response.xml", STORED_QUERY_OBSERVATION)).toBeTruthy();
                testErrorResponse(errorConnection, function(success) {
                    expect(success).toBeTruthy();
                    expect(errorConnection.disconnect()).toBeTruthy();
                    finished = true;
                });

            } catch (exception) {
                finished = true;
                expect(false).toBeTruthy();
            }
        });

        // Wait max secs for all the async calls to finish:
        waitsFor(function() {
            return finished;
        }, "connection operation to finish!", TEST_TIME_OUT);
    });

});
