if(typeof Math.imul == "undefined" || (Math.imul(0xffffffff,5) == 0)) {
    Math.imul = function (a, b) {
        var ah  = (a >>> 16) & 0xffff;
        var al = a & 0xffff;
        var bh  = (b >>> 16) & 0xffff;
        var bl = b & 0xffff;
        // the shift by 0 fixes the sign on the high part
        // the final |0 converts the unsigned value into a signed value
        return ((al * bl) + (((ah * bl + al * bh) << 16) >>> 0)|0);
    }
}

// Strict mode for whole file.
            ;

/**
 * This software may be freely distributed and used under the following MIT license:
 *
 * Copyright (c) 2013 Finnish Meteorological Institute
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this
 * software and associated documentation files (the "Software"), to deal in the
 * Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
 * OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

// Strict mode for whole file.
// "use strict";

// Requires lodash
if ("undefined" === typeof _ || !_) {
    throw "ERROR: Lodash is required for fi.fmi.metoclient.metolib.Utils!";
}

// "Package" definitions
var fi = fi || {};
fi.fmi = fi.fmi || {};
fi.fmi.metoclient = fi.fmi.metoclient || {};
fi.fmi.metoclient.metolib = fi.fmi.metoclient.metolib || {};

/**
 * Utils object provides API for general utility functions.
 *
 * There is no need to use {new} to create an instance of Utils.
 * Instead, use directly API functions provided by the object.
 */
fi.fmi.metoclient.metolib.Utils = (function() {

    /**
     * Avoid console errors in browsers that lack a console.
     *
     * See: https://github.com/h5bp/html5-boilerplate/blob/master/js/plugins.js
     */
    (function() {
        var method;
        var noop = function() {
        };
        var methods = ['assert', 'clear', 'count', 'debug', 'dir', 'dirxml', 'error', 'exception', 'group', 'groupCollapsed', 'groupEnd', 'info', 'log', 'markTimeline', 'profile', 'profileEnd', 'table', 'time', 'timeEnd', 'timeStamp', 'trace', 'warn'];
        var length = methods.length;
        var console = (window.console = window.console || {});

        while (length--) {
            method = methods[length];

            // Only stub undefined methods.
            if (!console[method]) {
                console[method] = noop;
            }
        }
    })();

    /**
     * Function to set jQuery.browser information.
     * See, http://stackoverflow.com/questions/14545023/jquery-1-9-browser-detection
     *
     * This function is called during the construction of this sigleton instance to make sure
     * browser information is available.
     */
    (function() {
        if (!jQuery.browser) {
            var matched, browser;

            // Use of jQuery.browser is frowned upon.
            // More details: http://api.jquery.com/jQuery.browser
            // jQuery.uaMatch maintained for back-compat
            jQuery.uaMatch = function(ua) {
                ua = ua.toLowerCase();

                var match = /(chrome)[ \/]([\w.]+)/.exec(ua) || /(webkit)[ \/]([\w.]+)/.exec(ua) || /(opera)(?:.*version|)[ \/]([\w.]+)/.exec(ua) || /(msie) ([\w.]+)/.exec(ua) || ua.indexOf("compatible") < 0 && /(mozilla)(?:.*? rv:([\w.]+)|)/.exec(ua) || [];

                return {
                    browser : match[1] || "",
                    version : match[2] || "0"
                };
            };

            matched = jQuery.uaMatch(navigator.userAgent);
            browser = {};

            if (matched.browser) {
                browser[matched.browser] = true;
                browser.version = matched.version;
            }

            // Chrome is Webkit, but Webkit is also Safari.
            if (browser.chrome) {
                browser.webkit = true;

            } else if (browser.webkit) {
                browser.safari = true;
            }

            jQuery.browser = browser;
        }
    })();

    /**
     * This function is called during the construction of this sigleton
     * instance to provide at least a limited support for cross-domain request (XDR)
     * when jQuery.ajax is used for IE 8 and 9.
     *
     * IE 6, 7, 8, and 9 do not support XHR2 CORS.
     * It is not possible to make generalized cross-domain requests in these browsers.
     * IE 8, 9 support an ActiveX control called XDomainRequest that only allows limited
     * cross-domain requests compared to XHR2 CORS. IE 10 supports XHR2 CORS.
     *
     * For more information about this, see following links:
     *    https://github.com/jaubourg/ajaxHooks/blob/master/src/xdr.js
     *    http://stackoverflow.com/questions/14309037/ajax-no-transport-error-in-ie-8-9
     *    http://bugs.jquery.com/ticket/8283#comment:43
     *    http://bugs.jquery.com/ticket/8283#comment:44
     *    http://bugs.jquery.com/ticket/8283#comment:45
     *
     * jQuery does not include XDomainRequest support because there are numerous
     * and serious limitations to XDR. Many reasonable $.ajax requests would fail,
     * including any cross-domain request made on IE6 and IE7 which are otherwise
     * supported by jQuery. Developers would be confused that their content types
     * and headers were ignored, or that IE8 users could not use XDR if the user was
     * using InPrivate browsing for example.
     *
     * Even the crippled XDR can be useful if it is used by a knowledgeable developer.
     * A jQuery team member has made an XDR ajax transport available. You must be aware
     * of XDR limitations by reading this blog post or ask someone who has dealt with
     * XDR problems and can mentor you through its successful use.
     *
     * For further help and other solutions, ask on the jQuery Forum, StackOverflow,
     * or search "jQuery xdr transport".
     */
    (function() {
        if (window.XDomainRequest) {
            jQuery.ajaxTransport(function(s) {
                if (s.crossDomain && s.async) {
                    if (s.timeout) {
                        s.xdrTimeout = s.timeout;
                        delete s.timeout;
                    }
                    var xdr;
                    return {
                        send : function(_, complete) {
                            function callback(status, statusText, responses, responseHeaders) {
                                xdr.onload = xdr.onerror = xdr.ontimeout = jQuery.noop;
                                xdr = undefined;
                                complete(status, statusText, responses, responseHeaders);
                            }

                            xdr = new XDomainRequest();
                            xdr.onload = function() {
                                callback(200, "OK", {
                                    text : xdr.responseText
                                }, "Content-Type: " + xdr.contentType);
                            };
                            xdr.onerror = function() {
                                callback(404, "Not Found");
                            };
                            xdr.onprogress = jQuery.noop;
                            xdr.ontimeout = function() {
                                callback(0, "timeout");
                            };
                            xdr.timeout = s.xdrTimeout || Number.MAX_VALUE;
                            xdr.open(s.type, s.url);
                            xdr.send((s.hasContent && s.data ) || null);
                        },
                        abort : function() {
                            if (xdr) {
                                xdr.onerror = jQuery.noop;
                                xdr.abort();
                            }
                        }
                    };
                }
            });
        }
    })();

    /**
     * Function to set {toISOString} for {Date} objects if an older browser does not support it natively.
     *
     * See, http://stackoverflow.com/questions/11440569/converting-a-normal-date-to-iso-8601-format
     *
     * This function is called during the construction of this sigleton instance to make sure
     * function is available.
     */
    (function() {
        // Override only if native toISOString is not defined.
        if (!Date.prototype.toISOString) {
            // Rely on JSON serialization for dates because it matches
            // the ISO standard. However, check if JSON serializer is present
            // on a page and define own .toJSON method only if necessary.
            if (!Date.prototype.toJSON) {
                Date.prototype.toJSON = function(key) {
                    var pad = function(n) {
                        // Format integers to have at least two digits.
                        return n < 10 ? '0' + n : n;
                    };

                    return this.getUTCFullYear() + '-' + pad(this.getUTCMonth() + 1) + '-' + pad(this.getUTCDate()) + 'T' + pad(this.getUTCHours()) + ':' + pad(this.getUTCMinutes()) + ':' + pad(this.getUTCSeconds()) + 'Z';
                };
            }

            Date.prototype.toISOString = Date.prototype.toJSON;
        }
    })();

    /**
     * See {@link #objectLength(object)} API function for description.
     */
    function objectLength(object) {
        var length = 0;
        if (object) {
            if (_.isFunction(Object.keys)) {
                // Notice, this only works in a new browsers such as IE9+.
                // If support for older browsers is required, then implement
                // counter by looping the keys of the object.
                length = Object.keys(object).length;

            } else {
                for (var key in object) {
                    if (object.hasOwnProperty(key)) {
                        // Increase counter because property was found.
                        ++length;
                    }
                }
            }
        }
        return length;
    }

    /**
     * Return Utils API as an object.
     */
    return {

        /**
         * Utils function to get the property count of the object.
         *
         * @param {Object} object Object whose properties are counted.
         *                        May be {undefined} or {null}.
         *                        Then, zero is returned for length.
         * @return {int} Property count.
         */
        objectLength : function(object) {
            return objectLength(object);
        },

        /**
         * Encodes the given string if necessary.
         *
         * Like JavaScript encodeURIComponent(uri) but returns {undefined} or
         * {null} if parameter was one of them.
         *
         * @param {String} str String to be encoded.
         *                     May be {undefined} or {null}.
         * @return {String} Encoded string if encoding was needed or original string.
         *                  May return {undefined} or {null} if parameter
         *                  was one of them.
         */
        encodeUriComponent : function(str) {
            return str ? encodeURIComponent(str) : str;
        },

        /**
         * Encodes the given string if necessary.
         *
         * Like JavaScript encodeURI(uri) but returns {undefined} or
         * {null} if parameter was one of them.
         *
         * @param {String} str String to be encoded.
         *                     May be {undefined} or {null}.
         * @return {String} Encoded string if encoding was needed or original string.
         *                  May return {undefined} or {null} if parameter
         *                  was one of them.
         */
        encodeUri : function(str) {
            return str ? encodeURI(str) : str;
        },

        /**
         * Sort given string array in ascending way.
         *
         * @param {[]} strings Array whose string content will be sorted.
         *                     May be {undefined} or {null}.
         * @param {boolean} createCopy If {true}, content will be copied into a new array
         *                             and the copy will be sorted. Else, given {strings} array
         *                             is sorted directly.
         * @return {[]} Sorted array. Notice, this is a shallow copy of the original if {createCopy} is {true}.
         *              May be {undefined} or {null}.
         */
        sortStringArray : function(strings, createCopy) {
            // Sorted array.
            var sorted;
            if (strings && _.isArray(strings)) {
                if (createCopy) {
                    // Create shallow copy of the array.
                    sorted = [];
                    _.each(strings, function(element) {
                        sorted.push(element);
                    });

                } else {
                    // Use given array for sort.
                    sorted = strings;
                }

                sorted.sort(function(a, b) {
                    // Default return value (no sorting).
                    var ret = 0;
                    var strA = a.toLowerCase();
                    var strB = b.toLowerCase();
                    // Ascending sort.
                    if (strA < strB) {
                        ret = -1;

                    } else if (strA > strB) {
                        ret = 1;
                    }
                    return ret;
                });
            }
            return sorted;
        }
    };

})();

/**
 * This software may be freely distributed and used under the following MIT license:
 *
 * Copyright (c) 2013 Finnish Meteorological Institute
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this
 * software and associated documentation files (the "Software"), to deal in the
 * Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
 * OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

// Strict mode for whole file.
// "use strict";

// Requires jQuery
if ("undefined" === typeof jQuery || !jQuery) {
    throw "ERROR: jQuery is required for fi.fmi.metoclient.metolib.WfsRequestParser!";
}

// Requires lodash
if ("undefined" === typeof _ || !_) {
    throw "ERROR: Lodash is required for fi.fmi.metoclient.metolib.WfsRequestParser!";
}

// "Package" definitions
var fi = fi || {};
fi.fmi = fi.fmi || {};
fi.fmi.metoclient = fi.fmi.metoclient || {};
fi.fmi.metoclient.metolib = fi.fmi.metoclient.metolib || {};

// Requires fi.fmi.metoclient.metolib.Utils.
// "Package" exists because it is created above if it did not exist.
if ("undefined" === typeof fi.fmi.metoclient.metolib.Utils || !fi.fmi.metoclient.metolib.Utils) {
    throw "ERROR: fi.fmi.metoclient.metolib.Utils is required for fi.fmi.metoclient.metolib.WfsRequestParser!";
}

/**
 * RequestParser object acts as an interface that provides functions
 * to asynchronously request XML data from the server and to get
 * the requested data in a parsed structure.
 *
 * RequestParser itself is stateless. It only provides API functions
 * to start asynchronous flows that can be followed by callback functions.
 *
 * Example:
 *      fi.fmi.metoclient.metolib.WfsRequestParser.getData({
 *          url : url,
 *          storedQueryId : storedQueryId,
 *          requestParameter : "td,ws_10min",
 *          // Integer values are used to init dates for older browsers.
 *          // (new Date("2013-05-10T08:00:00Z")).getTime()
 *          // (new Date("2013-05-12T10:00:00Z")).getTime()
 *          begin : new Date(1368172800000),
 *          end : new Date(1368352800000),
 *          timestep : 60 * 60 * 1000,
 *          sites : ["Kaisaniemi,Helsinki", "Turku"],
 *          callback : function(data, errors) {
 *              // Handle callback data here...
 *          }
 *      });
 *
 * See API description in the end of the function.
 */
fi.fmi.metoclient.metolib.WfsRequestParser = (function() {

    /**
     * Constants that are used for requests and for parsing the requested data.
     */
    var myConstants = {
        // Regular expression for any white space.
        REGEX_WHITE_SPACE : /\s+/,

        // EPOCH is in seconds.
        // Covert ratio between milliseconds and EPOCH seconds.
        EPOCH_TO_MS : 1000,

        // Milliseconds in a minute.
        MIN_TO_MS : 60 * 1000,

        // HTTP method that is used for requests.
        HTTP_METHOD : "GET",

        // Type of data that is expected from the server.
        DATA_TYPE : "xml",

        // URL query delimiters.
        URL_QUERY_PREFIX_BEGIN : "?",
        URL_QUERY_PREFIX_AND : "&",
        URL_QUERY_FIELD_VALUE_DELIMITER : "=",

        // REQUEST_GET_FEATURE is used as a first query that is added by this library to
        // the base URL. Delimiter & or ? is inserted in front of it depending on the given
        // base URL.
        REQUEST_GET_FEATURE : "request=getFeature",
        REQUEST_STORED_QUERY_ID : "&storedquery_id=",
        REQUEST_PARAMETERS : "&parameters=",
        REQUEST_BEGIN : "&starttime=",
        REQUEST_END : "&endtime=",
        REQUEST_TIMESTEP : "&timestep=",
        REQUEST_GEOID : "&geoid=",
        REQUEST_WMO : "&wmo=",
        REQUEST_FMISID : "&fmisid=",
        REQUEST_PLACE : "&place=",
        REQUEST_BBOX : "&bbox=",
        REQUEST_CRS : "&crs=",

        // XML elements that are parsed.
        // There seems to be a bug related to the element namespaces:
        // http://bugs.jquery.com/ticket/10377
        XML_WFS_FEATURE_COLLECTION : "wfs\\:FeatureCollection, FeatureCollection",
        XML_WFS_MEMBER : "wfs\\:member, member",
        XML_OMSO_POINT_TIME_SERIES_OBSERVATION : "omso\\:PointTimeSeriesObservation, PointTimeSeriesObservation",
        XML_OMSO_GRID_SERIES_OBSERVATION : "omso\\:GridSeriesObservation, GridSeriesObservation",
        XML_OM_PHENOMENON_TIME : "om\\:phenomenonTime, phenomenonTime",
        XML_GML_TIME_PERIOD : "gml\\:TimePeriod, TimePeriod",
        XML_GML_BEGIN_POSITION : "gml\\:beginPosition, beginPosition",
        XML_GML_END_POSITION : "gml\\:endPosition, endPosition",
        XML_OM_OBSERVED_PROPERTY : "om\\:observedProperty, observedProperty",
        XML_OM_FEATURE_OF_INTEREST : "om\\:featureOfInterest, featureOfInterest",
        XML_SAMS_SF_SPATIAL_SAMPLING_FEATURE : "sams\\:SF_SpatialSamplingFeature, SF_SpatialSamplingFeature",
        XML_SAM_SAMPLED_FEATURE : "sam\\:sampledFeature, sampledFeature",
        XML_TARGET_LOCATION_COLLECTION : "target\\:LocationCollection, LocationCollection",
        XML_TARGET_MEMBER : "target\\:member, member",
        XML_TARGET_LOCATION : "target\\:Location, Location",
        XML_GML_IDENTIFIER : "gml\\:identifier, identifier",
        XML_TARGET_REGION : "target\\:region, region",
        XML_TARGET_COUNTRY : "target\\:country, country",
        XML_TARGET_TIMEZONE : "target\\:timezone, timezone",
        XML_TARGET_REPRESENTATIVE_POINT : "target\\:representativePoint, representativePoint",
        XML_SAMS_SHAPE : "sams\\:shape, shape",
        XML_GML_MULTI_POINT : "gml\\:MultiPoint, MultiPoint",
        XML_GML_POINT_MEMBER : "gml\\:pointMember, pointMember",
        XML_GML_POINT_MEMBERS : "gml\\:pointMembers, pointMembers",
        XML_GML_POINT : "gml\\:Point, Point",
        XML_GML_NAME : "gml\\:name, name",
        XML_GML_POS : "gml\\:pos, pos",
        XML_OM_RESULT : "om\\:result, result",
        XML_GMLCOV_MULTI_POINT_COVERAGE : "gmlcov\\:MultiPointCoverage, MultiPointCoverage",
        XML_GML_DOMAIN_SET : "gml\\:domainSet, domainSet",
        XML_GMLCOV_SIMPLE_MULTI_POINT : "gmlcov\\:SimpleMultiPoint, SimpleMultiPoint",
        XML_GMLCOV_POSITIONS : "gmlcov\\:positions, positions",
        XML_GML_RANGE_SET : "gml\\:rangeSet, rangeSet",
        XML_GML_DATA_BLOCK : "gml\\:DataBlock, DataBlock",
        XML_GML_DOUBLE_OR_NIL_REASON_TUPLE_LIST : "gml\\:doubleOrNilReasonTupleList, doubleOrNilReasonTupleList",
        XML_GMLCOV_RANGE_TYPE : "gmlcov\\:rangeType, rangeType",
        XML_SWE_DATA_RECORD : "swe\\:DataRecord, DataRecord",
        XML_SWE_FIELD : "swe\\:field, field",
        XML_COMPOSITE_OBSERVABLE_PROPERTY : "CompositeObservableProperty",
        XML_COMPONENT : "component",
        XML_OBSERVABLE_PROPERTY : "ObservableProperty",
        XML_LABEL : "label",
        XML_BASE_PHENOMENON : "basePhenomenon",
        XML_UOM : "uom",
        XML_STATISTICAL_MEASURE : "statisticalMeasure",
        XML_STATISTICAL_MEASURE_INNER : "StatisticalMeasure",
        XML_STATISTICAL_FUNCTION : "statisticalFunction",
        XML_AGGREGATION_TIME_PERIOD : "aggregationTimePeriod",
        XML_ATTR_NAME : "name",
        XML_ATTR_SRS_DIMENSION : "srsDimension",
        XML_ATTR_XLINK_HREF : "xlink:href",
        XML_ATTR_GML_ID : "gml:id",
        XML_ATTR_CODE_SPACE : "codeSpace",
        XML_ATTR_CODE_SPACE_NAME : "http://xml.fmi.fi/namespace/locationcode/name",
        XML_ATTR_CODE_SPACE_WMO : "http://xml.fmi.fi/namespace/locationcode/wmo",
        XML_ATTR_CODE_SPACE_GEOID : "http://xml.fmi.fi/namespace/locationcode/geoid",
        XML_ATTR_CODE_SPACE_FMISID : "http://xml.fmi.fi/namespace/stationcode/fmisid",
        XML_ATTR_UOM : "uom",

        // Prefix that may be used in XML references.
        XML_REF_PREFIX : "#",

        // Error XML elements.
        XML_EXCEPTION_REPORT : "ExceptionReport",
        XML_EXCEPTION : "Exception",
        XML_ATTR_EXCEPTION_CODE : "exceptionCode",
        XML_EXCEPTION_TEXT : "ExceptionText",

        // Error object keys.
        KEY_ERROR_CODE : "errorCode",
        KEY_ERROR_TEXT : "errorText",

        // Empty property object if data has not been gotten from server.
        PROPERTY_OBJECT_EMPTY : {
            label : "",
            unit : "",
            phenomenon : "",
            statisticalFunction : "",
            statisticalPeriod : ""
        }
    };

    /**
     * Parses the given XML DOM document.
     *
     * Notice, this may be an asynchronous operation because parsing of sub-elements
     * may require asynchronous server requests for further data.
     *
     * See the finalized data structure in {finalizeContent()} function description.
     *
     * The data structure that is used for XML parsing differs from the finalized structure.
     * First, data is inserted into a structure that is easy to manage with asynchronous operations.
     * The structure is finalized into a more usable structure for API when asynchronous operations have finished.
     * See {parsedContent} variable inside this function for the data structure that is used for XML parsing.
     *
     * @param {Object} xml DOM document that is parsed for the data.
     * @param [] errors Array that contains possible errors that occurred during the asynchronous flow.
     * @param {function(data, errors)} callback Callback function is called and provided with the parsed data structure
     *                                 and errors array when all parse operations, including asynchronous operations,
     *                                 are finished. If an error occurs during operations, callback data is set to
     *                                 {undefined}.
     */
    function parseXml(xml, errors, callback) {
        try {
            // This data structure will hold the parsed data.
            // Notice, this is not the finalized data structure.
            var parsedContent = {
                // General information from server XML response.
                info : {
                    // Begin {Date} object for request.
                    begin : undefined,
                    // End {Date} object for request.
                    end : undefined
                },
                // For location data. Content objects exists if set by the parser.
                // Content object : { id : "idString", geoid : "geoidString", wmo : "wmoString", fmisid : "fmisidString",
                //                    name : "nameString", region : "regionNameString",
                //                    country : "countryNameString", timezone : "timezoneStrinng",
                //                    pointRef : "pointRefString" }
                locations : [],
                // For location positions data. Content objects exist if set by the parser.
                // Structure : { idString : { name : "nameString", position : ["positionStringPart1", "positionStringPart2", ... ] }, ... }
                positions : {},
                // gmlcovPositions contains location position information that also contains the time of the observation.
                gmlcovPositions : {
                    srsDimension : undefined,
                    timeIndex : undefined,
                    contents : [] // Array of all position and time data as strings. This relates to the locations pos data.
                },
                // All properties related data is inserted in turns item by item here.
                data : [],
                // May contain none, one or more parameter strings that identify the request parameter, such as td.
                parameters : [],
                // May contain none, one or more of key-value-pairs. Key identifies the request parameter and
                // is same as parameters array item, such as td. Value gives property object for the requested data.
                // Key-value-pair that describes one property in properties object:
                //   parameterAsKey : { label : "labelString",
                //                      unit : "unitString",
                //                      phenomenon : "phenomenonString",
                //                      statisticalFunction : "statisticalFunctionString",
                //                      statisticalPeriod : "statisticalAggregationTimePeriod" }
                properties : {}
            };

            // This counter is used in the flow to keep count
            // of asynchronous operations that are going on.
            var asyncCounter = 0;

            /**
             * When an asynchronous operation is started for the sub-element parsing,
             * this function is called to increase the counter.
             */
            var incAsyncCounter = function() {
                // Simply increase the counter.
                ++asyncCounter;
            };

            /**
             * When asynchronous operations of the parse flow finish, they call this function
             * to check if the whole asynchronous flow has finished and if the original callback
             * function should be called.
             */
            var parseXmlCallback = function() {
                if (asyncCounter > 0) {
                    // Decrease the counter because an asynchronous operation has finished.
                    --asyncCounter;
                }

                if (0 === asyncCounter) {
                    // Just to be sure that if for some reason we come here twice,
                    // callback is only called the first time.
                    asyncCounter = -1;

                    // No asynchronous operations are going on anymore.
                    // Give the parsed content for the callback function
                    // in a correct data structure.
                    handleCallback(callback, finalizeContent(parsedContent, errors), errors);
                }
            };

            // Parse the XML element that wraps all the results.
            parseFeatureCollection(xml, parsedContent, incAsyncCounter, parseXmlCallback, errors);
            if (0 === asyncCounter) {
                // The flow was synchronous after all and callback should already be called.
                parseXmlCallback();
            }

        } catch(e) {
            // An error occurred in a synchronous part of the data parsing flow.
            if ("undefined" !== typeof console && console) {
                console.error("ERROR: Error during synchronous data parsing flow!");
            }
            // Make sure the asynchronous operations do not recall the callback.
            asyncCounter = -1;
            var error = {};
            error[myConstants.KEY_ERROR_TEXT] = e.toString();
            errors.push(error);
            handleCallback(callback, undefined, errors);
        }
    }

    /**
     * Finalize data of the given data structure.
     *
     * Notice, objects are used to wrap data. For example, location objects use info objects.
     * Then, reference to the information may be used instead of copying primitive type variables many times.
     * This may provide some optimization for the memory consumption if data is used in many places
     * and later additional information, such as data, should be included into the objects.
     *
     * Finalized data structure defines data parameters and locations that have information such as name and position.
     * Also, data in time-value-pairs that are related to the common parameters is provided. Time-values contain data for the certain
     * moment with parameter value pairs. Then, value for certain parameter and position may also be searched.
     * {
     *     // General information received in the server response for the request.
     *     // May not be {undefined} or {null}.
     *     // Content properties are set if given in the server response.
     *     info : {
     *         begin : {Date|undefined},
     *         end : {Date|undefined}
     *     },
     *     // May not be {undefined} or {null}.
     *     // May contain none, one or more parameter strings that identify the request parameter, such as td.
     *     parameters : [
     *         "td", // Exists if set by the parser.
     *         "windpeedms", // Exists if set by the parser.
     *         ...
     *     ],
     *     // May contain none, one or more of key-value-pairs. Key identifies the request parameter and
     *     // is same as parameters array item, such as td. Value gives property object for the requested data.
     *     properties : {
     *         // Key-value-pair describes one property. Exists if set by the parser.
     *         parameterAsKey : { label : "labelString",
     *                            unit : "unitString",
     *                            phenomenon : "phenomenonString",
     *                            statisticalFunction : "statisticalFunctionString",
     *                            statisticalPeriod : "statisticalAggregationTimePeriod" },
     *         ...
     *     },
     *     // For location data. May not be {undefined} or {null}.
     *     locations : [
     *         {
     *             info : {
     *                 id : "locationIdString",
     *                 geoid : "geoidString",
     *                 wmo : "wmoString",
     *                 fmisid: "geoidString",
     *                 name : "locationNameString",
     *                 region : "regionNameString",
     *                 country : "countryNameString",
     *                 timezone : "timezoneNameString",
     *                 position : [ "positionStringPart1", "positionStringPart2", ... ]
     *             },
     *             // Time-value-pairs are provided for location observations.
     *             timeValuePairs : [
     *                 {
     *                     // Time of the location data value measurement.
     *                     time: intTimeInMsSince01011970,
     *                     // Values provide the measurement values for the corresponding time pair.
     *                     values : {
     *                         // These property values have same name keys as parameters.
     *                         td: floatFeatureValue || undefined, // Name of this property corresponds the name of the parameter property.
     *                         ws_10min: floatFeatureValue || undefined, // Name of this property corresponds the name of the parameter property.
     *                         ...
     *                     }
     *                 },
     *                 ...
     *             ]
     *         }
     *     ]
     * }
     *
     * @param {Object} parsedContent Object that contains the data structure.
     *                               This object has the exactly defined structure that
     *                               is browsed through and parsed in this function.
     *                               May not be {undefined} or {null}.
     * @param [] errors Array that contains possible errors that occurred during the asynchronous flow.
     * @return {Object} Finalized data and data structure.
     */
    function finalizeContent(parsedContent, errors) {
        // This object will contain the finalized data structure.
        var result = {
            // Info is used directly from the parsed content object.
            info : parsedContent.info,
            // Parameters are used directly from the parsed content object.
            parameters : parsedContent.parameters,
            // Properties are used directly from the parsed content object.
            properties : parsedContent.properties,
            // Locations will contain time-value-pairs that belong to that location.
            locations : []
        };

        try {
            // Get the values or initialize them if they are undefined.
            var srsDimension = parsedContent.gmlcovPositions.srsDimension || 0;
            var gmlcovPositionsContents = parsedContent.gmlcovPositions.contents || [];
            var parametersLength = parsedContent.parameters.length;

            // Data value count is multiplication of parameter and timeposition counts.
            // Timeposition count is already a multiplication of location count.
            // Every object has a position and time and corresponding measurement values for all the parameters.
            // gmlcovPositionsContents contains position values and times values in a row as array elements.
            // One timeposition contains srsDimension count of array items that describe that position and time.
            if (srsDimension > 0 && parsedContent.data.length === parametersLength * (gmlcovPositionsContents.length / srsDimension) && parsedContent.locations.length === fi.fmi.metoclient.metolib.Utils.objectLength(parsedContent.positions)) {
                // Create locations objects for results.
                for (var ind = 0; ind < parsedContent.locations.length; ++ind) {
                    var contentLocation = parsedContent.locations[ind];
                    var refId = contentLocation.pointRef;
                    var errorStr = "ERROR: Location and position data do not match!";
                    if (refId) {
                        var position = parsedContent.positions[refId];
                        if (position) {
                            result.locations.push({
                                info : {
                                    // At least an empty string is set as property value.
                                    // Notice, values are strings, not integers.
                                    id : contentLocation.id || "",
                                    geoid : contentLocation.geoid || "",
                                    wmo : contentLocation.wmo || "",
                                    fmisid : contentLocation.fmisid || "",
                                    name : contentLocation.name || position.name || "",
                                    region : contentLocation.region || "",
                                    country : contentLocation.country || "",
                                    timezone : contentLocation.timezone || "",
                                    position : position.position || ""
                                }
                            });

                        } else {
                            throw errorStr;
                        }

                    } else {
                        throw errorStr;
                    }
                }

                // Browse through positions (and times that are included in them).
                for (var i = 0; i < gmlcovPositionsContents.length; i += srsDimension) {
                    // Result object has time property and values for that specific time.
                    var resultObject = {
                        // Server should return the time in EPOCH-format.
                        // Convert it into milliseconds because EPOCH is in seconds.
                        // If the first character cannot be converted to a number, parseInt() returns NaN.
                        // Suppose that time is the last value in the single position information.
                        time : parseInt(gmlcovPositionsContents[i + srsDimension - 1], 10) * myConstants.EPOCH_TO_MS,
                        // Values are parameter-value pairs.
                        values : {}
                    };
                    // Result object has values corresponding to the parameters.
                    for (var j = 0; j < result.parameters.length; ++j) {
                        var parameter = result.parameters[j];
                        if (parameter) {
                            // Data item count is a multiple of the parameter count and position count.
                            // Therefore, data indexing is based on the position and parameter indexing.
                            resultObject.values[parameter] = parseFloat(parsedContent.data[(i / srsDimension ) * parametersLength + j]);
                            // Make sure properties have at least empty default property object corresponding every parameter.
                            if (!result.properties[parameter]) {
                                if ("undefined" !== typeof console && console) {
                                    console.error("ERROR: Server has not provided properties for request parameter!");
                                }
                                result.properties[parameter] = myConstants.PROPERTY_OBJECT_EMPTY;
                            }
                        }
                    }

                    // Result may contain a list of locations.
                    // Find the locations that should contain the result object in its time-value-pairs.
                    for (var k = 0; k < result.locations.length; ++k) {
                        var matchCount = 0;
                        var location = result.locations[k];
                        // Location contains position information that should match the measurement position information.
                        for (var m = 0; m < location.info.position.length; ++m) {
                            // Notice, i is index for the first gmlcovPositionContents position part of the current
                            // measurement data position and time information. That value is compared to the location
                            // position information.
                            if (location.info.position[m] === gmlcovPositionsContents[i + m]) {
                                // Position part is match;
                                ++matchCount;

                            } else {
                                // Did not match. So, skip rest of checking.
                                break;
                            }
                        }
                        // Location positions should match the position array length.
                        if (location.info.position && matchCount === location.info.position.length) {
                            // All the position parts matched. So, result object belongs to the current location.
                            if (!location.timeValuePairs) {
                                // Make sure that the location has timeValuePairs array for data.
                                location.timeValuePairs = [];
                            }
                            location.timeValuePairs.push(resultObject);
                            // No need to check other locations for this object.
                            // Notice, if locations have duplicates related to position information,
                            // the same location will contain all the data. Duplicates are
                            // handled separately in the end of the flow.
                            break;
                        }
                    }
                }

                // Make sure that locations contain correct data also if duplicates are given by the server.
                handleLocationDuplicates(result.locations);

            } else if (0 !== parsedContent.data.length || 0 !== gmlcovPositionsContents.length) {
                // Error because data is not in the expected format.
                // Notice, parameters may still be given even if actual content has not been found for it.
                // Notice, if server has given an exception response, an error object has alread been set for that.
                // Then, no need to throw another error here. Therefore, content lengths are checked above.
                throw "ERROR: Parsed lists do not match!";
            }

        } catch(e) {
            // An error occurred.
            if ("undefined" !== typeof console && console) {
                console.error("ERROR: Could not finalize data!");
            }
            // Set result to undefined.
            result = undefined;
            // Add an error to the errors array.
            var error = {};
            error[myConstants.KEY_ERROR_TEXT] = e.toString();
            errors.push(error);
        }

        return result;
    }

    /**
     * Locations with same position information may be provided from the server.
     * This function handles those special cases and makes sure that data is
     * assigned correctly to location duplicates.
     *
     * This function supposes that duplicates do not have time value pairs data set
     * and data needs to be moved from one location, that holds all the data, to duplicate locations.
     * Also, this function supposes that all the duplicates should have same number of data values
     * in the end of the operation.
     *
     * Notice, even if position is same for duplicates, they should differ at least by the id.
     *
     * @param {[]} locations Array that contains locations.
     *                      Operation is ignored if {undefined}, {null} or empty.
     */
    function handleLocationDuplicates(locations) {
        if (locations && locations.length) {
            // Notice, inner loop handles locations that are provided after the current locations.
            // Therefore, last location can be skipped by this outer loop for minor optimization.
            // Also, no need to do comparison if only one location is available.
            for (var i = 0; i < locations.length - 1; ++i) {
                var currentLocation = locations[i];
                // This array will contain references to the duplicate locations of currentLocation.
                var duplicates = [];
                // Notice, start index is one greater than outer loop
                // because no need to compare item to itself.
                for (var j = i + 1; j < locations.length; ++j) {
                    var compLocation = locations[j];
                    if (currentLocation.info.position.length === compLocation.info.position.length) {
                        var count = currentLocation.info.position.length;
                        var match = true;
                        for (var k = 0; k < count; ++k) {
                            if (currentLocation.info.position[k] !== compLocation.info.position[k]) {
                                match = false;
                                break;
                            }
                        }
                        if (match) {
                            // Duplicate found.
                            duplicates.push(compLocation);
                        }
                    }
                }
                if (duplicates.length) {
                    // Divide data correctly between duplicates and the current location.
                    var currentTimeValuePairs = currentLocation.timeValuePairs;
                    var correctTimeValuePairsLength = currentTimeValuePairs.length / (duplicates.length + 1);
                    // Notice, the current location contains its own data in the beginning of its data array.
                    // Data for a duplicate location is somewhere in the middle or in the end of the array.
                    // Move duplicate data from the current location time value pairs into the correct duplicate location.
                    // In the end, duplicates will contain their data and current location contains only its data.
                    for (var ind = 0; ind < duplicates.length; ++ind) {
                        duplicates[ind].timeValuePairs = currentTimeValuePairs.splice(correctTimeValuePairsLength, correctTimeValuePairsLength);
                    }
                }
            }
        }
    }

    /**
     * Parse the given XML DOM element for the element data.
     *
     * Notice, this may be an asynchronous operation because parsing
     * may require asynchronous server requests for further data.
     *
     * @param {Object} xmlElement DOM element that is parsed for data.
     * @param {Object} container The object that holds the structure for the parsed data.
     *                           The structure may contain arrays and objects for the parsed data.
     *                           Parsed element data will be inserted into this data structure.
     *                           May not be {undefined} or {null}.
     * @param {function()} asyncStarted Function that is called when asynchronous operation is started.
     *                                  This is required to keep count of the on-going asynchronous operations.
     * @param {function()} asyncCallback Callback function is called when an asynchronous flow finishes.
     * @param [] errors Array that contains possible errors that occurred during the asynchronous flow.
     * @throws {String} Exception is thrown if an error occurs during the synchronous part of the flow.
     */
    function parseFeatureCollection(xmlElement, container, asyncStarted, asyncCallback, errors) {
        if (xmlElement) {
            // Check if server responded with an error.
            if (!parseExceptionReport(xmlElement, errors)) {
                jQuery(xmlElement).children(myConstants.XML_WFS_FEATURE_COLLECTION).each(function() {
                    // This element does not change the container for the child. Instead, let child
                    // elements use the same container. This way, unnecessary wrapper is skipped.
                    // Notice, asyncCallback function is also forwarded. Then, the callback that
                    // handles asynchronous flow counters will be in sync when subcomponents finish
                    // an asynchronous flow and callback is called.
                    parseWfsMember(this, container, asyncStarted, asyncCallback, errors);
                });
            }
        }
    }

    /**
     * Parse the given XML DOM element for the element data.
     *
     * Notice, parse-functions always provide same parameters and a common way
     * to parse XML is provided throughout the whole parse hierarchy.
     *
     * See root element parse-function, {@link #parseFeatureCollection()},
     * for function parameter descriptions.
     */
    function parseWfsMember(xmlElement, container, asyncStarted, asyncCallback, errors) {
        jQuery(xmlElement).children(myConstants.XML_WFS_MEMBER).each(function() {
            parseOmsoPointTimeSeriesObservation(this, container, asyncStarted, asyncCallback, errors);
            parseOmsoGridSeriesObservation(this, container, asyncStarted, asyncCallback, errors);
        });
    }

    /**
     * Parse the given XML DOM element for the element data.
     *
     * Notice, parse-functions always provide same parameters and a common way
     * to parse XML is provided throughout the whole parse hierarchy.
     *
     * See root element parse-function, {@link #parseFeatureCollection()},
     * for function parameter descriptions.
     */
    function parseOmsoPointTimeSeriesObservation(xmlElement, container, asyncStarted, asyncCallback, errors) {
        jQuery(xmlElement).children(myConstants.XML_OMSO_POINT_TIME_SERIES_OBSERVATION).each(function() {
            parseOmPhenomenonTime(this, container.info, asyncStarted, asyncCallback, errors);
            parseOmObservedProperty(this, container.properties, asyncStarted, asyncCallback, errors);
            parseOmFeatureOfInterest(this, container, asyncStarted, asyncCallback, errors);
            parseOmResult(this, container, asyncStarted, asyncCallback, errors);
        });
    }

    /**
     * Parse the given XML DOM element for the element data.
     *
     * Notice, parse-functions always provide same parameters and a common way
     * to parse XML is provided throughout the whole parse hierarchy.
     *
     * See root element parse-function, {@link #parseFeatureCollection()},
     * for function parameter descriptions.
     */
    function parseOmsoGridSeriesObservation(xmlElement, container, asyncStarted, asyncCallback, errors) {
        jQuery(xmlElement).children(myConstants.XML_OMSO_GRID_SERIES_OBSERVATION).each(function() {
            parseOmPhenomenonTime(this, container.info, asyncStarted, asyncCallback, errors);
            parseOmObservedProperty(this, container.properties, asyncStarted, asyncCallback, errors);
            parseOmFeatureOfInterest(this, container, asyncStarted, asyncCallback, errors);
            parseOmResult(this, container, asyncStarted, asyncCallback, errors);
        });
    }

    /**
     * Parse the given XML DOM element for the element data.
     *
     * Notice, parse-functions always provide same parameters and a common way
     * to parse XML is provided throughout the whole parse hierarchy.
     *
     * See root element parse-function, {@link #parseFeatureCollection()},
     * for function parameter descriptions.
     */
    function parseOmPhenomenonTime(xmlElement, container, asyncStarted, asyncCallback, errors) {
        jQuery(xmlElement).children(myConstants.XML_OM_PHENOMENON_TIME).each(function() {
            parseGmlTimePeriod(this, container, asyncStarted, asyncCallback, errors);
        });
    }

    /**
     * Parse the given XML DOM element for the element data.
     *
     * Notice, parse-functions always provide same parameters and a common way
     * to parse XML is provided throughout the whole parse hierarchy.
     *
     * See root element parse-function, {@link #parseFeatureCollection()},
     * for function parameter descriptions.
     */
    function parseGmlTimePeriod(xmlElement, container, asyncStarted, asyncCallback, errors) {
        jQuery(xmlElement).children(myConstants.XML_GML_TIME_PERIOD).each(function() {
            parseGmlBeginPosition(this, container, asyncStarted, asyncCallback, errors);
            parseGmlEndPosition(this, container, asyncStarted, asyncCallback, errors);
        });
    }

    /**
     * Parse the given XML DOM element for the element data.
     *
     * Notice, parse-functions always provide same parameters and a common way
     * to parse XML is provided throughout the whole parse hierarchy.
     *
     * See root element parse-function, {@link #parseFeatureCollection()},
     * for function parameter descriptions.
     */
    function parseGmlBeginPosition(xmlElement, container, asyncStarted, asyncCallback, errors) {
        jQuery(xmlElement).children(myConstants.XML_GML_BEGIN_POSITION).each(function() {
            var begin = jQuery.trim(jQuery(this).text());
            if (begin) {
                container.begin = new Date(begin);
            }
        });
    }

    /**
     * Parse the given XML DOM element for the element data.
     *
     * Notice, parse-functions always provide same parameters and a common way
     * to parse XML is provided throughout the whole parse hierarchy.
     *
     * See root element parse-function, {@link #parseFeatureCollection()},
     * for function parameter descriptions.
     */
    function parseGmlEndPosition(xmlElement, container, asyncStarted, asyncCallback, errors) {
        jQuery(xmlElement).children(myConstants.XML_GML_END_POSITION).each(function() {
            var end = jQuery.trim(jQuery(this).text());
            if (end) {
                container.end = new Date(end);
            }
        });
    }

    /**
     * Parse the given XML DOM element for the element data.
     *
     * Notice, parse-functions always provide same parameters and a common way
     * to parse XML is provided throughout the whole parse hierarchy.
     *
     * See root element parse-function, {@link #parseFeatureCollection()},
     * for function parameter descriptions.
     */
    function parseOmObservedProperty(xmlElement, container, asyncStarted, asyncCallback, errors) {
        jQuery(xmlElement).children(myConstants.XML_OM_OBSERVED_PROPERTY).each(function() {
            // URL for the property information that is provided as an attribute.
            var url = jQuery.trim(jQuery(this).attr(myConstants.XML_ATTR_XLINK_HREF));
            if (url) {
                // Start asynchronous operation to get the properties.
                requestXml(url, errors, function(xml, errorContainer) {
                    // Check if server responded with an error.
                    if (!parseExceptionReport(xml, errors)) {
                        // Properties are inserted into the given container.
                        if (xml) {
                            // Notice, multiple observable property elements are given inside a composite.
                            // If only one observable property is given, composite is not used. Therefore,
                            // check observable properties in both ways here.
                            parseCompositeObservableProperty(xml, container, asyncStarted, asyncCallback, errors);
                            parseObservableProperty(xml, container, asyncStarted, asyncCallback, errors);
                        }
                    }
                    // Callback because asynchronous operation has finished.
                    asyncCallback();
                });
                // Because an asynchronous operation was started above.
                asyncStarted();
            }
        });
    }

    /**
     * Parse the given XML DOM element for the element data.
     *
     * Notice, parse-functions always provide same parameters and a common way
     * to parse XML is provided throughout the whole parse hierarchy.
     *
     * See root element parse-function, {@link #parseFeatureCollection()},
     * for function parameter descriptions.
     */
    function parseOmFeatureOfInterest(xmlElement, container, asyncStarted, asyncCallback, errors) {
        jQuery(xmlElement).children(myConstants.XML_OM_FEATURE_OF_INTEREST).each(function() {
            parseSamsSfSpatialSamplingFeature(this, container, asyncStarted, asyncCallback, errors);
        });
    }

    /**
     * Parse the given XML DOM element for the element data.
     *
     * Notice, parse-functions always provide same parameters and a common way
     * to parse XML is provided throughout the whole parse hierarchy.
     *
     * See root element parse-function, {@link #parseFeatureCollection()},
     * for function parameter descriptions.
     */
    function parseSamsSfSpatialSamplingFeature(xmlElement, container, asyncStarted, asyncCallback, errors) {
        jQuery(xmlElement).children(myConstants.XML_SAMS_SF_SPATIAL_SAMPLING_FEATURE).each(function() {
            parseSamSampledFeature(this, container.locations, asyncStarted, asyncCallback, errors);
            parseSamsShape(this, container.positions, asyncStarted, asyncCallback, errors);
        });
    }

    /**
     * Parse the given XML DOM element for the element data.
     *
     * Notice, parse-functions always provide same parameters and a common way
     * to parse XML is provided throughout the whole parse hierarchy.
     *
     * See root element parse-function, {@link #parseFeatureCollection()},
     * for function parameter descriptions.
     */
    function parseSamSampledFeature(xmlElement, container, asyncStarted, asyncCallback, errors) {
        jQuery(xmlElement).children(myConstants.XML_SAM_SAMPLED_FEATURE).each(function() {
            parseTargetLocationCollection(this, container, asyncStarted, asyncCallback, errors);
        });
    }

    /**
     * Parse the given XML DOM element for the element data.
     *
     * Notice, parse-functions always provide same parameters and a common way
     * to parse XML is provided throughout the whole parse hierarchy.
     *
     * See root element parse-function, {@link #parseFeatureCollection()},
     * for function parameter descriptions.
     */
    function parseTargetLocationCollection(xmlElement, container, asyncStarted, asyncCallback, errors) {
        jQuery(xmlElement).children(myConstants.XML_TARGET_LOCATION_COLLECTION).each(function() {
            parseTargetMember(this, container, asyncStarted, asyncCallback, errors);
        });
    }

    /**
     * Parse the given XML DOM element for the element data.
     *
     * Notice, parse-functions always provide same parameters and a common way
     * to parse XML is provided throughout the whole parse hierarchy.
     *
     * See root element parse-function, {@link #parseFeatureCollection()},
     * for function parameter descriptions.
     */
    function parseTargetMember(xmlElement, container, asyncStarted, asyncCallback, errors) {
        jQuery(xmlElement).children(myConstants.XML_TARGET_MEMBER).each(function() {
            parseTargetLocation(this, container, asyncStarted, asyncCallback, errors);
        });
    }

    /**
     * Parse the given XML DOM element for the element data.
     *
     * Notice, parse-functions always provide same parameters and a common way
     * to parse XML is provided throughout the whole parse hierarchy.
     *
     * See root element parse-function, {@link #parseFeatureCollection()},
     * for function parameter descriptions.
     */
    function parseTargetLocation(xmlElement, container, asyncStarted, asyncCallback, errors) {
        jQuery(xmlElement).children(myConstants.XML_TARGET_LOCATION).each(function() {
            // Location object will contain the parsed content.
            var location = {};
            // Parse content into the location object.
            parseGmlIdentifier(this, location, asyncStarted, asyncCallback, errors);
            parseGmlNameCodeSpace(this, location, asyncStarted, asyncCallback, errors);
            parseTargetRegion(this, location, asyncStarted, asyncCallback, errors);
            parseTargetCountry(this, location, asyncStarted, asyncCallback, errors);
            parseTargetTimezone(this, location, asyncStarted, asyncCallback, errors);
            parseTargetRepresentativePoint(this, location, asyncStarted, asyncCallback, errors);
            // Append location object with parsed content into the container.
            container.push(location);
        });
    }

    /**
     * Parse the given XML DOM element for the element data.
     *
     * Notice, parse-functions always provide same parameters and a common way
     * to parse XML is provided throughout the whole parse hierarchy.
     *
     * See root element parse-function, {@link #parseFeatureCollection()},
     * for function parameter descriptions.
     */
    function parseGmlIdentifier(xmlElement, container, asyncStarted, asyncCallback, errors) {
        jQuery(xmlElement).children(myConstants.XML_GML_IDENTIFIER).each(function() {
            // Set id for the common id property.
            container.id = jQuery.trim(jQuery(this).text());
            var codeSpaceValue = jQuery.trim(jQuery(this).attr(myConstants.XML_ATTR_CODE_SPACE));
            if (myConstants.XML_ATTR_CODE_SPACE_FMISID === codeSpaceValue) {
                // Set value for more accurately describing property.
                container.fmisid = jQuery.trim(jQuery(this).text());
            }
        });
    }

    /**
     * Parse the given XML DOM element for the element data.
     *
     * Notice, parse-functions always provide same parameters and a common way
     * to parse XML is provided throughout the whole parse hierarchy.
     *
     * See root element parse-function, {@link #parseFeatureCollection()},
     * for function parameter descriptions.
     */
    function parseGmlNameCodeSpace(xmlElement, container, asyncStarted, asyncCallback, errors) {
        jQuery(xmlElement).children(myConstants.XML_GML_NAME).each(function() {
            var codeSpaceValue = jQuery.trim(jQuery(this).attr(myConstants.XML_ATTR_CODE_SPACE));
            if (myConstants.XML_ATTR_CODE_SPACE_NAME === codeSpaceValue) {
                container.name = jQuery.trim(jQuery(this).text());

            } else if (myConstants.XML_ATTR_CODE_SPACE_WMO === codeSpaceValue) {
                container.wmo = jQuery.trim(jQuery(this).text());

            } else if (myConstants.XML_ATTR_CODE_SPACE_GEOID === codeSpaceValue) {
                container.geoid = jQuery.trim(jQuery(this).text());
            }
        });
    }

    /**
     * Parse the given XML DOM element for the element data.
     *
     * Notice, parse-functions always provide same parameters and a common way
     * to parse XML is provided throughout the whole parse hierarchy.
     *
     * See root element parse-function, {@link #parseFeatureCollection()},
     * for function parameter descriptions.
     */
    function parseTargetRegion(xmlElement, container, asyncStarted, asyncCallback, errors) {
        jQuery(xmlElement).children(myConstants.XML_TARGET_REGION).each(function() {
            container.region = jQuery.trim(jQuery(this).text());
        });
    }

    /**
     * Parse the given XML DOM element for the element data.
     *
     * Notice, parse-functions always provide same parameters and a common way
     * to parse XML is provided throughout the whole parse hierarchy.
     *
     * See root element parse-function, {@link #parseFeatureCollection()},
     * for function parameter descriptions.
     */
    function parseTargetCountry(xmlElement, container, asyncStarted, asyncCallback, errors) {
        jQuery(xmlElement).children(myConstants.XML_TARGET_COUNTRY).each(function() {
            container.country = jQuery.trim(jQuery(this).text());
        });
    }

    /**
     * Parse the given XML DOM element for the element data.
     *
     * Notice, parse-functions always provide same parameters and a common way
     * to parse XML is provided throughout the whole parse hierarchy.
     *
     * See root element parse-function, {@link #parseFeatureCollection()},
     * for function parameter descriptions.
     */
    function parseTargetTimezone(xmlElement, container, asyncStarted, asyncCallback, errors) {
        jQuery(xmlElement).children(myConstants.XML_TARGET_TIMEZONE).each(function() {
            container.timezone = jQuery.trim(jQuery(this).text());
        });
    }

    /**
     * Parse the given XML DOM element for the element data.
     *
     * Notice, parse-functions always provide same parameters and a common way
     * to parse XML is provided throughout the whole parse hierarchy.
     *
     * See root element parse-function, {@link #parseFeatureCollection()},
     * for function parameter descriptions.
     */
    function parseTargetRepresentativePoint(xmlElement, container, asyncStarted, asyncCallback, errors) {
        jQuery(xmlElement).children(myConstants.XML_TARGET_REPRESENTATIVE_POINT).each(function() {
            container.pointRef = jQuery.trim(jQuery(this).attr(myConstants.XML_ATTR_XLINK_HREF));
            if (container.pointRef && container.pointRef.charAt(0) === myConstants.XML_REF_PREFIX) {
                // Remove reference prefix from the string.
                container.pointRef = container.pointRef.slice(1);
            }
        });
    }

    /**
     * Parse the given XML DOM element for the element data.
     *
     * Notice, parse-functions always provide same parameters and a common way
     * to parse XML is provided throughout the whole parse hierarchy.
     *
     * See root element parse-function, {@link #parseFeatureCollection()},
     * for function parameter descriptions.
     */
    function parseSamsShape(xmlElement, container, asyncStarted, asyncCallback, errors) {
        jQuery(xmlElement).children(myConstants.XML_SAMS_SHAPE).each(function() {
            parseGmlMultiPoint(this, container, asyncStarted, asyncCallback, errors);
        });
    }

    /**
     * Parse the given XML DOM element for the element data.
     *
     * Notice, parse-functions always provide same parameters and a common way
     * to parse XML is provided throughout the whole parse hierarchy.
     *
     * See root element parse-function, {@link #parseFeatureCollection()},
     * for function parameter descriptions.
     */
    function parseGmlPoint(xmlElement, container, asyncStarted, asyncCallback, errors) {
        jQuery(xmlElement).children(myConstants.XML_GML_POINT).each(function() {
            var that = this;
            // Get the position id from the attribute.
            // Every location has its own id even if they may have
            // same name and position in some special cases.
            var id = jQuery.trim(jQuery(that).attr(myConstants.XML_ATTR_GML_ID));
            if (id) {
                // Because id was given, check if the container already has the object related to id.
                if (!container[id]) {
                    // Initialize the object because it was not in container yet.
                    container[id] = {
                        name : "",
                        position : []
                    };
                }
                var position = container[id];
                // The container that child elements are using is set here in the parent.
                // The element only needs to have visibility for its own level in the container hierarchy.
                parseGmlName(this, position, asyncStarted, asyncCallback, errors);
                parseGmlPos(this, position.position, asyncStarted, asyncCallback, errors);
            }
        });
    }

    /**
     * Parse the given XML DOM element for the element data.
     *
     * Notice, parse-functions always provide same parameters and a common way
     * to parse XML is provided throughout the whole parse hierarchy.
     *
     * See root element parse-function, {@link #parseFeatureCollection()},
     * for function parameter descriptions.
     */
    function parseGmlMultiPoint(xmlElement, container, asyncStarted, asyncCallback, errors) {
        jQuery(xmlElement).children(myConstants.XML_GML_MULTI_POINT).each(function() {
            parseGmlPointMember(this, container, asyncStarted, asyncCallback, errors);
            parseGmlPointMembers(this, container, asyncStarted, asyncCallback, errors);
        });
    }

    /**
     * Parse the given XML DOM element for the element data.
     *
     * Notice, parse-functions always provide same parameters and a common way
     * to parse XML is provided throughout the whole parse hierarchy.
     *
     * See root element parse-function, {@link #parseFeatureCollection()},
     * for function parameter descriptions.
     */
    function parseGmlPointMember(xmlElement, container, asyncStarted, asyncCallback, errors) {
        jQuery(xmlElement).children(myConstants.XML_GML_POINT_MEMBER).each(function() {
            parseGmlPoint(this, container, asyncStarted, asyncCallback, errors);
        });
    }

    /**
     * Parse the given XML DOM element for the element data.
     *
     * Notice, parse-functions always provide same parameters and a common way
     * to parse XML is provided throughout the whole parse hierarchy.
     *
     * See root element parse-function, {@link #parseFeatureCollection()},
     * for function parameter descriptions.
     */
    function parseGmlPointMembers(xmlElement, container, asyncStarted, asyncCallback, errors) {
        jQuery(xmlElement).children(myConstants.XML_GML_POINT_MEMBERS).each(function() {
            parseGmlPoint(this, container, asyncStarted, asyncCallback, errors);
        });
    }

    /**
     * Parse the given XML DOM element for the element data.
     *
     * Notice, parse-functions always provide same parameters and a common way
     * to parse XML is provided throughout the whole parse hierarchy.
     *
     * See root element parse-function, {@link #parseFeatureCollection()},
     * for function parameter descriptions.
     */
    function parseGmlName(xmlElement, container, asyncStarted, asyncCallback, errors) {
        jQuery(xmlElement).children(myConstants.XML_GML_NAME).each(function() {
            container.name = jQuery.trim(jQuery(this).text());
        });
    }

    /**
     * Parse the given XML DOM element for the element data.
     *
     * Notice, parse-functions always provide same parameters and a common way
     * to parse XML is provided throughout the whole parse hierarchy.
     *
     * See root element parse-function, {@link #parseFeatureCollection()},
     * for function parameter descriptions.
     */
    function parseGmlPos(xmlElement, container, asyncStarted, asyncCallback, errors) {
        jQuery(xmlElement).children(myConstants.XML_GML_POS).each(function() {
            var content = jQuery.trim(jQuery(this).text());
            if (content) {
                // Check if there is any content to split. Do not create array from an empty string.
                // Use apply to concatenate array to the end of the container array.
                container.push.apply(container, content.split(myConstants.REGEX_WHITE_SPACE));
            }
        });
    }

    /**
     * Parse the given XML DOM element for the element data.
     *
     * Notice, parse-functions always provide same parameters and a common way
     * to parse XML is provided throughout the whole parse hierarchy.
     *
     * See root element parse-function, {@link #parseFeatureCollection()},
     * for function parameter descriptions.
     */
    function parseOmResult(xmlElement, container, asyncStarted, asyncCallback, errors) {
        jQuery(xmlElement).children(myConstants.XML_OM_RESULT).each(function() {
            parseGmlcovMultiPointCoverage(this, container, asyncStarted, asyncCallback, errors);
        });
    }

    /**
     * Parse the given XML DOM element for the element data.
     *
     * Notice, parse-functions always provide same parameters and a common way
     * to parse XML is provided throughout the whole parse hierarchy.
     *
     * See root element parse-function, {@link #parseFeatureCollection()},
     * for function parameter descriptions.
     */
    function parseGmlcovMultiPointCoverage(xmlElement, container, asyncStarted, asyncCallback, errors) {
        jQuery(xmlElement).children(myConstants.XML_GMLCOV_MULTI_POINT_COVERAGE).each(function() {
            parseGmlDomainSet(this, container, asyncStarted, asyncCallback, errors);
            parseGmlRangeSet(this, container, asyncStarted, asyncCallback, errors);
            parseGmlcovRangeType(this, container, asyncStarted, asyncCallback, errors);
        });
    }

    /**
     * Parse the given XML DOM element for the element data.
     *
     * Notice, parse-functions always provide same parameters and a common way
     * to parse XML is provided throughout the whole parse hierarchy.
     *
     * See root element parse-function, {@link #parseFeatureCollection()},
     * for function parameter descriptions.
     */
    function parseGmlcovRangeType(xmlElement, container, asyncStarted, asyncCallback, errors) {
        jQuery(xmlElement).children(myConstants.XML_GMLCOV_RANGE_TYPE).each(function() {
            parseSweDataRecord(this, container, asyncStarted, asyncCallback, errors);
        });
    }

    /**
     * Parse the given XML DOM element for the element data.
     *
     * Notice, parse-functions always provide same parameters and a common way
     * to parse XML is provided throughout the whole parse hierarchy.
     *
     * See root element parse-function, {@link #parseFeatureCollection()},
     * for function parameter descriptions.
     */
    function parseSweDataRecord(xmlElement, container, asyncStarted, asyncCallback, errors) {
        jQuery(xmlElement).children(myConstants.XML_SWE_DATA_RECORD).each(function() {
            // The container that child elements are using is set here in the parent.
            // The element only needs to have visibility for its own level in the container hierarchy.
            parseSweField(this, container.parameters, asyncStarted, asyncCallback, errors);
        });
    }

    /**
     * Parse the given XML DOM element for the element data.
     *
     * Notice, parse-functions always provide same parameters and a common way
     * to parse XML is provided throughout the whole parse hierarchy.
     *
     * See root element parse-function, {@link #parseFeatureCollection()},
     * for function parameter descriptions.
     */
    function parseSweField(xmlElement, container, asyncStarted, asyncCallback, errors) {
        jQuery(xmlElement).children(myConstants.XML_SWE_FIELD).each(function() {
            // Parameter identifier is provided as an attribute.
            var nameAttr = jQuery.trim(jQuery(this).attr(myConstants.XML_ATTR_NAME));
            if (nameAttr) {
                container.push(nameAttr);
            }
        });
    }

    /**
     * Parse the given XML DOM element for the element data.
     *
     * Notice, parse-functions always provide same parameters and a common way
     * to parse XML is provided throughout the whole parse hierarchy.
     *
     * See root element parse-function, {@link #parseFeatureCollection()},
     * for function parameter descriptions.
     */
    function parseGmlDomainSet(xmlElement, container, asyncStarted, asyncCallback, errors) {
        jQuery(xmlElement).children(myConstants.XML_GML_DOMAIN_SET).each(function() {
            parseGmlcovSimpleMultiPoint(this, container, asyncStarted, asyncCallback, errors);
        });
    }

    /**
     * Parse the given XML DOM element for the element data.
     *
     * Notice, parse-functions always provide same parameters and a common way
     * to parse XML is provided throughout the whole parse hierarchy.
     *
     * See root element parse-function, {@link #parseFeatureCollection()},
     * for function parameter descriptions.
     */
    function parseGmlcovSimpleMultiPoint(xmlElement, container, asyncStarted, asyncCallback, errors) {
        jQuery(xmlElement).children(myConstants.XML_GMLCOV_SIMPLE_MULTI_POINT).each(function() {
            // Handle element attributes.
            var srsDimension = jQuery.trim(jQuery(this).attr(myConstants.XML_ATTR_SRS_DIMENSION));
            if (srsDimension) {
                // Make sure dimension is handled as an integer.
                srsDimension = parseInt(srsDimension, 10);
                if (srsDimension > 0) {
                    // Set the dimension value into the container.
                    container.gmlcovPositions.srsDimension = srsDimension;
                    // Set the index that informs the position of the time value.
                    // The time value is the last value in the position data.
                    container.gmlcovPositions.timeIndex = srsDimension - 1;
                }
            }
            // Handle child elements.
            // The container that child elements are using is set here in the parent.
            // The element only needs to have visibility for its own level in the container hierarchy.
            parseGmlcovPositions(this, container.gmlcovPositions.contents, asyncStarted, asyncCallback, errors);
        });
    }

    /**
     * Parse the given XML DOM element for the element data.
     *
     * Notice, parse-functions always provide same parameters and a common way
     * to parse XML is provided throughout the whole parse hierarchy.
     *
     * See root element parse-function, {@link #parseFeatureCollection()},
     * for function parameter descriptions.
     */
    function parseGmlcovPositions(xmlElement, container, asyncStarted, asyncCallback, errors) {
        jQuery(xmlElement).children(myConstants.XML_GMLCOV_POSITIONS).each(function() {
            // Get the context as string and split content into an array.
            var content = jQuery.trim(jQuery(this).text());
            if (content) {
                // Check if there is any content to split. Do not create array from an empty string.
                // Use apply to concatenate array to the end of the container array.
                container.push.apply(container, content.split(myConstants.REGEX_WHITE_SPACE));
            }
        });
    }

    /**
     * Parse the given XML DOM element for the element data.
     *
     * Notice, parse-functions always provide same parameters and a common way
     * to parse XML is provided throughout the whole parse hierarchy.
     *
     * See root element parse-function, {@link #parseFeatureCollection()},
     * for function parameter descriptions.
     */
    function parseGmlRangeSet(xmlElement, container, asyncStarted, asyncCallback, errors) {
        jQuery(xmlElement).children(myConstants.XML_GML_RANGE_SET).each(function() {
            parseGmlDataBlock(this, container, asyncStarted, asyncCallback, errors);
        });
    }

    /**
     * Parse the given XML DOM element for the element data.
     *
     * Notice, parse-functions always provide same parameters and a common way
     * to parse XML is provided throughout the whole parse hierarchy.
     *
     * See root element parse-function, {@link #parseFeatureCollection()},
     * for function parameter descriptions.
     */
    function parseGmlDataBlock(xmlElement, container, asyncStarted, asyncCallback, errors) {
        jQuery(xmlElement).children(myConstants.XML_GML_DATA_BLOCK).each(function() {
            // The container that child elements are using is set here in the parent.
            // The element only needs to have visibility for its own level in the container hierarchy.
            parseGmlDoubleOrNilReasonTupleList(this, container.data, asyncStarted, asyncCallback, errors);
        });
    }

    /**
     * Parse the given XML DOM element for the element data.
     *
     * Notice, parse-functions always provide same parameters and a common way
     * to parse XML is provided throughout the whole parse hierarchy.
     *
     * See root element parse-function, {@link #parseFeatureCollection()},
     * for function parameter descriptions.
     */
    function parseGmlDoubleOrNilReasonTupleList(xmlElement, container, asyncStarted, asyncCallback, errors) {
        jQuery(xmlElement).children(myConstants.XML_GML_DOUBLE_OR_NIL_REASON_TUPLE_LIST).each(function() {
            // Get the context as string and split content into an array.
            var content = jQuery.trim(jQuery(this).text());
            if (content) {
                // Check if there is any content to split. Do not create array from an empty string.
                // Use apply to concatenate array to the end of the container array.
                container.push.apply(container, content.split(myConstants.REGEX_WHITE_SPACE));
            }
        });
    }

    /**
     * Parse the given XML DOM element for the element data.
     *
     * Notice, normal parse-functions always provide same parameters and a common way
     * to parse XML is provided throughout the whole parse hierarchy. But,
     * parameters are simplified a little bit for exceptions.
     *
     * @param {Object} xmlElement DOM element that is parsed for data.
     * @param [] errors Array that contains possible errors that occurred during the asynchronous flow.
     * @return {boolean} {true} if Exception report element was found.
     */
    function parseExceptionReport(xmlElement, errors) {
        var exceptionFound = false;
        try {
            if (xmlElement) {
                jQuery(xmlElement).children(myConstants.XML_EXCEPTION_REPORT).each(function() {
                    exceptionFound = true;
                    // New error should be part of the errors array.
                    var error = {};
                    errors.push(error);
                    // Error will contain the parsed data.
                    parseException(this, error);
                });
            }

        } catch(e) {
            // An error occurred.
            if ("undefined" !== typeof console && console) {
                console.error("ERROR: Error while parsing exception data!");
            }
            // If subparsing has thrown an exception, it is catched here.
            // Then, other error handling does not need to worry about catching
            // these errors in asynchronous flows.
            var error = {};
            error[myConstants.KEY_ERROR_TEXT] = e.toString();
            errors.push(error);
        }
        return exceptionFound;
    }

    /**
     * Parse the given XML DOM element for the element data.
     *
     * @param {Object} xmlElement DOM element that is parsed for data.
     * @param {Object} error Object that will contain error values that are parsed from the server response.
     * @return {boolean} {true} if Exception report element was found.
     * @throws {String} Exception is thrown if an error occurs during the synchronous part of the flow.
     */
    function parseException(xmlElement, error) {
        // Notice, even if XML_EXCEPTION child elements are looped through,
        // only the last element is included into the error object. But, there should
        // be only one anyway.
        jQuery(xmlElement).children(myConstants.XML_EXCEPTION).each(function() {
            error[myConstants.KEY_ERROR_CODE] = jQuery.trim(jQuery(this).attr(myConstants.XML_ATTR_EXCEPTION_CODE));
            parseExceptionText(this, error);
        });
    }

    /**
     * Parse the given XML DOM element for the element data.
     *
     * See exception parse-function, {@link #parseException()},
     * for function parameter descriptions.
     *
     * @param {Object} error Object that will contain the error text that is parsed here.
     */
    function parseExceptionText(xmlElement, error) {
        // Notice, even if XML_EXCEPTION_TEXT child elements are looped through,
        // only the last element is included into the error object. But, there should
        // be only one anyway.
        jQuery(xmlElement).children(myConstants.XML_EXCEPTION_TEXT).each(function() {
            error[myConstants.KEY_ERROR_TEXT] = jQuery.trim(jQuery(this).text());
        });
    }

    /**
     * Parse the given XML DOM element for the element data.
     *
     * Notice, parse-functions always provide same parameters and a common way
     * to parse XML is provided throughout the whole parse hierarchy.
     *
     * See root element parse-function, {@link #parseFeatureCollection()},
     * for function parameter descriptions.
     */
    function parseCompositeObservableProperty(xmlElement, container, asyncStarted, asyncCallback, errors) {
        jQuery(xmlElement).children(myConstants.XML_COMPOSITE_OBSERVABLE_PROPERTY).each(function() {
            parseComponent(this, container, asyncStarted, asyncCallback, errors);
        });
    }

    /**
     * Parse the given XML DOM element for the element data.
     *
     * Notice, parse-functions always provide same parameters and a common way
     * to parse XML is provided throughout the whole parse hierarchy.
     *
     * See root element parse-function, {@link #parseFeatureCollection()},
     * for function parameter descriptions.
     */
    function parseComponent(xmlElement, container, asyncStarted, asyncCallback, errors) {
        jQuery(xmlElement).children(myConstants.XML_COMPONENT).each(function() {
            parseObservableProperty(this, container, asyncStarted, asyncCallback, errors);
        });
    }

    /**
     * Parse the given XML DOM element for the element data.
     *
     * Notice, parse-functions always provide same parameters and a common way
     * to parse XML is provided throughout the whole parse hierarchy.
     *
     * See root element parse-function, {@link #parseFeatureCollection()},
     * for function parameter descriptions.
     */
    function parseObservableProperty(xmlElement, container, asyncStarted, asyncCallback, errors) {
        jQuery(xmlElement).children(myConstants.XML_OBSERVABLE_PROPERTY).each(function() {
            var property = jQuery.trim(jQuery(this).attr(myConstants.XML_ATTR_GML_ID));
            if (property) {
                // Create a shallow copy of the empty property object.
                // Then, object contains default values that may be replaced by parsed content.
                // Notice, empty property object contains only strings. So, shallow copy here
                // is actually a deep copy.
                var propertyObject = _.clone(myConstants.PROPERTY_OBJECT_EMPTY);
                parseLabel(this, propertyObject, asyncStarted, asyncCallback, errors);
                parseBasePhenomenon(this, propertyObject, asyncStarted, asyncCallback, errors);
                parseUom(this, propertyObject, asyncStarted, asyncCallback, errors);
                parseStatisticalMeasure(this, propertyObject, asyncStarted, asyncCallback, errors);
                container[property] = propertyObject;
            }
        });
    }

    /**
     * Parse the given XML DOM element for the element data.
     *
     * Notice, parse-functions always provide same parameters and a common way
     * to parse XML is provided throughout the whole parse hierarchy.
     *
     * See root element parse-function, {@link #parseFeatureCollection()},
     * for function parameter descriptions.
     */
    function parseLabel(xmlElement, container, asyncStarted, asyncCallback, errors) {
        jQuery(xmlElement).children(myConstants.XML_LABEL).each(function() {
            container.label = jQuery.trim(jQuery(this).text());
        });
    }

    /**
     * Parse the given XML DOM element for the element data.
     *
     * Notice, parse-functions always provide same parameters and a common way
     * to parse XML is provided throughout the whole parse hierarchy.
     *
     * See root element parse-function, {@link #parseFeatureCollection()},
     * for function parameter descriptions.
     */
    function parseBasePhenomenon(xmlElement, container, asyncStarted, asyncCallback, errors) {
        jQuery(xmlElement).children(myConstants.XML_BASE_PHENOMENON).each(function() {
            container.phenomenon = jQuery.trim(jQuery(this).text());
        });
    }

    /**
     * Parse the given XML DOM element for the element data.
     *
     * Notice, parse-functions always provide same parameters and a common way
     * to parse XML is provided throughout the whole parse hierarchy.
     *
     * See root element parse-function, {@link #parseFeatureCollection()},
     * for function parameter descriptions.
     */
    function parseUom(xmlElement, container, asyncStarted, asyncCallback, errors) {
        jQuery(xmlElement).children(myConstants.XML_UOM).each(function() {
            container.unit = jQuery.trim(jQuery(this).attr(myConstants.XML_ATTR_UOM));
        });
    }

    /**
     * Parse the given XML DOM element for the element data.
     *
     * Notice, parse-functions always provide same parameters and a common way
     * to parse XML is provided throughout the whole parse hierarchy.
     *
     * See root element parse-function, {@link #parseFeatureCollection()},
     * for function parameter descriptions.
     */
    function parseStatisticalMeasure(xmlElement, container, asyncStarted, asyncCallback, errors) {
        jQuery(xmlElement).children(myConstants.XML_STATISTICAL_MEASURE).each(function() {
            parseStatisticalMeasureInner(this, container, asyncStarted, asyncCallback, errors);
        });
    }

    /**
     * Parse the given XML DOM element for the element data.
     *
     * Notice, parse-functions always provide same parameters and a common way
     * to parse XML is provided throughout the whole parse hierarchy.
     *
     * See root element parse-function, {@link #parseFeatureCollection()},
     * for function parameter descriptions.
     */
    function parseStatisticalMeasureInner(xmlElement, container, asyncStarted, asyncCallback, errors) {
        jQuery(xmlElement).children(myConstants.XML_STATISTICAL_MEASURE_INNER).each(function() {
            parseStatisticalFunction(this, container, asyncStarted, asyncCallback, errors);
            parseAggregationTimePeriod(this, container, asyncStarted, asyncCallback, errors);
        });
    }

    /**
     * Parse the given XML DOM element for the element data.
     *
     * Notice, parse-functions always provide same parameters and a common way
     * to parse XML is provided throughout the whole parse hierarchy.
     *
     * See root element parse-function, {@link #parseFeatureCollection()},
     * for function parameter descriptions.
     */
    function parseStatisticalFunction(xmlElement, container, asyncStarted, asyncCallback, errors) {
        jQuery(xmlElement).children(myConstants.XML_STATISTICAL_FUNCTION).each(function() {
            container.statisticalFunction = jQuery.trim(jQuery(this).text());
        });
    }

    /**
     * Parse the given XML DOM element for the element data.
     *
     * Notice, parse-functions always provide same parameters and a common way
     * to parse XML is provided throughout the whole parse hierarchy.
     *
     * See root element parse-function, {@link #parseFeatureCollection()},
     * for function parameter descriptions.
     */
    function parseAggregationTimePeriod(xmlElement, container, asyncStarted, asyncCallback, errors) {
        jQuery(xmlElement).children(myConstants.XML_AGGREGATION_TIME_PERIOD).each(function() {
            container.statisticalPeriod = jQuery.trim(jQuery(this).text());
        });
    }

    /**
     * Handles the callback and possible error situations there.
     *
     * @param {function(data)} callback Callback function that is called.
     * @param {Object} data Data that is provided for callback.
     *                      May be {undefined}, for example, if an error occurred.
     * @param [] errors Array that contains possible errors that occurred during the asynchronous flow.
     */
    function handleCallback(callback, data, errors) {
        try {
            if (callback) {
                callback(data, errors);
            }

        } catch(e) {
            // Ignore errors that may occur in the callback.
            // Callback may be provided from outside of this library.
            if ("undefined" !== typeof console && console) {
                console.error("ERROR: Callback function error!");
                console.log(e);
                console.log(e.name);
                console.log(e.message);
                console.log(e.stack);
            }
        }
    }

    /**
     * Request XML data asynchronously from the given URL and give it for the callback function.
     *
     * @param {String} url URL for the request. May not be {undefined}, {null} or empty.
     * @param [] errors Array that contains possible errors that occurred during the asynchronous flow.
     *                  May not be {undefined} or {null}.
     * @param {function(data, errors)} callback Callback function is called with response data.
     *                                          If an error occurs during request, callback is called without parameters.
     *                                          May be {undefined} or {null}.
     */
    function requestXml(url, errors, callback) {
        // Make sure that this function is asynchronous in all cases,
        // also in possible error cases that could otherwise use callback synchronously.
        setTimeout(function() {
            // URL may be logged here for debugging purposes.
            // Then, you may also use the URL directly with a web browser to check the XML.
            // if ("undefined" !== typeof console && console) { console.debug("URL: " + url); }
            jQuery.ajax({
                type : myConstants.HTTP_METHOD,
                url : url,
                dataType : myConstants.DATA_TYPE,
                success : function(data) {
                    // Request was success.
                    // Notice, if server gives an exception information
                    // in XML format for some error case, the flow should
                    // come here. But, if testing is done for this javascript
                    // in different domain or sub-domain than URL used for ajax,
                    // the callback may call error-function instead. Then,
                    // the XML body may not be available for parsing.
                    handleCallback(callback, data, errors);
                },
                error : function(jqXHR, textStatus, errorThrown) {
                    // An error occurred.
                    var error = {};
                    error[myConstants.KEY_ERROR_CODE] = jqXHR.status;
                    // Use errorThrown if it is available and not empty string.
                    // Otherwise, use textStatus for error value. Notice, empty
                    // string is also interpreted as false with logical or operator.
                    error[myConstants.KEY_ERROR_TEXT] = errorThrown || textStatus;
                    errors.push(error);
                    handleCallback(callback, undefined, errors);
                }
            });
        }, 0);
    }

    /**
     * Get the result data for the callback function as a data structure
     * that contains results inside objects or inside arrays.
     *
     * Operation is asynchronous.
     *
     * This function uses its own callback function to parse data received by the request operation.
     * The callback function handles the parsing of the server response data and calls the original
     * callback providing the parsed data for the function.
     *
     * See {@link #parseXml()} for the parsed data structure.
     *
     * @param {String} url URL for the request.
     * @param {function(data, errors)} callback Callback is called with the parsed data structure when operation finishes.
     *                                  If an error occurs, callback is called without parameters.
     */
    function requestAndParseXml(url, callback) {
        // Error container for asynchronous flow. The common container is provided here
        // because this function wraps all request and parse operations. Then, this container
        // will contain all the errors that may also occur in any asynchronous operation.
        var errorContainer = [];

        // Get XML data for the given callback function,
        // parse data and give necessary data as callback
        // to the original caller.
        requestXml(url, errorContainer, function(xml, errors) {
            parseXml(xml, errors, callback);
        });
    }

    /**
     * Handle finalization of similar parts of locations data.
     *
     * Pushes the finalized data into the given target array.
     *
     * @param {Object} data The original data content.
     *                      May be {undefined} or {null} but then operation is ignored.
     * @param {Array} pairs The original time-value-pairs.
     *                       May be {undefined} or {null} but then operation is ignored.
     * @param {Object} target Object that will contain finalized property information and time-value-pairs.
     *                        May be {undefined} or {null} but then operation is ignored.
     */
    function finalizeDataValues(data, pairs, target) {
        if (data && data.parameters && pairs && target) {
            // Parameters array contain request parameter identifiers as strings.
            for (var i = 0; i < data.parameters.length; ++i) {
                var key = data.parameters[i];
                if (key) {
                    var finalizedValues = {
                        // Data property is identified by request parameter strings.
                        property : data.properties[key],
                        timeValuePairs : []
                    };
                    for (var j = 0; j < pairs.length; ++j) {
                        var pair = pairs[j];
                        // Time value pair contains the time value and the measurement value.
                        finalizedValues.timeValuePairs.push({
                            time : pair.time,
                            value : pair.values[key]
                        });
                    }
                    // Target data is identified by request parameter strings.
                    target[key] = finalizedValues;
                }
            }
        }
    }

    /**
     * Convert the given data structure and forward the callback for the original data callback.
     *
     * See {@link #finalizeContent()} for the original data structure and {@link #getData()} API function
     * for data structure that is provided through API.
     *
     * @param {function(data, errors)} callback Callback function that is called.
     *                                          May not be {undefined} or {null}.
     * @param {Object} data Data that is provided for callback.
     *                      May be {undefined}, for example, if an error occurred.
     * @param [] errors Array that contains possible errors that occurred during the asynchronous flow.
     */
    function dataCallback(callback, data, errors) {
        // Convert the data for the original callback function.
        // Default value for finalized data is undefined.
        // Then, undefined value is given to callback if values can not be converted.
        var finalizedData;
        try {
            if (data && data.parameters && data.properties) {
                finalizedData = {
                    info : data.info,
                    properties : data.properties,
                    locations : []
                };
                // Check if locations data is available for finalization.
                if (data.locations && data.locations.length > 0) {
                    // Location data is available.
                    // Convert the data and structure into required form.
                    var locations = data.locations;
                    for (var i = 0; i < locations.length; ++i) {
                        var location = locations[i];
                        // Location object will be inserted into the finalizedData.locations array.
                        var locationObject = {
                            info : location.info,
                            data : {}
                        };
                        // Finalize data for location.
                        finalizeDataValues(data, location.timeValuePairs, locationObject.data);
                        // Insert finalized data into array.
                        finalizedData.locations.push(locationObject);
                    }
                }
            }

        } catch(e) {
            // An error occurred.
            var errorString = "ERROR: Could not finalize data!";
            if ("undefined" !== typeof console && console) {
                console.error(errorString);
            }
            // Set data undefined.
            finalizedData = undefined;
            // Append the error to the errors array.
            var error = {};
            error[myConstants.KEY_ERROR_TEXT] = e.toString();
            errors.push(error);
        }

        callback(finalizedData, errors);
    }

    /**
     * Creates URL query field-value-pairs string from the key-value-pairs of the object.
     *
     * @param {Object} queryExtension May be {undefined} or {null}.
     *                                Property values may be {undefined}, {null} or {string}.
     * @return {String} URL query field-value-pairs string.
     *                  May not be {undefined} or {null}. May be an empty {string}.
     *                  If content is provided, "&" is automatically included as a prefix.
     */
    function handleQueryExtension(queryExtension) {
        var extension = "";
        if (queryExtension) {
            for (var key in queryExtension) {
                if (queryExtension.hasOwnProperty(key)) {
                    // Always include delimiter character even if value would not be given.
                    extension += fi.fmi.metoclient.metolib.Utils.encodeUriComponent(key);
                    extension += myConstants.URL_QUERY_FIELD_VALUE_DELIMITER;
                    extension += fi.fmi.metoclient.metolib.Utils.encodeUriComponent(queryExtension[key] || "");
                }
            }
            if (extension) {
                // Include prefix into string.
                extension = myConstants.URL_QUERY_PREFIX_AND + extension;
            }
        }
        return extension;
    }

    /**
     * This function provides the actual implementation for the API functions
     * that request parsed data.
     *
     * Operation is asynchronous.
     *
     * See API function {@link #getData()} for function and parameter descriptions.
     * @throws {String} Exception if parameters are not correct.
     */
    function getParsedData(url, storedQueryId, requestParameter, begin, end, timestep, numOfTimesteps, denyTimeAdjusting, geoid, wmo, fmisid, sites, bbox, crs, queryExtension, callback) {
        // Convert possible integer millisecond values of times into Date objects.
        if (!( begin instanceof Date) && !isNaN(begin)) {
            begin = new Date(begin);
        }
        if (!( end instanceof Date) && !isNaN(end)) {
            end = new Date(end);
        }

        // Make sure parameters are available as a single string.
        if (requestParameter && _.isArray(requestParameter)) {
            requestParameter = requestParameter.join();
        }

        // Timestep and numOfTimesteps are alternative to each others. Timestep is the first choice of the two.
        // If numOfTimesteps is used, begin and end are also required and should be Date objects.
        if ((undefined === timestep || null === timestep) && numOfTimesteps && numOfTimesteps > 0 && begin instanceof Date && end instanceof Date) {
            timestep = Math.round((end.getTime() - begin.getTime()) / numOfTimesteps);
        }

        // Check that required data is available and parameters are of the correct type.
        var urlCheck = url && _.isString(url);
        var storedQueryCheck = storedQueryId && _.isString(storedQueryId);
        var parameterCheck = requestParameter && _.isString(requestParameter);
        var periodCheck = begin instanceof Date && end instanceof Date && begin.getTime() <= end.getTime() && (!timestep || _.isNumber(timestep) );
        var geoidCheck = _.isNumber(geoid) || geoid && _.isString(geoid) || _.isArray(geoid) && geoid.length;
        var wmoCheck = _.isNumber(wmo) || wmo && _.isString(wmo) || _.isArray(wmo) && wmo.length;
        var fmisidCheck = _.isNumber(fmisid) || fmisid && _.isString(fmisid) || _.isArray(fmisid) && fmisid.length;
        var sitesCheck = sites && _.isString(sites) || _.isArray(sites) && sites.length;
        var bboxCheck = bbox && _.isString(bbox);
        var locationGivenCheck = geoidCheck || wmoCheck || fmisidCheck || sitesCheck || bboxCheck;
        var crsCheck = !crs || _.isString(crs);
        if (urlCheck && storedQueryCheck && parameterCheck && periodCheck && locationGivenCheck && crsCheck) {
            // Check if begin and end times should be adjusted for server. They need to be exact for minutes.
            if (!denyTimeAdjusting) {
                begin.setTime(adjustBeginTime(timestep, begin).getTime());
                end.setTime(adjustEndTime(timestep, end, begin).getTime());
            }

            // Server uses ISO-timestamp for pre 1970 times.
            // Remove millisecond part from the timestamp because server does not support it.
            // Millisecond is separated by . character. So, use regex to remove . delimiter and ms integer.
            var MS_REG = /\.\d+/;
            begin = fi.fmi.metoclient.metolib.Utils.encodeUriComponent(begin.toISOString()).split(MS_REG).join("");
            end = fi.fmi.metoclient.metolib.Utils.encodeUriComponent(end.toISOString()).split(MS_REG).join("");

            // The server uses the default timestep when the URL parameter string is empty.
            var timeStepParameter = "";
            // Timestep should be in minutes for the server.
            var timestepMinutes = Math.floor(timestep / myConstants.MIN_TO_MS);
            if (timestepMinutes && timestepMinutes > 0) {
                timeStepParameter = myConstants.REQUEST_TIMESTEP + timestepMinutes;
            }

            // Parameters are given through the API. Therefore, make sure parameters do not
            // contain illegal characters when inserted into the URL. Parameters that should
            // be numbers are checked above and numbers are always accepted.
            requestParameter = fi.fmi.metoclient.metolib.Utils.encodeUriComponent(requestParameter);

            var ind;
            var geoidParameter = "";
            if (_.isNumber(geoid) || geoid && _.isString(geoid)) {
                // Insert geoid into an array if integer or string was given.
                geoid = [geoid];

            }
            // Content should always be in an array.
            if (_.isArray(geoid)) {
                // There may be multiple geoids. Server accepts multiple geoid parameters.
                for ( ind = 0; ind < geoid.length; ++ind) {
                    var tmpGeoid = geoid[ind];
                    if (_.isNumber(tmpGeoid) || tmpGeoid && _.isString(tmpGeoid)) {
                        tmpGeoid = fi.fmi.metoclient.metolib.Utils.encodeUriComponent(tmpGeoid);
                        geoidParameter += myConstants.REQUEST_GEOID + tmpGeoid;
                    }
                }
            }

            var wmoParameter = "";
            if (_.isNumber(wmo) || wmo && _.isString(wmo)) {
                // Insert string into an array if integer or string was given.
                wmo = [wmo];

            }
            // Content should always be in an array.
            if (_.isArray(wmo)) {
                // There may be multiple wmos. Server accepts multiple wmo parameters.
                for ( ind = 0; ind < wmo.length; ++ind) {
                    var tmpWmo = wmo[ind];
                    if (_.isNumber(tmpWmo) || tmpWmo && _.isString(tmpWmo)) {
                        tmpWmo = fi.fmi.metoclient.metolib.Utils.encodeUriComponent(tmpWmo);
                        wmoParameter += myConstants.REQUEST_WMO + tmpWmo;
                    }
                }
            }

            var fmisidParameter = "";
            if (_.isNumber(fmisid) || fmisid && _.isString(fmisid)) {
                // Insert string into an array if integer or string was given.
                fmisid = [fmisid];

            }
            // Content should always be in an array.
            if (_.isArray(fmisid)) {
                // There may be multiple fmisids. Server accepts multiple fmisid parameters.
                for ( ind = 0; ind < fmisid.length; ++ind) {
                    var tmpFmisid = fmisid[ind];
                    if (_.isNumber(tmpFmisid) || tmpFmisid && _.isString(tmpFmisid)) {
                        tmpFmisid = fi.fmi.metoclient.metolib.Utils.encodeUriComponent(tmpFmisid);
                        fmisidParameter += myConstants.REQUEST_FMISID + tmpFmisid;
                    }
                }
            }

            var sitesParameter = "";
            if (sites) {
                if (_.isString(sites)) {
                    // Insert sites string into an array if only integer or string was given.
                    sites = [sites];
                }
                // There may be multiple places. Server accepts multiple place parameters.
                for ( ind = 0; ind < sites.length; ++ind) {
                    var place = sites[ind];
                    if (place && _.isString(place)) {
                        place = fi.fmi.metoclient.metolib.Utils.encodeUriComponent(place);
                        sitesParameter += myConstants.REQUEST_PLACE + place;
                    }
                }
            }

            var bboxParameter = "";
            if (bbox) {
                bboxParameter = myConstants.REQUEST_BBOX + fi.fmi.metoclient.metolib.Utils.encodeUriComponent(bbox);
            }

            var crsParameter = "";
            if (crs) {
                crsParameter = myConstants.REQUEST_CRS + fi.fmi.metoclient.metolib.Utils.encodeUriComponent(crs);
            }

            var storedQueryIdParameter = myConstants.REQUEST_STORED_QUERY_ID + fi.fmi.metoclient.metolib.Utils.encodeUriComponent(storedQueryId);

            // Check which delimiter is used with the first query that is appended to the base URL.
            var urlQueryDelimiter = url.indexOf(myConstants.URL_QUERY_PREFIX_BEGIN) === -1 ? myConstants.URL_QUERY_PREFIX_BEGIN : myConstants.URL_QUERY_PREFIX_AND;
            if (url.length > 0 && (url.indexOf(myConstants.URL_QUERY_PREFIX_BEGIN) === url.length - 1 || url.indexOf(myConstants.URL_QUERY_PREFIX_AND) === url.length - 1 )) {
                // Do not use delimiter if URL ends with one.
                urlQueryDelimiter = "";
            }

            var urlQueryExtension = handleQueryExtension(queryExtension);

            var requestUrl = url + urlQueryDelimiter + myConstants.REQUEST_GET_FEATURE + storedQueryIdParameter + myConstants.REQUEST_PARAMETERS + requestParameter + myConstants.REQUEST_BEGIN + begin + myConstants.REQUEST_END + end + timeStepParameter + geoidParameter + wmoParameter + fmisidParameter + sitesParameter + bboxParameter + crsParameter + urlQueryExtension;
            requestAndParseXml(requestUrl, callback);

        } else {
            var errorStr = "ERROR: Wrong or missing information for the request!";
            if ("undefined" !== typeof console && console) {
                console.error(errorStr);
            }
            // Notice, this error is part of the synchronous flow.
            throw errorStr;
        }
    }

    /**
     * See API for function description.
     */
    function adjustBeginTime(timestep, time) {
        var date;
        if (undefined !== time && null !== time) {
            // New date object is always created to make sure that the original object is not modified unwanted.
            date = time instanceof Date ? new Date(time.getTime()) : new Date(time);
            // Begin time is always rounded towards smaller number.
            date.setMilliseconds(0);
            date.setSeconds(0);
            var timestepMinutes = !timestep ? undefined : Math.floor(timestep / myConstants.MIN_TO_MS);
            if (timestepMinutes) {
                // Also, server gives values starting from the minutes that are divisible by the timestep
                // and are equal to or greater than the given value. For client purposes, the begin time is
                // rounded down to the value that matches the given timestep. Notice, still the given timestep
                // may not match the timestep that is used to measure statistics. Then, this may not help.
                var beginMinutes = date.getMinutes();
                // Notice, begin minutes can always be an exact hour. Because server starts from that.
                // Therefore, this works even if beginMinutes was less than timestepMinutes.
                beginMinutes -= (beginMinutes % timestepMinutes);
                date.setMinutes(beginMinutes);
            }
        }
        return date;
    }

    /**
     * See API for function description.
     */
    function adjustEndTime(timestep, end, begin) {
        var date;
        if (undefined !== begin && null !== begin && undefined !== end && null !== end) {
            date = end instanceof Date ? new Date(end.getTime()) : new Date(end);
            var beginDate = adjustBeginTime(timestep, begin);
            if (timestep) {
                // Make sure that the end value is evenly on the timestep.
                // Unlike with begin time, exact hour does not limit time step here.
                var reminder = (date.getTime() - beginDate.getTime()) % timestep;
                if (reminder > 0) {
                    date.setTime(date.getTime() + (timestep - reminder));
                }
            }
        }
        return date;
    }

    /**
     * See API for function description.
     */
    function getData(options) {
        if (options && options.callback) {
            try {
                // Object properties are given as function parameters here instead of options object.
                // Then, later if string or integer values are changed in the function, they are changed
                // to function variables instead of changing property values of the original object. Notice,
                // arrays and objects as function parameters still refere to the original arrays and objects.
                getParsedData(options.url, options.storedQueryId, options.requestParameter, options.begin, options.end, options.timestep, options.numOfTimesteps, options.denyTimeAdjusting, options.geoid, options.wmo, options.fmisid, options.sites, options.bbox, options.crs, options.queryExtension, function(data, errors) {
                    // Notice, errors parameter is for the errors that occurred during the asynchronous flow.
                    dataCallback(options.callback, data, errors);
                });

            } catch(e) {
                // An error occurred in synchronous flow.
                // But, inform observer about the error asynchronously.
                // Then, flow progresses similarly through API in both
                // error and success cases.
                setTimeout(function() {
                    if ("undefined" !== typeof console && console) {
                        console.error("ERROR: Get data error!");
                    }
                    var error = {};
                    error[myConstants.KEY_ERROR_TEXT] = e.toString();
                    handleCallback(options.callback, undefined, [error]);
                }, 0);
            }

        } else {
            // Callback is required. There is no reason to request data if it is not used somewhere.
            var errorStr = "ERROR: Options object and callback function in it are mandatory!";
            if ("undefined" !== typeof console && console) {
                console.error(errorStr);
            }
            throw errorStr;
        }
    }

    /**
     * =========================================
     * Public RequestParser API is returned here.
     * =========================================
     */
    return {

        /**
         * Request data.
         *
         * Operation is asynchronous.
         *
         * Notice, callback is {function(data, errors){}}.
         *      - data: Data object provides locations data.
         *              May be {undefined} if an error has occurred.
         *              The object is of this structure:
         *          {
         *              // General information received in the server response for the request.
         *              // May not be {undefined} or {null}.
         *              // Content properties are set if given in the server response.
         *              info : {
         *                  begin : {Date|undefined},
         *                  end : {Date|undefined}
         *              },
         *              // Properties provide descriptive property objects that correspond to
         *              // the parameter keys that have been given for the request. Notice,
         *              // property data is also available inside locations data objects.
         *              // This object is provided as a complementary object, if reference to a single
         *              // wrapper object is later needed for general information about properties.
         *              properties : {
         *                  parameterAsKey : { label : "labelString",
         *                                     unit : "measurementUnitString",
         *                                     phenomenon : "phenomenonString",
         *                                     statisticalFunction : "statisticalFunctionString",
         *                                     statisticalPeriod : "statisticalAggregationTimePeriod" },
         *                  ...
         *              },
         *              // Data of locations. May be empty if sites data is not provided.
         *              // May not be {undefined} or {null}.
         *              locations : [
         *                  {
         *                      info : {
         *                          id : "location id string",
         *                          geoid : "geoid string",
         *                          wmo : "wmo string",
         *                          fmisid : "fmisid string",
         *                          name : "location name string",
         *                          region : "region name string",
         *                          country : "country name string",
         *                          timezone : "timezone name string",
         *                          position : [ "positionStringPart1", "positionStringPart2", ... ]
         *                      },
         *                      data : {
         *                          // Data property keys correspond to the parameter keys
         *                          // that have been given for the request.
         *                          parameterAsKey : {
         *                            property : { label : "labelString",
         *                                         unit : "measurementUnitString",
         *                                         phenomenon : "phenomenonString",
         *                                         statisticalFunction : "statisticalFunctionString",
         *                                         statisticalPeriod : "statisticalAggregationTimePeriod" },
         *                            timeValuePairs : [ { time : intTimeInMsSince01011970,
         *                                                 value : floatMeasurementValue }, ... ]
         *                          },
         *                          ...
         *                      }
         *                  },
         *                  ...
         *              ]
         *          }
         *      - errors: Array that contains possible errors that occurred during the flow. Array is
         *                always provided even if it may be empty. If an error occurs in this parser,
         *                an error string is pushed here. Also, when an HTTP error occurs, error contains
         *                the textual portion of the HTTP status, such as "Not Found" or "Internal Server Error."
         *                Errors parameter is of this structure:
         *          [
         *              {
         *                  // None, one, or more of the following error values may exist.
         *                  // Values may also be {undefined} or {null}.
         *                  errorCode : "errorCodeString",
         *                  errorText : "errorTextString",
         *                  extension : {Object}
         *              },
         *              ...
         *          ]
         *
         * Notice, object properties of the function {options} parameter are URL encoded by this library
         * before they are inserted into the request URL.
         *
         * @param {Object} options Mandatory. May not be {undefined} or {null}. Object structure:
         *     {
         *         url : {String}
         *               Mandatory property. May not be {undefined}, {null} or empty.
         *               URL that is used for the given parameters.
         *         storedQueryId : {String}
         *                         Mandatory property. May not be {undefined}, {null} or empty.
         *                         Stored query ID to identify the data that is requested. For example,
         *                         stored query ID may be used to request observed data or forecast data.
         *         requestParameter : {String|Array(String)}
         *                            Mandatory property. May not be {undefined} or {null}. Array may not be empty.
         *                            This is one of the parameter strings that is part of
         *                            URL parameters to define which data is requested from the server.
         *                            Parameter string may contain request for multiple parameters.
         *                            For example, value for temperature may be "td". If an array is given,
         *                            strings are given as separate array string items.
         *         begin : {int|Date}
         *                 Mandatory property. May not be {undefined} or {null}.
         *                 The begin time for the data.
         *                 Integer value is number of milliseconds since 01.01.1970 that can be gotten,
         *                 for example, with {Date::getTime()}. Alternatively, {Date} object may be given.
         *         end : {int|Date}
         *               Mandatory property. May not be {undefined} or {null}.
         *               The end time for the data.
         *               Value is number of milliseconds since 01.01.1970 that can be gotten,
         *               for example, with {Date::getTime()}. Alternatively, {Date} object may be given.
         *         timestep : {int}
         *                    May be {undefined} or {null}.
         *                    Timestep in milliseconds.
         *                    Notice, if this is {undefined} or {null} and {numOfTimsteps} is given,
         *                    {numOfTimsteps}, {begin} and {end} values are used to calculate the value
         *                    for timestep. If timestep is given, it is used instead of {numOfTimsteps}.
         *                    If {undefined}, {null} or zero, server returns all data for
         *                    the given time interval. If timestep is 1, server uses the default
         *                    timestep. Notice, even if time is in milliseconds here, it is converted
         *                    and floored to minutes before sending for the server.
         *         numOfTimesteps : {int}
         *                          May be {undefined} or {null}.
         *                          Number of time steps.
         *                          This value is ignored if {undefined}, {null} or zero or if {timestep} is given.
         *         denyTimeAdjusting : {boolean}
         *                             May be {undefined} or {null}.
         *                             If {true}, {begin} and {end} times are not adjusted for server but given values
         *                             are used exactly for requests. Otherwise, times are adjusted.
         *         geoid : {Array(String|int)|String|int}
         *                 May be {undefined} or {null} or empty if {wmo}, {fmisid}, {sites} or {bbox} is given.
         *                 Array of Geographical name ID (geonames.org) strings or integers.
         *                 One geoid can be given as a single string or integer.
         *                 Notice, either {geoid}, {wmo}, {fmisid}, {sites} or {bbox} is required.
         *         wmo : {Array(String|int)|String|int}
         *               May be {undefined} or {null} or empty if {geoid}, {fmisid}, {sites} or {bbox} is given.
         *               Array of World Meteorological Organization (WMO) identifier strings or integers.
         *               One wmo can be given as a single string or integer.
         *               Notice, either {geoid}, {wmo}, {fmisid}, {sites} or {bbox} is required.
         *         fmisid : {Array(String|int)|String|int}
         *                  May be {undefined} or {null} or empty if {geoid}, {wmo}, {sites} or {bbox} is given.
         *                  Array of FMI observation station identifiers (fmisid) strings or integers.
         *                  One fmisid can be given as a single string or integer.
         *                  Notice, either {geoid}, {wmo}, {fmisid}, {sites} or {bbox} is required.
         *         sites : {Array(String)|String}
         *                 May be {undefined} or {null} or empty if {geoid}, {wmo}, {fmisid} or {bbox} is given.
         *                 Array of site name strings. One site can be given as a single string.
         *                 Notice, either {geoid}, {wmo}, {fmisid}, {sites} or {bbox} is required.
         *         bbox : {String}
         *                May be {undefined}, {null} or empty if {geoid}, {wmo}, {fmisid} or {sites} is given.
         *                BBOX string. Notice, either {geoid}, {wmo}, {fmisid}, {sites} or {bbox} is required.
         *         crs : {String}
         *               May be {undefined}, {null} or empty.
         *               Coordinate Reference System (CRS) string.
         *         queryExtension : {Object}
         *                          Optional. May be {undefined} or {null}.
         *                          Property values may be {undefined}, {null} or {string}.
         *                          This property is not needed in normal use cases of the API.
         *                          But, this property may be used if API does not support field-value-pairs
         *                          that need to be included into request URL query. The key-value-pairs of
         *                          the property are URL encoded and included as URL query field-value-pairs
         *                          in the request. If property value is {undefined} or {null}, it is interpreted
         *                          as an empty string. Notice, other API properties should be used instead of this
         *                          extension if possible.
         *         callback : {function(data, errors)}
         *                    Mandatory property. May not be {undefined} or {null}.
         *                    Callback is called with the parsed data and errors array when operation finishes.
         *                    If an error occurs, data is set {undefined} for the callback. Possible errors are
         *                    given inside the array that is always provided.
         *     }
         */
        getData : getData,

        /**
         * Complementary function to adjust a supposed begin time for server requests.
         *
         * Notice, {getData} function does this automatically for server requests unless
         * {denyTimeAdjusting} property is set {true}. This function is provided as a complementary
         * method for special cases that should adjust times for other purposes outside the parser.
         *
         * @param {int} timestep Timestep in milliseconds. May be {undefined} or {null}.
         * @param {int|Date} time Integer value is number of milliseconds since 01.01.1970 that can be gotten,
         *                        for example, with {Date::getTime()}. Alternatively, {Date} object may be given.
         *                        May be {undefined} or {null} but then operation is ignored and {undefined} is
         *                        returned.
         * @return {Date} Adjusted begin time as {Date} object. Is {undefined} if given {time} is {undefined} or {null}.
         */
        adjustBeginTime : adjustBeginTime,

        /**
         * Complementary function to adjust a supposed end time for server requests.
         *
         * Notice, {getData} function does this automatically for server requests unless
         * {denyTimeAdjusting} property is set {true}. This function is provided as a complementary
         * method for special cases that should adjust times for other purposes outside the parser.
         *
         * @param {int} timestep Timestep in milliseconds. May be {undefined} or {null}.
         * @param {int|Date} end End time that is adjusted by this function.
         *                       Integer value is number of milliseconds since 01.01.1970 that can be gotten,
         *                       for example, with {Date::getTime()}. Alternatively, {Date} object may be given.
         *                       May be {undefined} or {null} but then operation is ignored and {undefined} is
         *                       returned.
         * @param {int|Date} begin Begin time that is used for the time period that is requested. This is needed
         *                         in order to calculate the proper end time. Notice, {begin} does not necessarily
         *                         need to be adjusted before calling this function because value is adjusted
         *                         internally in this function if needed for calculations.
         *                         Integer value is number of milliseconds since 01.01.1970 that can be gotten,
         *                         for example, with {Date::getTime()}. Alternatively, {Date} object may be given.
         *                         May be {undefined} or {null} but then operation is ignored and {undefined} is
         *                         returned.
         * @return {Date} Adjusted end time as {Date} object. Is {undefined} if given {begin} or {end} is {undefined} or {null}.
         */
        adjustEndTime : adjustEndTime
    };

})();

/**
 * fi.fmi.metoclient.metolib.SplitterCache
 * =======================================
 *
 * See https://github.com/fmidev/metolib/wiki/SplitterCache for documentation.
 *
 * Requires:
 * - async.js (https://github.com/caolan/async)
 * - lodash.underscore.js (http://lodash.com/) or underscore.js (http://underscorejs.org/)
 *
 * Original author: Ilkka Rinne / Spatineo Inc. for the Finnish Meteorological Institute
 *
 *
 * This software may be freely distributed and used under the following MIT license:
 *
 * Copyright (c) 2013 Finnish Meteorological Institute
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this
 * software and associated documentation files (the "Software"), to deal in the
 * Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
 * OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

// Strict mode for whole file.
// "use strict";

// Requires lodash
if ("undefined" === typeof _ || !_) {
    throw "ERROR: Lo-dash-underscore is required for fi.fmi.metoclient.metolib.SplitterCache!";
}

// Requires async
if ("undefined" === typeof async || !async) {
    throw "ERROR: Async is required for fi.fmi.metoclient.metolib.SplitterCache!";
}

//"Package" definitions
var fi = fi || {};
fi.fmi = fi.fmi || {};
fi.fmi.metoclient = fi.fmi.metoclient || {};
fi.fmi.metoclient.metolib = fi.fmi.metoclient.metolib || {};

fi.fmi.metoclient.metolib.SplitterCache = (function() {

    //Functions and variables shared with all instances:
    var checkTaskDef = function(taskDef) {
        var placeholder;
        var startNudge = 0;
        var endNudge = 0;
        if (!_.isObject(taskDef)) {
            throw 'taskdef must be an object';
        }

        if (!_.isString(taskDef.service)) {
            throw 'taskDef must contain a \'service\' property of string type';
        }

        if (!_.isArray(taskDef.location)) {
            if (!_.isString(taskDef.location)) {
                throw 'taskDef must contain a \'location\' property of either an array or a string type';
            } else {
                placeholder = taskDef.location;
                taskDef.location = [];
                taskDef.location.push(placeholder);
            }
        }

        if (!_.isArray(taskDef.parameter)) {
            if (!_.isString(taskDef.parameter)) {
                throw 'taskDef must contain a \'parameter\' property of either an array or a string type';
            } else {
                placeholder = taskDef.parameter;
                taskDef.parameter = [];
                taskDef.parameter.push(placeholder);
            }
        }

        if (!_.isNumber(taskDef.resolution)) {
            throw 'taskDef must contain a \'resolution\' property of numeric type';
        } else if (taskDef.resolution > 0.5) {
            taskDef.resolution = Math.round(taskDef.resolution);
        } else {
            throw 'taskDef.resolution must be a positive integer';
        }

        if (!_.isNumber(taskDef.start)) {
            throw 'taskDef must contain a \'start\' property of numeric type';
        }

        if (_.isNumber(taskDef.pointCount)) {
            if (taskDef.pointCount > 0) {
                taskDef.end = taskDef.start + (taskDef.pointCount - 1) * taskDef.resolution;
            } else {
                throw 'taskDef.pointCount must be greater than zero';
            }
        } else if (_.isNumber(taskDef.end)) {
            if (taskDef.end < taskDef.start) {
                throw '\'end\' must be greater than or equal to \'start\'';
            }
            endNudge = (taskDef.end - taskDef.start) % taskDef.resolution;
            if (endNudge !== 0) {
                taskDef.end = taskDef.end + (taskDef.resolution - endNudge);
            }
            taskDef.pointCount = (taskDef.end - taskDef.start) / taskDef.resolution + 1;
        } else {
            throw 'taskDef must contain either \'end\' or \'pointCount\' property of numeric type';
        }
    };

    var arrayEqualsAnyOrder = function(arr1, arr2) {
        var i = 0;
        if (_.isArray(arr1) && _.isArray(arr2)) {
            if (arr1.length === arr2.length) {
                for ( i = 0; i < arr1.length; i++) {
                    if (_.indexOf(arr2, arr1[i]) === -1) {
                        return false;
                    }
                }
                return true;
            } else {
                return false;
            }
        } else if ((arr1 === undefined) || (arr1 === null) || (arr2 === undefined) || (arr2 === null)) {
            return false;
        } else {
            return (arr1 === arr2);
        }
    };

    /**
     * DataBlock constructor
     *
     * DataBlock is provided as an internal class.
     * DataBlock instances are created internally by the cache object.
     */
    var DataBlock = (function() {
        var blockCounter = 0;

        var _constructor = function DataBlock(evtDispatcher) {
            var id = null;
            var fetchError = null;
            var fetcher = null;
            var data = null;
            var taskDef = null;
            var age = 0;
            var fetching = false;
            var fetched = false;
            var pinCount = 0;
            var waitingRecycling = false;
            var waitingMerging = false;
            var ready = false;
            var callbacks = [];
            var requestId = 0;
            var dispatcher = evtDispatcher;
            var thisBlock = this;

            //Private functions:

            function reset() {
                fetchError = null;
                fetcher = null;
                data = null;
                taskDef = null;
                age = 0;
                fetching = false;
                fetched = false;
                pinCount = 0;
                waitingRecycling = false;
                waitingMerging = false;
                ready = false;
                callbacks = [];

            }

            //Privileged functions:
            this.getId = function() {
                return id;
            };

            this.getTaskDef = function() {
                return taskDef;
            };

            this.getStart = function() {
                return (taskDef !== null) ? taskDef.start : undefined;
            };

            this.getEnd = function() {
                return (taskDef !== null) ? taskDef.end : undefined;
            };

            this.getPointCount = function() {
                return (taskDef !== null) ? taskDef.pointCount : undefined;
            };

            this.getResolution = function() {
                return (taskDef !== null) ? taskDef.resolution : undefined;
            };

            this.getService = function() {
                return (taskDef !== null) ? taskDef.service : undefined;
            };

            this.getLocation = function() {
                return (taskDef !== null) ? taskDef.location : undefined;
            };

            this.getParameter = function() {
                return (taskDef !== null) ? taskDef.parameter : undefined;
            };

            this.getDataSize = function() {
                return (taskDef !== null) ? (taskDef.pointCount * taskDef.parameter.length * taskDef.location.length) : 0;
            };

            this.pin = function() {
                if (!waitingRecycling) {
                    pinCount++;
                    if (dispatcher) {
                        dispatcher('blockPinned', thisBlock);
                    }
                    return pinCount;
                } else {
                    return null;
                }
            };

            this.unpin = function() {
                if (pinCount > 0) {
                    pinCount--;
                    if (dispatcher) {
                        dispatcher('blockUnpinned', thisBlock);
                    }
                }
                return pinCount;
            };

            this.isPinned = function() {
                return (pinCount > 0);
            };

            this.getPinCount = function() {
                return pinCount;
            };

            this.getRequestId = function() {
                return requestId;
            };

            this.isWaitingRecycling = function() {
                return waitingRecycling;
            };

            this.isWaitingMerging = function() {
                return waitingMerging;
            };

            this.isFetched = function() {
                return fetched;
            };

            this.setFetched = function(f) {
                if (f === true) {
                    fetched = true;
                } else {
                    fetched = false;
                }
            };

            this.isFetching = function() {
                return fetching;
            };

            this.setFetching = function(f) {
                if (f === true) {
                    fetching = true;
                } else {
                    fetching = false;
                }
            };

            this.increaseNotUsed = function() {
                age++;
                if (dispatcher) {
                    dispatcher('blockAged', thisBlock);
                }
            };

            this.getNotUsedSince = function() {
                return age;
            };
            
            this.fetchFailed = function() {
              return fetchError !== null;  
            };

            this.markForRecycling = function() {
                waitingRecycling = true;
                if (dispatcher) {
                    dispatcher('blockEvicted', thisBlock);
                }
            };

            this.markForMerging = function(merge) {
                if (merge === true){
                    waitingMerging = true;                    
                    if (dispatcher) {
                        dispatcher('blockMarkedForMerge', thisBlock);
                    }
                }
                else {
                    waitingMerging = false;
                    if (dispatcher) {
                        dispatcher('blockMergeCancelled', thisBlock);
                    }
                }
            };

            this.setData = function(d) {
                data = d;
            };

            this.getFetcher = function() {
                return fetcher;
            };

            this.recycle = function() {
                reset();
                if (dispatcher) {
                    dispatcher('blockRecycled', thisBlock);
                }
            };

            /**
             * TaskDef: {
             *          service,
             *          parameter,
             *          location,
             *          start,
             *          resolution,
             *          pointCount
             * }
             */
            this.prepare = function(taskDefinition, dataFetcher) {
                if (!_.isFunction(dataFetcher)) {
                    throw 'fetcher must be a function';
                }
                checkTaskDef(taskDefinition);
                reset();
                taskDef = taskDefinition;
                fetcher = dataFetcher;
                ready = true;
                requestId++;
                if (dispatcher) {
                    dispatcher('blockPrepared', thisBlock);
                }
            };

            /**
             * @param callback {function(err,data)}
             */
            this.getDataAsync = function(callback) {
                var that = this;
                if (!ready) {
                    throw 'Cannot getData in unprepared state, call prepare first';
                }
                age = 0;
                if (!fetched) {
                    if ((callback !== undefined) && _.isFunction(callback)) {
                        callbacks.push(callback);
                    }
                    if (!fetching) {
                        fetching = true;
                        fetcher(taskDef, function(err, result) {
                            var reqId = that.getRequestId();
                            if (err) {
                                fetchError = err;
                            }
                            data = result;                                
                            fetched = true;
                            if (callbacks.length === 0) {
                                fetching = false;
                            } else {
                                async.whilst(function() {
                                    var myReqId = that.getRequestId();
                                    //We may still be looping here when this block has been recycled, re-prepared and fetching for the next request.
                                    //So need to check if the request has not changed and we still have callbacks.
                                    //The callbacks for the next request will still be looped through when the time is right.
                                    return ((reqId === myReqId) && (callbacks.length > 0));
                                }, function(notify) {
                                    try {
                                        var cb = callbacks.pop();
                                        cb.call(that, fetchError, data);
                                    } catch (ex) {
                                        if ("undefined" !== typeof console && console) {
                                            console.error('Error in block finished callback:' + ex.message);
                                        }
                                    } finally {
                                        notify();
                                        fetching = false;
                                    }
                                }, function(err) {
                                    //NOOP
                                });
                            }
                            if (dispatcher) {
                                dispatcher('blockProviderFetchFinished', thisBlock);
                            }
                        });
                        if (dispatcher) {
                            dispatcher('blockProviderFetchStarted', thisBlock);
                        }
                    }

                } else {
                    if (_.isFunction(callback)) {
                        _.defer(function(err, d) {
                            if (dispatcher) {
                                dispatcher('blockCacheFetchFinished', thisBlock);
                            }
                            callback(err, d);
                        }, fetchError, data);
                        if (dispatcher) {
                            dispatcher('blockCacheFetchStarted', thisBlock);
                        }
                    } else {

                    }
                }
            };

            //Instance initialization:
            id = 'id#' + blockCounter++;

            if (dispatcher) {
                dispatcher('blockCreated', thisBlock);
            }
        };

        return _constructor;
    })();

    var eventListenerIdCounter = 0;
    var fetcherIdCounter = 0;

    /**
     * SplitterCache constructor
     *
     * Constructor contains priviledged methods that are provided as API functions
     * for the instantiated cache object.
     */
    var _constructor = function SplitterCache(properties) {
        var emptyBlockPool = [];
        var cachedBlocks = [];
        var mergedBlocks = [];
        var stepResolutions = [];
        var sideFetchBeforeFactor = 0.5;
        var sideFetchAfterFactor = 1;
        var maxBlockDataPoints = 500;
        var minBlockDataPoints = 20;
        var maxCacheDataSize = 50000;
        var strictErrorHandling = true;
        var errorFillValue = NaN;
        
        var fetchers = {};
        var cachedDataSize = 0;
        var cacheHits = 0;
        var cacheMisses = 0;
        var thisCache = this;

        var eventListeners = {
            blockCreated : {},
            blockPrepared : {},
            blockProviderFetchStarted : {},
            blockProviderFetchFinished : {},
            blockCacheFetchStarted : {},
            blockCacheFetchFinished : {},
            blockPinned : {},
            blockUnpinned : {},
            blockEvicted : {},
            blockRecycled : {},
            blockAged : {},
            blockMarkedForMerge : {},
            blockMergeCancelled : {},
            evictStarted : {},
            evictFinished : {},
            fetchStarted : {},
            fetchFinished : {},
            cacheCleared : {},
            dataProviderAdded : {},
            dataProviderRemoved : {}
        };

        //Private functions:
        //Event handling:

        function fireEvent(eventName, eventData) {
            if (eventListeners[eventName] !== undefined) {
                _.each(eventListeners[eventName], function(cb) {
                    try {
                        cb.call(thisCache, eventData);
                    } catch (ex) {
                    }
                });
            }
        }

        function addEventListener(eventName, cb) {
            var listenerId = null;
            if (eventListeners[eventName] !== undefined) {
                if (_.isFunction(cb)) {
                    listenerId = 'id' + (eventListenerIdCounter++);
                    eventListeners[eventName][listenerId] = cb;
                } else {
                    throw 'Event listener callback is not a function';
                }
            } else {
                throw 'Unknown event \'' + eventName + '\', use one of ' + _.reduce(_.keys(eventListeners), function(memo, name, ind) {
                    if (ind > 0) {
                        memo = memo + ', ';
                    }
                    memo = memo + name;
                    return memo;
                });
            }
            return listenerId;
        }

        function removeEventListener(eventName, listenerId) {
            if (eventListeners[eventName] !== undefined) {
                if (eventListeners[eventName][listenerId] !== undefined) {
                    delete eventListeners[eventName][listenerId];
                }
            } else {
                throw 'Unknown event \'' + eventName + '\', use one of ' + _.reduce(_.keys(eventListeners), function(memo, name, ind) {
                    if (ind > 0) {
                        memo = memo + ', ';
                    }
                    memo = memo + name;
                });
            }
        }

        function evict(evictList) {
            async.each(evictList, function(toEvict, notify) {
                toEvict.markForRecycling();
                notify();
            }, function(err) {
                if (err && "undefined" !== typeof console && console) {
                    console.error(err);
                }
            });
        }

        function mergeBlocks(block1, block2, callback) {
            var newBlock = null;
            var taskDef = {};
            var combinedData = [];
            if ((block1.pin() > 0) && (block2.pin() > 0)) {
                block1.markForMerging(true);
                block2.markForMerging(true);
                newBlock = getDataBlock();
                taskDef = _.clone(block1.getTaskDef());
                taskDef.end = block2.getEnd();
                taskDef.pointCount = block1.getPointCount() + block2.getPointCount();
                newBlock.prepare(taskDef, block1.getFetcher());
                newBlock.setFetching(true);
                fireEvent('blockCacheFetchStarted', newBlock);
                async.parallel({
                    data1 : function(cb) {
                        block1.getDataAsync(function(err, data) {
                            if (err) {
                                if ("undefined" !== typeof console && console) {
                                    console.log('Warning: getDataAsync from merged block1 returned error:\'' + err + '\'');
                                }
                                cb(err);
                            }
                            else {
                                fillWith(combinedData, data, taskDef.location, taskDef.parameter, 0, 0, block1.getPointCount(), cb);                                
                            }
                        });
                    },
                    data2 : function(cb) {
                        block2.getDataAsync(function(err, data) {
                            if (err) {
                                if ("undefined" !== typeof console && console) {
                                    console.log('Warning: getDataAsync from merged block2 returned error:\'' + err + '\'');
                                }
                                cb(err);
                            }
                            else {
                                fillWith(combinedData, data, taskDef.location, taskDef.parameter, block1.getPointCount(), 0, block2.getPointCount(), cb);                                
                            }
                        });
                    }
                }, function(err, results) {
                    block1.unpin();
                    block2.unpin();
                    if (!err){
                        block1.markForRecycling();
                        block2.markForRecycling();
                        newBlock.setData(combinedData);
                        newBlock.setFetching(false);
                        newBlock.setFetched(true);
                        callback(null, newBlock);
                        fireEvent('blockCacheFetchFinished', newBlock);
                    } else {
                        newBlock.reset();
                        block1.markForMerging(false);
                        block2.markForMerging(false);
                        callback(err);
                        fireEvent('blockCacheFetchFinished', null);
                    }
                });
            } else {
                _.defer(function() {
                    callback(new Error('One or both blocks already marked for recycling'));
                });
            }
        }

        function blocksAreContinuous(block1, block2) {
            if (block1.getResolution() === block2.getResolution() && (block2.getStart() === block1.getEnd() + block1.getResolution())) {
                return true;
            } else {
                return false;
            }
        }

        function shouldBlocksBeMerged(block1, block2) {
            //It's assumed that service, location and parameter equality has already been checked:
            if (!block1.fetchFailed() && !block2.fetchFailed() && !block1.isWaitingMerging() && !block2.isWaitingMerging() && ((block1.getPointCount() < minBlockDataPoints) || (block2.getPointCount() < minBlockDataPoints)) && blocksAreContinuous(block1, block2) && (block1.getPointCount() + block2.getPointCount() < maxBlockDataPoints)) {
                return true;
            } else {
                return false;
            }
        }

        function getDataBlock() {
            var dataBlock;
            if (emptyBlockPool.length > 0) {
                dataBlock = emptyBlockPool.pop();
            } else {
                dataBlock = new DataBlock(fireEvent);
            }
            return dataBlock;
        }

        function blockOverlaps(blockStart, blockEnd, start, end) {
            var retval = false;
            //exactly matching steps:
            if ((blockStart === start) && (blockEnd === end)) {
                retval = true;
            }
            //overlapping steps:
            else if ((blockStart <= end) && (blockEnd > start)) {
                retval = true;
            }
            return retval;
        }

        function createMissingBlocksBefore(prevBlockEnd, blockStart, fetchStart, fetchEnd, taskDef) {
            var retval = null;
            //if at first block or we've just crossed a gap in steps between cached data blocks:
            if ((prevBlockEnd === null) || (prevBlockEnd < (blockStart - taskDef.resolution))) {
                //The current block starts after our interesting step sequence starts:
                if (blockStart > fetchStart) {
                    //the current block starts after or at the same step as our interesting step sequence ends:
                    if (blockStart >= fetchEnd) {
                        //create new blocks until the end of our interesting step sequence:
                        if (prevBlockEnd === null) {
                            retval = allocateAndPrepareContinuousBlocks(taskDef, fetchStart, fetchEnd);
                        } else {
                            retval = allocateAndPrepareContinuousBlocks(taskDef, Math.max(prevBlockEnd, fetchStart), fetchEnd);
                        }
                    }
                    //current block starts before our interesting step sequence ends:
                    else {
                        //create new blocks until one step before the start of the current block:
                        if (prevBlockEnd === null) {
                            retval = allocateAndPrepareContinuousBlocks(taskDef, fetchStart, (blockStart - taskDef.resolution));
                        } else {
                            retval = allocateAndPrepareContinuousBlocks(taskDef, Math.max((prevBlockEnd + taskDef.resolution), fetchStart), (blockStart - taskDef.resolution));
                        }
                    }
                }
            }
            return retval;
        }

        function recycleBlock(block) {
            if (block.isPinned()) {
                async.whilst(function() {
                    return block.isPinned();
                }, function(notify) {
                    setTimeout(notify, 500);
                }, function(err) {
                    block.recycle();
                    emptyBlockPool.push(block);
                });
            } else {
                block.recycle();
                emptyBlockPool.push(block);
            }
        }

        //A single-line queue for running iterateCache: if more than one
        //iteration is requested simultaneously, others have to queue for
        //execution, because iterateCache changes the internal cache state asynchronously.
        var iterateCacheQueue = async.queue(function(taskDef, callback) {
            callback(null, iterateCache(taskDef));
        }, 1);

        function iterateCache(taskDef) {
            var retval = [];
            var requestedStart = taskDef.start;
            var requestedEnd = taskDef.end;
            var sideFetchBeforeItemCount = Math.ceil(sideFetchBeforeFactor * taskDef.pointCount);
            var sideFetchAfterItemCount = Math.ceil(sideFetchAfterFactor * taskDef.pointCount);
            var fetchStart = requestedStart - sideFetchBeforeItemCount * taskDef.resolution;
            var fetchEnd = requestedEnd + sideFetchAfterItemCount * taskDef.resolution;
            var blockAgeOrder = [];
            var newCachedBlocks = [];
            var mergeInd = -1;
            var blockToMerge = null;
            var prevMatchingBlock = null;

            var sortIterator = function(bl) {
                return bl.getStart();
            };

            cachedDataSize = 0;
            //add all merged blocks that are ready:
            while (mergedBlocks.length > 0) {
                blockToMerge = mergedBlocks.shift();
                mergeInd = _.sortedIndex(cachedBlocks, blockToMerge, sortIterator);
                cachedBlocks.splice(mergeInd, 0, blockToMerge);
            }

            if (cachedBlocks.length > 0) {
                _.each(cachedBlocks, function(block, index) {
                    var selectThisBlock = false;
                    var newBlocksBefore = null;
                    var newBlocksAfter = null;
                    var prevBlockEnd = null;
                    var blStart = block.getStart();
                    var blEnd = block.getEnd();

                    if (block.isWaitingRecycling()) {
                        recycleBlock(block);
                        return;
                        //=continue each loop;
                    }

                    //This block contains data for the relevant service, with the same locations and parameters:
                    if ((taskDef.service === block.getService()) && arrayEqualsAnyOrder(taskDef.location, block.getLocation()) && arrayEqualsAnyOrder(taskDef.parameter, block.getParameter())) {
                        if (prevMatchingBlock !== null) {
                            prevBlockEnd = prevMatchingBlock.getEnd();
                        }

                        //check if we should create new data blocks before the current block:
                        newBlocksBefore = createMissingBlocksBefore(prevBlockEnd, blStart, fetchStart, fetchEnd, taskDef);
                        if ((newBlocksBefore !== null) && (newBlocksBefore.length > 0)) {
                            Array.prototype.push.apply(newCachedBlocks, newBlocksBefore);
                            async.reduce(newBlocksBefore, cacheMisses, function(memo, block, callback) {
                                callback(null, memo + block.getDataSize());
                            }, function(err, result) {
                                cacheMisses = result;
                            });
                            Array.prototype.push.apply(retval, newBlocksBefore);
                        }

                        selectThisBlock = blockOverlaps(blStart, blEnd, fetchStart, fetchEnd);
                        if (selectThisBlock) {
                            if (block.pin() > 0) {
                                retval.push(block);
                                cacheHits += block.getDataSize();
                            } else {
                                if ("undefined" !== typeof console && console) {
                                    console.log('Unable to pin a block, it\'s already marked for recycling (this should not happen)');
                                }
                            }
                        } else {
                            block.increaseNotUsed();
                        }
                        newCachedBlocks.push(block);

                        //check if we should merge this block with the previous one:
                        if ((prevMatchingBlock !== null) && shouldBlocksBeMerged(prevMatchingBlock, block)) {
                            mergeBlocks(prevMatchingBlock, block, function(err, merged) {
                                if (err) {
                                    //Merge failed. This should only happen if the data for either block
                                    //could not be fetched.
                                    if ("undefined" !== typeof console && console) {
                                        console.error(err);
                                    }
                                } else {
                                    //Both merged old blocks have already been marked for recycling at this point.
                                    //Postpone adding the new block until the beginning of the next fetch cycle:
                                    mergedBlocks.push(merged);
                                }
                            });
                        }
                        prevMatchingBlock = block;
                    } else {
                        block.increaseNotUsed();
                        //not matched in this cycle, keep in cache still:
                        newCachedBlocks.push(block);
                    }

                    //If we are at the last cached block, check if we should additionally
                    //create new data blocks after the last matching found block.
                    if (index === (cachedBlocks.length - 1)) {
                        //we've found at least one matching block in cache:
                        if (prevMatchingBlock !== null) {
                            //If our interesting step sequence ends after the last matching found block ends:
                            if ((prevMatchingBlock.getEnd() + taskDef.resolution) < fetchEnd) {
                                newBlocksAfter = allocateAndPrepareContinuousBlocks(taskDef, Math.max(blEnd + taskDef.resolution, fetchStart), fetchEnd);
                                Array.prototype.push.apply(newCachedBlocks, newBlocksAfter);
                                async.reduce(newBlocksAfter, cacheMisses, function(memo, block, callback) {
                                    callback(null, memo + block.getDataSize());
                                }, function(err, result) {
                                    cacheMisses = result;
                                });
                                Array.prototype.push.apply(retval, newBlocksAfter);
                            }
                        }
                    }

                    //Place the current block at the evictOrder list at the current place based on it's age:
                    var ageInd = _.sortedIndex(blockAgeOrder, block, function(bl) {
                        return bl.getNotUsedSince();
                    });
                    blockAgeOrder.splice(ageInd, 0, block);
                    cachedDataSize += block.getDataSize();
                });
            }

            //no blocks in cache or none available for use right now, allocate new ones for the whole step sequence:
            if (retval.length === 0) {
                retval = allocateAndPrepareContinuousBlocks(taskDef, fetchStart, fetchEnd);
                Array.prototype.push.apply(newCachedBlocks, retval);
                async.reduce(retval, cacheMisses, function(memo, block, callback) {
                    callback(null, memo + block.getDataSize());
                }, function(err, result) {
                    cacheMisses = result;
                });
            }
            cachedBlocks = [];
            cachedBlocks = newCachedBlocks;
            newCachedBlocks = [];

            async.whilst(function() {
                return cachedDataSize * 1.01 > maxCacheDataSize;
            }, function() {
                var dataToEvict = cachedDataSize * 1.01 - maxCacheDataSize;
                fireEvent('evictStarted', {
                    'inCache' : cachedDataSize,
                    'toEvict' : dataToEvict
                });
                var evictList = [];
                var toEvict = null;
                var evictListDataSize = 0;
                while ((evictListDataSize < dataToEvict) && (blockAgeOrder.length > 0)) {
                    toEvict = blockAgeOrder.pop();
                    if (toEvict !== undefined) {
                        evictListDataSize += toEvict.getDataSize();
                        evictList.push(toEvict);
                    }
                }
                if (evictList.length > 0) {
                    evict(evictList);
                    cachedDataSize = cachedDataSize - evictListDataSize;
                    fireEvent('evictFinished', {
                        'inCache' : cachedDataSize,
                        'evicted' : evictListDataSize
                    });
                }
            }, function() {
                //NOOP
            });
            return retval;
        }

        function allocateAndPrepareContinuousBlocks(parentTaskDef, start, end) {
            var blocks = [];
            var totalPointCount = Math.round((end - start) / parentTaskDef.resolution) + 1;
            var blocksNeeded = Math.ceil(totalPointCount / maxBlockDataPoints);
            var i = 0;
            var taskDef;
            var block = null;
            for ( i = 0; i < blocksNeeded; i++) {
                block = getDataBlock();
                taskDef = _.clone(parentTaskDef);
                taskDef.start = start + i * (parentTaskDef.resolution * maxBlockDataPoints);
                taskDef.pointCount = Math.min(maxBlockDataPoints, totalPointCount - (i * maxBlockDataPoints));
                taskDef.end = taskDef.start + (taskDef.pointCount - 1) * parentTaskDef.resolution;
                block.prepare(taskDef, getFetcher(parentTaskDef.service));
                if (block.pin() > 0) {
                    blocks.push(block);
                } else {
                    if ("undefined" !== typeof console && console) {
                        console.error('Strange, unable to pin block!');
                    }
                }
            }
            return blocks;
        }

        /**
         * @param source If source is an object, it should provide source[loc][param][index] structure that is used
         *                           to get the data value for the target[loc][param][index] object. If source is not an object,
         *                           the source itself is set directly into the target[loc][param][index].
         */

        function fillWith(target, source, locations, parameters, targetIndex, sourceIndex, count, callback) {
            var copyFromArray = _.isObject(source);
            var ti = 0;
            var si = 0;
            var end = 0;
            async.each(locations, function(loc, locNotify) {
                if (target[loc] === undefined) {
                    target[loc] = {};
                }
                async.each(parameters, function(param, paramNotify) {
                    var useErrorValues = false;
                    if (target[loc][param] === undefined) {
                        target[loc][param] = [];
                    }
                    if (copyFromArray) {
                        if (!_.isObject(source[loc]) || !_.isArray(source[loc][param])) {
                            useErrorValues = true;

                        } else if (source[loc][param].length < (sourceIndex + count)) {
                            useErrorValues = true;
                            if ("undefined" !== typeof console && console) {
                                console.error('Trying to fill segment with only ' + source[loc][param].length + ' values for location ' + loc + ' and parameter ' + param + ' when ' + (sourceIndex + count) + ' would be needed. Filling the whole segment with \''+errorFillValue+'\'');
                            }
                        }
                    }
                    if (useErrorValues) {
                        ti = targetIndex;
                        end = targetIndex + count;
                        while (ti < end) {
                            target[loc][param][ti++] = errorFillValue;
                        }
                    } else if (copyFromArray) {
                        ti = targetIndex;
                        si = sourceIndex;
                        end = targetIndex + count;
                        while (ti < end) {
                            target[loc][param][ti++] = source[loc][param][si++];
                        }
                    } else {
                        ti = targetIndex;
                        end = targetIndex + count;
                        while (ti < end) {
                            target[loc][param][ti++] = source;
                        }
                    }
                    paramNotify();
                }, function(err) {
                    //one location completed
                    locNotify();
                });
            }, function(err) {
                //all done:
                callback(err, target);
            });
        }

        function retrieveDataAsync(origTaskDef, finishCallback, progressCallback) {
            var taskDef = _.clone(origTaskDef);

            if (!_.isFunction(finishCallback)) {
                throw 'finishCallback must be a function';
            }

            if (getFetcher(taskDef.service) === null) {
                throw 'No data fetcher set for service \'' + taskDef.service + '\', unable to provide data';
            }

            //If the new request does not have the same resolution or the start difference is not a multiple of resolution
            //then clear all cached results for this service:
            if (stepResolutions[taskDef.service] !== undefined) {
                if ((stepResolutions[taskDef.service].resolution !== taskDef.resolution) || (Math.abs(stepResolutions[taskDef.service].start - taskDef.start) % taskDef.resolution !== 0)) {
                    clear(taskDef.service);
                }
            }
            stepResolutions[taskDef.service] = {
                start : taskDef.start,
                resolution : taskDef.resolution
            };

            iterateCacheQueue.push(taskDef, function(err, dataBlocks) {
                fetchDataForBlocks(dataBlocks, taskDef, finishCallback, progressCallback);
            });

        }

        function fetchDataForBlocks(dataBlocks, taskDef, finishCallback, progressCallback) {
            var errors = null;
            var notifyProgress = false;
            var result = {};

            if (_.isFunction(progressCallback)) {
                notifyProgress = true;
            }
            fireEvent('fetchStarted', taskDef);
            result.steps = _.range(taskDef.start, taskDef.end + taskDef.resolution, taskDef.resolution);
            result.data = {};

            async.each(dataBlocks, function(dataBlock, notify) {
                var td = dataBlock.getTaskDef();

                var includeStart = NaN;
                var includeEnd = NaN;
                var targetStartIndex = NaN;
                var targetEndIndex = NaN;
                var sourceStartIndex = NaN;
                var valueCount = NaN;

                if (!blockOverlaps(td.start, td.end, taskDef.start, taskDef.end)) {
                    //For completely out-of-range blocks:
                    //we fetch them just to cache them, but otherwise
                    //ignore the results completely:
                    dataBlock.getDataAsync(function(){
                        dataBlock.unpin();                        
                    });

                    //and continue the loop:
                    notify();
                    return;
                }

                if (td.start < taskDef.start) {
                    includeStart = taskDef.start;
                    sourceStartIndex = Math.round((taskDef.start - td.start) / taskDef.resolution);
                } else {
                    includeStart = td.start;
                    sourceStartIndex = 0;
                }
                targetStartIndex = _.indexOf(result.steps, includeStart, true);

                if (targetStartIndex === -1) {
                    throw dataBlock.getId() + ':something wrong with indexing, start index for cache block not found in the combined results!';
                }

                if (td.end > taskDef.end) {
                    includeEnd = taskDef.end;
                    targetEndIndex = result.steps.length - 1;
                } else {
                    includeEnd = td.end;
                    targetEndIndex = _.indexOf(result.steps, td.end, true);
                }
                valueCount = targetEndIndex - targetStartIndex + 1;

                // See fillWith function description about the structure that data object should have.
                dataBlock.getDataAsync(function(err, data) {
                    var fillValue = data;

                    if (err) {
                        if (errors === null) {
                            errors = [];
                        }
                        errors.push({
                            start : td.start,
                            end : td.end,
                            error : err
                        });

                        // error in fetching data, fill result with 'errorFillValue' for this step sequence if data is undefined itself.
                        // Notice, errors may have occurred but data is still given because it should be good enough.
                        // Therefore, do not ignore given data if it is available. It is up to the data provider to make
                        // sure that data is undefined if it should not be handled in cache.
                        
                        //Ilkka Rinne/2013-09-02: This is inconsistent with the node.js callback error conventions:
                        //You should always get either an error or result, never both.
                        //http://nodemanual.org/latest/nodejs_dev_guide/working_with_callbacks.html
                        //When would you want to return errors but also useable data?
                        
                        if (strictErrorHandling || !data) {
                            fillValue = errorFillValue;
                        }
                        //do not keep this block in cache:
                        dataBlock.markForRecycling();
                    }
                    fillWith(result.data, fillValue, td.location, td.parameter, targetStartIndex, sourceStartIndex, valueCount, function() {
                        if (notifyProgress) {
                            progressCallback(err, includeStart, includeEnd);
                        }
                        dataBlock.unpin();
                        
                        //always succeed, even with fetch error: we want to return the rest of the data anyway
                        notify();
                    });
                });

            }, function(err) {
                finishCallback(errors, result);
                fireEvent('fetchFinished', taskDef);
            });
        }

        function getFetcher(service) {
            if (fetchers[service] !== undefined) {
                fetchers[service].nextIndex = (fetchers[service].nextIndex + 1) % fetchers[service].providers.length;
                return fetchers[service].providers[fetchers[service].nextIndex].cb;
            } else {
                return null;
            }
        }

        function clear(service) {
            _.each(cachedBlocks, function(block) {
                if ((service === undefined) || (block.getService() === service)) {
                    block.markForRecycling();
                }
            });
            _.each(mergedBlocks, function(block) {
                if ((service === undefined) || (block.getService() === service)) {
                    block.markForRecycling();
                }
            });
            fireEvent('cacheCleared', service);
        }

        //Privileged functions:
        /**
         * @param {String} service Describes the service name that identifies the data.
         *                                               May not be {undefined}, {null} or empty. More than one fetcher
         *                                               may be added for the same service to enable a round-robin task
         *                                               distribution between them.
         * @param {function(taskDef, callback)} fetcher The callback parameter of fetcher callback function is of
         *                                              the type {function(err, data)}. See {fillWith()} function
         *                                              for the description for the source data object structure
         *                                              that should be provided by the fetcher callback function for
         *                                              its parameter callback function.
         */
        this.addDataProvider = function(service, fetcher) {
            var provider = {};
            if (_.isFunction(fetcher)) {
                if (fetchers[service] === undefined) {
                    fetchers[service] = {
                        nextIndex : 0,
                        providers : []
                    };
                }
                provider.id = 'id#' + fetcherIdCounter++;
                provider.cb = fetcher;
                fetchers[service].providers.push(provider);
                fireEvent('dataProviderAdded', {
                    'service' : service,
                    'providerId' : provider.id
                });
            } else {
                throw 'Fetcher must be a function';
            }
            return provider.id;
        };

        this.removeDataProvider = function(service, providerId) {
            var oldLength = 0;
            var actuallyRemoved = false;
            if (fetchers[service] !== undefined) {
                oldLength = fetchers[service].providers.length;
                fetchers[service].providers = _.reject(fetchers[service].providers, function(provider) {
                    return provider.id === providerId;
                });
                if (fetchers[service].providers.length === 0) {
                    delete fetchers.service;
                    actuallyRemoved = true;
                } else if (oldLength !== fetchers[service].providers.length) {
                    actuallyRemoved = true;
                }
                if (actuallyRemoved) {
                    fireEvent('dataProviderRemoved', {
                        'service' : service,
                        'providerId' : providerId
                    });
                }
            }
        };

        /**
         * Removes all content from the cache and resets the hits & misses counters.
         *
         */
        this.clearCache = function() {
            clear();
            stepResolutions = [];
            cacheHits = 0;
            cacheMisses = 0;
        };

        this.fetch = function(taskDef, finalCallback, progressCallback) {
            checkTaskDef(taskDef);
            retrieveDataAsync(taskDef, finalCallback, progressCallback);
        };

        this.getCachedItemCount = function() {
            return cachedDataSize;
        };

        this.getFillingDegree = function() {
            return cachedDataSize / maxCacheDataSize;
        };

        this.getHitRatio = function() {
            return (cacheHits / (cacheHits + cacheMisses));
        };

        this.addListener = function(eventName, callback) {
            return addEventListener(eventName, callback);
        };

        this.removeListener = function(eventName, providerId) {
            return removeEventListener(eventName, providerId);
        };

        //Instance initialization:
        if (properties.sideFetchBeforeFactor !== undefined) {
            if (_.isNumber(properties.sideFetchBeforeFactor)) {
                if (properties.sideFetchBeforeFactor >= 0) {
                    sideFetchBeforeFactor = properties.sideFetchBeforeFactor;
                }
            }
        }
        if (properties.sideFetchAfterFactor !== undefined) {
            if (_.isNumber(properties.sideFetchAfterFactor)) {
                if (properties.sideFetchAfterFactor >= 0) {
                    sideFetchAfterFactor = properties.sideFetchAfterFactor;
                }
            }
        }
        if (properties.maxBlockDataPoints !== undefined) {
            if (_.isNumber(properties.maxBlockDataPoints)) {
                if (properties.maxBlockDataPoints > 0) {
                    maxBlockDataPoints = properties.maxBlockDataPoints;
                }
            }
        }
        if (properties.minBlockDataPoints !== undefined) {
            if (_.isNumber(properties.minBlockDataPoints)) {
                if ((properties.minBlockDataPoints > 0) && (properties.minBlockDataPoints < maxBlockDataPoints)) {
                    minBlockDataPoints = properties.minBlockDataPoints;
                } else {
                    minBlockDataPoints = 0;
                }
            }
        }
        if (minBlockDataPoints > maxBlockDataPoints) {
            minBlockDataPoints = maxBlockDataPoints;
        }
        if (properties.maxCacheDataSize !== undefined) {
            if (_.isNumber(properties.maxCacheDataSize)) {
                if (properties.maxCacheDataSize > 0) {
                    maxCacheDataSize = properties.maxCacheDataSize;
                }
            }
        }
        if (properties.strictErrorHandling !== undefined) {
            if (properties.strictErrorHandling === false) {
                strictErrorHandling = false;
            }
        }
        
        if (properties.errorFillValue !== undefined) {
            errorFillValue = properties.errorFillValue;
        }
    };

    /**
     * SplitterCache constructor is returned for later instantiation.
     */
    return _constructor;
})();

/**
 * This software may be freely distributed and used under the following MIT license:
 *
 * Copyright (c) 2013 Finnish Meteorological Institute
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this
 * software and associated documentation files (the "Software"), to deal in the
 * Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
 * OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

// Strict mode for whole file.
// "use strict";

// Requires jQuery
if ("undefined" === typeof jQuery || !jQuery) {
    throw "ERROR: jQuery is required for fi.fmi.metoclient.metolib.WfsConnection!";
}

// Requires lodash
if ("undefined" === typeof _ || !_) {
    throw "ERROR: Lodash is required for fi.fmi.metoclient.metolib.WfsConnection!";
}

// Requires async
if ("undefined" === typeof async || !async) {
    throw "ERROR: Async is required for fi.fmi.metoclient.metolib.WfsConnection!";
}

// "Package" definitions
var fi = fi || {};
fi.fmi = fi.fmi || {};
fi.fmi.metoclient = fi.fmi.metoclient || {};
fi.fmi.metoclient.metolib = fi.fmi.metoclient.metolib || {};

// Requires fi.fmi.metoclient.metolib.Utils.
// "Package" exists because it is created above if it did not exist.
if (!fi.fmi.metoclient.metolib.Utils) {
    throw "ERROR: fi.fmi.metoclient.metolib.Utils is required for fi.fmi.metoclient.metolib.WfsConnection!";
}

// Requires cache.
if (!fi.fmi.metoclient.metolib.SplitterCache) {
    throw "ERROR: fi.fmi.metoclient.metolib.SplitterCache is required for fi.fmi.metoclient.metolib.WfsConnection!";
}

// Requires parser.
if (!fi.fmi.metoclient.metolib.WfsRequestParser) {
    throw "ERROR: fi.fmi.metoclient.metolib.WfsRequestParser is required for fi.fmi.metoclient.metolib.WfsConnection!";
}

/**
 * WfsConnection object acts as an interface that provides functions
 * to asynchronously request XML data from the server and to get
 * the requested data in a parsed structure.
 *
 * WfsConnection wraps cache, request and parser functionality.
 * Notice, if you do not require cache functionality, you may
 * want to use parser, {@link fi.fmi.metoclient.metolib.WfsRequestParser},
 * directly without using this class as an intermediate object.
 *
 * API functions are defined in the end of the constructor,
 * {connectionConstructor}, as priviledged functions.
 * See API description there.
 *
 * Example:
 *      var connection = new fi.fmi.metoclient.metolib.WfsConnection();
 *      if (connection.connect(SERVER_URL, STORED_QUERY_OBSERVATION)) {
 *          // Connection was properly initialized. So, get the data.
 *          connection.getData({
 *              requestParameter : "td,ws_10min",
 *              // Integer values are used to init dates for older browsers.
 *              // (new Date("2013-05-10T08:00:00Z")).getTime()
 *              // (new Date("2013-05-12T10:00:00Z")).getTime()
 *              begin : new Date(1368172800000),
 *              end : new Date(1368352800000),
 *              timestep : 60 * 60 * 1000,
 *              sites : ["Kaisaniemi,Helsinki", "Turku"],
 *              callback : function(data, errors) {
 *                  // Handle the data and errors object in a way you choose.
 *                  handleCallback(data, errors);
 *                  // If the connection will not be used anymore later,
 *                  // the connection may be disconnected because the flow has finished.
 *                  connection.disconnect();
 *              }
 *          });
 *      }
 */
fi.fmi.metoclient.metolib.WfsConnection = (function() {

    /**
     * @private
     *
     * Data fetcher name for cache when sites are used for fetching.
     */
    var DATA_FETCHER_NAME_SITES = "parserSites";

    /**
     * @private
     *
     * Parameter values are separated by this string.
     */
    var PARAMETER_SEPARATOR = ",";

    /**
     * @private
     *
     * Location name and region strings may be separated by this string
     * in server responses.
     */
    var LOCATION_NAME_REGION_SEPARATOR = " ";

    /**
     * @private
     *
     * Geoid location name prefix for cache.
     */
    var LOCATION_GEOID_PREFIX = "g_";

    /**
     * @private
     *
     * WMO location name prefix for cache.
     */
    var LOCATION_WMO_PREFIX = "w_";

    /**
     * @private
     *
     * FMISID location name prefix for cache.
     */
    var LOCATION_FMISID_PREFIX = "f_";

    /**
     * @private
     *
     * Sites location name prefix for cache.
     */
    var LOCATION_SITES_PREFIX = "s_";

    /**
     * @private
     *
     * General text that describes an error that has been found in cache.
     */
    var CACHE_ERROR_TEXT = "ERROR: Cache found error(s)!";

    /**
     * @private
     *
     * Trim single site string for cache flow.
     *
     * @param {String} May not be {undefined} or {null}.
     */
    function trimSingleSite(site) {
        return jQuery.trim(site).replace(/,\s+/, PARAMETER_SEPARATOR);
    }

    /**
     * @private
     *
     * Trim unnecessary white spaces from sites string(s).
     *
     * Notice, new content is returned. Then, original values are not changed if an array is given.
     *
     * @param {Array(String)|String} Site strings in an array or one site may be given as a single string.
     *                               May be {udefined} or {null} but then operation is ignored.
     * @param {String} prefix Prefix string that is used with the value(s).
     *                        This is meant for cache but should not be used for parser.
     *                        May be {udefined} or {null}. Then, empty string is used.
     * @return {Array(String)} Trimmed site(s) in an array. May not be {undefined} or {null}.
     */
    function trimSites(sites, prefix) {
        var trimmed = [];
        if (!_.isString(prefix)) {
            // Make sure prefix is at least an empty string.
            prefix = "";
        }
        // Handle sites as string(s).
        if (sites && _.isString(sites)) {
            // Trim possible white spaces.
            // Location and its region may be separated by using comma but there should not be whitespaces after comma.
            // Then, later it is easier to compare server responses with given sites when data is handled for cache.
            trimmed.push(prefix + trimSingleSite(sites));

        } else if (_.isArray(sites)) {
            for (var i = 0; i < sites.length; ++i) {
                var site = sites[i];
                if (site && _.isString(site)) {
                    trimmed.push(prefix + trimSingleSite(site));
                }
            }
        }
        return trimmed;
    }

    /**
     * @private
     *
     * Trim unnecessary white spaces from string(s).
     *
     * Notice, new content is returned. Then, original values are not changed if an array is given.
     *
     * @param {Array(String|int)|String|int} property Strings or integers in an array
     *                                                or one item as a single string or integer.
     *                                                May be {udefined} or {null}.
     * @param {String} prefix Prefix string that is used with the value(s).
     *                        This is meant for cache but should not be used for parser.
     *                        May be {udefined} or {null}. Then, empty string is used.
     * @return {Array(String)} Trimmed value(s) in an array. May not be {undefined} or {null}.
     */
    function trimProperty(property, prefix) {
        var trimmed = [];
        if (!_.isString(prefix)) {
            // Make sure prefix is at least an empty string.
            prefix = "";
        }
        if (_.isNumber(property) || property && _.isString(property)) {
            trimmed.push(jQuery.trim(prefix + property));

        } else if (_.isArray(property)) {
            for (var i = 0; i < property.length; ++i) {
                var tmp = property[i];
                // Handle property as string.
                if (_.isNumber(tmp) || tmp && _.isString(tmp)) {
                    trimmed.push(jQuery.trim(prefix + tmp));
                }
            }
        }
        return trimmed;
    }

    /**
     * @private
     *
     * Cache {taskDef} location should contain all the locations (not just sites names).
     * This function combines all the location information into one array that is
     * set as {location} -property for the cache {taskDef}. Also, other properties that
     * are used for {taskDef} location property are set.
     *
     * @param {Object} taskDef Target for location settings.
     *                         Operation is ignored if {undefined} or {null}.
     * @param {Object} options Options object given through the API.
     *                         Provides location data for {taskDef}.
     *                         Operation is ignored if {undefined} or {null}.
     */
    function setTaskDefLocations(taskDef, options) {
        if (taskDef && options) {
            var location = [];
            taskDef.location = location;
            // Notice, these properties are used to provide additional information
            // that can be given for the parser. The cache uses location property
            // to create the cache hierarchy.
            taskDef.geoid = trimProperty(options.geoid);
            taskDef.wmo = trimProperty(options.wmo);
            taskDef.fmisid = trimProperty(options.fmisid);
            taskDef.sites = trimSites(options.sites);
            // Combine locations information for taskDef location.
            // Notice, prefix is used for cache. Then, it is sure that different location
            // requests do not have same string for key (really rare case).
            location.push.apply(location, trimProperty(options.geoid, LOCATION_GEOID_PREFIX));
            location.push.apply(location, trimProperty(options.wmo, LOCATION_WMO_PREFIX));
            location.push.apply(location, trimProperty(options.fmisid, LOCATION_FMISID_PREFIX));
            location.push.apply(location, trimSites(options.sites, LOCATION_SITES_PREFIX));
        }
    }

    /**
     * @private
     *
     * Creates the proper location name for cache by checking taskDef properties
     * for location information that match the given values.
     *
     * Location name is checked in the following order and first match is used:
     *   - GEOID
     *   - WMO
     *   - FMISID
     *   - taskDef location contains both name and region.
     *     - If taskDef contains location that matches the given name and region,
     *       then corresponding name is returned.
     *   - If taskDef location does not match the combined name and region,
     *     then region is returned.
     *
     * @param {Object} taskDef Contains location information. May be {undefined} or {null}.
     * @param {String} name Location name string. May be {undefined} or {null}.
     * @param {String} region Location region string. May be {undefined} or {null}.
     * @return {String} Proper location name for cache. May be {undefined} or {null} if region is.
     */
    function locationNameForCache(taskDef, name, region, wmo, geoid, fmisid) {
        // Default value is just region with site prefix.
        var locationName = LOCATION_SITES_PREFIX + region;
        if (taskDef) {
            var matchFound = false;
            var i;
            // Check geoid.
            if (taskDef.geoid && geoid) {
                for ( i = 0; i < taskDef.geoid.length; ++i) {
                    if (taskDef.geoid[i] === geoid) {
                        // Notice, prefix is used with cache.
                        locationName = LOCATION_GEOID_PREFIX + geoid;
                        matchFound = true;
                        break;
                    }
                }
            }
            // Check WMO.
            if (!matchFound && taskDef.wmo && wmo) {
                for ( i = 0; i < taskDef.wmo.length; ++i) {
                    if (taskDef.wmo[i] === wmo) {
                        // Notice, prefix is used with cache.
                        locationName = LOCATION_WMO_PREFIX + wmo;
                        matchFound = true;
                        break;
                    }
                }
            }
            // Check FMISID.
            if (!matchFound && taskDef.fmisid && fmisid) {
                for ( i = 0; i < taskDef.fmisid.length; ++i) {
                    if (taskDef.fmisid[i] === fmisid) {
                        // Notice, prefix is used with cache.
                        locationName = LOCATION_FMISID_PREFIX + fmisid;
                        matchFound = true;
                        break;
                    }
                }
            }
            // Check name and region.
            // Notice, taskDef contains location property that contains all the location data.
            // But, part of locations were already handled separately above. Therefore, also handle
            // sites by using sites-property instead of location-property.
            if (!matchFound && taskDef.sites && name && region) {
                // Server may also include region as prefix into site name.
                // Therefore, take this into account when comparing server response
                // to taskDef sites that contain name and region combination string
                // as recognized by the cache.
                var regionPrefix = region + LOCATION_NAME_REGION_SEPARATOR;
                var regionIndex = name.indexOf(regionPrefix);
                if (0 === regionIndex) {
                    // Remove region substring from name and trim possible whitespaces.
                    // Then, values can be compared to taskDef locations.
                    name = jQuery.trim(name.slice(regionPrefix.length));
                }
                // TaskDef sites and lcoations have been created before for cache by combining
                // name and region that have been given through the API. TaskDef locations are
                // compared to the name and region values that are given as parameters for this
                // function.
                var combinedLocationName = name + PARAMETER_SEPARATOR + region;
                // Sites are given as string array in taskDef.
                for ( i = 0; i < taskDef.sites.length; ++i) {
                    var loc = taskDef.sites[i];
                    if (-1 !== loc.indexOf(PARAMETER_SEPARATOR) && loc === combinedLocationName) {
                        // Matching location for cache was found from taskDef locations.
                        // Notice, prefix is used with cache.
                        locationName = LOCATION_SITES_PREFIX + loc;
                        matchFound = true;
                        break;
                    }
                }
            }
        }
        return locationName;
    }

    /**
     * @private
     *
     * Check that time-value-pair objects are not missing from the given array.
     * If an object is missing, time-value-pair of the correct time and NaN value
     * is inserted into the array according to the resolution step.
     *
     * @param {[]} array Array that contains time-value-pair objects.
     *                   Operation is ignored if {undefined} or {null}.
     * @param {Integer} resolution Time in milliseconds to describe timesteps between values.
     *                             Operation is ignored if {undefined}, {null}, zero or negative.
     */
    function checkResolutionSteps(array, resolution) {
        if (_.isArray(array) && resolution && resolution > 0) {
            for (var i = 1; i < array.length; ++i) {
                var previousTimeValuePair = array[i - 1];
                var timeValuePair = array[i];
                if (_.isObject(timeValuePair)) {
                    var previousTime = _.isObject(previousTimeValuePair) ? previousTimeValuePair.time : undefined;
                    var time = timeValuePair.time;
                    if (undefined !== previousTime && null !== previousTime && undefined !== time && null !== time && resolution < time - previousTime) {
                        // Time-value-pair object is missing between two array objects.
                        // Insert a new NaN value pair into array.
                        // Notice, time of this new object is compared in next round to the
                        // same object that is checked already in this round.
                        // Then, missing resolution objects are added properly into too large gaps.
                        time = previousTime + resolution;
                        array.splice(i, 0, {
                            time : time,
                            value : NaN
                        });
                    }
                    previousTime = time;
                }
            }
        }
    }

    /**
     * @private
     *
     * Check if given {list} contains an equal to the given {item}.
     *
     * Performs an optimized deep comparison between the objects of the {list} and given {item},
     * to determine if they should be considered equal.
     *
     * @param {Array} list List whose items are compared to {item}. May be {undefined} or {null}.
     * @param {Object} item Item that is compared to the list items. May be {undefined} or {null}.
     * @return {Boolean} {true} if {item} equals at least one item in {list}.
     */
    function contains(list, item) {
        return _.find(list, function(currentItem) {
            return _.isEqual(currentItem, item);
        });
    }

    /**
     * @private
     *
     * Converts errors given by cache to the error objects given through API.
     * Possible duplicates are not included into the returned array.
     *
     * @param {Array} errors Errors array from the cache that is converted to API errors array.
     *                       May be {undefined} or {null}.
     * @return {Array} Converted errors in an array. May not be {undefined} or {null}.
     */
    function convertCacheErrorsForApi(errors) {
        var apiErrors = [];
        if (_.isArray(errors)) {
            for (var i = 0; i < errors.length; ++i) {
                var error = errors[i];
                // Flag to inform if error item should just be wrapped as a general cache error
                // or if error content has been handled separately. Always include wrapped error
                // into array if cache error root level already contains errorCode or errorText information.
                var useWrapError = _.isObject(error) && (error.errorCode || error.errorText);
                // Cache error structure may wrap errors gotten from parser.
                // Check if parser has provided errors. Then, that error information can be included
                // in the root level of the API error.
                if (_.isObject(error) && _.isArray(error.error) && error.error.length > 0) {
                    var errorArray = error.error;
                    for (var j = 0; j < errorArray.length; ++j) {
                        // Error array may contain the actual parse error.
                        // Check if the error code and text are available for API error object.
                        // If multiple error items are in the array. Handle them all as a separate error.
                        var errorItem = errorArray[j];
                        if (_.isObject(errorItem) && (errorItem.errorCode || errorItem.errorText)) {
                            var newError = {
                                errorCode : errorItem.errorCode,
                                errorText : errorItem.errorText,
                                // Reference to the original error structure.
                                // Then, additional information is available also through API if needed.
                                extension : error
                            };
                            // Perform an optimized deep comparison between already included errors and new error,
                            // to determine if the new error should be included or if it is a duplicate.
                            if (!contains(apiErrors, newError)) {
                                apiErrors.push(newError);
                            }

                        } else {
                            // Wrap the whole error as a cache error
                            // because unknown structure has been given.
                            useWrapError = true;
                        }
                    }

                } else {
                    // Wrap the whole error as a cache error
                    // because unknown structure has been given.
                    useWrapError = true;
                }
                // Check if the original error should be wrapped as an extension for API error object.
                if (useWrapError) {
                    // Create api error from the cache error.
                    var newWrapError = {
                        errorCode : _.isObject(error) ? error.errorCode : undefined,
                        errorText : _.isObject(error) && _.isString(error.errorText) ? error.errorText : CACHE_ERROR_TEXT,
                        extension : error
                    };
                    // Perform an optimized deep comparison between already included errors and new error,
                    // to determine if the new error should be included or if it is a duplicate.
                    if (!contains(apiErrors, newWrapError)) {
                        apiErrors.push(newWrapError);
                    }
                }
            }
        }
        return apiErrors;
    }

    /**
     * @private
     *
     * Convert sites data received from the parser to the structure that cache can handle.
     *
     * Notice, this function is called only if parser was used for the server requests.
     * If data was already in cache, the flow does not come here.
     *
     * Notice, data is provided as structure of the objects.
     * {@link fi.fmi.metoclient.metolib.SplitterCache#fillWith} function describes
     * the object structure of the converted data. Cache data blocks are provided
     * as the structure leaf objects. Notice, even if structure is created by using
     * objects, it is better to include all the persisting data in the leaf cache block
     * objects instead in the common parts in the middle of the structure. Then, data will
     * always be available when data is requested from the cache.
     *
     * @param {Object} taskDef Definition object to describe cache blocks of the operation.
     * @param {Object} data Data from the parser.
     * @param {Object} errors Errors that have occurred during loading and parsing data.
     * @return {Object} Object that contains converted errors and converted data.
     *                  {@link fi.fmi.metoclient.metolib.SplitterCache#fillWith} function describes
     *                  the object structure of the converted data.
     */
    function convertSitesDataFromParserForCache(taskDef, data, errors) {
        var converted = {
            // Data is converted below into the data object if data is available.
            data : data ? {} : undefined,
            // Cache handles errors according to node.js error convention.
            // Therefore, instead of passing empty array for cache,
            // error object should be set null if there are no errors.
            errors : errors && !errors.length ? null : errors
        };
        if (data) {
            // Convert the given data into the correct structure that is inserted
            // into the convert object. Convert object contains location specific objects,
            // which in turn contain measurement parameter specific objects, which contain arrays for
            // cache data block objects. See fi.fmi.metoclient.metolib.SplitterCache#fillWith
            // function for the corresponding structure that cache requires.
            _.each(data.locations, function(location) {
                // Location name is used as a key for the location object.
                var locationName = locationNameForCache(taskDef, location.info.name, location.info.region, location.info.wmo, location.info.geoid, location.info.fmisid);
                if (!converted.data[locationName]) {
                    // Initialize converted data to contain location object identified by the location name.
                    converted.data[locationName] = {};
                }
                // Location contains data array that contains measurement data objects
                // and measurement related information.
                _.each(location.data, function(dataObject, keyRequestParameter) {
                    if (!converted.data[locationName][keyRequestParameter]) {
                        // Initialize converted location object to contain measurement array
                        // identified by request parameter key. Notice, cache will internally loop
                        // through the cache block array by indexing it.
                        converted.data[locationName][keyRequestParameter] = [];
                    }
                    // Loop through the actual measurement time-value-pair data objects.
                    // Also, check timesteps before giving array to cache.
                    // This may fix some indexing problems in cache if server has skipped some values.
                    checkResolutionSteps(dataObject.timeValuePairs, taskDef.resolution);
                    _.each(dataObject.timeValuePairs, function(timeValuePair) {
                        // This object is inserted into the cache as the actual data cache block.
                        // Notice, cache block have references to the same objects which means some redundancy.
                        // But, this way required data is always available when data is requested from the cache.
                        var cacheBlock = {
                            info : data.info,
                            properties : data.properties,
                            locationInfo : location.info,
                            blockProperty : dataObject.property,
                            timeValuePair : timeValuePair
                        };
                        converted.data[locationName][keyRequestParameter].push(cacheBlock);
                    });
                });
            });
        }
        return converted;
    }

    /**
     * @private
     *
     * Convert sites data received from the cache to the structure that is provided through API.
     *
     * This data has been set in {convertSitesDataFromParserForCache} function for the cache.
     *
     * @param taskDef {Object} Definition object to describe cache blocks of the operation.
     * @param data
     * @param errors Errors that have occurred during loading, parsing and caching data.
     * @return {Object} Object that contains converted errors and converted data.
     */
    function convertSitesDataFromCacheForApi(taskDef, data, errors) {
        var converted = {
            // Data is converted below into the data object if data is available.
            data : data ? {
                info : undefined,
                properties : undefined,
                locations : []
            } : undefined,
            errors : convertCacheErrorsForApi(errors)
        };
        if (data) {
            // Data provided before from parser and set by convertSitesDataFromParserForCache
            // function for the cache is in data.data object. Notice, data is provided as
            // data object hierarchy. Time values that cache has set itself are given as array.
            // Notice, data.data object structure also contains the parsed time values from server.
            // Here, data object contains locations that are identified by the location name key.
            _.each(data.data, function(location) {
                var convertedLocation = {
                    info : undefined,
                    data : {}
                };
                // Location object contains objects that are identified by the request parameters.
                _.each(location, function(container, requestParameterKey) {
                    // Container object for the converted cache block data.
                    var convertedData = {
                        property : undefined,
                        timeValuePairs : []
                    };

                    // Each container identified by request parameter key contains cache data blocks in an array.
                    _.each(container, function(cacheBlock) {
                        // cacheBlock may be undefined if cache has reserved
                        // more timesteps for certain time range than parser has gotten
                        // for server request. Ignore undefined objects. Notice, that the
                        // correct times from server are still available in timeValuePair
                        // objects. Also, it is better to provide the parsed server data
                        // through API instead of extra undefined objects.
                        if (cacheBlock) {
                            if (!converted.data.info) {
                                // All locations have the same info object.
                                // Therefore, set content if data has not been set before.
                                converted.data.info = cacheBlock.info;
                            }

                            if (!converted.data.properties) {
                                // All locations have the same properties object.
                                // Therefore, set content if data has not been set before.
                                converted.data.properties = cacheBlock.properties;
                            }

                            if (!convertedData.property) {
                                // All the blocks of same location refere to the same property info.
                                // Therefore, set the information to the converted data object
                                // if data has not been set before.
                                convertedData.property = cacheBlock.blockProperty;
                            }

                            if (!convertedLocation.info) {
                                // All the block of same location refere to the same location info.
                                // Therefore, set the information to the converted location object
                                // if data has not been set before.
                                convertedLocation.info = cacheBlock.locationInfo;
                            }

                            // Insert datablock time-value-pair into the datablock time-value-pair array.
                            convertedData.timeValuePairs.push(cacheBlock.timeValuePair);
                        }
                    });
                    // Insert converted datablock into the location.
                    convertedLocation.data[requestParameterKey] = convertedData;
                });
                // Insert converted location data into converted data locations array.
                converted.data.locations.push(convertedLocation);
            });
        }
        return converted;
    }

    /**
     * @private
     *
     * This callback is set for sites cache data fetcher.
     *
     * Parser will provide the fetched and parsed data for this callback.
     * This callback will forward the data in a correct format for the cache.
     *
     * @param container Object that provides connection instance specific private member variables.
     * @param taskDef
     * @param taskCallback
     */
    function cacheSitesDataFetcherCallback(container, taskDef, taskCallback) {
        fi.fmi.metoclient.metolib.WfsRequestParser.getData({
            url : container.connectionUrl,
            storedQueryId : container.storedQueryId,
            requestParameter : taskDef.parameter,
            begin : taskDef.start,
            end : taskDef.end,
            timestep : taskDef.resolution,
            // If time adjusting is requested, it has been done before giving times to cache.
            // Therefore, do not let parser do adjusting.
            denyTimeAdjusting : true,
            // Notice, instead of using taskDef.location for properties here,
            // specific location related properties are used.
            geoid : taskDef.geoid,
            wmo : taskDef.wmo,
            fmisid : taskDef.fmisid,
            sites : taskDef.sites,
            crs : taskDef.crs,
            queryExtension : taskDef.queryExtension,
            callback : function(data, errors) {
                // Forward callback to the cache.
                // Cache will forward the callback to callbacks given through the API when the retrieve flow has been started.
                var converted = convertSitesDataFromParserForCache.call(container, taskDef, data, errors);
                taskCallback(converted.errors, converted.data);
            }
        });
    }

    /**
     * @private
     *
     * Request cache to retrive sites data.
     *
     * Notice, this function should be called in the context of the private object of the WfsConnection instance.
     *
     * Notice, this flow will also continue
     * to data fetcher callback if parser should be used to retrieve data
     * from the server. The callback function is set for cache when it is
     * initialized. Callbacks given and set in this function are called when
     * the data is gotten either from the server or directly from the cache.
     *
     * See API for function description.
     */
    var retrieveSitesData = function(options) {
        if (!options.timestep || options.timestep === 1) {
            // Cache requires that timestep is the actual timestep that is used for data.
            // But, in speacial cases server may use magic numbers to handle data differently.
            // Cache can not be used with the given options. Therefore, use parser directly.
            var that = this;
            fi.fmi.metoclient.metolib.WfsRequestParser.getData({
                url : that.connectionUrl,
                storedQueryId : that.storedQueryId,
                requestParameter : options.requestParameter,
                begin : options.begin,
                end : options.end,
                timestep : options.timestep,
                // When parser is used directly, it can handle time adjusting automatically if requested.
                denyTimeAdjusting : options.denyTimeAdjusting,
                geoid : trimProperty(options.geoid),
                wmo : trimProperty(options.wmo),
                fmisid : trimProperty(options.fmisid),
                sites : trimSites(options.sites),
                crs : options.crs,
                queryExtension : options.queryExtension,
                callback : options.callback
            });

        } else {
            // Use cache for sites data.
            // If time adjusting is requested, it is done before values are given for the cache.
            var beginDate = options.begin;
            var endDate = options.end;
            var resolution = options.timestep;
            if (!options.denyTimeAdjusting) {
                beginDate = fi.fmi.metoclient.metolib.WfsRequestParser.adjustBeginTime(resolution, beginDate);
                endDate = fi.fmi.metoclient.metolib.WfsRequestParser.adjustEndTime(resolution, endDate, beginDate);
            }
            var taskDef = {
                service : DATA_FETCHER_NAME_SITES,
                parameter : _.isString(options.requestParameter) ? options.requestParameter.split(PARAMETER_SEPARATOR) : options.requestParameter,
                // Make sure parameter(s) are integers instead of Date objects when they are given to cache.
                start : beginDate instanceof Date ? beginDate.getTime() : beginDate,
                end : endDate instanceof Date ? endDate.getTime() : endDate,
                resolution : resolution,
                crs : options.crs,
                queryExtension : options.queryExtension
            };
            // Because locations can be given in multiple ways, location relate properties are
            // set separately for taskDef to combine all location informations for cache.
            setTaskDefLocations(taskDef, options);
            this.cache.fetch(taskDef, function(errors, result) {
                var converted = convertSitesDataFromCacheForApi(taskDef, result, errors);
                options.callback(converted.data, converted.errors);
            }, options.progressCallback);
        }
    };

    /**
     * @private
     *
     * Request parser directly to retrive spatial data.
     *
     * Notice, cache is not used for spatial data.
     *
     * Notice, this function should be called in the context of the private object of the WfsConnection instance.
     *
     * Notice, this flow will also continue
     * to data fetcher callback if parser should be used to retrieve data
     * from the server. The callback function is set for cache when it is
     * initialized. Callbacks given and set in this function are called when
     * the data is gotten either from the server or directly from the cache.
     *
     * See API for function description.
     */
    var retrieveSpatialData = function(options) {
        var that = this;
        fi.fmi.metoclient.metolib.WfsRequestParser.getData({
            url : that.connectionUrl,
            storedQueryId : that.storedQueryId,
            requestParameter : options.requestParameter,
            begin : options.begin,
            end : options.end,
            timestep : options.timestep,
            // When parser is used directly, it can handle time adjusting automatically if requested.
            denyTimeAdjusting : options.denyTimeAdjusting,
            // Include also other sites related options if they are given.
            // But, bbox is the reason that all data is provided directly for the parser.
            geoid : trimProperty(options.geoid),
            wmo : trimProperty(options.wmo),
            fmisid : trimProperty(options.fmisid),
            sites : trimSites(options.sites),
            bbox : options.bbox,
            crs : options.crs,
            queryExtension : options.queryExtension,
            callback : options.callback
        });
    };

    /**
     * @private
     *
     * Wraps the function calls inside try-catch before calling.
     *
     * Instead of using multiple try catches in many functions only one is used here.
     * This style may improve performance.
     *
     * Notice, this function applies this-reference to the function calls.
     *
     * @param {function} func Function that should be called.
     *                        May not be {undefined} or {null}.
     * @param {function} callback Callback function that is called if an exception occurs
     *                            during this synchronous part of the flow. Notice, this
     *                            is a callback that may be provided for asynchronous flow.
     *                            May be {undefined} or {null}.
     * @return {boolean} {true} if operation starts successfully. Else {false}.
     *                          Notice, if {callback} is given, it is also called
     *                          if false is returned for success.
     */
    var makeSafe = function(func, callback) {
        var success = true;
        try {
            // Call the correct function with the original arguments.
            // Function reference itself is removed from the arguments.
            // Also, callback reference provided for synchronous exception
            // handling is removed from the arguments.
            var args = Array.prototype.slice.call(arguments);
            args.shift();
            args.shift();
            func.apply(this, args);

        } catch(e) {
            var errorStr = "ERROR: API level error occurred in a synchronous flow!";
            if ("undefined" !== typeof console && console) {
                console.error(errorStr);
            }
            success = false;
            if (callback) {
                // Inform callback about exception in the flow.
                // Then, caller knows that asynchronous flow has ended.
                var error = {
                    errorText : errorStr
                };
                callback(undefined, error);
            }
        }
        return success;
    };

    /**
     * @private
     *
     * Notice, this function should be called in the context of the private object of the WfsConnection instance.
     *
     * See API for function description.
     */
    var getUrl = function() {
        return this.connectionUrl;
    };

    /**
     * @private
     *
     * Notice, this function should be called in the context of the private object of the WfsConnection instance.
     *
     * See API for function description.
     */
    var getStoredQueryId = function() {
        return this.storedQueryId;
    };

    /**
     * @private
     *
     * Notice, this function should be called in the context of the private object of the WfsConnection instance.
     *
     * See API for function description.
     */
    var connect = function(url, storedQueryId) {
        // Skip if already connected.
        // Notice, if already connected, this function does not reconnect
        // even if a new URL would be different than the old one.
        if (!this.connectionUrl) {
            if (!_.isString(url) || !url) {
                var urlErrorStr = "ERROR: WfsConnection URL must be a string and not empty!";
                if ("undefined" !== typeof console && console) {
                    console.error(urlErrorStr);
                }
                throw urlErrorStr;
            }
            if (!_.isString(storedQueryId) || !storedQueryId) {
                var idErrorStr = "ERROR: WfsConnection stored query ID must be a string and not empty!";
                if ("undefined" !== typeof console && console) {
                    console.error(idErrorStr);
                }
                throw idErrorStr;
            }
            this.connectionUrl = url;
            this.storedQueryId = storedQueryId;
        }
    };

    /**
     * @private
     *
     * Notice, this function should be called in the context of the private object of the WfsConnection instance.
     *
     * See API for function description.
     */
    var disconnect = function() {
        this.connectionUrl = undefined;
        this.storedQueryId = undefined;
        resetCache.call(this);
    };

    /**
     * @private
     *
     * Notice, this function should be called in the context of the private object of the WfsConnection instance.
     *
     * See API for function description.
     */
    var resetCache = function() {
        this.cache.clearCache();
    };

    /**
     * @private
     *
     * See API for function description.
     */
    var getData = function(options) {
        if (options) {
            if (options.bbox) {
                // BBox is not supported by the cache at the moment.
                // Therefore, pass the whole query to the parser.
                retrieveSpatialData.call(this, options);

            } else if (options.geoid || options.wmo || options.fmisid || options.sites) {
                retrieveSitesData.call(this, options);

            } else {
                var errorStr = "ERROR: Either geoid, wmo, fmisid, sites or bbox is mandatory in options!";
                if ("undefined" !== typeof console && console) {
                    console.error(errorStr);
                }
                throw errorStr;
            }

        } else {
            var optionsErrorStr = "ERROR: Options object is mandatory!";
            if ("undefined" !== typeof console && console) {
                console.error(optionsErrorStr);
            }
            throw optionsErrorStr;
        }
    };

    /**
     * Constructor for the connection instance.
     *
     * Notice, this constructor is returned from {fi.fmi.metoclient.metolib.WfsConnection}
     * and can be used for instantiation later.
     */
    var connectionConstructor = function() {
        // Reference to the connection instance object.
        var _me = this;

        // Private object is used for API functions to provide them private member variables.
        // Instance specific data is available for API functions when reference to this private
        // object is applied to the function calls by using this private object. Then, these
        // variables and functions are capsulated and are not available outside of the connection
        // instance.
        var _private = {
            // Reference to the connection instance object.
            connectionInstance : _me,

            // Member variables that are initialized to undefined.
            // When connection function is called these are set.
            connectionUrl : undefined,
            storedQueryId : undefined,

            // Member variables that are initialized to values that are used
            // throughout the lifetime of object instance.

            // Cache for retrieved data.
            cache : new fi.fmi.metoclient.metolib.SplitterCache({
                sideFetchAfterFactor : 1,
                sideFetchBeforeFactor : 0.5,
                maxBlockDataPoints : 200,
                maxCacheDataSize : 4000
            })
        };

        // Set data fetcher that cache uses for the given type of the data.
        _private.cache.addDataProvider(DATA_FETCHER_NAME_SITES, function(taskDef, callback) {
            cacheSitesDataFetcherCallback(_private, taskDef, callback);
        });

        //=================================================================
        // Public WfsConnection API is defined here as priviledged functions.
        //=================================================================

        /**
         * Synchronous.
         *
         * @return {String} URL that is used for the connection and
         *                  has been set when {connect} function is called.
         *                  May be {undefined} if state is not connected.
         */
        this.getUrl = function() {
            return getUrl.call(_private);
        };

        /**
         * Synchronous.
         *
         * @return {String} Stored query ID that is used for the connection
         *                  and has been set when {connect} function is called.
         *                  May be {undefined} if state is not connected.
         */
        this.getStoredQueryId = function() {
            return getStoredQueryId.call(_private);
        };

        /**
         * Synchronous.
         *
         * Notice, if already connected, this function does not reconnect
         * even if a new URL would be different than the old one.
         *
         * @param {String} url URL that is used for the connection.
         *                     May not be {undefined}, {null} or empty.
         * @param {String} storedQueryId Stored query ID to identify the data that is requested.
         *                               For example, stored query ID may be used to request
         *                               observed data or forecast data.
         *                               May not be {undefined}, {null} or empty.
         * @return {boolean} {true} if synchronous operation was successfull. Else {false}.
         */
        this.connect = function(url, storedQueryId) {
            return makeSafe.call(_private, connect, undefined, url, storedQueryId);
        };

        /**
         * Synchronous.
         *
         * Releases resources.
         *
         * @return {boolean} {true} if synchronous operation was successfull. Else {false}.
         */
        this.disconnect = function() {
            return makeSafe.call(_private, disconnect, undefined);
        };

        /**
         * Synchronous.
         *
         * Releases cache resources.
         *
         * @return {boolean} {true} if synchronous operation was successfull. Else {false}.
         */
        this.resetCache = function() {
            return makeSafe.call(_private, resetCache, undefined);
        };

        /**
         * Request data.
         *
         * Operation is asynchronous.
         *
         * Notice, callback is {function(data, errors){}}.
         *      - data: Data object provides locations data.
         *              May be {undefined} if an error has occurred.
         *              The object is of this structure:
         *          {
         *              // General information received in the server response for the request.
         *              // May not be {undefined} or {null}.
         *              // Content properties are set if given in the server response.
         *              info : {
         *                  begin : {Date|undefined},
         *                  end : {Date|undefined}
         *              },
         *              // Properties provide descriptive property objects that correspond to
         *              // the parameter keys that have been given for the request. Notice,
         *              // property data is also available inside locations data objects.
         *              // This object is provided as a complementary object, if reference to a single
         *              // wrapper object is later needed for general information about properties.
         *              properties : {
         *                  parameterAsKey : { label : "labelString",
         *                                     unit : "measurementUnitString",
         *                                     phenomenon : "phenomenonString",
         *                                     statisticalFunction : "statisticalFunctionString",
         *                                     statisticalPeriod : "statisticalAggregationTimePeriod" },
         *                  ...
         *              },
         *              // Data of locations. May be empty if sites data is not provided.
         *              // May not be {undefined} or {null}.
         *              locations : [
         *                  {
         *                      info : {
         *                          id : "location id string",
         *                          geoid : "geoid string",
         *                          wmo : "wmo string",
         *                          fmisid : "fmisid string",
         *                          name : "location name string",
         *                          region : "region name string",
         *                          country : "country name string",
         *                          timezone : "timezone name string",
         *                          position : [ "positionStringPart1", "positionStringPart2", ... ]
         *                      },
         *                      data : {
         *                          // Data property keys correspond to the parameter keys
         *                          // that have been given for the request.
         *                          parameterAsKey : {
         *                            property : { label : "labelString",
         *                                         unit : "measurementUnitString",
         *                                         phenomenon : "phenomenonString",
         *                                         statisticalFunction : "statisticalFunctionString",
         *                                         statisticalPeriod : "statisticalAggregationTimePeriod" },
         *                            timeValuePairs : [ { time : intTimeInMsSince01011970,
         *                                                 value : floatMeasurementValue }, ... ]
         *                          },
         *                          ...
         *                      }
         *                  },
         *                  ...
         *              ]
         *          }
         *      - errors: Array that contains possible errors that occurred during the flow. Array is
         *                always provided even if it may be empty. If an error occurs in this parser,
         *                an error string is pushed here. Also, when an HTTP error occurs, error contains
         *                the textual portion of the HTTP status, such as "Not Found" or "Internal Server Error."
         *                Errors parameter is of this structure:
         *          [
         *              {
         *                  // None, one, or more of the following error values may exist.
         *                  // Values may also be {undefined} or {null}.
         *                  errorCode : "errorCodeString",
         *                  errorText : "errorTextString",
         *                  extension : {Object}
         *              },
         *              ...
         *          ]
         *
         * Notice, object properties of the function {options} parameter are URL encoded by this library
         * before they are inserted into the request URL.
         *
         * @param {Object} options Mandatory. May not be {undefined} or {null}. Object structure:
         *     {
         *         requestParameter : {String|Array(String)}
         *                            Mandatory property. May not be {undefined} or {null}. Array may not be empty.
         *                            This is one of the parameter strings that is part of
         *                            URL parameters to define which data is requested from the server.
         *                            Parameter string may contain request for multiple parameters.
         *                            For example, value for temperature may be "td". If an array is given,
         *                            strings are given as separate array string items.
         *         begin : {int|Date}
         *                 Mandatory property. May not be {undefined} or {null}.
         *                 The begin time for the data.
         *                 Integer value is number of milliseconds since 01.01.1970 that can be gotten,
         *                 for example, with {Date::getTime()}. Alternatively, {Date} object may be given.
         *         end : {int|Date}
         *               Mandatory property. May not be {undefined} or {null}.
         *               The end time for the data.
         *               Value is number of milliseconds since 01.01.1970 that can be gotten,
         *               for example, with {Date::getTime()}. Alternatively, {Date} object may be given.
         *         timestep : {int}
         *                    May be {undefined} or {null}.
         *                    Timestep in milliseconds.
         *                    If {undefined}, {null} or zero, server returns all data for
         *                    the given time interval. If timestep is 1, server uses the default
         *                    timestep. Notice, even if time is in milliseconds here, it is converted
         *                    and floored to minutes before sending for the server.
         *         denyTimeAdjusting : {boolean}
         *                             May be {undefined} or {null}.
         *                             If {true}, {begin} and {end} times are not adjusted for server but given values
         *                             are used exactly for requests. Otherwise, times are adjusted.
         *         geoid : {Array(String|int)|String|int}
         *                 May be {undefined} or {null} or empty if {wmo}, {fmisid}, {sites} or {bbox} is given.
         *                 Array of Geographical name ID (geonames.org) strings or integers.
         *                 One geoid can be given as a single string or integer.
         *                 Notice, either {geoid}, {wmo}, {fmisid}, {sites} or {bbox} is required.
         *         wmo : {Array(String|int)|String|int}
         *               May be {undefined} or {null} or empty if {geoid}, {fmisid}, {sites} or {bbox} is given.
         *               Array of World Meteorological Organization (WMO) identifier strings or integers.
         *               One wmo can be given as a single string or integer.
         *               Notice, either {geoid}, {wmo}, {fmisid}, {sites} or {bbox} is required.
         *         fmisid : {Array(String|int)|String|int}
         *                  May be {undefined} or {null} or empty if {geoid}, {wmo}, {sites} or {bbox} is given.
         *                  Array of FMI observation station identifiers (fmisid) strings or integers.
         *                  One fmisid can be given as a single string or integer.
         *                  Notice, either {geoid}, {wmo}, {fmisid}, {sites} or {bbox} is required.
         *         sites : {Array(String)|String}
         *                 May be {undefined} or {null} or empty if {geoid}, {wmo}, {fmisid} or {bbox} is given.
         *                 Array of site name strings. One site can be given as a single string.
         *                 Notice, either {geoid}, {wmo}, {fmisid}, {sites} or {bbox} is required.
         *         bbox : {String}
         *                May be {undefined}, {null} or empty if {geoid}, {wmo}, {fmisid} or {sites} is given.
         *                BBOX string. Notice, either {geoid}, {wmo}, {fmisid}, {sites} or {bbox} is required.
         *                Notice, cache is not used if spatial data (bbox) is queried.
         *         crs : {String}
         *               May be {undefined}, {null} or empty.
         *               Coordinate Reference System (CRS) string.
         *         queryExtension : {Object}
         *                          Optional. May be {undefined} or {null}.
         *                          Property values may be {undefined}, {null} or {string}.
         *                          This property is not needed in normal use cases of the API.
         *                          But, this property may be used if API does not support field-value-pairs
         *                          that need to be included into request URL query. The key-value-pairs of
         *                          the property are URL encoded and included as URL query field-value-pairs
         *                          in the request. If property value is {undefined} or {null}, it is interpreted
         *                          as an empty string. Notice, other API properties should be used instead of this
         *                          extension if possible.
         *         callback : {function(data, errors)}
         *                    Mandatory property. May not be {undefined} or {null}.
         *                    Callback is called with the parsed data and errors array when operation finishes.
         *                    If an error occurs, data is set {undefined} for the callback. Possible errors are
         *                    given inside the array that is always provided.
         *         progressCallback : {Function(err, partStart, partEnd)}
         *                            Not mandatory property.
         *                            Called when part of the flow has finished.
         *                            Function is called with {err}, {partStart} and {partEnd} parameters.
         *     }
         * @return {boolean} {true} if asynchronous operation is successfully started. Else {false}.
         */
        this.getData = function(options) {
            return makeSafe.call(_private, getData, options ? options.callback : undefined, options);
        };
    };

    // Constructor function is returned for later instantiation.
    return connectionConstructor;

})();

            ;
var CLOSURE_NO_DEPS = true;
var COMPILED = false;
var goog = goog || {};
goog.global = this || self;
goog.global.CLOSURE_UNCOMPILED_DEFINES;
goog.global.CLOSURE_DEFINES;
goog.isDef = function(val) {
  return val !== void 0;
};
goog.isString = function(val) {
  return typeof val == "string";
};
goog.isBoolean = function(val) {
  return typeof val == "boolean";
};
goog.isNumber = function(val) {
  return typeof val == "number";
};
goog.exportPath_ = function(name, opt_object, opt_objectToExportTo) {
  var parts = name.split(".");
  var cur = opt_objectToExportTo || goog.global;
  if (!(parts[0] in cur) && typeof cur.execScript != "undefined") {
    cur.execScript("var " + parts[0]);
  }
  for (var part; parts.length && (part = parts.shift());) {
    if (!parts.length && opt_object !== undefined) {
      cur[part] = opt_object;
    } else {
      if (cur[part] && cur[part] !== Object.prototype[part]) {
        cur = cur[part];
      } else {
        cur = cur[part] = {};
      }
    }
  }
};
goog.define = function(name, defaultValue) {
  var value = defaultValue;
  if (!COMPILED) {
    var uncompiledDefines = goog.global.CLOSURE_UNCOMPILED_DEFINES;
    var defines = goog.global.CLOSURE_DEFINES;
    if (uncompiledDefines && uncompiledDefines.nodeType === undefined && Object.prototype.hasOwnProperty.call(uncompiledDefines, name)) {
      value = uncompiledDefines[name];
    } else {
      if (defines && defines.nodeType === undefined && Object.prototype.hasOwnProperty.call(defines, name)) {
        value = defines[name];
      }
    }
  }
  return value;
};
goog.FEATURESET_YEAR = goog.define("goog.FEATURESET_YEAR", 2012);
goog.DEBUG = goog.define("goog.DEBUG", true);
goog.LOCALE = goog.define("goog.LOCALE", "en");
goog.TRUSTED_SITE = goog.define("goog.TRUSTED_SITE", true);
goog.STRICT_MODE_COMPATIBLE = goog.define("goog.STRICT_MODE_COMPATIBLE", false);
goog.DISALLOW_TEST_ONLY_CODE = goog.define("goog.DISALLOW_TEST_ONLY_CODE", COMPILED && !goog.DEBUG);
goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING = goog.define("goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING", false);
goog.provide = function(name) {
  if (goog.isInModuleLoader_()) {
    throw new Error("goog.provide cannot be used within a module.");
  }
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      throw new Error('Namespace "' + name + '" already declared.');
    }
  }
  goog.constructNamespace_(name);
};
goog.constructNamespace_ = function(name, opt_obj) {
  if (!COMPILED) {
    delete goog.implicitNamespaces_[name];
    var namespace = name;
    while (namespace = namespace.substring(0, namespace.lastIndexOf("."))) {
      if (goog.getObjectByName(namespace)) {
        break;
      }
      goog.implicitNamespaces_[namespace] = true;
    }
  }
  goog.exportPath_(name, opt_obj);
};
goog.getScriptNonce = function(opt_window) {
  if (opt_window && opt_window != goog.global) {
    return goog.getScriptNonce_(opt_window.document);
  }
  if (goog.cspNonce_ === null) {
    goog.cspNonce_ = goog.getScriptNonce_(goog.global.document);
  }
  return goog.cspNonce_;
};
goog.NONCE_PATTERN_ = /^[\w+/_-]+[=]{0,2}$/;
goog.cspNonce_ = null;
goog.getScriptNonce_ = function(doc) {
  var script = doc.querySelector && doc.querySelector("script[nonce]");
  if (script) {
    var nonce = script["nonce"] || script.getAttribute("nonce");
    if (nonce && goog.NONCE_PATTERN_.test(nonce)) {
      return nonce;
    }
  }
  return "";
};
goog.VALID_MODULE_RE_ = /^[a-zA-Z_$][a-zA-Z0-9._$]*$/;
goog.module = function(name) {
  if (typeof name !== "string" || !name || name.search(goog.VALID_MODULE_RE_) == -1) {
    throw new Error("Invalid module identifier");
  }
  if (!goog.isInGoogModuleLoader_()) {
    throw new Error("Module " + name + " has been loaded incorrectly. Note, " + "modules cannot be loaded as normal scripts. They require some kind of " + "pre-processing step. You're likely trying to load a module via a " + "script tag or as a part of a concatenated bundle without rewriting the " + "module. For more info see: " + "https://github.com/google/closure-library/wiki/goog.module:-an-ES6-module-like-alternative-to-goog.provide.");
  }
  if (goog.moduleLoaderState_.moduleName) {
    throw new Error("goog.module may only be called once per module.");
  }
  goog.moduleLoaderState_.moduleName = name;
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      throw new Error('Namespace "' + name + '" already declared.');
    }
    delete goog.implicitNamespaces_[name];
  }
};
goog.module.get = function(name) {
  return goog.module.getInternal_(name);
};
goog.module.getInternal_ = function(name) {
  if (!COMPILED) {
    if (name in goog.loadedModules_) {
      return goog.loadedModules_[name].exports;
    } else {
      if (!goog.implicitNamespaces_[name]) {
        var ns = goog.getObjectByName(name);
        return ns != null ? ns : null;
      }
    }
  }
  return null;
};
goog.ModuleType = {ES6:"es6", GOOG:"goog"};
goog.moduleLoaderState_ = null;
goog.isInModuleLoader_ = function() {
  return goog.isInGoogModuleLoader_() || goog.isInEs6ModuleLoader_();
};
goog.isInGoogModuleLoader_ = function() {
  return !!goog.moduleLoaderState_ && goog.moduleLoaderState_.type == goog.ModuleType.GOOG;
};
goog.isInEs6ModuleLoader_ = function() {
  var inLoader = !!goog.moduleLoaderState_ && goog.moduleLoaderState_.type == goog.ModuleType.ES6;
  if (inLoader) {
    return true;
  }
  var jscomp = goog.global["$jscomp"];
  if (jscomp) {
    if (typeof jscomp.getCurrentModulePath != "function") {
      return false;
    }
    return !!jscomp.getCurrentModulePath();
  }
  return false;
};
goog.module.declareLegacyNamespace = function() {
  if (!COMPILED && !goog.isInGoogModuleLoader_()) {
    throw new Error("goog.module.declareLegacyNamespace must be called from " + "within a goog.module");
  }
  if (!COMPILED && !goog.moduleLoaderState_.moduleName) {
    throw new Error("goog.module must be called prior to " + "goog.module.declareLegacyNamespace.");
  }
  goog.moduleLoaderState_.declareLegacyNamespace = true;
};
goog.declareModuleId = function(namespace) {
  if (!COMPILED) {
    if (!goog.isInEs6ModuleLoader_()) {
      throw new Error("goog.declareModuleId may only be called from " + "within an ES6 module");
    }
    if (goog.moduleLoaderState_ && goog.moduleLoaderState_.moduleName) {
      throw new Error("goog.declareModuleId may only be called once per module.");
    }
    if (namespace in goog.loadedModules_) {
      throw new Error('Module with namespace "' + namespace + '" already exists.');
    }
  }
  if (goog.moduleLoaderState_) {
    goog.moduleLoaderState_.moduleName = namespace;
  } else {
    var jscomp = goog.global["$jscomp"];
    if (!jscomp || typeof jscomp.getCurrentModulePath != "function") {
      throw new Error('Module with namespace "' + namespace + '" has been loaded incorrectly.');
    }
    var exports = jscomp.require(jscomp.getCurrentModulePath());
    goog.loadedModules_[namespace] = {exports:exports, type:goog.ModuleType.ES6, moduleId:namespace};
  }
};
goog.setTestOnly = function(opt_message) {
  if (goog.DISALLOW_TEST_ONLY_CODE) {
    opt_message = opt_message || "";
    throw new Error("Importing test-only code into non-debug environment" + (opt_message ? ": " + opt_message : "."));
  }
};
goog.forwardDeclare = function(name) {
};
goog.forwardDeclare("Document");
goog.forwardDeclare("HTMLScriptElement");
goog.forwardDeclare("XMLHttpRequest");
if (!COMPILED) {
  goog.isProvided_ = function(name) {
    return name in goog.loadedModules_ || !goog.implicitNamespaces_[name] && goog.getObjectByName(name) != null;
  };
  goog.implicitNamespaces_ = {"goog.module":true};
}
goog.getObjectByName = function(name, opt_obj) {
  var parts = name.split(".");
  var cur = opt_obj || goog.global;
  for (var i = 0; i < parts.length; i++) {
    cur = cur[parts[i]];
    if (cur == null) {
      return null;
    }
  }
  return cur;
};
goog.globalize = function(obj, opt_global) {
  var global = opt_global || goog.global;
  for (var x in obj) {
    global[x] = obj[x];
  }
};
goog.addDependency = function(relPath, provides, requires, opt_loadFlags) {
  if (!COMPILED && goog.DEPENDENCIES_ENABLED) {
    goog.debugLoader_.addDependency(relPath, provides, requires, opt_loadFlags);
  }
};
goog.ENABLE_DEBUG_LOADER = goog.define("goog.ENABLE_DEBUG_LOADER", true);
goog.logToConsole_ = function(msg) {
  if (goog.global.console) {
    goog.global.console["error"](msg);
  }
};
goog.require = function(namespace) {
  if (!COMPILED) {
    if (goog.ENABLE_DEBUG_LOADER) {
      goog.debugLoader_.requested(namespace);
    }
    if (goog.isProvided_(namespace)) {
      if (goog.isInModuleLoader_()) {
        return goog.module.getInternal_(namespace);
      }
    } else {
      if (goog.ENABLE_DEBUG_LOADER) {
        var moduleLoaderState = goog.moduleLoaderState_;
        goog.moduleLoaderState_ = null;
        try {
          goog.debugLoader_.load_(namespace);
        } finally {
          goog.moduleLoaderState_ = moduleLoaderState;
        }
      }
    }
    return null;
  }
};
goog.requireType = function(namespace) {
  return {};
};
goog.basePath = "";
goog.global.CLOSURE_BASE_PATH;
goog.global.CLOSURE_NO_DEPS;
goog.global.CLOSURE_IMPORT_SCRIPT;
goog.nullFunction = function() {
};
goog.abstractMethod = function() {
  throw new Error("unimplemented abstract method");
};
goog.addSingletonGetter = function(ctor) {
  ctor.instance_ = undefined;
  ctor.getInstance = function() {
    if (ctor.instance_) {
      return ctor.instance_;
    }
    if (goog.DEBUG) {
      goog.instantiatedSingletons_[goog.instantiatedSingletons_.length] = ctor;
    }
    return ctor.instance_ = new ctor;
  };
};
goog.instantiatedSingletons_ = [];
goog.LOAD_MODULE_USING_EVAL = goog.define("goog.LOAD_MODULE_USING_EVAL", true);
goog.SEAL_MODULE_EXPORTS = goog.define("goog.SEAL_MODULE_EXPORTS", goog.DEBUG);
goog.loadedModules_ = {};
goog.DEPENDENCIES_ENABLED = !COMPILED && goog.ENABLE_DEBUG_LOADER;
goog.TRANSPILE = goog.define("goog.TRANSPILE", "detect");
goog.ASSUME_ES_MODULES_TRANSPILED = goog.define("goog.ASSUME_ES_MODULES_TRANSPILED", false);
goog.TRANSPILE_TO_LANGUAGE = goog.define("goog.TRANSPILE_TO_LANGUAGE", "");
goog.TRANSPILER = goog.define("goog.TRANSPILER", "transpile.js");
goog.hasBadLetScoping = null;
goog.useSafari10Workaround = function() {
  if (goog.hasBadLetScoping == null) {
    var hasBadLetScoping;
    try {
      hasBadLetScoping = !eval('"use strict";' + "let x \x3d 1; function f() { return typeof x; };" + 'f() \x3d\x3d "number";');
    } catch (e) {
      hasBadLetScoping = false;
    }
    goog.hasBadLetScoping = hasBadLetScoping;
  }
  return goog.hasBadLetScoping;
};
goog.workaroundSafari10EvalBug = function(moduleDef) {
  return "(function(){" + moduleDef + "\n" + ";" + "})();\n";
};
goog.loadModule = function(moduleDef) {
  var previousState = goog.moduleLoaderState_;
  try {
    goog.moduleLoaderState_ = {moduleName:"", declareLegacyNamespace:false, type:goog.ModuleType.GOOG};
    var exports;
    if (goog.isFunction(moduleDef)) {
      exports = moduleDef.call(undefined, {});
    } else {
      if (typeof moduleDef === "string") {
        if (goog.useSafari10Workaround()) {
          moduleDef = goog.workaroundSafari10EvalBug(moduleDef);
        }
        exports = goog.loadModuleFromSource_.call(undefined, moduleDef);
      } else {
        throw new Error("Invalid module definition");
      }
    }
    var moduleName = goog.moduleLoaderState_.moduleName;
    if (typeof moduleName === "string" && moduleName) {
      if (goog.moduleLoaderState_.declareLegacyNamespace) {
        goog.constructNamespace_(moduleName, exports);
      } else {
        if (goog.SEAL_MODULE_EXPORTS && Object.seal && typeof exports == "object" && exports != null) {
          Object.seal(exports);
        }
      }
      var data = {exports:exports, type:goog.ModuleType.GOOG, moduleId:goog.moduleLoaderState_.moduleName};
      goog.loadedModules_[moduleName] = data;
    } else {
      throw new Error('Invalid module name "' + moduleName + '"');
    }
  } finally {
    goog.moduleLoaderState_ = previousState;
  }
};
goog.loadModuleFromSource_ = function() {
  var exports = {};
  eval(arguments[0]);
  return exports;
};
goog.normalizePath_ = function(path) {
  var components = path.split("/");
  var i = 0;
  while (i < components.length) {
    if (components[i] == ".") {
      components.splice(i, 1);
    } else {
      if (i && components[i] == ".." && components[i - 1] && components[i - 1] != "..") {
        components.splice(--i, 2);
      } else {
        i++;
      }
    }
  }
  return components.join("/");
};
goog.global.CLOSURE_LOAD_FILE_SYNC;
goog.loadFileSync_ = function(src) {
  if (goog.global.CLOSURE_LOAD_FILE_SYNC) {
    return goog.global.CLOSURE_LOAD_FILE_SYNC(src);
  } else {
    try {
      var xhr = new goog.global["XMLHttpRequest"];
      xhr.open("get", src, false);
      xhr.send();
      return xhr.status == 0 || xhr.status == 200 ? xhr.responseText : null;
    } catch (err) {
      return null;
    }
  }
};
goog.transpile_ = function(code, path, target) {
  var jscomp = goog.global["$jscomp"];
  if (!jscomp) {
    goog.global["$jscomp"] = jscomp = {};
  }
  var transpile = jscomp.transpile;
  if (!transpile) {
    var transpilerPath = goog.basePath + goog.TRANSPILER;
    var transpilerCode = goog.loadFileSync_(transpilerPath);
    if (transpilerCode) {
      (function() {
        (0, eval)(transpilerCode + "\n//# sourceURL\x3d" + transpilerPath);
      }).call(goog.global);
      if (goog.global["$gwtExport"] && goog.global["$gwtExport"]["$jscomp"] && !goog.global["$gwtExport"]["$jscomp"]["transpile"]) {
        throw new Error('The transpiler did not properly export the "transpile" ' + "method. $gwtExport: " + JSON.stringify(goog.global["$gwtExport"]));
      }
      goog.global["$jscomp"].transpile = goog.global["$gwtExport"]["$jscomp"]["transpile"];
      jscomp = goog.global["$jscomp"];
      transpile = jscomp.transpile;
    }
  }
  if (!transpile) {
    var suffix = " requires transpilation but no transpiler was found.";
    transpile = jscomp.transpile = function(code, path) {
      goog.logToConsole_(path + suffix);
      return code;
    };
  }
  return transpile(code, path, target);
};
goog.typeOf = function(value) {
  var s = typeof value;
  if (s == "object") {
    if (value) {
      if (value instanceof Array) {
        return "array";
      } else {
        if (value instanceof Object) {
          return s;
        }
      }
      var className = Object.prototype.toString.call(value);
      if (className == "[object Window]") {
        return "object";
      }
      if (className == "[object Array]" || typeof value.length == "number" && typeof value.splice != "undefined" && typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("splice")) {
        return "array";
      }
      if (className == "[object Function]" || typeof value.call != "undefined" && typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("call")) {
        return "function";
      }
    } else {
      return "null";
    }
  } else {
    if (s == "function" && typeof value.call == "undefined") {
      return "object";
    }
  }
  return s;
};
goog.isNull = function(val) {
  return val === null;
};
goog.isDefAndNotNull = function(val) {
  return val != null;
};
goog.isArray = function(val) {
  return goog.typeOf(val) == "array";
};
goog.isArrayLike = function(val) {
  var type = goog.typeOf(val);
  return type == "array" || type == "object" && typeof val.length == "number";
};
goog.isDateLike = function(val) {
  return goog.isObject(val) && typeof val.getFullYear == "function";
};
goog.isFunction = function(val) {
  return goog.typeOf(val) == "function";
};
goog.isObject = function(val) {
  var type = typeof val;
  return type == "object" && val != null || type == "function";
};
goog.getUid = function(obj) {
  return obj[goog.UID_PROPERTY_] || (obj[goog.UID_PROPERTY_] = ++goog.uidCounter_);
};
goog.hasUid = function(obj) {
  return !!obj[goog.UID_PROPERTY_];
};
goog.removeUid = function(obj) {
  if (obj !== null && "removeAttribute" in obj) {
    obj.removeAttribute(goog.UID_PROPERTY_);
  }
  try {
    delete obj[goog.UID_PROPERTY_];
  } catch (ex) {
  }
};
goog.UID_PROPERTY_ = "closure_uid_" + (Math.random() * 1e9 >>> 0);
goog.uidCounter_ = 0;
goog.getHashCode = goog.getUid;
goog.removeHashCode = goog.removeUid;
goog.cloneObject = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (typeof obj.clone === "function") {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.cloneObject(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.bindNative_ = function(fn, selfObj, var_args) {
  return fn.call.apply(fn.bind, arguments);
};
goog.bindJs_ = function(fn, selfObj, var_args) {
  if (!fn) {
    throw new Error;
  }
  if (arguments.length > 2) {
    var boundArgs = Array.prototype.slice.call(arguments, 2);
    return function() {
      var newArgs = Array.prototype.slice.call(arguments);
      Array.prototype.unshift.apply(newArgs, boundArgs);
      return fn.apply(selfObj, newArgs);
    };
  } else {
    return function() {
      return fn.apply(selfObj, arguments);
    };
  }
};
goog.bind = function(fn, selfObj, var_args) {
  if (Function.prototype.bind && Function.prototype.bind.toString().indexOf("native code") != -1) {
    goog.bind = goog.bindNative_;
  } else {
    goog.bind = goog.bindJs_;
  }
  return goog.bind.apply(null, arguments);
};
goog.partial = function(fn, var_args) {
  var args = Array.prototype.slice.call(arguments, 1);
  return function() {
    var newArgs = args.slice();
    newArgs.push.apply(newArgs, arguments);
    return fn.apply(this, newArgs);
  };
};
goog.mixin = function(target, source) {
  for (var x in source) {
    target[x] = source[x];
  }
};
goog.now = goog.TRUSTED_SITE && Date.now || function() {
  return +new Date;
};
goog.globalEval = function(script) {
  if (goog.global.execScript) {
    goog.global.execScript(script, "JavaScript");
  } else {
    if (goog.global.eval) {
      if (goog.evalWorksForGlobals_ == null) {
        try {
          goog.global.eval("var _evalTest_ \x3d 1;");
        } catch (ignore) {
        }
        if (typeof goog.global["_evalTest_"] != "undefined") {
          try {
            delete goog.global["_evalTest_"];
          } catch (ignore) {
          }
          goog.evalWorksForGlobals_ = true;
        } else {
          goog.evalWorksForGlobals_ = false;
        }
      }
      if (goog.evalWorksForGlobals_) {
        goog.global.eval(script);
      } else {
        var doc = goog.global.document;
        var scriptElt = doc.createElement("script");
        scriptElt.type = "text/javascript";
        scriptElt.defer = false;
        scriptElt.appendChild(doc.createTextNode(script));
        doc.head.appendChild(scriptElt);
        doc.head.removeChild(scriptElt);
      }
    } else {
      throw new Error("goog.globalEval not available");
    }
  }
};
goog.evalWorksForGlobals_ = null;
goog.cssNameMapping_;
goog.cssNameMappingStyle_;
goog.global.CLOSURE_CSS_NAME_MAP_FN;
goog.getCssName = function(className, opt_modifier) {
  if (String(className).charAt(0) == ".") {
    throw new Error('className passed in goog.getCssName must not start with ".".' + " You passed: " + className);
  }
  var getMapping = function(cssName) {
    return goog.cssNameMapping_[cssName] || cssName;
  };
  var renameByParts = function(cssName) {
    var parts = cssName.split("-");
    var mapped = [];
    for (var i = 0; i < parts.length; i++) {
      mapped.push(getMapping(parts[i]));
    }
    return mapped.join("-");
  };
  var rename;
  if (goog.cssNameMapping_) {
    rename = goog.cssNameMappingStyle_ == "BY_WHOLE" ? getMapping : renameByParts;
  } else {
    rename = function(a) {
      return a;
    };
  }
  var result = opt_modifier ? className + "-" + rename(opt_modifier) : rename(className);
  if (goog.global.CLOSURE_CSS_NAME_MAP_FN) {
    return goog.global.CLOSURE_CSS_NAME_MAP_FN(result);
  }
  return result;
};
goog.setCssNameMapping = function(mapping, opt_style) {
  goog.cssNameMapping_ = mapping;
  goog.cssNameMappingStyle_ = opt_style;
};
goog.global.CLOSURE_CSS_NAME_MAPPING;
if (!COMPILED && goog.global.CLOSURE_CSS_NAME_MAPPING) {
  goog.cssNameMapping_ = goog.global.CLOSURE_CSS_NAME_MAPPING;
}
goog.getMsg = function(str, opt_values, opt_options) {
  if (opt_options && opt_options.html) {
    str = str.replace(/</g, "\x26lt;");
  }
  if (opt_values) {
    str = str.replace(/\{\$([^}]+)}/g, function(match, key) {
      return opt_values != null && key in opt_values ? opt_values[key] : match;
    });
  }
  return str;
};
goog.getMsgWithFallback = function(a, b) {
  return a;
};
goog.exportSymbol = function(publicPath, object, opt_objectToExportTo) {
  goog.exportPath_(publicPath, object, opt_objectToExportTo);
};
goog.exportProperty = function(object, publicName, symbol) {
  object[publicName] = symbol;
};
goog.inherits = function(childCtor, parentCtor) {
  function tempCtor() {
  }
  tempCtor.prototype = parentCtor.prototype;
  childCtor.superClass_ = parentCtor.prototype;
  childCtor.prototype = new tempCtor;
  childCtor.prototype.constructor = childCtor;
  childCtor.base = function(me, methodName, var_args) {
    var args = new Array(arguments.length - 2);
    for (var i = 2; i < arguments.length; i++) {
      args[i - 2] = arguments[i];
    }
    return parentCtor.prototype[methodName].apply(me, args);
  };
};
goog.base = function(me, opt_methodName, var_args) {
  var caller = arguments.callee.caller;
  if (goog.STRICT_MODE_COMPATIBLE || goog.DEBUG && !caller) {
    throw new Error("arguments.caller not defined.  goog.base() cannot be used " + "with strict mode code. See " + "http://www.ecma-international.org/ecma-262/5.1/#sec-C");
  }
  if (typeof caller.superClass_ !== "undefined") {
    var ctorArgs = new Array(arguments.length - 1);
    for (var i = 1; i < arguments.length; i++) {
      ctorArgs[i - 1] = arguments[i];
    }
    return caller.superClass_.constructor.apply(me, ctorArgs);
  }
  if (typeof opt_methodName != "string" && typeof opt_methodName != "symbol") {
    throw new Error("method names provided to goog.base must be a string or a symbol");
  }
  var args = new Array(arguments.length - 2);
  for (var i = 2; i < arguments.length; i++) {
    args[i - 2] = arguments[i];
  }
  var foundCaller = false;
  for (var proto = me.constructor.prototype; proto; proto = Object.getPrototypeOf(proto)) {
    if (proto[opt_methodName] === caller) {
      foundCaller = true;
    } else {
      if (foundCaller) {
        return proto[opt_methodName].apply(me, args);
      }
    }
  }
  if (me[opt_methodName] === caller) {
    return me.constructor.prototype[opt_methodName].apply(me, args);
  } else {
    throw new Error("goog.base called from a method of one name " + "to a method of a different name");
  }
};
goog.scope = function(fn) {
  if (goog.isInModuleLoader_()) {
    throw new Error("goog.scope is not supported within a module.");
  }
  fn.call(goog.global);
};
if (!COMPILED) {
  goog.global["COMPILED"] = COMPILED;
}
goog.defineClass = function(superClass, def) {
  var constructor = def.constructor;
  var statics = def.statics;
  if (!constructor || constructor == Object.prototype.constructor) {
    constructor = function() {
      throw new Error("cannot instantiate an interface (no constructor defined).");
    };
  }
  var cls = goog.defineClass.createSealingConstructor_(constructor, superClass);
  if (superClass) {
    goog.inherits(cls, superClass);
  }
  delete def.constructor;
  delete def.statics;
  goog.defineClass.applyProperties_(cls.prototype, def);
  if (statics != null) {
    if (statics instanceof Function) {
      statics(cls);
    } else {
      goog.defineClass.applyProperties_(cls, statics);
    }
  }
  return cls;
};
goog.defineClass.ClassDescriptor;
goog.defineClass.SEAL_CLASS_INSTANCES = goog.define("goog.defineClass.SEAL_CLASS_INSTANCES", goog.DEBUG);
goog.defineClass.createSealingConstructor_ = function(ctr, superClass) {
  if (!goog.defineClass.SEAL_CLASS_INSTANCES) {
    return ctr;
  }
  var superclassSealable = !goog.defineClass.isUnsealable_(superClass);
  var wrappedCtr = function() {
    var instance = ctr.apply(this, arguments) || this;
    instance[goog.UID_PROPERTY_] = instance[goog.UID_PROPERTY_];
    if (this.constructor === wrappedCtr && superclassSealable && Object.seal instanceof Function) {
      Object.seal(instance);
    }
    return instance;
  };
  return wrappedCtr;
};
goog.defineClass.isUnsealable_ = function(ctr) {
  return ctr && ctr.prototype && ctr.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_];
};
goog.defineClass.OBJECT_PROTOTYPE_FIELDS_ = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
goog.defineClass.applyProperties_ = function(target, source) {
  var key;
  for (key in source) {
    if (Object.prototype.hasOwnProperty.call(source, key)) {
      target[key] = source[key];
    }
  }
  for (var i = 0; i < goog.defineClass.OBJECT_PROTOTYPE_FIELDS_.length; i++) {
    key = goog.defineClass.OBJECT_PROTOTYPE_FIELDS_[i];
    if (Object.prototype.hasOwnProperty.call(source, key)) {
      target[key] = source[key];
    }
  }
};
goog.tagUnsealableClass = function(ctr) {
  if (!COMPILED && goog.defineClass.SEAL_CLASS_INSTANCES) {
    ctr.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_] = true;
  }
};
goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_ = "goog_defineClass_legacy_unsealable";
if (!COMPILED && goog.DEPENDENCIES_ENABLED) {
  goog.inHtmlDocument_ = function() {
    var doc = goog.global.document;
    return doc != null && "write" in doc;
  };
  goog.isDocumentLoading_ = function() {
    var doc = goog.global.document;
    return doc.attachEvent ? doc.readyState != "complete" : doc.readyState == "loading";
  };
  goog.findBasePath_ = function() {
    if (goog.global.CLOSURE_BASE_PATH != undefined && typeof goog.global.CLOSURE_BASE_PATH === "string") {
      goog.basePath = goog.global.CLOSURE_BASE_PATH;
      return;
    } else {
      if (!goog.inHtmlDocument_()) {
        return;
      }
    }
    var doc = goog.global.document;
    var currentScript = doc.currentScript;
    if (currentScript) {
      var scripts = [currentScript];
    } else {
      var scripts = doc.getElementsByTagName("SCRIPT");
    }
    for (var i = scripts.length - 1; i >= 0; --i) {
      var script = scripts[i];
      var src = script.src;
      var qmark = src.lastIndexOf("?");
      var l = qmark == -1 ? src.length : qmark;
      if (src.substr(l - 7, 7) == "base.js") {
        goog.basePath = src.substr(0, l - 7);
        return;
      }
    }
  };
  goog.findBasePath_();
  goog.Transpiler = function() {
    this.requiresTranspilation_ = null;
    this.transpilationTarget_ = goog.TRANSPILE_TO_LANGUAGE;
  };
  goog.Transpiler.prototype.createRequiresTranspilation_ = function() {
    var transpilationTarget = "es3";
    var requiresTranspilation = {"es3":false};
    var transpilationRequiredForAllLaterModes = false;
    function addNewerLanguageTranspilationCheck(modeName, isSupported) {
      if (transpilationRequiredForAllLaterModes) {
        requiresTranspilation[modeName] = true;
      } else {
        if (isSupported()) {
          transpilationTarget = modeName;
          requiresTranspilation[modeName] = false;
        } else {
          requiresTranspilation[modeName] = true;
          transpilationRequiredForAllLaterModes = true;
        }
      }
    }
    function evalCheck(code) {
      try {
        return !!eval(code);
      } catch (ignored) {
        return false;
      }
    }
    var userAgent = goog.global.navigator && goog.global.navigator.userAgent ? goog.global.navigator.userAgent : "";
    addNewerLanguageTranspilationCheck("es5", function() {
      return evalCheck("[1,].length\x3d\x3d1");
    });
    addNewerLanguageTranspilationCheck("es6", function() {
      var re = /Edge\/(\d+)(\.\d)*/i;
      var edgeUserAgent = userAgent.match(re);
      if (edgeUserAgent) {
        return false;
      }
      var es6fullTest = "class X{constructor(){if(new.target!\x3dString)throw 1;this.x\x3d42}}" + "let q\x3dReflect.construct(X,[],String);if(q.x!\x3d42||!(q instanceof " + "String))throw 1;for(const a of[2,3]){if(a\x3d\x3d2)continue;function " + "f(z\x3d{a}){let a\x3d0;return z.a}{function f(){return 0;}}return f()" + "\x3d\x3d3}";
      return evalCheck('(()\x3d\x3e{"use strict";' + es6fullTest + "})()");
    });
    addNewerLanguageTranspilationCheck("es7", function() {
      return evalCheck("2 ** 2 \x3d\x3d 4");
    });
    addNewerLanguageTranspilationCheck("es8", function() {
      return evalCheck("async () \x3d\x3e 1, true");
    });
    addNewerLanguageTranspilationCheck("es9", function() {
      return evalCheck("({...rest} \x3d {}), true");
    });
    addNewerLanguageTranspilationCheck("es_next", function() {
      return false;
    });
    return {target:transpilationTarget, map:requiresTranspilation};
  };
  goog.Transpiler.prototype.needsTranspile = function(lang, module) {
    if (goog.TRANSPILE == "always") {
      return true;
    } else {
      if (goog.TRANSPILE == "never") {
        return false;
      } else {
        if (!this.requiresTranspilation_) {
          var obj = this.createRequiresTranspilation_();
          this.requiresTranspilation_ = obj.map;
          this.transpilationTarget_ = this.transpilationTarget_ || obj.target;
        }
      }
    }
    if (lang in this.requiresTranspilation_) {
      if (this.requiresTranspilation_[lang]) {
        return true;
      } else {
        if (goog.inHtmlDocument_() && module == "es6" && !("noModule" in goog.global.document.createElement("script"))) {
          return true;
        } else {
          return false;
        }
      }
    } else {
      throw new Error("Unknown language mode: " + lang);
    }
  };
  goog.Transpiler.prototype.transpile = function(code, path) {
    return goog.transpile_(code, path, this.transpilationTarget_);
  };
  goog.transpiler_ = new goog.Transpiler;
  goog.protectScriptTag_ = function(str) {
    return str.replace(/<\/(SCRIPT)/ig, "\\x3c/$1");
  };
  goog.DebugLoader_ = function() {
    this.dependencies_ = {};
    this.idToPath_ = {};
    this.written_ = {};
    this.loadingDeps_ = [];
    this.depsToLoad_ = [];
    this.paused_ = false;
    this.factory_ = new goog.DependencyFactory(goog.transpiler_);
    this.deferredCallbacks_ = {};
    this.deferredQueue_ = [];
  };
  goog.DebugLoader_.prototype.bootstrap = function(namespaces, callback) {
    var cb = callback;
    function resolve() {
      if (cb) {
        goog.global.setTimeout(cb, 0);
        cb = null;
      }
    }
    if (!namespaces.length) {
      resolve();
      return;
    }
    var deps = [];
    for (var i = 0; i < namespaces.length; i++) {
      var path = this.getPathFromDeps_(namespaces[i]);
      if (!path) {
        throw new Error("Unregonized namespace: " + namespaces[i]);
      }
      deps.push(this.dependencies_[path]);
    }
    var require = goog.require;
    var loaded = 0;
    for (var i = 0; i < namespaces.length; i++) {
      require(namespaces[i]);
      deps[i].onLoad(function() {
        if (++loaded == namespaces.length) {
          resolve();
        }
      });
    }
  };
  goog.DebugLoader_.prototype.loadClosureDeps = function() {
    var relPath = "deps.js";
    this.depsToLoad_.push(this.factory_.createDependency(goog.normalizePath_(goog.basePath + relPath), relPath, [], [], {}, false));
    this.loadDeps_();
  };
  goog.DebugLoader_.prototype.requested = function(absPathOrId, opt_force) {
    var path = this.getPathFromDeps_(absPathOrId);
    if (path && (opt_force || this.areDepsLoaded_(this.dependencies_[path].requires))) {
      var callback = this.deferredCallbacks_[path];
      if (callback) {
        delete this.deferredCallbacks_[path];
        callback();
      }
    }
  };
  goog.DebugLoader_.prototype.setDependencyFactory = function(factory) {
    this.factory_ = factory;
  };
  goog.DebugLoader_.prototype.load_ = function(namespace) {
    if (!this.getPathFromDeps_(namespace)) {
      var errorMessage = "goog.require could not find: " + namespace;
      goog.logToConsole_(errorMessage);
      throw Error(errorMessage);
    } else {
      var loader = this;
      var deps = [];
      var visit = function(namespace) {
        var path = loader.getPathFromDeps_(namespace);
        if (!path) {
          throw new Error("Bad dependency path or symbol: " + namespace);
        }
        if (loader.written_[path]) {
          return;
        }
        loader.written_[path] = true;
        var dep = loader.dependencies_[path];
        for (var i = 0; i < dep.requires.length; i++) {
          if (!goog.isProvided_(dep.requires[i])) {
            visit(dep.requires[i]);
          }
        }
        deps.push(dep);
      };
      visit(namespace);
      var wasLoading = !!this.depsToLoad_.length;
      this.depsToLoad_ = this.depsToLoad_.concat(deps);
      if (!this.paused_ && !wasLoading) {
        this.loadDeps_();
      }
    }
  };
  goog.DebugLoader_.prototype.loadDeps_ = function() {
    var loader = this;
    var paused = this.paused_;
    while (this.depsToLoad_.length && !paused) {
      (function() {
        var loadCallDone = false;
        var dep = loader.depsToLoad_.shift();
        var loaded = false;
        loader.loading_(dep);
        var controller = {pause:function() {
          if (loadCallDone) {
            throw new Error("Cannot call pause after the call to load.");
          } else {
            paused = true;
          }
        }, resume:function() {
          if (loadCallDone) {
            loader.resume_();
          } else {
            paused = false;
          }
        }, loaded:function() {
          if (loaded) {
            throw new Error("Double call to loaded.");
          }
          loaded = true;
          loader.loaded_(dep);
        }, pending:function() {
          var pending = [];
          for (var i = 0; i < loader.loadingDeps_.length; i++) {
            pending.push(loader.loadingDeps_[i]);
          }
          return pending;
        }, setModuleState:function(type) {
          goog.moduleLoaderState_ = {type:type, moduleName:"", declareLegacyNamespace:false};
        }, registerEs6ModuleExports:function(path, exports, opt_closureNamespace) {
          if (opt_closureNamespace) {
            goog.loadedModules_[opt_closureNamespace] = {exports:exports, type:goog.ModuleType.ES6, moduleId:opt_closureNamespace || ""};
          }
        }, registerGoogModuleExports:function(moduleId, exports) {
          goog.loadedModules_[moduleId] = {exports:exports, type:goog.ModuleType.GOOG, moduleId:moduleId};
        }, clearModuleState:function() {
          goog.moduleLoaderState_ = null;
        }, defer:function(callback) {
          if (loadCallDone) {
            throw new Error("Cannot register with defer after the call to load.");
          }
          loader.defer_(dep, callback);
        }, areDepsLoaded:function() {
          return loader.areDepsLoaded_(dep.requires);
        }};
        try {
          dep.load(controller);
        } finally {
          loadCallDone = true;
        }
      })();
    }
    if (paused) {
      this.pause_();
    }
  };
  goog.DebugLoader_.prototype.pause_ = function() {
    this.paused_ = true;
  };
  goog.DebugLoader_.prototype.resume_ = function() {
    if (this.paused_) {
      this.paused_ = false;
      this.loadDeps_();
    }
  };
  goog.DebugLoader_.prototype.loading_ = function(dep) {
    this.loadingDeps_.push(dep);
  };
  goog.DebugLoader_.prototype.loaded_ = function(dep) {
    for (var i = 0; i < this.loadingDeps_.length; i++) {
      if (this.loadingDeps_[i] == dep) {
        this.loadingDeps_.splice(i, 1);
        break;
      }
    }
    for (var i = 0; i < this.deferredQueue_.length; i++) {
      if (this.deferredQueue_[i] == dep.path) {
        this.deferredQueue_.splice(i, 1);
        break;
      }
    }
    if (this.loadingDeps_.length == this.deferredQueue_.length && !this.depsToLoad_.length) {
      while (this.deferredQueue_.length) {
        this.requested(this.deferredQueue_.shift(), true);
      }
    }
    dep.loaded();
  };
  goog.DebugLoader_.prototype.areDepsLoaded_ = function(pathsOrIds) {
    for (var i = 0; i < pathsOrIds.length; i++) {
      var path = this.getPathFromDeps_(pathsOrIds[i]);
      if (!path || !(path in this.deferredCallbacks_) && !goog.isProvided_(pathsOrIds[i])) {
        return false;
      }
    }
    return true;
  };
  goog.DebugLoader_.prototype.getPathFromDeps_ = function(absPathOrId) {
    if (absPathOrId in this.idToPath_) {
      return this.idToPath_[absPathOrId];
    } else {
      if (absPathOrId in this.dependencies_) {
        return absPathOrId;
      } else {
        return null;
      }
    }
  };
  goog.DebugLoader_.prototype.defer_ = function(dependency, callback) {
    this.deferredCallbacks_[dependency.path] = callback;
    this.deferredQueue_.push(dependency.path);
  };
  goog.LoadController = function() {
  };
  goog.LoadController.prototype.pause = function() {
  };
  goog.LoadController.prototype.resume = function() {
  };
  goog.LoadController.prototype.loaded = function() {
  };
  goog.LoadController.prototype.pending = function() {
  };
  goog.LoadController.prototype.registerEs6ModuleExports = function(path, exports, opt_closureNamespace) {
  };
  goog.LoadController.prototype.setModuleState = function(type) {
  };
  goog.LoadController.prototype.clearModuleState = function() {
  };
  goog.LoadController.prototype.defer = function(callback) {
  };
  goog.LoadController.prototype.areDepsLoaded = function() {
  };
  goog.Dependency = function(path, relativePath, provides, requires, loadFlags) {
    this.path = path;
    this.relativePath = relativePath;
    this.provides = provides;
    this.requires = requires;
    this.loadFlags = loadFlags;
    this.loaded_ = false;
    this.loadCallbacks_ = [];
  };
  goog.Dependency.prototype.getPathName = function() {
    var pathName = this.path;
    var protocolIndex = pathName.indexOf("://");
    if (protocolIndex >= 0) {
      pathName = pathName.substring(protocolIndex + 3);
      var slashIndex = pathName.indexOf("/");
      if (slashIndex >= 0) {
        pathName = pathName.substring(slashIndex + 1);
      }
    }
    return pathName;
  };
  goog.Dependency.prototype.onLoad = function(callback) {
    if (this.loaded_) {
      callback();
    } else {
      this.loadCallbacks_.push(callback);
    }
  };
  goog.Dependency.prototype.loaded = function() {
    this.loaded_ = true;
    var callbacks = this.loadCallbacks_;
    this.loadCallbacks_ = [];
    for (var i = 0; i < callbacks.length; i++) {
      callbacks[i]();
    }
  };
  goog.Dependency.defer_ = false;
  goog.Dependency.callbackMap_ = {};
  goog.Dependency.registerCallback_ = function(callback) {
    var key = Math.random().toString(32);
    goog.Dependency.callbackMap_[key] = callback;
    return key;
  };
  goog.Dependency.unregisterCallback_ = function(key) {
    delete goog.Dependency.callbackMap_[key];
  };
  goog.Dependency.callback_ = function(key, var_args) {
    if (key in goog.Dependency.callbackMap_) {
      var callback = goog.Dependency.callbackMap_[key];
      var args = [];
      for (var i = 1; i < arguments.length; i++) {
        args.push(arguments[i]);
      }
      callback.apply(undefined, args);
    } else {
      var errorMessage = "Callback key " + key + " does not exist (was base.js loaded more than once?).";
      throw Error(errorMessage);
    }
  };
  goog.Dependency.prototype.load = function(controller) {
    if (goog.global.CLOSURE_IMPORT_SCRIPT) {
      if (goog.global.CLOSURE_IMPORT_SCRIPT(this.path)) {
        controller.loaded();
      } else {
        controller.pause();
      }
      return;
    }
    if (!goog.inHtmlDocument_()) {
      goog.logToConsole_("Cannot use default debug loader outside of HTML documents.");
      if (this.relativePath == "deps.js") {
        goog.logToConsole_("Consider setting CLOSURE_IMPORT_SCRIPT before loading base.js, " + "or setting CLOSURE_NO_DEPS to true.");
        controller.loaded();
      } else {
        controller.pause();
      }
      return;
    }
    var doc = goog.global.document;
    if (doc.readyState == "complete" && !goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING) {
      var isDeps = /\bdeps.js$/.test(this.path);
      if (isDeps) {
        controller.loaded();
        return;
      } else {
        throw Error('Cannot write "' + this.path + '" after document load');
      }
    }
    if (!goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING && goog.isDocumentLoading_()) {
      var key = goog.Dependency.registerCallback_(function(script) {
        if (!goog.DebugLoader_.IS_OLD_IE_ || script.readyState == "complete") {
          goog.Dependency.unregisterCallback_(key);
          controller.loaded();
        }
      });
      var nonceAttr = !goog.DebugLoader_.IS_OLD_IE_ && goog.getScriptNonce() ? ' nonce\x3d"' + goog.getScriptNonce() + '"' : "";
      var event = goog.DebugLoader_.IS_OLD_IE_ ? "onreadystatechange" : "onload";
      var defer = goog.Dependency.defer_ ? "defer" : "";
      var script = '\x3cscript src\x3d"' + this.path + '" ' + event + "\x3d\"goog.Dependency.callback_('" + key + '\', this)" type\x3d"text/javascript" ' + defer + nonceAttr + "\x3e\x3c" + "/script\x3e";
      doc.write(goog.TRUSTED_TYPES_POLICY_ ? goog.TRUSTED_TYPES_POLICY_.createHTML(script) : script);
    } else {
      var scriptEl = doc.createElement("script");
      scriptEl.defer = goog.Dependency.defer_;
      scriptEl.async = false;
      scriptEl.type = "text/javascript";
      var nonce = goog.getScriptNonce();
      if (nonce) {
        scriptEl.setAttribute("nonce", nonce);
      }
      if (goog.DebugLoader_.IS_OLD_IE_) {
        controller.pause();
        scriptEl.onreadystatechange = function() {
          if (scriptEl.readyState == "loaded" || scriptEl.readyState == "complete") {
            controller.loaded();
            controller.resume();
          }
        };
      } else {
        scriptEl.onload = function() {
          scriptEl.onload = null;
          controller.loaded();
        };
      }
      scriptEl.src = goog.TRUSTED_TYPES_POLICY_ ? goog.TRUSTED_TYPES_POLICY_.createScriptURL(this.path) : this.path;
      doc.head.appendChild(scriptEl);
    }
  };
  goog.Es6ModuleDependency = function(path, relativePath, provides, requires, loadFlags) {
    goog.Es6ModuleDependency.base(this, "constructor", path, relativePath, provides, requires, loadFlags);
  };
  goog.inherits(goog.Es6ModuleDependency, goog.Dependency);
  goog.Es6ModuleDependency.prototype.load = function(controller) {
    if (goog.global.CLOSURE_IMPORT_SCRIPT) {
      if (goog.global.CLOSURE_IMPORT_SCRIPT(this.path)) {
        controller.loaded();
      } else {
        controller.pause();
      }
      return;
    }
    if (!goog.inHtmlDocument_()) {
      goog.logToConsole_("Cannot use default debug loader outside of HTML documents.");
      controller.pause();
      return;
    }
    var doc = goog.global.document;
    var dep = this;
    function write(src, contents) {
      if (contents) {
        var script = '\x3cscript type\x3d"module" crossorigin\x3e' + contents + "\x3c/" + "script\x3e";
        doc.write(goog.TRUSTED_TYPES_POLICY_ ? goog.TRUSTED_TYPES_POLICY_.createHTML(script) : script);
      } else {
        var script = '\x3cscript type\x3d"module" crossorigin src\x3d"' + src + '"\x3e\x3c/' + "script\x3e";
        doc.write(goog.TRUSTED_TYPES_POLICY_ ? goog.TRUSTED_TYPES_POLICY_.createHTML(script) : script);
      }
    }
    function append(src, contents) {
      var scriptEl = doc.createElement("script");
      scriptEl.defer = true;
      scriptEl.async = false;
      scriptEl.type = "module";
      scriptEl.setAttribute("crossorigin", true);
      var nonce = goog.getScriptNonce();
      if (nonce) {
        scriptEl.setAttribute("nonce", nonce);
      }
      if (contents) {
        scriptEl.textContent = goog.TRUSTED_TYPES_POLICY_ ? goog.TRUSTED_TYPES_POLICY_.createScript(contents) : contents;
      } else {
        scriptEl.src = goog.TRUSTED_TYPES_POLICY_ ? goog.TRUSTED_TYPES_POLICY_.createScriptURL(src) : src;
      }
      doc.head.appendChild(scriptEl);
    }
    var create;
    if (goog.isDocumentLoading_()) {
      create = write;
      goog.Dependency.defer_ = true;
    } else {
      create = append;
    }
    var beforeKey = goog.Dependency.registerCallback_(function() {
      goog.Dependency.unregisterCallback_(beforeKey);
      controller.setModuleState(goog.ModuleType.ES6);
    });
    create(undefined, 'goog.Dependency.callback_("' + beforeKey + '")');
    create(this.path, undefined);
    var registerKey = goog.Dependency.registerCallback_(function(exports) {
      goog.Dependency.unregisterCallback_(registerKey);
      controller.registerEs6ModuleExports(dep.path, exports, goog.moduleLoaderState_.moduleName);
    });
    create(undefined, 'import * as m from "' + this.path + '"; goog.Dependency.callback_("' + registerKey + '", m)');
    var afterKey = goog.Dependency.registerCallback_(function() {
      goog.Dependency.unregisterCallback_(afterKey);
      controller.clearModuleState();
      controller.loaded();
    });
    create(undefined, 'goog.Dependency.callback_("' + afterKey + '")');
  };
  goog.TransformedDependency = function(path, relativePath, provides, requires, loadFlags) {
    goog.TransformedDependency.base(this, "constructor", path, relativePath, provides, requires, loadFlags);
    this.contents_ = null;
    this.lazyFetch_ = !goog.inHtmlDocument_() || !("noModule" in goog.global.document.createElement("script"));
  };
  goog.inherits(goog.TransformedDependency, goog.Dependency);
  goog.TransformedDependency.prototype.load = function(controller) {
    var dep = this;
    function fetch() {
      dep.contents_ = goog.loadFileSync_(dep.path);
      if (dep.contents_) {
        dep.contents_ = dep.transform(dep.contents_);
        if (dep.contents_) {
          dep.contents_ += "\n//# sourceURL\x3d" + dep.path;
        }
      }
    }
    if (goog.global.CLOSURE_IMPORT_SCRIPT) {
      fetch();
      if (this.contents_ && goog.global.CLOSURE_IMPORT_SCRIPT("", this.contents_)) {
        this.contents_ = null;
        controller.loaded();
      } else {
        controller.pause();
      }
      return;
    }
    var isEs6 = this.loadFlags["module"] == goog.ModuleType.ES6;
    if (!this.lazyFetch_) {
      fetch();
    }
    function load() {
      if (dep.lazyFetch_) {
        fetch();
      }
      if (!dep.contents_) {
        return;
      }
      if (isEs6) {
        controller.setModuleState(goog.ModuleType.ES6);
      }
      var namespace;
      try {
        var contents = dep.contents_;
        dep.contents_ = null;
        goog.globalEval(contents);
        if (isEs6) {
          namespace = goog.moduleLoaderState_.moduleName;
        }
      } finally {
        if (isEs6) {
          controller.clearModuleState();
        }
      }
      if (isEs6) {
        goog.global["$jscomp"]["require"]["ensure"]([dep.getPathName()], function() {
          controller.registerEs6ModuleExports(dep.path, goog.global["$jscomp"]["require"](dep.getPathName()), namespace);
        });
      }
      controller.loaded();
    }
    function fetchInOwnScriptThenLoad() {
      var doc = goog.global.document;
      var key = goog.Dependency.registerCallback_(function() {
        goog.Dependency.unregisterCallback_(key);
        load();
      });
      var script = '\x3cscript type\x3d"text/javascript"\x3e' + goog.protectScriptTag_('goog.Dependency.callback_("' + key + '");') + "\x3c/" + "script\x3e";
      doc.write(goog.TRUSTED_TYPES_POLICY_ ? goog.TRUSTED_TYPES_POLICY_.createHTML(script) : script);
    }
    var anythingElsePending = controller.pending().length > 1;
    var useOldIeWorkAround = anythingElsePending && goog.DebugLoader_.IS_OLD_IE_;
    var needsAsyncLoading = goog.Dependency.defer_ && (anythingElsePending || goog.isDocumentLoading_());
    if (useOldIeWorkAround || needsAsyncLoading) {
      controller.defer(function() {
        load();
      });
      return;
    }
    var doc = goog.global.document;
    var isInternetExplorer = goog.inHtmlDocument_() && "ActiveXObject" in goog.global;
    if (isEs6 && goog.inHtmlDocument_() && goog.isDocumentLoading_() && !isInternetExplorer) {
      goog.Dependency.defer_ = true;
      controller.pause();
      var oldCallback = doc.onreadystatechange;
      doc.onreadystatechange = function() {
        if (doc.readyState == "interactive") {
          doc.onreadystatechange = oldCallback;
          load();
          controller.resume();
        }
        if (goog.isFunction(oldCallback)) {
          oldCallback.apply(undefined, arguments);
        }
      };
    } else {
      if (goog.DebugLoader_.IS_OLD_IE_ || !goog.inHtmlDocument_() || !goog.isDocumentLoading_()) {
        load();
      } else {
        fetchInOwnScriptThenLoad();
      }
    }
  };
  goog.TransformedDependency.prototype.transform = function(contents) {
  };
  goog.TranspiledDependency = function(path, relativePath, provides, requires, loadFlags, transpiler) {
    goog.TranspiledDependency.base(this, "constructor", path, relativePath, provides, requires, loadFlags);
    this.transpiler = transpiler;
  };
  goog.inherits(goog.TranspiledDependency, goog.TransformedDependency);
  goog.TranspiledDependency.prototype.transform = function(contents) {
    return this.transpiler.transpile(contents, this.getPathName());
  };
  goog.PreTranspiledEs6ModuleDependency = function(path, relativePath, provides, requires, loadFlags) {
    goog.PreTranspiledEs6ModuleDependency.base(this, "constructor", path, relativePath, provides, requires, loadFlags);
  };
  goog.inherits(goog.PreTranspiledEs6ModuleDependency, goog.TransformedDependency);
  goog.PreTranspiledEs6ModuleDependency.prototype.transform = function(contents) {
    return contents;
  };
  goog.GoogModuleDependency = function(path, relativePath, provides, requires, loadFlags, needsTranspile, transpiler) {
    goog.GoogModuleDependency.base(this, "constructor", path, relativePath, provides, requires, loadFlags);
    this.needsTranspile_ = needsTranspile;
    this.transpiler_ = transpiler;
  };
  goog.inherits(goog.GoogModuleDependency, goog.TransformedDependency);
  goog.GoogModuleDependency.prototype.transform = function(contents) {
    if (this.needsTranspile_) {
      contents = this.transpiler_.transpile(contents, this.getPathName());
    }
    if (!goog.LOAD_MODULE_USING_EVAL || goog.global.JSON === undefined) {
      return "" + "goog.loadModule(function(exports) {" + '"use strict";' + contents + "\n" + ";return exports" + "});" + "\n//# sourceURL\x3d" + this.path + "\n";
    } else {
      return "" + "goog.loadModule(" + goog.global.JSON.stringify(contents + "\n//# sourceURL\x3d" + this.path + "\n") + ");";
    }
  };
  goog.DebugLoader_.IS_OLD_IE_ = !!(!goog.global.atob && goog.global.document && goog.global.document["all"]);
  goog.DebugLoader_.prototype.addDependency = function(relPath, provides, requires, opt_loadFlags) {
    provides = provides || [];
    relPath = relPath.replace(/\\/g, "/");
    var path = goog.normalizePath_(goog.basePath + relPath);
    if (!opt_loadFlags || typeof opt_loadFlags === "boolean") {
      opt_loadFlags = opt_loadFlags ? {"module":goog.ModuleType.GOOG} : {};
    }
    var dep = this.factory_.createDependency(path, relPath, provides, requires, opt_loadFlags, goog.transpiler_.needsTranspile(opt_loadFlags["lang"] || "es3", opt_loadFlags["module"]));
    this.dependencies_[path] = dep;
    for (var i = 0; i < provides.length; i++) {
      this.idToPath_[provides[i]] = path;
    }
    this.idToPath_[relPath] = path;
  };
  goog.DependencyFactory = function(transpiler) {
    this.transpiler = transpiler;
  };
  goog.DependencyFactory.prototype.createDependency = function(path, relativePath, provides, requires, loadFlags, needsTranspile) {
    if (loadFlags["module"] == goog.ModuleType.GOOG) {
      return new goog.GoogModuleDependency(path, relativePath, provides, requires, loadFlags, needsTranspile, this.transpiler);
    } else {
      if (needsTranspile) {
        return new goog.TranspiledDependency(path, relativePath, provides, requires, loadFlags, this.transpiler);
      } else {
        if (loadFlags["module"] == goog.ModuleType.ES6) {
          if (goog.TRANSPILE == "never" && goog.ASSUME_ES_MODULES_TRANSPILED) {
            return new goog.PreTranspiledEs6ModuleDependency(path, relativePath, provides, requires, loadFlags);
          } else {
            return new goog.Es6ModuleDependency(path, relativePath, provides, requires, loadFlags);
          }
        } else {
          return new goog.Dependency(path, relativePath, provides, requires, loadFlags);
        }
      }
    }
  };
  goog.debugLoader_ = new goog.DebugLoader_;
  goog.loadClosureDeps = function() {
    goog.debugLoader_.loadClosureDeps();
  };
  goog.setDependencyFactory = function(factory) {
    goog.debugLoader_.setDependencyFactory(factory);
  };
  if (!goog.global.CLOSURE_NO_DEPS) {
    goog.debugLoader_.loadClosureDeps();
  }
  goog.bootstrap = function(namespaces, callback) {
    goog.debugLoader_.bootstrap(namespaces, callback);
  };
}
goog.TRUSTED_TYPES_POLICY_NAME = goog.define("goog.TRUSTED_TYPES_POLICY_NAME", "");
goog.identity_ = function(s) {
  return s;
};
goog.createTrustedTypesPolicy = function(name) {
  var policy = null;
  var policyFactory = goog.global.trustedTypes || goog.global.TrustedTypes;
  if (!policyFactory || !policyFactory.createPolicy) {
    return policy;
  }
  try {
    policy = policyFactory.createPolicy(name, {createHTML:goog.identity_, createScript:goog.identity_, createScriptURL:goog.identity_, createURL:goog.identity_});
  } catch (e) {
    goog.logToConsole_(e.message);
  }
  return policy;
};
goog.TRUSTED_TYPES_POLICY_ = goog.TRUSTED_TYPES_POLICY_NAME ? goog.createTrustedTypesPolicy(goog.TRUSTED_TYPES_POLICY_NAME + "#base") : null;
goog.provide("goog.debug.Error");
goog.debug.Error = function(opt_msg) {
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, goog.debug.Error);
  } else {
    const stack = (new Error).stack;
    if (stack) {
      this.stack = stack;
    }
  }
  if (opt_msg) {
    this.message = String(opt_msg);
  }
  this.reportErrorToServer = true;
};
goog.inherits(goog.debug.Error, Error);
goog.debug.Error.prototype.name = "CustomError";
goog.provide("goog.dom.NodeType");
goog.dom.NodeType = {ELEMENT:1, ATTRIBUTE:2, TEXT:3, CDATA_SECTION:4, ENTITY_REFERENCE:5, ENTITY:6, PROCESSING_INSTRUCTION:7, COMMENT:8, DOCUMENT:9, DOCUMENT_TYPE:10, DOCUMENT_FRAGMENT:11, NOTATION:12};
goog.provide("goog.asserts");
goog.provide("goog.asserts.AssertionError");
goog.require("goog.debug.Error");
goog.require("goog.dom.NodeType");
goog.asserts.ENABLE_ASSERTS = goog.define("goog.asserts.ENABLE_ASSERTS", goog.DEBUG);
goog.asserts.AssertionError = function(messagePattern, messageArgs) {
  goog.debug.Error.call(this, goog.asserts.subs_(messagePattern, messageArgs));
  this.messagePattern = messagePattern;
};
goog.inherits(goog.asserts.AssertionError, goog.debug.Error);
goog.asserts.AssertionError.prototype.name = "AssertionError";
goog.asserts.DEFAULT_ERROR_HANDLER = function(e) {
  throw e;
};
goog.asserts.errorHandler_ = goog.asserts.DEFAULT_ERROR_HANDLER;
goog.asserts.subs_ = function(pattern, subs) {
  var splitParts = pattern.split("%s");
  var returnString = "";
  var subLast = splitParts.length - 1;
  for (var i = 0; i < subLast; i++) {
    var sub = i < subs.length ? subs[i] : "%s";
    returnString += splitParts[i] + sub;
  }
  return returnString + splitParts[subLast];
};
goog.asserts.doAssertFailure_ = function(defaultMessage, defaultArgs, givenMessage, givenArgs) {
  var message = "Assertion failed";
  if (givenMessage) {
    message += ": " + givenMessage;
    var args = givenArgs;
  } else {
    if (defaultMessage) {
      message += ": " + defaultMessage;
      args = defaultArgs;
    }
  }
  var e = new goog.asserts.AssertionError("" + message, args || []);
  goog.asserts.errorHandler_(e);
};
goog.asserts.setErrorHandler = function(errorHandler) {
  if (goog.asserts.ENABLE_ASSERTS) {
    goog.asserts.errorHandler_ = errorHandler;
  }
};
goog.asserts.assert = function(condition, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !condition) {
    goog.asserts.doAssertFailure_("", null, opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return condition;
};
goog.asserts.assertExists = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && value == null) {
    goog.asserts.doAssertFailure_("Expected to exist: %s.", [value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return value;
};
goog.asserts.fail = function(opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS) {
    goog.asserts.errorHandler_(new goog.asserts.AssertionError("Failure" + (opt_message ? ": " + opt_message : ""), Array.prototype.slice.call(arguments, 1)));
  }
};
goog.asserts.assertNumber = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && typeof value !== "number") {
    goog.asserts.doAssertFailure_("Expected number but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return value;
};
goog.asserts.assertString = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && typeof value !== "string") {
    goog.asserts.doAssertFailure_("Expected string but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return value;
};
goog.asserts.assertFunction = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isFunction(value)) {
    goog.asserts.doAssertFailure_("Expected function but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return value;
};
goog.asserts.assertObject = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isObject(value)) {
    goog.asserts.doAssertFailure_("Expected object but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return value;
};
goog.asserts.assertArray = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isArray(value)) {
    goog.asserts.doAssertFailure_("Expected array but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return value;
};
goog.asserts.assertBoolean = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && typeof value !== "boolean") {
    goog.asserts.doAssertFailure_("Expected boolean but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return value;
};
goog.asserts.assertElement = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && (!goog.isObject(value) || value.nodeType != goog.dom.NodeType.ELEMENT)) {
    goog.asserts.doAssertFailure_("Expected Element but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return value;
};
goog.asserts.assertInstanceof = function(value, type, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !(value instanceof type)) {
    goog.asserts.doAssertFailure_("Expected instanceof %s but got %s.", [goog.asserts.getType_(type), goog.asserts.getType_(value)], opt_message, Array.prototype.slice.call(arguments, 3));
  }
  return value;
};
goog.asserts.assertFinite = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && (typeof value != "number" || !isFinite(value))) {
    goog.asserts.doAssertFailure_("Expected %s to be a finite number but it is not.", [value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return value;
};
goog.asserts.assertObjectPrototypeIsIntact = function() {
  for (var key in Object.prototype) {
    goog.asserts.fail(key + " should not be enumerable in Object.prototype.");
  }
};
goog.asserts.getType_ = function(value) {
  if (value instanceof Function) {
    return value.displayName || value.name || "unknown type name";
  } else {
    if (value instanceof Object) {
      return value.constructor.displayName || value.constructor.name || Object.prototype.toString.call(value);
    } else {
      return value === null ? "null" : typeof value;
    }
  }
};
goog.provide("goog.dom.asserts");
goog.require("goog.asserts");
goog.dom.asserts.assertIsLocation = function(o) {
  if (goog.asserts.ENABLE_ASSERTS) {
    var win = goog.dom.asserts.getWindow_(o);
    if (win) {
      if (!o || !(o instanceof win.Location) && o instanceof win.Element) {
        goog.asserts.fail("Argument is not a Location (or a non-Element mock); got: %s", goog.dom.asserts.debugStringForType_(o));
      }
    }
  }
  return o;
};
goog.dom.asserts.assertIsElementType_ = function(o, typename) {
  if (goog.asserts.ENABLE_ASSERTS) {
    var win = goog.dom.asserts.getWindow_(o);
    if (win && typeof win[typename] != "undefined") {
      if (!o || !(o instanceof win[typename]) && (o instanceof win.Location || o instanceof win.Element)) {
        goog.asserts.fail("Argument is not a %s (or a non-Element, non-Location mock); " + "got: %s", typename, goog.dom.asserts.debugStringForType_(o));
      }
    }
  }
  return o;
};
goog.dom.asserts.assertIsHTMLAnchorElement = function(o) {
  return goog.dom.asserts.assertIsElementType_(o, "HTMLAnchorElement");
};
goog.dom.asserts.assertIsHTMLButtonElement = function(o) {
  return goog.dom.asserts.assertIsElementType_(o, "HTMLButtonElement");
};
goog.dom.asserts.assertIsHTMLLinkElement = function(o) {
  return goog.dom.asserts.assertIsElementType_(o, "HTMLLinkElement");
};
goog.dom.asserts.assertIsHTMLImageElement = function(o) {
  return goog.dom.asserts.assertIsElementType_(o, "HTMLImageElement");
};
goog.dom.asserts.assertIsHTMLAudioElement = function(o) {
  return goog.dom.asserts.assertIsElementType_(o, "HTMLAudioElement");
};
goog.dom.asserts.assertIsHTMLVideoElement = function(o) {
  return goog.dom.asserts.assertIsElementType_(o, "HTMLVideoElement");
};
goog.dom.asserts.assertIsHTMLInputElement = function(o) {
  return goog.dom.asserts.assertIsElementType_(o, "HTMLInputElement");
};
goog.dom.asserts.assertIsHTMLTextAreaElement = function(o) {
  return goog.dom.asserts.assertIsElementType_(o, "HTMLTextAreaElement");
};
goog.dom.asserts.assertIsHTMLCanvasElement = function(o) {
  return goog.dom.asserts.assertIsElementType_(o, "HTMLCanvasElement");
};
goog.dom.asserts.assertIsHTMLEmbedElement = function(o) {
  return goog.dom.asserts.assertIsElementType_(o, "HTMLEmbedElement");
};
goog.dom.asserts.assertIsHTMLFormElement = function(o) {
  return goog.dom.asserts.assertIsElementType_(o, "HTMLFormElement");
};
goog.dom.asserts.assertIsHTMLFrameElement = function(o) {
  return goog.dom.asserts.assertIsElementType_(o, "HTMLFrameElement");
};
goog.dom.asserts.assertIsHTMLIFrameElement = function(o) {
  return goog.dom.asserts.assertIsElementType_(o, "HTMLIFrameElement");
};
goog.dom.asserts.assertIsHTMLObjectElement = function(o) {
  return goog.dom.asserts.assertIsElementType_(o, "HTMLObjectElement");
};
goog.dom.asserts.assertIsHTMLScriptElement = function(o) {
  return goog.dom.asserts.assertIsElementType_(o, "HTMLScriptElement");
};
goog.dom.asserts.debugStringForType_ = function(value) {
  if (goog.isObject(value)) {
    try {
      return value.constructor.displayName || value.constructor.name || Object.prototype.toString.call(value);
    } catch (e) {
      return "\x3cobject could not be stringified\x3e";
    }
  } else {
    return value === undefined ? "undefined" : value === null ? "null" : typeof value;
  }
};
goog.dom.asserts.getWindow_ = function(o) {
  try {
    var doc = o && o.ownerDocument;
    var win = doc && (doc.defaultView || doc.parentWindow);
    win = win || goog.global;
    if (win.Element && win.Location) {
      return win;
    }
  } catch (ex) {
  }
  return null;
};
goog.provide("goog.functions");
goog.functions.constant = function(retValue) {
  return function() {
    return retValue;
  };
};
goog.functions.FALSE = function() {
  return false;
};
goog.functions.TRUE = function() {
  return true;
};
goog.functions.NULL = function() {
  return null;
};
goog.functions.identity = function(opt_returnValue, var_args) {
  return opt_returnValue;
};
goog.functions.error = function(message) {
  return function() {
    throw new Error(message);
  };
};
goog.functions.fail = function(err) {
  return function() {
    throw err;
  };
};
goog.functions.lock = function(f, opt_numArgs) {
  opt_numArgs = opt_numArgs || 0;
  return function() {
    const self = this;
    return f.apply(self, Array.prototype.slice.call(arguments, 0, opt_numArgs));
  };
};
goog.functions.nth = function(n) {
  return function() {
    return arguments[n];
  };
};
goog.functions.partialRight = function(fn, var_args) {
  const rightArgs = Array.prototype.slice.call(arguments, 1);
  return function() {
    const self = this;
    const newArgs = Array.prototype.slice.call(arguments);
    newArgs.push.apply(newArgs, rightArgs);
    return fn.apply(self, newArgs);
  };
};
goog.functions.withReturnValue = function(f, retValue) {
  return goog.functions.sequence(f, goog.functions.constant(retValue));
};
goog.functions.equalTo = function(value, opt_useLooseComparison) {
  return function(other) {
    return opt_useLooseComparison ? value == other : value === other;
  };
};
goog.functions.compose = function(fn, var_args) {
  const functions = arguments;
  const length = functions.length;
  return function() {
    const self = this;
    let result;
    if (length) {
      result = functions[length - 1].apply(self, arguments);
    }
    for (let i = length - 2; i >= 0; i--) {
      result = functions[i].call(self, result);
    }
    return result;
  };
};
goog.functions.sequence = function(var_args) {
  const functions = arguments;
  const length = functions.length;
  return function() {
    const self = this;
    let result;
    for (let i = 0; i < length; i++) {
      result = functions[i].apply(self, arguments);
    }
    return result;
  };
};
goog.functions.and = function(var_args) {
  const functions = arguments;
  const length = functions.length;
  return function() {
    const self = this;
    for (let i = 0; i < length; i++) {
      if (!functions[i].apply(self, arguments)) {
        return false;
      }
    }
    return true;
  };
};
goog.functions.or = function(var_args) {
  const functions = arguments;
  const length = functions.length;
  return function() {
    const self = this;
    for (let i = 0; i < length; i++) {
      if (functions[i].apply(self, arguments)) {
        return true;
      }
    }
    return false;
  };
};
goog.functions.not = function(f) {
  return function() {
    const self = this;
    return !f.apply(self, arguments);
  };
};
goog.functions.create = function(constructor, var_args) {
  const temp = function() {
  };
  temp.prototype = constructor.prototype;
  const obj = new temp;
  constructor.apply(obj, Array.prototype.slice.call(arguments, 1));
  return obj;
};
goog.functions.CACHE_RETURN_VALUE = goog.define("goog.functions.CACHE_RETURN_VALUE", true);
goog.functions.cacheReturnValue = function(fn) {
  let called = false;
  let value;
  return function() {
    if (!goog.functions.CACHE_RETURN_VALUE) {
      return fn();
    }
    if (!called) {
      value = fn();
      called = true;
    }
    return value;
  };
};
goog.functions.once = function(f) {
  let inner = f;
  return function() {
    if (inner) {
      const tmp = inner;
      inner = null;
      tmp();
    }
  };
};
goog.functions.debounce = function(f, interval, opt_scope) {
  let timeout = 0;
  return function(var_args) {
    goog.global.clearTimeout(timeout);
    const args = arguments;
    timeout = goog.global.setTimeout(function() {
      f.apply(opt_scope, args);
    }, interval);
  };
};
goog.functions.throttle = function(f, interval, opt_scope) {
  let timeout = 0;
  let shouldFire = false;
  let args = [];
  const handleTimeout = function() {
    timeout = 0;
    if (shouldFire) {
      shouldFire = false;
      fire();
    }
  };
  const fire = function() {
    timeout = goog.global.setTimeout(handleTimeout, interval);
    f.apply(opt_scope, args);
  };
  return function(var_args) {
    args = arguments;
    if (!timeout) {
      fire();
    } else {
      shouldFire = true;
    }
  };
};
goog.functions.rateLimit = function(f, interval, opt_scope) {
  let timeout = 0;
  const handleTimeout = function() {
    timeout = 0;
  };
  return function(var_args) {
    if (!timeout) {
      timeout = goog.global.setTimeout(handleTimeout, interval);
      f.apply(opt_scope, arguments);
    }
  };
};
goog.provide("goog.array");
goog.require("goog.asserts");
goog.NATIVE_ARRAY_PROTOTYPES = goog.define("goog.NATIVE_ARRAY_PROTOTYPES", goog.TRUSTED_SITE);
goog.array.ASSUME_NATIVE_FUNCTIONS = goog.define("goog.array.ASSUME_NATIVE_FUNCTIONS", goog.FEATURESET_YEAR > 2012);
goog.array.peek = function(array) {
  return array[array.length - 1];
};
goog.array.last = goog.array.peek;
goog.array.indexOf = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.indexOf) ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  return Array.prototype.indexOf.call(arr, obj, opt_fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? 0 : opt_fromIndex < 0 ? Math.max(0, arr.length + opt_fromIndex) : opt_fromIndex;
  if (typeof arr === "string") {
    if (typeof obj !== "string" || obj.length != 1) {
      return -1;
    }
    return arr.indexOf(obj, fromIndex);
  }
  for (var i = fromIndex; i < arr.length; i++) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return -1;
};
goog.array.lastIndexOf = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.lastIndexOf) ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  return Array.prototype.lastIndexOf.call(arr, obj, fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  if (fromIndex < 0) {
    fromIndex = Math.max(0, arr.length + fromIndex);
  }
  if (typeof arr === "string") {
    if (typeof obj !== "string" || obj.length != 1) {
      return -1;
    }
    return arr.lastIndexOf(obj, fromIndex);
  }
  for (var i = fromIndex; i >= 0; i--) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return -1;
};
goog.array.forEach = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.forEach) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  Array.prototype.forEach.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = typeof arr === "string" ? arr.split("") : arr;
  for (var i = 0; i < l; i++) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.forEachRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = typeof arr === "string" ? arr.split("") : arr;
  for (var i = l - 1; i >= 0; --i) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.filter = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.filter) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return Array.prototype.filter.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = [];
  var resLength = 0;
  var arr2 = typeof arr === "string" ? arr.split("") : arr;
  for (var i = 0; i < l; i++) {
    if (i in arr2) {
      var val = arr2[i];
      if (f.call(opt_obj, val, i, arr)) {
        res[resLength++] = val;
      }
    }
  }
  return res;
};
goog.array.map = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.map) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return Array.prototype.map.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = new Array(l);
  var arr2 = typeof arr === "string" ? arr.split("") : arr;
  for (var i = 0; i < l; i++) {
    if (i in arr2) {
      res[i] = f.call(opt_obj, arr2[i], i, arr);
    }
  }
  return res;
};
goog.array.reduce = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.reduce) ? function(arr, f, val, opt_obj) {
  goog.asserts.assert(arr.length != null);
  if (opt_obj) {
    f = goog.bind(f, opt_obj);
  }
  return Array.prototype.reduce.call(arr, f, val);
} : function(arr, f, val, opt_obj) {
  var rval = val;
  goog.array.forEach(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.reduceRight = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.reduceRight) ? function(arr, f, val, opt_obj) {
  goog.asserts.assert(arr.length != null);
  goog.asserts.assert(f != null);
  if (opt_obj) {
    f = goog.bind(f, opt_obj);
  }
  return Array.prototype.reduceRight.call(arr, f, val);
} : function(arr, f, val, opt_obj) {
  var rval = val;
  goog.array.forEachRight(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.some = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.some) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return Array.prototype.some.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = typeof arr === "string" ? arr.split("") : arr;
  for (var i = 0; i < l; i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return true;
    }
  }
  return false;
};
goog.array.every = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.every) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return Array.prototype.every.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = typeof arr === "string" ? arr.split("") : arr;
  for (var i = 0; i < l; i++) {
    if (i in arr2 && !f.call(opt_obj, arr2[i], i, arr)) {
      return false;
    }
  }
  return true;
};
goog.array.count = function(arr, f, opt_obj) {
  var count = 0;
  goog.array.forEach(arr, function(element, index, arr) {
    if (f.call(opt_obj, element, index, arr)) {
      ++count;
    }
  }, opt_obj);
  return count;
};
goog.array.find = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  return i < 0 ? null : typeof arr === "string" ? arr.charAt(i) : arr[i];
};
goog.array.findIndex = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = typeof arr === "string" ? arr.split("") : arr;
  for (var i = 0; i < l; i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return -1;
};
goog.array.findRight = function(arr, f, opt_obj) {
  var i = goog.array.findIndexRight(arr, f, opt_obj);
  return i < 0 ? null : typeof arr === "string" ? arr.charAt(i) : arr[i];
};
goog.array.findIndexRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = typeof arr === "string" ? arr.split("") : arr;
  for (var i = l - 1; i >= 0; i--) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return -1;
};
goog.array.contains = function(arr, obj) {
  return goog.array.indexOf(arr, obj) >= 0;
};
goog.array.isEmpty = function(arr) {
  return arr.length == 0;
};
goog.array.clear = function(arr) {
  if (!goog.isArray(arr)) {
    for (var i = arr.length - 1; i >= 0; i--) {
      delete arr[i];
    }
  }
  arr.length = 0;
};
goog.array.insert = function(arr, obj) {
  if (!goog.array.contains(arr, obj)) {
    arr.push(obj);
  }
};
goog.array.insertAt = function(arr, obj, opt_i) {
  goog.array.splice(arr, opt_i, 0, obj);
};
goog.array.insertArrayAt = function(arr, elementsToAdd, opt_i) {
  goog.partial(goog.array.splice, arr, opt_i, 0).apply(null, elementsToAdd);
};
goog.array.insertBefore = function(arr, obj, opt_obj2) {
  var i;
  if (arguments.length == 2 || (i = goog.array.indexOf(arr, opt_obj2)) < 0) {
    arr.push(obj);
  } else {
    goog.array.insertAt(arr, obj, i);
  }
};
goog.array.remove = function(arr, obj) {
  var i = goog.array.indexOf(arr, obj);
  var rv;
  if (rv = i >= 0) {
    goog.array.removeAt(arr, i);
  }
  return rv;
};
goog.array.removeLast = function(arr, obj) {
  var i = goog.array.lastIndexOf(arr, obj);
  if (i >= 0) {
    goog.array.removeAt(arr, i);
    return true;
  }
  return false;
};
goog.array.removeAt = function(arr, i) {
  goog.asserts.assert(arr.length != null);
  return Array.prototype.splice.call(arr, i, 1).length == 1;
};
goog.array.removeIf = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  if (i >= 0) {
    goog.array.removeAt(arr, i);
    return true;
  }
  return false;
};
goog.array.removeAllIf = function(arr, f, opt_obj) {
  var removedCount = 0;
  goog.array.forEachRight(arr, function(val, index) {
    if (f.call(opt_obj, val, index, arr)) {
      if (goog.array.removeAt(arr, index)) {
        removedCount++;
      }
    }
  });
  return removedCount;
};
goog.array.concat = function(var_args) {
  return Array.prototype.concat.apply([], arguments);
};
goog.array.join = function(var_args) {
  return Array.prototype.concat.apply([], arguments);
};
goog.array.toArray = function(object) {
  var length = object.length;
  if (length > 0) {
    var rv = new Array(length);
    for (var i = 0; i < length; i++) {
      rv[i] = object[i];
    }
    return rv;
  }
  return [];
};
goog.array.clone = goog.array.toArray;
goog.array.extend = function(arr1, var_args) {
  for (var i = 1; i < arguments.length; i++) {
    var arr2 = arguments[i];
    if (goog.isArrayLike(arr2)) {
      var len1 = arr1.length || 0;
      var len2 = arr2.length || 0;
      arr1.length = len1 + len2;
      for (var j = 0; j < len2; j++) {
        arr1[len1 + j] = arr2[j];
      }
    } else {
      arr1.push(arr2);
    }
  }
};
goog.array.splice = function(arr, index, howMany, var_args) {
  goog.asserts.assert(arr.length != null);
  return Array.prototype.splice.apply(arr, goog.array.slice(arguments, 1));
};
goog.array.slice = function(arr, start, opt_end) {
  goog.asserts.assert(arr.length != null);
  if (arguments.length <= 2) {
    return Array.prototype.slice.call(arr, start);
  } else {
    return Array.prototype.slice.call(arr, start, opt_end);
  }
};
goog.array.removeDuplicates = function(arr, opt_rv, opt_hashFn) {
  var returnArray = opt_rv || arr;
  var defaultHashFn = function(item) {
    return goog.isObject(item) ? "o" + goog.getUid(item) : (typeof item).charAt(0) + item;
  };
  var hashFn = opt_hashFn || defaultHashFn;
  var seen = {}, cursorInsert = 0, cursorRead = 0;
  while (cursorRead < arr.length) {
    var current = arr[cursorRead++];
    var key = hashFn(current);
    if (!Object.prototype.hasOwnProperty.call(seen, key)) {
      seen[key] = true;
      returnArray[cursorInsert++] = current;
    }
  }
  returnArray.length = cursorInsert;
};
goog.array.binarySearch = function(arr, target, opt_compareFn) {
  return goog.array.binarySearch_(arr, opt_compareFn || goog.array.defaultCompare, false, target);
};
goog.array.binarySelect = function(arr, evaluator, opt_obj) {
  return goog.array.binarySearch_(arr, evaluator, true, undefined, opt_obj);
};
goog.array.binarySearch_ = function(arr, compareFn, isEvaluator, opt_target, opt_selfObj) {
  var left = 0;
  var right = arr.length;
  var found;
  while (left < right) {
    var middle = left + (right - left >>> 1);
    var compareResult;
    if (isEvaluator) {
      compareResult = compareFn.call(opt_selfObj, arr[middle], middle, arr);
    } else {
      compareResult = compareFn(opt_target, arr[middle]);
    }
    if (compareResult > 0) {
      left = middle + 1;
    } else {
      right = middle;
      found = !compareResult;
    }
  }
  return found ? left : -left - 1;
};
goog.array.sort = function(arr, opt_compareFn) {
  arr.sort(opt_compareFn || goog.array.defaultCompare);
};
goog.array.stableSort = function(arr, opt_compareFn) {
  var compArr = new Array(arr.length);
  for (var i = 0; i < arr.length; i++) {
    compArr[i] = {index:i, value:arr[i]};
  }
  var valueCompareFn = opt_compareFn || goog.array.defaultCompare;
  function stableCompareFn(obj1, obj2) {
    return valueCompareFn(obj1.value, obj2.value) || obj1.index - obj2.index;
  }
  goog.array.sort(compArr, stableCompareFn);
  for (var i = 0; i < arr.length; i++) {
    arr[i] = compArr[i].value;
  }
};
goog.array.sortByKey = function(arr, keyFn, opt_compareFn) {
  var keyCompareFn = opt_compareFn || goog.array.defaultCompare;
  goog.array.sort(arr, function(a, b) {
    return keyCompareFn(keyFn(a), keyFn(b));
  });
};
goog.array.sortObjectsByKey = function(arr, key, opt_compareFn) {
  goog.array.sortByKey(arr, function(obj) {
    return obj[key];
  }, opt_compareFn);
};
goog.array.isSorted = function(arr, opt_compareFn, opt_strict) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  for (var i = 1; i < arr.length; i++) {
    var compareResult = compare(arr[i - 1], arr[i]);
    if (compareResult > 0 || compareResult == 0 && opt_strict) {
      return false;
    }
  }
  return true;
};
goog.array.equals = function(arr1, arr2, opt_equalsFn) {
  if (!goog.isArrayLike(arr1) || !goog.isArrayLike(arr2) || arr1.length != arr2.length) {
    return false;
  }
  var l = arr1.length;
  var equalsFn = opt_equalsFn || goog.array.defaultCompareEquality;
  for (var i = 0; i < l; i++) {
    if (!equalsFn(arr1[i], arr2[i])) {
      return false;
    }
  }
  return true;
};
goog.array.compare3 = function(arr1, arr2, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  var l = Math.min(arr1.length, arr2.length);
  for (var i = 0; i < l; i++) {
    var result = compare(arr1[i], arr2[i]);
    if (result != 0) {
      return result;
    }
  }
  return goog.array.defaultCompare(arr1.length, arr2.length);
};
goog.array.defaultCompare = function(a, b) {
  return a > b ? 1 : a < b ? -1 : 0;
};
goog.array.inverseDefaultCompare = function(a, b) {
  return -goog.array.defaultCompare(a, b);
};
goog.array.defaultCompareEquality = function(a, b) {
  return a === b;
};
goog.array.binaryInsert = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  if (index < 0) {
    goog.array.insertAt(array, value, -(index + 1));
    return true;
  }
  return false;
};
goog.array.binaryRemove = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  return index >= 0 ? goog.array.removeAt(array, index) : false;
};
goog.array.bucket = function(array, sorter, opt_obj) {
  var buckets = {};
  for (var i = 0; i < array.length; i++) {
    var value = array[i];
    var key = sorter.call(opt_obj, value, i, array);
    if (key !== undefined) {
      var bucket = buckets[key] || (buckets[key] = []);
      bucket.push(value);
    }
  }
  return buckets;
};
goog.array.toObject = function(arr, keyFunc, opt_obj) {
  var ret = {};
  goog.array.forEach(arr, function(element, index) {
    ret[keyFunc.call(opt_obj, element, index, arr)] = element;
  });
  return ret;
};
goog.array.range = function(startOrEnd, opt_end, opt_step) {
  var array = [];
  var start = 0;
  var end = startOrEnd;
  var step = opt_step || 1;
  if (opt_end !== undefined) {
    start = startOrEnd;
    end = opt_end;
  }
  if (step * (end - start) < 0) {
    return [];
  }
  if (step > 0) {
    for (var i = start; i < end; i += step) {
      array.push(i);
    }
  } else {
    for (var i = start; i > end; i += step) {
      array.push(i);
    }
  }
  return array;
};
goog.array.repeat = function(value, n) {
  var array = [];
  for (var i = 0; i < n; i++) {
    array[i] = value;
  }
  return array;
};
goog.array.flatten = function(var_args) {
  var CHUNK_SIZE = 8192;
  var result = [];
  for (var i = 0; i < arguments.length; i++) {
    var element = arguments[i];
    if (goog.isArray(element)) {
      for (var c = 0; c < element.length; c += CHUNK_SIZE) {
        var chunk = goog.array.slice(element, c, c + CHUNK_SIZE);
        var recurseResult = goog.array.flatten.apply(null, chunk);
        for (var r = 0; r < recurseResult.length; r++) {
          result.push(recurseResult[r]);
        }
      }
    } else {
      result.push(element);
    }
  }
  return result;
};
goog.array.rotate = function(array, n) {
  goog.asserts.assert(array.length != null);
  if (array.length) {
    n %= array.length;
    if (n > 0) {
      Array.prototype.unshift.apply(array, array.splice(-n, n));
    } else {
      if (n < 0) {
        Array.prototype.push.apply(array, array.splice(0, -n));
      }
    }
  }
  return array;
};
goog.array.moveItem = function(arr, fromIndex, toIndex) {
  goog.asserts.assert(fromIndex >= 0 && fromIndex < arr.length);
  goog.asserts.assert(toIndex >= 0 && toIndex < arr.length);
  var removedItems = Array.prototype.splice.call(arr, fromIndex, 1);
  Array.prototype.splice.call(arr, toIndex, 0, removedItems[0]);
};
goog.array.zip = function(var_args) {
  if (!arguments.length) {
    return [];
  }
  var result = [];
  var minLen = arguments[0].length;
  for (var i = 1; i < arguments.length; i++) {
    if (arguments[i].length < minLen) {
      minLen = arguments[i].length;
    }
  }
  for (var i = 0; i < minLen; i++) {
    var value = [];
    for (var j = 0; j < arguments.length; j++) {
      value.push(arguments[j][i]);
    }
    result.push(value);
  }
  return result;
};
goog.array.shuffle = function(arr, opt_randFn) {
  var randFn = opt_randFn || Math.random;
  for (var i = arr.length - 1; i > 0; i--) {
    var j = Math.floor(randFn() * (i + 1));
    var tmp = arr[i];
    arr[i] = arr[j];
    arr[j] = tmp;
  }
};
goog.array.copyByIndex = function(arr, index_arr) {
  var result = [];
  goog.array.forEach(index_arr, function(index) {
    result.push(arr[index]);
  });
  return result;
};
goog.array.concatMap = function(arr, f, opt_obj) {
  return goog.array.concat.apply([], goog.array.map(arr, f, opt_obj));
};
goog.provide("goog.dom.HtmlElement");
goog.dom.HtmlElement = function() {
};
goog.provide("goog.dom.TagName");
goog.require("goog.dom.HtmlElement");
goog.dom.TagName = function(tagName) {
  this.tagName_ = tagName;
};
goog.dom.TagName.prototype.toString = function() {
  return this.tagName_;
};
goog.dom.TagName.A = new goog.dom.TagName("A");
goog.dom.TagName.ABBR = new goog.dom.TagName("ABBR");
goog.dom.TagName.ACRONYM = new goog.dom.TagName("ACRONYM");
goog.dom.TagName.ADDRESS = new goog.dom.TagName("ADDRESS");
goog.dom.TagName.APPLET = new goog.dom.TagName("APPLET");
goog.dom.TagName.AREA = new goog.dom.TagName("AREA");
goog.dom.TagName.ARTICLE = new goog.dom.TagName("ARTICLE");
goog.dom.TagName.ASIDE = new goog.dom.TagName("ASIDE");
goog.dom.TagName.AUDIO = new goog.dom.TagName("AUDIO");
goog.dom.TagName.B = new goog.dom.TagName("B");
goog.dom.TagName.BASE = new goog.dom.TagName("BASE");
goog.dom.TagName.BASEFONT = new goog.dom.TagName("BASEFONT");
goog.dom.TagName.BDI = new goog.dom.TagName("BDI");
goog.dom.TagName.BDO = new goog.dom.TagName("BDO");
goog.dom.TagName.BIG = new goog.dom.TagName("BIG");
goog.dom.TagName.BLOCKQUOTE = new goog.dom.TagName("BLOCKQUOTE");
goog.dom.TagName.BODY = new goog.dom.TagName("BODY");
goog.dom.TagName.BR = new goog.dom.TagName("BR");
goog.dom.TagName.BUTTON = new goog.dom.TagName("BUTTON");
goog.dom.TagName.CANVAS = new goog.dom.TagName("CANVAS");
goog.dom.TagName.CAPTION = new goog.dom.TagName("CAPTION");
goog.dom.TagName.CENTER = new goog.dom.TagName("CENTER");
goog.dom.TagName.CITE = new goog.dom.TagName("CITE");
goog.dom.TagName.CODE = new goog.dom.TagName("CODE");
goog.dom.TagName.COL = new goog.dom.TagName("COL");
goog.dom.TagName.COLGROUP = new goog.dom.TagName("COLGROUP");
goog.dom.TagName.COMMAND = new goog.dom.TagName("COMMAND");
goog.dom.TagName.DATA = new goog.dom.TagName("DATA");
goog.dom.TagName.DATALIST = new goog.dom.TagName("DATALIST");
goog.dom.TagName.DD = new goog.dom.TagName("DD");
goog.dom.TagName.DEL = new goog.dom.TagName("DEL");
goog.dom.TagName.DETAILS = new goog.dom.TagName("DETAILS");
goog.dom.TagName.DFN = new goog.dom.TagName("DFN");
goog.dom.TagName.DIALOG = new goog.dom.TagName("DIALOG");
goog.dom.TagName.DIR = new goog.dom.TagName("DIR");
goog.dom.TagName.DIV = new goog.dom.TagName("DIV");
goog.dom.TagName.DL = new goog.dom.TagName("DL");
goog.dom.TagName.DT = new goog.dom.TagName("DT");
goog.dom.TagName.EM = new goog.dom.TagName("EM");
goog.dom.TagName.EMBED = new goog.dom.TagName("EMBED");
goog.dom.TagName.FIELDSET = new goog.dom.TagName("FIELDSET");
goog.dom.TagName.FIGCAPTION = new goog.dom.TagName("FIGCAPTION");
goog.dom.TagName.FIGURE = new goog.dom.TagName("FIGURE");
goog.dom.TagName.FONT = new goog.dom.TagName("FONT");
goog.dom.TagName.FOOTER = new goog.dom.TagName("FOOTER");
goog.dom.TagName.FORM = new goog.dom.TagName("FORM");
goog.dom.TagName.FRAME = new goog.dom.TagName("FRAME");
goog.dom.TagName.FRAMESET = new goog.dom.TagName("FRAMESET");
goog.dom.TagName.H1 = new goog.dom.TagName("H1");
goog.dom.TagName.H2 = new goog.dom.TagName("H2");
goog.dom.TagName.H3 = new goog.dom.TagName("H3");
goog.dom.TagName.H4 = new goog.dom.TagName("H4");
goog.dom.TagName.H5 = new goog.dom.TagName("H5");
goog.dom.TagName.H6 = new goog.dom.TagName("H6");
goog.dom.TagName.HEAD = new goog.dom.TagName("HEAD");
goog.dom.TagName.HEADER = new goog.dom.TagName("HEADER");
goog.dom.TagName.HGROUP = new goog.dom.TagName("HGROUP");
goog.dom.TagName.HR = new goog.dom.TagName("HR");
goog.dom.TagName.HTML = new goog.dom.TagName("HTML");
goog.dom.TagName.I = new goog.dom.TagName("I");
goog.dom.TagName.IFRAME = new goog.dom.TagName("IFRAME");
goog.dom.TagName.IMG = new goog.dom.TagName("IMG");
goog.dom.TagName.INPUT = new goog.dom.TagName("INPUT");
goog.dom.TagName.INS = new goog.dom.TagName("INS");
goog.dom.TagName.ISINDEX = new goog.dom.TagName("ISINDEX");
goog.dom.TagName.KBD = new goog.dom.TagName("KBD");
goog.dom.TagName.KEYGEN = new goog.dom.TagName("KEYGEN");
goog.dom.TagName.LABEL = new goog.dom.TagName("LABEL");
goog.dom.TagName.LEGEND = new goog.dom.TagName("LEGEND");
goog.dom.TagName.LI = new goog.dom.TagName("LI");
goog.dom.TagName.LINK = new goog.dom.TagName("LINK");
goog.dom.TagName.MAIN = new goog.dom.TagName("MAIN");
goog.dom.TagName.MAP = new goog.dom.TagName("MAP");
goog.dom.TagName.MARK = new goog.dom.TagName("MARK");
goog.dom.TagName.MATH = new goog.dom.TagName("MATH");
goog.dom.TagName.MENU = new goog.dom.TagName("MENU");
goog.dom.TagName.MENUITEM = new goog.dom.TagName("MENUITEM");
goog.dom.TagName.META = new goog.dom.TagName("META");
goog.dom.TagName.METER = new goog.dom.TagName("METER");
goog.dom.TagName.NAV = new goog.dom.TagName("NAV");
goog.dom.TagName.NOFRAMES = new goog.dom.TagName("NOFRAMES");
goog.dom.TagName.NOSCRIPT = new goog.dom.TagName("NOSCRIPT");
goog.dom.TagName.OBJECT = new goog.dom.TagName("OBJECT");
goog.dom.TagName.OL = new goog.dom.TagName("OL");
goog.dom.TagName.OPTGROUP = new goog.dom.TagName("OPTGROUP");
goog.dom.TagName.OPTION = new goog.dom.TagName("OPTION");
goog.dom.TagName.OUTPUT = new goog.dom.TagName("OUTPUT");
goog.dom.TagName.P = new goog.dom.TagName("P");
goog.dom.TagName.PARAM = new goog.dom.TagName("PARAM");
goog.dom.TagName.PICTURE = new goog.dom.TagName("PICTURE");
goog.dom.TagName.PRE = new goog.dom.TagName("PRE");
goog.dom.TagName.PROGRESS = new goog.dom.TagName("PROGRESS");
goog.dom.TagName.Q = new goog.dom.TagName("Q");
goog.dom.TagName.RP = new goog.dom.TagName("RP");
goog.dom.TagName.RT = new goog.dom.TagName("RT");
goog.dom.TagName.RTC = new goog.dom.TagName("RTC");
goog.dom.TagName.RUBY = new goog.dom.TagName("RUBY");
goog.dom.TagName.S = new goog.dom.TagName("S");
goog.dom.TagName.SAMP = new goog.dom.TagName("SAMP");
goog.dom.TagName.SCRIPT = new goog.dom.TagName("SCRIPT");
goog.dom.TagName.SECTION = new goog.dom.TagName("SECTION");
goog.dom.TagName.SELECT = new goog.dom.TagName("SELECT");
goog.dom.TagName.SMALL = new goog.dom.TagName("SMALL");
goog.dom.TagName.SOURCE = new goog.dom.TagName("SOURCE");
goog.dom.TagName.SPAN = new goog.dom.TagName("SPAN");
goog.dom.TagName.STRIKE = new goog.dom.TagName("STRIKE");
goog.dom.TagName.STRONG = new goog.dom.TagName("STRONG");
goog.dom.TagName.STYLE = new goog.dom.TagName("STYLE");
goog.dom.TagName.SUB = new goog.dom.TagName("SUB");
goog.dom.TagName.SUMMARY = new goog.dom.TagName("SUMMARY");
goog.dom.TagName.SUP = new goog.dom.TagName("SUP");
goog.dom.TagName.SVG = new goog.dom.TagName("SVG");
goog.dom.TagName.TABLE = new goog.dom.TagName("TABLE");
goog.dom.TagName.TBODY = new goog.dom.TagName("TBODY");
goog.dom.TagName.TD = new goog.dom.TagName("TD");
goog.dom.TagName.TEMPLATE = new goog.dom.TagName("TEMPLATE");
goog.dom.TagName.TEXTAREA = new goog.dom.TagName("TEXTAREA");
goog.dom.TagName.TFOOT = new goog.dom.TagName("TFOOT");
goog.dom.TagName.TH = new goog.dom.TagName("TH");
goog.dom.TagName.THEAD = new goog.dom.TagName("THEAD");
goog.dom.TagName.TIME = new goog.dom.TagName("TIME");
goog.dom.TagName.TITLE = new goog.dom.TagName("TITLE");
goog.dom.TagName.TR = new goog.dom.TagName("TR");
goog.dom.TagName.TRACK = new goog.dom.TagName("TRACK");
goog.dom.TagName.TT = new goog.dom.TagName("TT");
goog.dom.TagName.U = new goog.dom.TagName("U");
goog.dom.TagName.UL = new goog.dom.TagName("UL");
goog.dom.TagName.VAR = new goog.dom.TagName("VAR");
goog.dom.TagName.VIDEO = new goog.dom.TagName("VIDEO");
goog.dom.TagName.WBR = new goog.dom.TagName("WBR");
goog.provide("goog.object");
goog.object.is = function(v, v2) {
  if (v === v2) {
    return v !== 0 || 1 / v === 1 / v2;
  }
  return v !== v && v2 !== v2;
};
goog.object.forEach = function(obj, f, opt_obj) {
  for (const key in obj) {
    f.call(opt_obj, obj[key], key, obj);
  }
};
goog.object.filter = function(obj, f, opt_obj) {
  const res = {};
  for (const key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      res[key] = obj[key];
    }
  }
  return res;
};
goog.object.map = function(obj, f, opt_obj) {
  const res = {};
  for (const key in obj) {
    res[key] = f.call(opt_obj, obj[key], key, obj);
  }
  return res;
};
goog.object.some = function(obj, f, opt_obj) {
  for (const key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      return true;
    }
  }
  return false;
};
goog.object.every = function(obj, f, opt_obj) {
  for (const key in obj) {
    if (!f.call(opt_obj, obj[key], key, obj)) {
      return false;
    }
  }
  return true;
};
goog.object.getCount = function(obj) {
  let rv = 0;
  for (const key in obj) {
    rv++;
  }
  return rv;
};
goog.object.getAnyKey = function(obj) {
  for (const key in obj) {
    return key;
  }
};
goog.object.getAnyValue = function(obj) {
  for (const key in obj) {
    return obj[key];
  }
};
goog.object.contains = function(obj, val) {
  return goog.object.containsValue(obj, val);
};
goog.object.getValues = function(obj) {
  const res = [];
  let i = 0;
  for (const key in obj) {
    res[i++] = obj[key];
  }
  return res;
};
goog.object.getKeys = function(obj) {
  const res = [];
  let i = 0;
  for (const key in obj) {
    res[i++] = key;
  }
  return res;
};
goog.object.getValueByKeys = function(obj, var_args) {
  const isArrayLike = goog.isArrayLike(var_args);
  const keys = isArrayLike ? var_args : arguments;
  for (let i = isArrayLike ? 0 : 1; i < keys.length; i++) {
    if (obj == null) {
      return undefined;
    }
    obj = obj[keys[i]];
  }
  return obj;
};
goog.object.containsKey = function(obj, key) {
  return obj !== null && key in obj;
};
goog.object.containsValue = function(obj, val) {
  for (const key in obj) {
    if (obj[key] == val) {
      return true;
    }
  }
  return false;
};
goog.object.findKey = function(obj, f, opt_this) {
  for (const key in obj) {
    if (f.call(opt_this, obj[key], key, obj)) {
      return key;
    }
  }
  return undefined;
};
goog.object.findValue = function(obj, f, opt_this) {
  const key = goog.object.findKey(obj, f, opt_this);
  return key && obj[key];
};
goog.object.isEmpty = function(obj) {
  for (const key in obj) {
    return false;
  }
  return true;
};
goog.object.clear = function(obj) {
  for (const i in obj) {
    delete obj[i];
  }
};
goog.object.remove = function(obj, key) {
  let rv;
  if (rv = key in obj) {
    delete obj[key];
  }
  return rv;
};
goog.object.add = function(obj, key, val) {
  if (obj !== null && key in obj) {
    throw new Error('The object already contains the key "' + key + '"');
  }
  goog.object.set(obj, key, val);
};
goog.object.get = function(obj, key, opt_val) {
  if (obj !== null && key in obj) {
    return obj[key];
  }
  return opt_val;
};
goog.object.set = function(obj, key, value) {
  obj[key] = value;
};
goog.object.setIfUndefined = function(obj, key, value) {
  return key in obj ? obj[key] : obj[key] = value;
};
goog.object.setWithReturnValueIfNotSet = function(obj, key, f) {
  if (key in obj) {
    return obj[key];
  }
  const val = f();
  obj[key] = val;
  return val;
};
goog.object.equals = function(a, b) {
  for (const k in a) {
    if (!(k in b) || a[k] !== b[k]) {
      return false;
    }
  }
  for (const k in b) {
    if (!(k in a)) {
      return false;
    }
  }
  return true;
};
goog.object.clone = function(obj) {
  const res = {};
  for (const key in obj) {
    res[key] = obj[key];
  }
  return res;
};
goog.object.unsafeClone = function(obj) {
  const type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (goog.isFunction(obj.clone)) {
      return obj.clone();
    }
    const clone = type == "array" ? [] : {};
    for (const key in obj) {
      clone[key] = goog.object.unsafeClone(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.object.transpose = function(obj) {
  const transposed = {};
  for (const key in obj) {
    transposed[obj[key]] = key;
  }
  return transposed;
};
goog.object.PROTOTYPE_FIELDS_ = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
goog.object.extend = function(target, var_args) {
  let key;
  let source;
  for (let i = 1; i < arguments.length; i++) {
    source = arguments[i];
    for (key in source) {
      target[key] = source[key];
    }
    for (let j = 0; j < goog.object.PROTOTYPE_FIELDS_.length; j++) {
      key = goog.object.PROTOTYPE_FIELDS_[j];
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }
};
goog.object.create = function(var_args) {
  const argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.create.apply(null, arguments[0]);
  }
  if (argLength % 2) {
    throw new Error("Uneven number of arguments");
  }
  const rv = {};
  for (let i = 0; i < argLength; i += 2) {
    rv[arguments[i]] = arguments[i + 1];
  }
  return rv;
};
goog.object.createSet = function(var_args) {
  const argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.createSet.apply(null, arguments[0]);
  }
  const rv = {};
  for (let i = 0; i < argLength; i++) {
    rv[arguments[i]] = true;
  }
  return rv;
};
goog.object.createImmutableView = function(obj) {
  let result = obj;
  if (Object.isFrozen && !Object.isFrozen(obj)) {
    result = Object.create(obj);
    Object.freeze(result);
  }
  return result;
};
goog.object.isImmutableView = function(obj) {
  return !!Object.isFrozen && Object.isFrozen(obj);
};
goog.object.getAllPropertyNames = function(obj, opt_includeObjectPrototype, opt_includeFunctionPrototype) {
  if (!obj) {
    return [];
  }
  if (!Object.getOwnPropertyNames || !Object.getPrototypeOf) {
    return goog.object.getKeys(obj);
  }
  const visitedSet = {};
  let proto = obj;
  while (proto && (proto !== Object.prototype || !!opt_includeObjectPrototype) && (proto !== Function.prototype || !!opt_includeFunctionPrototype)) {
    const names = Object.getOwnPropertyNames(proto);
    for (let i = 0; i < names.length; i++) {
      visitedSet[names[i]] = true;
    }
    proto = Object.getPrototypeOf(proto);
  }
  return goog.object.getKeys(visitedSet);
};
goog.object.getSuperClass = function(constructor) {
  var proto = Object.getPrototypeOf(constructor.prototype);
  return proto && proto.constructor;
};
goog.provide("goog.dom.tags");
goog.require("goog.object");
goog.dom.tags.VOID_TAGS_ = goog.object.createSet("area", "base", "br", "col", "command", "embed", "hr", "img", "input", "keygen", "link", "meta", "param", "source", "track", "wbr");
goog.dom.tags.isVoidTag = function(tagName) {
  return goog.dom.tags.VOID_TAGS_[tagName] === true;
};
goog.provide("goog.html.trustedtypes");
goog.html.trustedtypes.PRIVATE_DO_NOT_ACCESS_OR_ELSE_POLICY = goog.TRUSTED_TYPES_POLICY_NAME ? goog.createTrustedTypesPolicy(goog.TRUSTED_TYPES_POLICY_NAME + "#html") : null;
goog.provide("goog.string.TypedString");
goog.string.TypedString = function() {
};
goog.string.TypedString.prototype.implementsGoogStringTypedString;
goog.string.TypedString.prototype.getTypedStringValue;
goog.provide("goog.string.Const");
goog.require("goog.asserts");
goog.require("goog.string.TypedString");
goog.string.Const = function(opt_token, opt_content) {
  this.stringConstValueWithSecurityContract__googStringSecurityPrivate_ = opt_token === goog.string.Const.GOOG_STRING_CONSTRUCTOR_TOKEN_PRIVATE_ && opt_content || "";
  this.STRING_CONST_TYPE_MARKER__GOOG_STRING_SECURITY_PRIVATE_ = goog.string.Const.TYPE_MARKER_;
};
goog.string.Const.prototype.implementsGoogStringTypedString = true;
goog.string.Const.prototype.getTypedStringValue = function() {
  return this.stringConstValueWithSecurityContract__googStringSecurityPrivate_;
};
if (goog.DEBUG) {
  goog.string.Const.prototype.toString = function() {
    return "Const{" + this.stringConstValueWithSecurityContract__googStringSecurityPrivate_ + "}";
  };
}
goog.string.Const.unwrap = function(stringConst) {
  if (stringConst instanceof goog.string.Const && stringConst.constructor === goog.string.Const && stringConst.STRING_CONST_TYPE_MARKER__GOOG_STRING_SECURITY_PRIVATE_ === goog.string.Const.TYPE_MARKER_) {
    return stringConst.stringConstValueWithSecurityContract__googStringSecurityPrivate_;
  } else {
    goog.asserts.fail("expected object of type Const, got '" + stringConst + "'");
    return "type_error:Const";
  }
};
goog.string.Const.from = function(s) {
  return new goog.string.Const(goog.string.Const.GOOG_STRING_CONSTRUCTOR_TOKEN_PRIVATE_, s);
};
goog.string.Const.TYPE_MARKER_ = {};
goog.string.Const.GOOG_STRING_CONSTRUCTOR_TOKEN_PRIVATE_ = {};
goog.string.Const.EMPTY = goog.string.Const.from("");
goog.provide("goog.html.SafeScript");
goog.require("goog.asserts");
goog.require("goog.html.trustedtypes");
goog.require("goog.string.Const");
goog.require("goog.string.TypedString");
goog.html.SafeScript = function() {
  this.privateDoNotAccessOrElseSafeScriptWrappedValue_ = "";
  this.SAFE_SCRIPT_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = goog.html.SafeScript.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;
};
goog.html.SafeScript.prototype.implementsGoogStringTypedString = true;
goog.html.SafeScript.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = {};
goog.html.SafeScript.fromConstant = function(script) {
  var scriptString = goog.string.Const.unwrap(script);
  if (scriptString.length === 0) {
    return goog.html.SafeScript.EMPTY;
  }
  return goog.html.SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse(scriptString);
};
goog.html.SafeScript.fromConstantAndArgs = function(code, var_args) {
  var args = [];
  for (var i = 1; i < arguments.length; i++) {
    args.push(goog.html.SafeScript.stringify_(arguments[i]));
  }
  return goog.html.SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse("(" + goog.string.Const.unwrap(code) + ")(" + args.join(", ") + ");");
};
goog.html.SafeScript.fromJson = function(val) {
  return goog.html.SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse(goog.html.SafeScript.stringify_(val));
};
goog.html.SafeScript.prototype.getTypedStringValue = function() {
  return this.privateDoNotAccessOrElseSafeScriptWrappedValue_.toString();
};
if (goog.DEBUG) {
  goog.html.SafeScript.prototype.toString = function() {
    return "SafeScript{" + this.privateDoNotAccessOrElseSafeScriptWrappedValue_ + "}";
  };
}
goog.html.SafeScript.unwrap = function(safeScript) {
  return goog.html.SafeScript.unwrapTrustedScript(safeScript).toString();
};
goog.html.SafeScript.unwrapTrustedScript = function(safeScript) {
  if (safeScript instanceof goog.html.SafeScript && safeScript.constructor === goog.html.SafeScript && safeScript.SAFE_SCRIPT_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ === goog.html.SafeScript.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_) {
    return safeScript.privateDoNotAccessOrElseSafeScriptWrappedValue_;
  } else {
    goog.asserts.fail("expected object of type SafeScript, got '" + safeScript + "' of type " + goog.typeOf(safeScript));
    return "type_error:SafeScript";
  }
};
goog.html.SafeScript.stringify_ = function(val) {
  var json = JSON.stringify(val);
  return json.replace(/</g, "\\x3c");
};
goog.html.SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse = function(script) {
  return (new goog.html.SafeScript).initSecurityPrivateDoNotAccessOrElse_(script);
};
goog.html.SafeScript.prototype.initSecurityPrivateDoNotAccessOrElse_ = function(script) {
  this.privateDoNotAccessOrElseSafeScriptWrappedValue_ = goog.html.trustedtypes.PRIVATE_DO_NOT_ACCESS_OR_ELSE_POLICY ? goog.html.trustedtypes.PRIVATE_DO_NOT_ACCESS_OR_ELSE_POLICY.createScript(script) : script;
  return this;
};
goog.html.SafeScript.EMPTY = goog.html.SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse("");
goog.provide("goog.fs.url");
goog.fs.url.createObjectUrl = function(blob) {
  return goog.fs.url.getUrlObject_().createObjectURL(blob);
};
goog.fs.url.revokeObjectUrl = function(url) {
  goog.fs.url.getUrlObject_().revokeObjectURL(url);
};
goog.fs.url.UrlObject_;
goog.fs.url.getUrlObject_ = function() {
  const urlObject = goog.fs.url.findUrlObject_();
  if (urlObject != null) {
    return urlObject;
  } else {
    throw new Error("This browser doesn't seem to support blob URLs");
  }
};
goog.fs.url.findUrlObject_ = function() {
  if (goog.global.URL !== undefined && goog.global.URL.createObjectURL !== undefined) {
    return goog.global.URL;
  } else {
    if (goog.global.webkitURL !== undefined && goog.global.webkitURL.createObjectURL !== undefined) {
      return goog.global.webkitURL;
    } else {
      if (goog.global.createObjectURL !== undefined) {
        return goog.global;
      } else {
        return null;
      }
    }
  }
};
goog.fs.url.browserSupportsObjectUrls = function() {
  return goog.fs.url.findUrlObject_() != null;
};
goog.provide("goog.i18n.bidi");
goog.provide("goog.i18n.bidi.Dir");
goog.provide("goog.i18n.bidi.DirectionalString");
goog.provide("goog.i18n.bidi.Format");
goog.i18n.bidi.FORCE_RTL = goog.define("goog.i18n.bidi.FORCE_RTL", false);
goog.i18n.bidi.IS_RTL = goog.i18n.bidi.FORCE_RTL || (goog.LOCALE.substring(0, 2).toLowerCase() == "ar" || goog.LOCALE.substring(0, 2).toLowerCase() == "fa" || goog.LOCALE.substring(0, 2).toLowerCase() == "he" || goog.LOCALE.substring(0, 2).toLowerCase() == "iw" || goog.LOCALE.substring(0, 2).toLowerCase() == "ps" || goog.LOCALE.substring(0, 2).toLowerCase() == "sd" || goog.LOCALE.substring(0, 2).toLowerCase() == "ug" || goog.LOCALE.substring(0, 2).toLowerCase() == "ur" || goog.LOCALE.substring(0, 
2).toLowerCase() == "yi") && (goog.LOCALE.length == 2 || goog.LOCALE.substring(2, 3) == "-" || goog.LOCALE.substring(2, 3) == "_") || goog.LOCALE.length >= 3 && goog.LOCALE.substring(0, 3).toLowerCase() == "ckb" && (goog.LOCALE.length == 3 || goog.LOCALE.substring(3, 4) == "-" || goog.LOCALE.substring(3, 4) == "_") || goog.LOCALE.length >= 7 && ((goog.LOCALE.substring(2, 3) == "-" || goog.LOCALE.substring(2, 3) == "_") && (goog.LOCALE.substring(3, 7).toLowerCase() == "adlm" || goog.LOCALE.substring(3, 
7).toLowerCase() == "arab" || goog.LOCALE.substring(3, 7).toLowerCase() == "hebr" || goog.LOCALE.substring(3, 7).toLowerCase() == "nkoo" || goog.LOCALE.substring(3, 7).toLowerCase() == "rohg" || goog.LOCALE.substring(3, 7).toLowerCase() == "thaa")) || goog.LOCALE.length >= 8 && ((goog.LOCALE.substring(3, 4) == "-" || goog.LOCALE.substring(3, 4) == "_") && (goog.LOCALE.substring(4, 8).toLowerCase() == "adlm" || goog.LOCALE.substring(4, 8).toLowerCase() == "arab" || goog.LOCALE.substring(4, 8).toLowerCase() == 
"hebr" || goog.LOCALE.substring(4, 8).toLowerCase() == "nkoo" || goog.LOCALE.substring(4, 8).toLowerCase() == "rohg" || goog.LOCALE.substring(4, 8).toLowerCase() == "thaa"));
goog.i18n.bidi.Format = {LRE:"‪", RLE:"‫", PDF:"‬", LRM:"‎", RLM:"‏"};
goog.i18n.bidi.Dir = {LTR:1, RTL:-1, NEUTRAL:0};
goog.i18n.bidi.RIGHT = "right";
goog.i18n.bidi.LEFT = "left";
goog.i18n.bidi.I18N_RIGHT = goog.i18n.bidi.IS_RTL ? goog.i18n.bidi.LEFT : goog.i18n.bidi.RIGHT;
goog.i18n.bidi.I18N_LEFT = goog.i18n.bidi.IS_RTL ? goog.i18n.bidi.RIGHT : goog.i18n.bidi.LEFT;
goog.i18n.bidi.toDir = function(givenDir, opt_noNeutral) {
  if (typeof givenDir == "number") {
    return givenDir > 0 ? goog.i18n.bidi.Dir.LTR : givenDir < 0 ? goog.i18n.bidi.Dir.RTL : opt_noNeutral ? null : goog.i18n.bidi.Dir.NEUTRAL;
  } else {
    if (givenDir == null) {
      return null;
    } else {
      return givenDir ? goog.i18n.bidi.Dir.RTL : goog.i18n.bidi.Dir.LTR;
    }
  }
};
goog.i18n.bidi.ltrChars_ = "A-Za-zÀ-ÖØ-öø-ʸ̀-֐ऀ-῿" + "‎Ⰰ-\ud801\ud804-\ud839\ud83c-\udbff" + "豈-﬜︀-﹯﻽-￿";
goog.i18n.bidi.rtlChars_ = "֑-ۯۺ-ࣿ‏\ud802-\ud803\ud83a-\ud83b" + "יִ-﷿ﹰ-ﻼ";
goog.i18n.bidi.htmlSkipReg_ = /<[^>]*>|&[^;]+;/g;
goog.i18n.bidi.stripHtmlIfNeeded_ = function(str, opt_isStripNeeded) {
  return opt_isStripNeeded ? str.replace(goog.i18n.bidi.htmlSkipReg_, "") : str;
};
goog.i18n.bidi.rtlCharReg_ = new RegExp("[" + goog.i18n.bidi.rtlChars_ + "]");
goog.i18n.bidi.ltrCharReg_ = new RegExp("[" + goog.i18n.bidi.ltrChars_ + "]");
goog.i18n.bidi.hasAnyRtl = function(str, opt_isHtml) {
  return goog.i18n.bidi.rtlCharReg_.test(goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml));
};
goog.i18n.bidi.hasRtlChar = goog.i18n.bidi.hasAnyRtl;
goog.i18n.bidi.hasAnyLtr = function(str, opt_isHtml) {
  return goog.i18n.bidi.ltrCharReg_.test(goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml));
};
goog.i18n.bidi.ltrRe_ = new RegExp("^[" + goog.i18n.bidi.ltrChars_ + "]");
goog.i18n.bidi.rtlRe_ = new RegExp("^[" + goog.i18n.bidi.rtlChars_ + "]");
goog.i18n.bidi.isRtlChar = function(str) {
  return goog.i18n.bidi.rtlRe_.test(str);
};
goog.i18n.bidi.isLtrChar = function(str) {
  return goog.i18n.bidi.ltrRe_.test(str);
};
goog.i18n.bidi.isNeutralChar = function(str) {
  return !goog.i18n.bidi.isLtrChar(str) && !goog.i18n.bidi.isRtlChar(str);
};
goog.i18n.bidi.ltrDirCheckRe_ = new RegExp("^[^" + goog.i18n.bidi.rtlChars_ + "]*[" + goog.i18n.bidi.ltrChars_ + "]");
goog.i18n.bidi.rtlDirCheckRe_ = new RegExp("^[^" + goog.i18n.bidi.ltrChars_ + "]*[" + goog.i18n.bidi.rtlChars_ + "]");
goog.i18n.bidi.startsWithRtl = function(str, opt_isHtml) {
  return goog.i18n.bidi.rtlDirCheckRe_.test(goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml));
};
goog.i18n.bidi.isRtlText = goog.i18n.bidi.startsWithRtl;
goog.i18n.bidi.startsWithLtr = function(str, opt_isHtml) {
  return goog.i18n.bidi.ltrDirCheckRe_.test(goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml));
};
goog.i18n.bidi.isLtrText = goog.i18n.bidi.startsWithLtr;
goog.i18n.bidi.isRequiredLtrRe_ = /^http:\/\/.*/;
goog.i18n.bidi.isNeutralText = function(str, opt_isHtml) {
  str = goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml);
  return goog.i18n.bidi.isRequiredLtrRe_.test(str) || !goog.i18n.bidi.hasAnyLtr(str) && !goog.i18n.bidi.hasAnyRtl(str);
};
goog.i18n.bidi.ltrExitDirCheckRe_ = new RegExp("[" + goog.i18n.bidi.ltrChars_ + "]" + "[^" + goog.i18n.bidi.rtlChars_ + "]*$");
goog.i18n.bidi.rtlExitDirCheckRe_ = new RegExp("[" + goog.i18n.bidi.rtlChars_ + "]" + "[^" + goog.i18n.bidi.ltrChars_ + "]*$");
goog.i18n.bidi.endsWithLtr = function(str, opt_isHtml) {
  return goog.i18n.bidi.ltrExitDirCheckRe_.test(goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml));
};
goog.i18n.bidi.isLtrExitText = goog.i18n.bidi.endsWithLtr;
goog.i18n.bidi.endsWithRtl = function(str, opt_isHtml) {
  return goog.i18n.bidi.rtlExitDirCheckRe_.test(goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml));
};
goog.i18n.bidi.isRtlExitText = goog.i18n.bidi.endsWithRtl;
goog.i18n.bidi.rtlLocalesRe_ = new RegExp("^(ar|ckb|dv|he|iw|fa|nqo|ps|sd|ug|ur|yi|" + ".*[-_](Adlm|Arab|Hebr|Nkoo|Rohg|Thaa))" + "(?!.*[-_](Latn|Cyrl)($|-|_))($|-|_)", "i");
goog.i18n.bidi.isRtlLanguage = function(lang) {
  return goog.i18n.bidi.rtlLocalesRe_.test(lang);
};
goog.i18n.bidi.bracketGuardTextRe_ = /(\(.*?\)+)|(\[.*?\]+)|(\{.*?\}+)|(<.*?>+)/g;
goog.i18n.bidi.guardBracketInText = function(s, opt_isRtlContext) {
  const useRtl = opt_isRtlContext === undefined ? goog.i18n.bidi.hasAnyRtl(s) : opt_isRtlContext;
  const mark = useRtl ? goog.i18n.bidi.Format.RLM : goog.i18n.bidi.Format.LRM;
  return s.replace(goog.i18n.bidi.bracketGuardTextRe_, mark + "$\x26" + mark);
};
goog.i18n.bidi.enforceRtlInHtml = function(html) {
  if (html.charAt(0) == "\x3c") {
    return html.replace(/<\w+/, "$\x26 dir\x3drtl");
  }
  return "\n\x3cspan dir\x3drtl\x3e" + html + "\x3c/span\x3e";
};
goog.i18n.bidi.enforceRtlInText = function(text) {
  return goog.i18n.bidi.Format.RLE + text + goog.i18n.bidi.Format.PDF;
};
goog.i18n.bidi.enforceLtrInHtml = function(html) {
  if (html.charAt(0) == "\x3c") {
    return html.replace(/<\w+/, "$\x26 dir\x3dltr");
  }
  return "\n\x3cspan dir\x3dltr\x3e" + html + "\x3c/span\x3e";
};
goog.i18n.bidi.enforceLtrInText = function(text) {
  return goog.i18n.bidi.Format.LRE + text + goog.i18n.bidi.Format.PDF;
};
goog.i18n.bidi.dimensionsRe_ = /:\s*([.\d][.\w]*)\s+([.\d][.\w]*)\s+([.\d][.\w]*)\s+([.\d][.\w]*)/g;
goog.i18n.bidi.leftRe_ = /left/gi;
goog.i18n.bidi.rightRe_ = /right/gi;
goog.i18n.bidi.tempRe_ = /%%%%/g;
goog.i18n.bidi.mirrorCSS = function(cssStr) {
  return cssStr.replace(goog.i18n.bidi.dimensionsRe_, ":$1 $4 $3 $2").replace(goog.i18n.bidi.leftRe_, "%%%%").replace(goog.i18n.bidi.rightRe_, goog.i18n.bidi.LEFT).replace(goog.i18n.bidi.tempRe_, goog.i18n.bidi.RIGHT);
};
goog.i18n.bidi.doubleQuoteSubstituteRe_ = /([\u0591-\u05f2])"/g;
goog.i18n.bidi.singleQuoteSubstituteRe_ = /([\u0591-\u05f2])'/g;
goog.i18n.bidi.normalizeHebrewQuote = function(str) {
  return str.replace(goog.i18n.bidi.doubleQuoteSubstituteRe_, "$1״").replace(goog.i18n.bidi.singleQuoteSubstituteRe_, "$1׳");
};
goog.i18n.bidi.wordSeparatorRe_ = /\s+/;
goog.i18n.bidi.hasNumeralsRe_ = /[\d\u06f0-\u06f9]/;
goog.i18n.bidi.rtlDetectionThreshold_ = 0.40;
goog.i18n.bidi.estimateDirection = function(str, opt_isHtml) {
  let rtlCount = 0;
  let totalCount = 0;
  let hasWeaklyLtr = false;
  const tokens = goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml).split(goog.i18n.bidi.wordSeparatorRe_);
  for (let i = 0; i < tokens.length; i++) {
    const token = tokens[i];
    if (goog.i18n.bidi.startsWithRtl(token)) {
      rtlCount++;
      totalCount++;
    } else {
      if (goog.i18n.bidi.isRequiredLtrRe_.test(token)) {
        hasWeaklyLtr = true;
      } else {
        if (goog.i18n.bidi.hasAnyLtr(token)) {
          totalCount++;
        } else {
          if (goog.i18n.bidi.hasNumeralsRe_.test(token)) {
            hasWeaklyLtr = true;
          }
        }
      }
    }
  }
  return totalCount == 0 ? hasWeaklyLtr ? goog.i18n.bidi.Dir.LTR : goog.i18n.bidi.Dir.NEUTRAL : rtlCount / totalCount > goog.i18n.bidi.rtlDetectionThreshold_ ? goog.i18n.bidi.Dir.RTL : goog.i18n.bidi.Dir.LTR;
};
goog.i18n.bidi.detectRtlDirectionality = function(str, opt_isHtml) {
  return goog.i18n.bidi.estimateDirection(str, opt_isHtml) == goog.i18n.bidi.Dir.RTL;
};
goog.i18n.bidi.setElementDirAndAlign = function(element, dir) {
  if (element) {
    const htmlElement = element;
    dir = goog.i18n.bidi.toDir(dir);
    if (dir) {
      htmlElement.style.textAlign = dir == goog.i18n.bidi.Dir.RTL ? goog.i18n.bidi.RIGHT : goog.i18n.bidi.LEFT;
      htmlElement.dir = dir == goog.i18n.bidi.Dir.RTL ? "rtl" : "ltr";
    }
  }
};
goog.i18n.bidi.setElementDirByTextDirectionality = function(element, text) {
  const htmlElement = element;
  switch(goog.i18n.bidi.estimateDirection(text)) {
    case goog.i18n.bidi.Dir.LTR:
      htmlElement.dir = "ltr";
      break;
    case goog.i18n.bidi.Dir.RTL:
      htmlElement.dir = "rtl";
      break;
    default:
      htmlElement.removeAttribute("dir");
  }
};
goog.i18n.bidi.DirectionalString = function() {
};
goog.i18n.bidi.DirectionalString.prototype.implementsGoogI18nBidiDirectionalString;
goog.i18n.bidi.DirectionalString.prototype.getDirection;
goog.provide("goog.html.TrustedResourceUrl");
goog.require("goog.asserts");
goog.require("goog.html.trustedtypes");
goog.require("goog.i18n.bidi.Dir");
goog.require("goog.i18n.bidi.DirectionalString");
goog.require("goog.string.Const");
goog.require("goog.string.TypedString");
goog.html.TrustedResourceUrl = function(opt_token, opt_content) {
  this.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_ = opt_token === goog.html.TrustedResourceUrl.CONSTRUCTOR_TOKEN_PRIVATE_ && opt_content || "";
  this.TRUSTED_RESOURCE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = goog.html.TrustedResourceUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;
};
goog.html.TrustedResourceUrl.prototype.implementsGoogStringTypedString = true;
goog.html.TrustedResourceUrl.prototype.getTypedStringValue = function() {
  return this.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_.toString();
};
goog.html.TrustedResourceUrl.prototype.implementsGoogI18nBidiDirectionalString = true;
goog.html.TrustedResourceUrl.prototype.getDirection = function() {
  return goog.i18n.bidi.Dir.LTR;
};
goog.html.TrustedResourceUrl.prototype.cloneWithParams = function(searchParams, opt_hashParams) {
  var url = goog.html.TrustedResourceUrl.unwrap(this);
  var parts = goog.html.TrustedResourceUrl.URL_PARAM_PARSER_.exec(url);
  var urlBase = parts[1];
  var urlSearch = parts[2] || "";
  var urlHash = parts[3] || "";
  return goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(urlBase + goog.html.TrustedResourceUrl.stringifyParams_("?", urlSearch, searchParams) + goog.html.TrustedResourceUrl.stringifyParams_("#", urlHash, opt_hashParams));
};
if (goog.DEBUG) {
  goog.html.TrustedResourceUrl.prototype.toString = function() {
    return "TrustedResourceUrl{" + this.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_ + "}";
  };
}
goog.html.TrustedResourceUrl.unwrap = function(trustedResourceUrl) {
  return goog.html.TrustedResourceUrl.unwrapTrustedScriptURL(trustedResourceUrl).toString();
};
goog.html.TrustedResourceUrl.unwrapTrustedScriptURL = function(trustedResourceUrl) {
  if (trustedResourceUrl instanceof goog.html.TrustedResourceUrl && trustedResourceUrl.constructor === goog.html.TrustedResourceUrl && trustedResourceUrl.TRUSTED_RESOURCE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ === goog.html.TrustedResourceUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_) {
    return trustedResourceUrl.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_;
  } else {
    goog.asserts.fail("expected object of type TrustedResourceUrl, got '" + trustedResourceUrl + "' of type " + goog.typeOf(trustedResourceUrl));
    return "type_error:TrustedResourceUrl";
  }
};
goog.html.TrustedResourceUrl.format = function(format, args) {
  var formatStr = goog.string.Const.unwrap(format);
  if (!goog.html.TrustedResourceUrl.BASE_URL_.test(formatStr)) {
    throw new Error("Invalid TrustedResourceUrl format: " + formatStr);
  }
  var result = formatStr.replace(goog.html.TrustedResourceUrl.FORMAT_MARKER_, function(match, id) {
    if (!Object.prototype.hasOwnProperty.call(args, id)) {
      throw new Error('Found marker, "' + id + '", in format string, "' + formatStr + '", but no valid label mapping found ' + "in args: " + JSON.stringify(args));
    }
    var arg = args[id];
    if (arg instanceof goog.string.Const) {
      return goog.string.Const.unwrap(arg);
    } else {
      return encodeURIComponent(String(arg));
    }
  });
  return goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(result);
};
goog.html.TrustedResourceUrl.FORMAT_MARKER_ = /%{(\w+)}/g;
goog.html.TrustedResourceUrl.BASE_URL_ = new RegExp("^((https:)?//[0-9a-z.:[\\]-]+/" + "|/[^/\\\\]" + "|[^:/\\\\%]+/" + "|[^:/\\\\%]*[?#]" + "|about:blank#" + ")", "i");
goog.html.TrustedResourceUrl.URL_PARAM_PARSER_ = /^([^?#]*)(\?[^#]*)?(#[\s\S]*)?/;
goog.html.TrustedResourceUrl.formatWithParams = function(format, args, searchParams, opt_hashParams) {
  var url = goog.html.TrustedResourceUrl.format(format, args);
  return url.cloneWithParams(searchParams, opt_hashParams);
};
goog.html.TrustedResourceUrl.fromConstant = function(url) {
  return goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(goog.string.Const.unwrap(url));
};
goog.html.TrustedResourceUrl.fromConstants = function(parts) {
  var unwrapped = "";
  for (var i = 0; i < parts.length; i++) {
    unwrapped += goog.string.Const.unwrap(parts[i]);
  }
  return goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(unwrapped);
};
goog.html.TrustedResourceUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = {};
goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse = function(url) {
  var value = goog.html.trustedtypes.PRIVATE_DO_NOT_ACCESS_OR_ELSE_POLICY ? goog.html.trustedtypes.PRIVATE_DO_NOT_ACCESS_OR_ELSE_POLICY.createScriptURL(url) : url;
  return new goog.html.TrustedResourceUrl(goog.html.TrustedResourceUrl.CONSTRUCTOR_TOKEN_PRIVATE_, value);
};
goog.html.TrustedResourceUrl.stringifyParams_ = function(prefix, currentString, params) {
  if (params == null) {
    return currentString;
  }
  if (typeof params === "string") {
    return params ? prefix + encodeURIComponent(params) : "";
  }
  for (var key in params) {
    var value = params[key];
    var outputValues = goog.isArray(value) ? value : [value];
    for (var i = 0; i < outputValues.length; i++) {
      var outputValue = outputValues[i];
      if (outputValue != null) {
        if (!currentString) {
          currentString = prefix;
        }
        currentString += (currentString.length > prefix.length ? "\x26" : "") + encodeURIComponent(key) + "\x3d" + encodeURIComponent(String(outputValue));
      }
    }
  }
  return currentString;
};
goog.html.TrustedResourceUrl.CONSTRUCTOR_TOKEN_PRIVATE_ = {};
goog.provide("goog.string.internal");
goog.string.internal.startsWith = function(str, prefix) {
  return str.lastIndexOf(prefix, 0) == 0;
};
goog.string.internal.endsWith = function(str, suffix) {
  const l = str.length - suffix.length;
  return l >= 0 && str.indexOf(suffix, l) == l;
};
goog.string.internal.caseInsensitiveStartsWith = function(str, prefix) {
  return goog.string.internal.caseInsensitiveCompare(prefix, str.substr(0, prefix.length)) == 0;
};
goog.string.internal.caseInsensitiveEndsWith = function(str, suffix) {
  return goog.string.internal.caseInsensitiveCompare(suffix, str.substr(str.length - suffix.length, suffix.length)) == 0;
};
goog.string.internal.caseInsensitiveEquals = function(str1, str2) {
  return str1.toLowerCase() == str2.toLowerCase();
};
goog.string.internal.isEmptyOrWhitespace = function(str) {
  return /^[\s\xa0]*$/.test(str);
};
goog.string.internal.trim = goog.TRUSTED_SITE && String.prototype.trim ? function(str) {
  return str.trim();
} : function(str) {
  return /^[\s\xa0]*([\s\S]*?)[\s\xa0]*$/.exec(str)[1];
};
goog.string.internal.caseInsensitiveCompare = function(str1, str2) {
  const test1 = String(str1).toLowerCase();
  const test2 = String(str2).toLowerCase();
  if (test1 < test2) {
    return -1;
  } else {
    if (test1 == test2) {
      return 0;
    } else {
      return 1;
    }
  }
};
goog.string.internal.newLineToBr = function(str, opt_xml) {
  return str.replace(/(\r\n|\r|\n)/g, opt_xml ? "\x3cbr /\x3e" : "\x3cbr\x3e");
};
goog.string.internal.htmlEscape = function(str, opt_isLikelyToContainHtmlChars) {
  if (opt_isLikelyToContainHtmlChars) {
    str = str.replace(goog.string.internal.AMP_RE_, "\x26amp;").replace(goog.string.internal.LT_RE_, "\x26lt;").replace(goog.string.internal.GT_RE_, "\x26gt;").replace(goog.string.internal.QUOT_RE_, "\x26quot;").replace(goog.string.internal.SINGLE_QUOTE_RE_, "\x26#39;").replace(goog.string.internal.NULL_RE_, "\x26#0;");
    return str;
  } else {
    if (!goog.string.internal.ALL_RE_.test(str)) {
      return str;
    }
    if (str.indexOf("\x26") != -1) {
      str = str.replace(goog.string.internal.AMP_RE_, "\x26amp;");
    }
    if (str.indexOf("\x3c") != -1) {
      str = str.replace(goog.string.internal.LT_RE_, "\x26lt;");
    }
    if (str.indexOf("\x3e") != -1) {
      str = str.replace(goog.string.internal.GT_RE_, "\x26gt;");
    }
    if (str.indexOf('"') != -1) {
      str = str.replace(goog.string.internal.QUOT_RE_, "\x26quot;");
    }
    if (str.indexOf("'") != -1) {
      str = str.replace(goog.string.internal.SINGLE_QUOTE_RE_, "\x26#39;");
    }
    if (str.indexOf("\x00") != -1) {
      str = str.replace(goog.string.internal.NULL_RE_, "\x26#0;");
    }
    return str;
  }
};
goog.string.internal.AMP_RE_ = /&/g;
goog.string.internal.LT_RE_ = /</g;
goog.string.internal.GT_RE_ = />/g;
goog.string.internal.QUOT_RE_ = /"/g;
goog.string.internal.SINGLE_QUOTE_RE_ = /'/g;
goog.string.internal.NULL_RE_ = /\x00/g;
goog.string.internal.ALL_RE_ = /[\x00&<>"']/;
goog.string.internal.whitespaceEscape = function(str, opt_xml) {
  return goog.string.internal.newLineToBr(str.replace(/  /g, " \x26#160;"), opt_xml);
};
goog.string.internal.contains = function(str, subString) {
  return str.indexOf(subString) != -1;
};
goog.string.internal.caseInsensitiveContains = function(str, subString) {
  return goog.string.internal.contains(str.toLowerCase(), subString.toLowerCase());
};
goog.string.internal.compareVersions = function(version1, version2) {
  let order = 0;
  const v1Subs = goog.string.internal.trim(String(version1)).split(".");
  const v2Subs = goog.string.internal.trim(String(version2)).split(".");
  const subCount = Math.max(v1Subs.length, v2Subs.length);
  for (let subIdx = 0; order == 0 && subIdx < subCount; subIdx++) {
    let v1Sub = v1Subs[subIdx] || "";
    let v2Sub = v2Subs[subIdx] || "";
    do {
      const v1Comp = /(\d*)(\D*)(.*)/.exec(v1Sub) || ["", "", "", ""];
      const v2Comp = /(\d*)(\D*)(.*)/.exec(v2Sub) || ["", "", "", ""];
      if (v1Comp[0].length == 0 && v2Comp[0].length == 0) {
        break;
      }
      const v1CompNum = v1Comp[1].length == 0 ? 0 : parseInt(v1Comp[1], 10);
      const v2CompNum = v2Comp[1].length == 0 ? 0 : parseInt(v2Comp[1], 10);
      order = goog.string.internal.compareElements_(v1CompNum, v2CompNum) || goog.string.internal.compareElements_(v1Comp[2].length == 0, v2Comp[2].length == 0) || goog.string.internal.compareElements_(v1Comp[2], v2Comp[2]);
      v1Sub = v1Comp[3];
      v2Sub = v2Comp[3];
    } while (order == 0);
  }
  return order;
};
goog.string.internal.compareElements_ = function(left, right) {
  if (left < right) {
    return -1;
  } else {
    if (left > right) {
      return 1;
    }
  }
  return 0;
};
goog.provide("goog.html.SafeUrl");
goog.require("goog.asserts");
goog.require("goog.fs.url");
goog.require("goog.html.TrustedResourceUrl");
goog.require("goog.i18n.bidi.Dir");
goog.require("goog.i18n.bidi.DirectionalString");
goog.require("goog.string.Const");
goog.require("goog.string.TypedString");
goog.require("goog.string.internal");
goog.html.SafeUrl = function(opt_token, opt_content) {
  this.privateDoNotAccessOrElseSafeUrlWrappedValue_ = opt_token === goog.html.SafeUrl.CONSTRUCTOR_TOKEN_PRIVATE_ && opt_content || "";
  this.SAFE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = goog.html.SafeUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;
};
goog.html.SafeUrl.INNOCUOUS_STRING = "about:invalid#zClosurez";
goog.html.SafeUrl.prototype.implementsGoogStringTypedString = true;
goog.html.SafeUrl.prototype.getTypedStringValue = function() {
  return this.privateDoNotAccessOrElseSafeUrlWrappedValue_.toString();
};
goog.html.SafeUrl.prototype.implementsGoogI18nBidiDirectionalString = true;
goog.html.SafeUrl.prototype.getDirection = function() {
  return goog.i18n.bidi.Dir.LTR;
};
if (goog.DEBUG) {
  goog.html.SafeUrl.prototype.toString = function() {
    return "SafeUrl{" + this.privateDoNotAccessOrElseSafeUrlWrappedValue_ + "}";
  };
}
goog.html.SafeUrl.unwrap = function(safeUrl) {
  if (safeUrl instanceof goog.html.SafeUrl && safeUrl.constructor === goog.html.SafeUrl && safeUrl.SAFE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ === goog.html.SafeUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_) {
    return safeUrl.privateDoNotAccessOrElseSafeUrlWrappedValue_;
  } else {
    goog.asserts.fail("expected object of type SafeUrl, got '" + safeUrl + "' of type " + goog.typeOf(safeUrl));
    return "type_error:SafeUrl";
  }
};
goog.html.SafeUrl.fromConstant = function(url) {
  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(goog.string.Const.unwrap(url));
};
goog.html.SAFE_MIME_TYPE_PATTERN_ = new RegExp("^(?:audio/(?:3gpp2|3gpp|aac|L16|midi|mp3|mp4|mpeg|oga|ogg|opus|x-m4a|x-wav|wav|webm)|" + "image/(?:bmp|gif|jpeg|jpg|png|tiff|webp|x-icon)|" + "text/csv|" + "video/(?:mpeg|mp4|ogg|webm|quicktime))" + '(?:;\\w+\x3d(?:\\w+|"[\\w;\x3d]+"))*$', "i");
goog.html.SafeUrl.isSafeMimeType = function(mimeType) {
  return goog.html.SAFE_MIME_TYPE_PATTERN_.test(mimeType);
};
goog.html.SafeUrl.fromBlob = function(blob) {
  var url = goog.html.SAFE_MIME_TYPE_PATTERN_.test(blob.type) ? goog.fs.url.createObjectUrl(blob) : goog.html.SafeUrl.INNOCUOUS_STRING;
  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(url);
};
goog.html.DATA_URL_PATTERN_ = /^data:([^,]*);base64,[a-z0-9+\/]+=*$/i;
goog.html.SafeUrl.fromDataUrl = function(dataUrl) {
  var filteredDataUrl = dataUrl.replace(/(%0A|%0D)/g, "");
  var match = filteredDataUrl.match(goog.html.DATA_URL_PATTERN_);
  var valid = match && goog.html.SAFE_MIME_TYPE_PATTERN_.test(match[1]);
  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(valid ? filteredDataUrl : goog.html.SafeUrl.INNOCUOUS_STRING);
};
goog.html.SafeUrl.fromTelUrl = function(telUrl) {
  if (!goog.string.internal.caseInsensitiveStartsWith(telUrl, "tel:")) {
    telUrl = goog.html.SafeUrl.INNOCUOUS_STRING;
  }
  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(telUrl);
};
goog.html.SIP_URL_PATTERN_ = new RegExp("^sip[s]?:[+a-z0-9_.!$%\x26'*\\/\x3d^`{|}~-]+@([a-z0-9-]+\\.)+[a-z0-9]{2,63}$", "i");
goog.html.SafeUrl.fromSipUrl = function(sipUrl) {
  if (!goog.html.SIP_URL_PATTERN_.test(decodeURIComponent(sipUrl))) {
    sipUrl = goog.html.SafeUrl.INNOCUOUS_STRING;
  }
  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(sipUrl);
};
goog.html.SafeUrl.fromFacebookMessengerUrl = function(facebookMessengerUrl) {
  if (!goog.string.internal.caseInsensitiveStartsWith(facebookMessengerUrl, "fb-messenger://share")) {
    facebookMessengerUrl = goog.html.SafeUrl.INNOCUOUS_STRING;
  }
  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(facebookMessengerUrl);
};
goog.html.SafeUrl.fromWhatsAppUrl = function(whatsAppUrl) {
  if (!goog.string.internal.caseInsensitiveStartsWith(whatsAppUrl, "whatsapp://send")) {
    whatsAppUrl = goog.html.SafeUrl.INNOCUOUS_STRING;
  }
  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(whatsAppUrl);
};
goog.html.SafeUrl.fromSmsUrl = function(smsUrl) {
  if (!goog.string.internal.caseInsensitiveStartsWith(smsUrl, "sms:") || !goog.html.SafeUrl.isSmsUrlBodyValid_(smsUrl)) {
    smsUrl = goog.html.SafeUrl.INNOCUOUS_STRING;
  }
  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(smsUrl);
};
goog.html.SafeUrl.isSmsUrlBodyValid_ = function(smsUrl) {
  var hash = smsUrl.indexOf("#");
  if (hash > 0) {
    smsUrl = smsUrl.substring(0, hash);
  }
  var bodyParams = smsUrl.match(/[?&]body=/gi);
  if (!bodyParams) {
    return true;
  }
  if (bodyParams.length > 1) {
    return false;
  }
  var bodyValue = smsUrl.match(/[?&]body=([^&]*)/)[1];
  if (!bodyValue) {
    return true;
  }
  try {
    decodeURIComponent(bodyValue);
  } catch (error) {
    return false;
  }
  return /^(?:[a-z0-9\-_.~]|%[0-9a-f]{2})+$/i.test(bodyValue);
};
goog.html.SafeUrl.fromSshUrl = function(sshUrl) {
  if (!goog.string.internal.caseInsensitiveStartsWith(sshUrl, "ssh://")) {
    sshUrl = goog.html.SafeUrl.INNOCUOUS_STRING;
  }
  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(sshUrl);
};
goog.html.SafeUrl.sanitizeChromeExtensionUrl = function(url, extensionId) {
  return goog.html.SafeUrl.sanitizeExtensionUrl_(/^chrome-extension:\/\/([^\/]+)\//, url, extensionId);
};
goog.html.SafeUrl.sanitizeFirefoxExtensionUrl = function(url, extensionId) {
  return goog.html.SafeUrl.sanitizeExtensionUrl_(/^moz-extension:\/\/([^\/]+)\//, url, extensionId);
};
goog.html.SafeUrl.sanitizeEdgeExtensionUrl = function(url, extensionId) {
  return goog.html.SafeUrl.sanitizeExtensionUrl_(/^ms-browser-extension:\/\/([^\/]+)\//, url, extensionId);
};
goog.html.SafeUrl.sanitizeExtensionUrl_ = function(scheme, url, extensionId) {
  var matches = scheme.exec(url);
  if (!matches) {
    url = goog.html.SafeUrl.INNOCUOUS_STRING;
  } else {
    var extractedExtensionId = matches[1];
    var acceptedExtensionIds;
    if (extensionId instanceof goog.string.Const) {
      acceptedExtensionIds = [goog.string.Const.unwrap(extensionId)];
    } else {
      acceptedExtensionIds = extensionId.map(function unwrap(x) {
        return goog.string.Const.unwrap(x);
      });
    }
    if (acceptedExtensionIds.indexOf(extractedExtensionId) == -1) {
      url = goog.html.SafeUrl.INNOCUOUS_STRING;
    }
  }
  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(url);
};
goog.html.SafeUrl.fromTrustedResourceUrl = function(trustedResourceUrl) {
  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(goog.html.TrustedResourceUrl.unwrap(trustedResourceUrl));
};
goog.html.SAFE_URL_PATTERN_ = /^(?:(?:https?|mailto|ftp):|[^:/?#]*(?:[/?#]|$))/i;
goog.html.SafeUrl.SAFE_URL_PATTERN = goog.html.SAFE_URL_PATTERN_;
goog.html.SafeUrl.sanitize = function(url) {
  if (url instanceof goog.html.SafeUrl) {
    return url;
  } else {
    if (typeof url == "object" && url.implementsGoogStringTypedString) {
      url = url.getTypedStringValue();
    } else {
      url = String(url);
    }
  }
  if (!goog.html.SAFE_URL_PATTERN_.test(url)) {
    url = goog.html.SafeUrl.INNOCUOUS_STRING;
  }
  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(url);
};
goog.html.SafeUrl.sanitizeAssertUnchanged = function(url, opt_allowDataUrl) {
  if (url instanceof goog.html.SafeUrl) {
    return url;
  } else {
    if (typeof url == "object" && url.implementsGoogStringTypedString) {
      url = url.getTypedStringValue();
    } else {
      url = String(url);
    }
  }
  if (opt_allowDataUrl && /^data:/i.test(url)) {
    var safeUrl = goog.html.SafeUrl.fromDataUrl(url);
    if (safeUrl.getTypedStringValue() == url) {
      return safeUrl;
    }
  }
  if (!goog.asserts.assert(goog.html.SAFE_URL_PATTERN_.test(url), "%s does not match the safe URL pattern", url)) {
    url = goog.html.SafeUrl.INNOCUOUS_STRING;
  }
  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(url);
};
goog.html.SafeUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = {};
goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse = function(url) {
  return new goog.html.SafeUrl(goog.html.SafeUrl.CONSTRUCTOR_TOKEN_PRIVATE_, url);
};
goog.html.SafeUrl.ABOUT_BLANK = goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse("about:blank");
goog.html.SafeUrl.CONSTRUCTOR_TOKEN_PRIVATE_ = {};
goog.provide("goog.html.SafeStyle");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.html.SafeUrl");
goog.require("goog.string.Const");
goog.require("goog.string.TypedString");
goog.require("goog.string.internal");
goog.html.SafeStyle = function() {
  this.privateDoNotAccessOrElseSafeStyleWrappedValue_ = "";
  this.SAFE_STYLE_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = goog.html.SafeStyle.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;
};
goog.html.SafeStyle.prototype.implementsGoogStringTypedString = true;
goog.html.SafeStyle.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = {};
goog.html.SafeStyle.fromConstant = function(style) {
  var styleString = goog.string.Const.unwrap(style);
  if (styleString.length === 0) {
    return goog.html.SafeStyle.EMPTY;
  }
  goog.asserts.assert(goog.string.internal.endsWith(styleString, ";"), "Last character of style string is not ';': " + styleString);
  goog.asserts.assert(goog.string.internal.contains(styleString, ":"), "Style string must contain at least one ':', to " + 'specify a "name: value" pair: ' + styleString);
  return goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(styleString);
};
goog.html.SafeStyle.prototype.getTypedStringValue = function() {
  return this.privateDoNotAccessOrElseSafeStyleWrappedValue_;
};
if (goog.DEBUG) {
  goog.html.SafeStyle.prototype.toString = function() {
    return "SafeStyle{" + this.privateDoNotAccessOrElseSafeStyleWrappedValue_ + "}";
  };
}
goog.html.SafeStyle.unwrap = function(safeStyle) {
  if (safeStyle instanceof goog.html.SafeStyle && safeStyle.constructor === goog.html.SafeStyle && safeStyle.SAFE_STYLE_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ === goog.html.SafeStyle.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_) {
    return safeStyle.privateDoNotAccessOrElseSafeStyleWrappedValue_;
  } else {
    goog.asserts.fail("expected object of type SafeStyle, got '" + safeStyle + "' of type " + goog.typeOf(safeStyle));
    return "type_error:SafeStyle";
  }
};
goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse = function(style) {
  return (new goog.html.SafeStyle).initSecurityPrivateDoNotAccessOrElse_(style);
};
goog.html.SafeStyle.prototype.initSecurityPrivateDoNotAccessOrElse_ = function(style) {
  this.privateDoNotAccessOrElseSafeStyleWrappedValue_ = style;
  return this;
};
goog.html.SafeStyle.EMPTY = goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse("");
goog.html.SafeStyle.INNOCUOUS_STRING = "zClosurez";
goog.html.SafeStyle.PropertyValue;
goog.html.SafeStyle.PropertyMap;
goog.html.SafeStyle.create = function(map) {
  var style = "";
  for (var name in map) {
    if (!/^[-_a-zA-Z0-9]+$/.test(name)) {
      throw new Error("Name allows only [-_a-zA-Z0-9], got: " + name);
    }
    var value = map[name];
    if (value == null) {
      continue;
    }
    if (goog.isArray(value)) {
      value = goog.array.map(value, goog.html.SafeStyle.sanitizePropertyValue_).join(" ");
    } else {
      value = goog.html.SafeStyle.sanitizePropertyValue_(value);
    }
    style += name + ":" + value + ";";
  }
  if (!style) {
    return goog.html.SafeStyle.EMPTY;
  }
  return goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(style);
};
goog.html.SafeStyle.sanitizePropertyValue_ = function(value) {
  if (value instanceof goog.html.SafeUrl) {
    var url = goog.html.SafeUrl.unwrap(value);
    return 'url("' + url.replace(/</g, "%3c").replace(/[\\"]/g, "\\$\x26") + '")';
  }
  var result = value instanceof goog.string.Const ? goog.string.Const.unwrap(value) : goog.html.SafeStyle.sanitizePropertyValueString_(String(value));
  if (/[{;}]/.test(result)) {
    throw new goog.asserts.AssertionError("Value does not allow [{;}], got: %s.", [result]);
  }
  return result;
};
goog.html.SafeStyle.sanitizePropertyValueString_ = function(value) {
  var valueWithoutFunctions = value.replace(goog.html.SafeStyle.FUNCTIONS_RE_, "$1").replace(goog.html.SafeStyle.FUNCTIONS_RE_, "$1").replace(goog.html.SafeStyle.URL_RE_, "url");
  if (!goog.html.SafeStyle.VALUE_RE_.test(valueWithoutFunctions)) {
    goog.asserts.fail("String value allows only " + goog.html.SafeStyle.VALUE_ALLOWED_CHARS_ + " and simple functions, got: " + value);
    return goog.html.SafeStyle.INNOCUOUS_STRING;
  } else {
    if (goog.html.SafeStyle.COMMENT_RE_.test(value)) {
      goog.asserts.fail("String value disallows comments, got: " + value);
      return goog.html.SafeStyle.INNOCUOUS_STRING;
    } else {
      if (!goog.html.SafeStyle.hasBalancedQuotes_(value)) {
        goog.asserts.fail("String value requires balanced quotes, got: " + value);
        return goog.html.SafeStyle.INNOCUOUS_STRING;
      } else {
        if (!goog.html.SafeStyle.hasBalancedSquareBrackets_(value)) {
          goog.asserts.fail("String value requires balanced square brackets and one" + " identifier per pair of brackets, got: " + value);
          return goog.html.SafeStyle.INNOCUOUS_STRING;
        }
      }
    }
  }
  return goog.html.SafeStyle.sanitizeUrl_(value);
};
goog.html.SafeStyle.hasBalancedQuotes_ = function(value) {
  var outsideSingle = true;
  var outsideDouble = true;
  for (var i = 0; i < value.length; i++) {
    var c = value.charAt(i);
    if (c == "'" && outsideDouble) {
      outsideSingle = !outsideSingle;
    } else {
      if (c == '"' && outsideSingle) {
        outsideDouble = !outsideDouble;
      }
    }
  }
  return outsideSingle && outsideDouble;
};
goog.html.SafeStyle.hasBalancedSquareBrackets_ = function(value) {
  var outside = true;
  var tokenRe = /^[-_a-zA-Z0-9]$/;
  for (var i = 0; i < value.length; i++) {
    var c = value.charAt(i);
    if (c == "]") {
      if (outside) {
        return false;
      }
      outside = true;
    } else {
      if (c == "[") {
        if (!outside) {
          return false;
        }
        outside = false;
      } else {
        if (!outside && !tokenRe.test(c)) {
          return false;
        }
      }
    }
  }
  return outside;
};
goog.html.SafeStyle.VALUE_ALLOWED_CHARS_ = "[-,.\"'%_!# a-zA-Z0-9\\[\\]]";
goog.html.SafeStyle.VALUE_RE_ = new RegExp("^" + goog.html.SafeStyle.VALUE_ALLOWED_CHARS_ + "+$");
goog.html.SafeStyle.URL_RE_ = new RegExp("\\b(url\\([ \t\n]*)(" + "'[ -\x26(-\\[\\]-~]*'" + '|"[ !#-\\[\\]-~]*"' + "|[!#-\x26*-\\[\\]-~]*" + ")([ \t\n]*\\))", "g");
goog.html.SafeStyle.ALLOWED_FUNCTIONS_ = ["calc", "cubic-bezier", "fit-content", "hsl", "hsla", "matrix", "minmax", "repeat", "rgb", "rgba", "(rotate|scale|translate)(X|Y|Z|3d)?"];
goog.html.SafeStyle.FUNCTIONS_RE_ = new RegExp("\\b(" + goog.html.SafeStyle.ALLOWED_FUNCTIONS_.join("|") + ")" + "\\([-+*/0-9a-z.%\\[\\], ]+\\)", "g");
goog.html.SafeStyle.COMMENT_RE_ = /\/\*/;
goog.html.SafeStyle.sanitizeUrl_ = function(value) {
  return value.replace(goog.html.SafeStyle.URL_RE_, function(match, before, url, after) {
    var quote = "";
    url = url.replace(/^(['"])(.*)\1$/, function(match, start, inside) {
      quote = start;
      return inside;
    });
    var sanitized = goog.html.SafeUrl.sanitize(url).getTypedStringValue();
    return before + quote + sanitized + quote + after;
  });
};
goog.html.SafeStyle.concat = function(var_args) {
  var style = "";
  var addArgument = function(argument) {
    if (goog.isArray(argument)) {
      goog.array.forEach(argument, addArgument);
    } else {
      style += goog.html.SafeStyle.unwrap(argument);
    }
  };
  goog.array.forEach(arguments, addArgument);
  if (!style) {
    return goog.html.SafeStyle.EMPTY;
  }
  return goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(style);
};
goog.provide("goog.html.SafeStyleSheet");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.html.SafeStyle");
goog.require("goog.object");
goog.require("goog.string.Const");
goog.require("goog.string.TypedString");
goog.require("goog.string.internal");
goog.html.SafeStyleSheet = function() {
  this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_ = "";
  this.SAFE_STYLE_SHEET_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = goog.html.SafeStyleSheet.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;
};
goog.html.SafeStyleSheet.prototype.implementsGoogStringTypedString = true;
goog.html.SafeStyleSheet.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = {};
goog.html.SafeStyleSheet.createRule = function(selector, style) {
  if (goog.string.internal.contains(selector, "\x3c")) {
    throw new Error("Selector does not allow '\x3c', got: " + selector);
  }
  var selectorToCheck = selector.replace(/('|")((?!\1)[^\r\n\f\\]|\\[\s\S])*\1/g, "");
  if (!/^[-_a-zA-Z0-9#.:* ,>+~[\]()=^$|]+$/.test(selectorToCheck)) {
    throw new Error("Selector allows only [-_a-zA-Z0-9#.:* ,\x3e+~[\\]()\x3d^$|] and " + "strings, got: " + selector);
  }
  if (!goog.html.SafeStyleSheet.hasBalancedBrackets_(selectorToCheck)) {
    throw new Error("() and [] in selector must be balanced, got: " + selector);
  }
  if (!(style instanceof goog.html.SafeStyle)) {
    style = goog.html.SafeStyle.create(style);
  }
  var styleSheet = selector + "{" + goog.html.SafeStyle.unwrap(style).replace(/</g, "\\3C ") + "}";
  return goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(styleSheet);
};
goog.html.SafeStyleSheet.hasBalancedBrackets_ = function(s) {
  var brackets = {"(":")", "[":"]"};
  var expectedBrackets = [];
  for (var i = 0; i < s.length; i++) {
    var ch = s[i];
    if (brackets[ch]) {
      expectedBrackets.push(brackets[ch]);
    } else {
      if (goog.object.contains(brackets, ch)) {
        if (expectedBrackets.pop() != ch) {
          return false;
        }
      }
    }
  }
  return expectedBrackets.length == 0;
};
goog.html.SafeStyleSheet.concat = function(var_args) {
  var result = "";
  var addArgument = function(argument) {
    if (goog.isArray(argument)) {
      goog.array.forEach(argument, addArgument);
    } else {
      result += goog.html.SafeStyleSheet.unwrap(argument);
    }
  };
  goog.array.forEach(arguments, addArgument);
  return goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(result);
};
goog.html.SafeStyleSheet.fromConstant = function(styleSheet) {
  var styleSheetString = goog.string.Const.unwrap(styleSheet);
  if (styleSheetString.length === 0) {
    return goog.html.SafeStyleSheet.EMPTY;
  }
  goog.asserts.assert(!goog.string.internal.contains(styleSheetString, "\x3c"), "Forbidden '\x3c' character in style sheet string: " + styleSheetString);
  return goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(styleSheetString);
};
goog.html.SafeStyleSheet.prototype.getTypedStringValue = function() {
  return this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_;
};
if (goog.DEBUG) {
  goog.html.SafeStyleSheet.prototype.toString = function() {
    return "SafeStyleSheet{" + this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_ + "}";
  };
}
goog.html.SafeStyleSheet.unwrap = function(safeStyleSheet) {
  if (safeStyleSheet instanceof goog.html.SafeStyleSheet && safeStyleSheet.constructor === goog.html.SafeStyleSheet && safeStyleSheet.SAFE_STYLE_SHEET_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ === goog.html.SafeStyleSheet.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_) {
    return safeStyleSheet.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_;
  } else {
    goog.asserts.fail("expected object of type SafeStyleSheet, got '" + safeStyleSheet + "' of type " + goog.typeOf(safeStyleSheet));
    return "type_error:SafeStyleSheet";
  }
};
goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse = function(styleSheet) {
  return (new goog.html.SafeStyleSheet).initSecurityPrivateDoNotAccessOrElse_(styleSheet);
};
goog.html.SafeStyleSheet.prototype.initSecurityPrivateDoNotAccessOrElse_ = function(styleSheet) {
  this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_ = styleSheet;
  return this;
};
goog.html.SafeStyleSheet.EMPTY = goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse("");
goog.provide("goog.labs.userAgent.util");
goog.require("goog.string.internal");
goog.labs.userAgent.util.getNativeUserAgentString_ = function() {
  var navigator = goog.labs.userAgent.util.getNavigator_();
  if (navigator) {
    var userAgent = navigator.userAgent;
    if (userAgent) {
      return userAgent;
    }
  }
  return "";
};
goog.labs.userAgent.util.getNavigator_ = function() {
  return goog.global.navigator;
};
goog.labs.userAgent.util.userAgent_ = goog.labs.userAgent.util.getNativeUserAgentString_();
goog.labs.userAgent.util.setUserAgent = function(opt_userAgent) {
  goog.labs.userAgent.util.userAgent_ = opt_userAgent || goog.labs.userAgent.util.getNativeUserAgentString_();
};
goog.labs.userAgent.util.getUserAgent = function() {
  return goog.labs.userAgent.util.userAgent_;
};
goog.labs.userAgent.util.matchUserAgent = function(str) {
  var userAgent = goog.labs.userAgent.util.getUserAgent();
  return goog.string.internal.contains(userAgent, str);
};
goog.labs.userAgent.util.matchUserAgentIgnoreCase = function(str) {
  var userAgent = goog.labs.userAgent.util.getUserAgent();
  return goog.string.internal.caseInsensitiveContains(userAgent, str);
};
goog.labs.userAgent.util.extractVersionTuples = function(userAgent) {
  var versionRegExp = new RegExp("(\\w[\\w ]+)" + "/" + "([^\\s]+)" + "\\s*" + "(?:\\((.*?)\\))?", "g");
  var data = [];
  var match;
  while (match = versionRegExp.exec(userAgent)) {
    data.push([match[1], match[2], match[3] || undefined]);
  }
  return data;
};
goog.provide("goog.labs.userAgent.browser");
goog.require("goog.array");
goog.require("goog.labs.userAgent.util");
goog.require("goog.object");
goog.require("goog.string.internal");
goog.labs.userAgent.browser.matchOpera_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Opera");
};
goog.labs.userAgent.browser.matchIE_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Trident") || goog.labs.userAgent.util.matchUserAgent("MSIE");
};
goog.labs.userAgent.browser.matchEdgeHtml_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Edge");
};
goog.labs.userAgent.browser.matchEdgeChromium_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Edg/");
};
goog.labs.userAgent.browser.matchOperaChromium_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("OPR");
};
goog.labs.userAgent.browser.matchFirefox_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Firefox") || goog.labs.userAgent.util.matchUserAgent("FxiOS");
};
goog.labs.userAgent.browser.matchSafari_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Safari") && !(goog.labs.userAgent.browser.matchChrome_() || goog.labs.userAgent.browser.matchCoast_() || goog.labs.userAgent.browser.matchOpera_() || goog.labs.userAgent.browser.matchEdgeHtml_() || goog.labs.userAgent.browser.matchEdgeChromium_() || goog.labs.userAgent.browser.matchOperaChromium_() || goog.labs.userAgent.browser.matchFirefox_() || goog.labs.userAgent.browser.isSilk() || goog.labs.userAgent.util.matchUserAgent("Android"));
};
goog.labs.userAgent.browser.matchCoast_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Coast");
};
goog.labs.userAgent.browser.matchIosWebview_ = function() {
  return (goog.labs.userAgent.util.matchUserAgent("iPad") || goog.labs.userAgent.util.matchUserAgent("iPhone")) && !goog.labs.userAgent.browser.matchSafari_() && !goog.labs.userAgent.browser.matchChrome_() && !goog.labs.userAgent.browser.matchCoast_() && !goog.labs.userAgent.browser.matchFirefox_() && goog.labs.userAgent.util.matchUserAgent("AppleWebKit");
};
goog.labs.userAgent.browser.matchChrome_ = function() {
  return (goog.labs.userAgent.util.matchUserAgent("Chrome") || goog.labs.userAgent.util.matchUserAgent("CriOS")) && !goog.labs.userAgent.browser.matchEdgeHtml_();
};
goog.labs.userAgent.browser.matchAndroidBrowser_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Android") && !(goog.labs.userAgent.browser.isChrome() || goog.labs.userAgent.browser.isFirefox() || goog.labs.userAgent.browser.isOpera() || goog.labs.userAgent.browser.isSilk());
};
goog.labs.userAgent.browser.isOpera = goog.labs.userAgent.browser.matchOpera_;
goog.labs.userAgent.browser.isIE = goog.labs.userAgent.browser.matchIE_;
goog.labs.userAgent.browser.isEdge = goog.labs.userAgent.browser.matchEdgeHtml_;
goog.labs.userAgent.browser.isEdgeChromium = goog.labs.userAgent.browser.matchEdgeChromium_;
goog.labs.userAgent.browser.isOperaChromium = goog.labs.userAgent.browser.matchOperaChromium_;
goog.labs.userAgent.browser.isFirefox = goog.labs.userAgent.browser.matchFirefox_;
goog.labs.userAgent.browser.isSafari = goog.labs.userAgent.browser.matchSafari_;
goog.labs.userAgent.browser.isCoast = goog.labs.userAgent.browser.matchCoast_;
goog.labs.userAgent.browser.isIosWebview = goog.labs.userAgent.browser.matchIosWebview_;
goog.labs.userAgent.browser.isChrome = goog.labs.userAgent.browser.matchChrome_;
goog.labs.userAgent.browser.isAndroidBrowser = goog.labs.userAgent.browser.matchAndroidBrowser_;
goog.labs.userAgent.browser.isSilk = function() {
  return goog.labs.userAgent.util.matchUserAgent("Silk");
};
goog.labs.userAgent.browser.getVersion = function() {
  var userAgentString = goog.labs.userAgent.util.getUserAgent();
  if (goog.labs.userAgent.browser.isIE()) {
    return goog.labs.userAgent.browser.getIEVersion_(userAgentString);
  }
  var versionTuples = goog.labs.userAgent.util.extractVersionTuples(userAgentString);
  var versionMap = {};
  goog.array.forEach(versionTuples, function(tuple) {
    var key = tuple[0];
    var value = tuple[1];
    versionMap[key] = value;
  });
  var versionMapHasKey = goog.partial(goog.object.containsKey, versionMap);
  function lookUpValueWithKeys(keys) {
    var key = goog.array.find(keys, versionMapHasKey);
    return versionMap[key] || "";
  }
  if (goog.labs.userAgent.browser.isOpera()) {
    return lookUpValueWithKeys(["Version", "Opera"]);
  }
  if (goog.labs.userAgent.browser.isEdge()) {
    return lookUpValueWithKeys(["Edge"]);
  }
  if (goog.labs.userAgent.browser.isEdgeChromium()) {
    return lookUpValueWithKeys(["Edg"]);
  }
  if (goog.labs.userAgent.browser.isChrome()) {
    return lookUpValueWithKeys(["Chrome", "CriOS"]);
  }
  var tuple = versionTuples[2];
  return tuple && tuple[1] || "";
};
goog.labs.userAgent.browser.isVersionOrHigher = function(version) {
  return goog.string.internal.compareVersions(goog.labs.userAgent.browser.getVersion(), version) >= 0;
};
goog.labs.userAgent.browser.getIEVersion_ = function(userAgent) {
  var rv = /rv: *([\d\.]*)/.exec(userAgent);
  if (rv && rv[1]) {
    return rv[1];
  }
  var version = "";
  var msie = /MSIE +([\d\.]+)/.exec(userAgent);
  if (msie && msie[1]) {
    var tridentVersion = /Trident\/(\d.\d)/.exec(userAgent);
    if (msie[1] == "7.0") {
      if (tridentVersion && tridentVersion[1]) {
        switch(tridentVersion[1]) {
          case "4.0":
            version = "8.0";
            break;
          case "5.0":
            version = "9.0";
            break;
          case "6.0":
            version = "10.0";
            break;
          case "7.0":
            version = "11.0";
            break;
        }
      } else {
        version = "7.0";
      }
    } else {
      version = msie[1];
    }
  }
  return version;
};
goog.provide("goog.html.SafeHtml");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.dom.TagName");
goog.require("goog.dom.tags");
goog.require("goog.html.SafeScript");
goog.require("goog.html.SafeStyle");
goog.require("goog.html.SafeStyleSheet");
goog.require("goog.html.SafeUrl");
goog.require("goog.html.TrustedResourceUrl");
goog.require("goog.html.trustedtypes");
goog.require("goog.i18n.bidi.Dir");
goog.require("goog.i18n.bidi.DirectionalString");
goog.require("goog.labs.userAgent.browser");
goog.require("goog.object");
goog.require("goog.string.Const");
goog.require("goog.string.TypedString");
goog.require("goog.string.internal");
goog.html.SafeHtml = function() {
  this.privateDoNotAccessOrElseSafeHtmlWrappedValue_ = "";
  this.SAFE_HTML_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = goog.html.SafeHtml.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;
  this.dir_ = null;
};
goog.html.SafeHtml.ENABLE_ERROR_MESSAGES = goog.define("goog.html.SafeHtml.ENABLE_ERROR_MESSAGES", goog.DEBUG);
goog.html.SafeHtml.SUPPORT_STYLE_ATTRIBUTE = goog.define("goog.html.SafeHtml.SUPPORT_STYLE_ATTRIBUTE", true);
goog.html.SafeHtml.prototype.implementsGoogI18nBidiDirectionalString = true;
goog.html.SafeHtml.prototype.getDirection = function() {
  return this.dir_;
};
goog.html.SafeHtml.prototype.implementsGoogStringTypedString = true;
goog.html.SafeHtml.prototype.getTypedStringValue = function() {
  return this.privateDoNotAccessOrElseSafeHtmlWrappedValue_.toString();
};
if (goog.DEBUG) {
  goog.html.SafeHtml.prototype.toString = function() {
    return "SafeHtml{" + this.privateDoNotAccessOrElseSafeHtmlWrappedValue_ + "}";
  };
}
goog.html.SafeHtml.unwrap = function(safeHtml) {
  return goog.html.SafeHtml.unwrapTrustedHTML(safeHtml).toString();
};
goog.html.SafeHtml.unwrapTrustedHTML = function(safeHtml) {
  if (safeHtml instanceof goog.html.SafeHtml && safeHtml.constructor === goog.html.SafeHtml && safeHtml.SAFE_HTML_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ === goog.html.SafeHtml.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_) {
    return safeHtml.privateDoNotAccessOrElseSafeHtmlWrappedValue_;
  } else {
    goog.asserts.fail("expected object of type SafeHtml, got '" + safeHtml + "' of type " + goog.typeOf(safeHtml));
    return "type_error:SafeHtml";
  }
};
goog.html.SafeHtml.TextOrHtml_;
goog.html.SafeHtml.htmlEscape = function(textOrHtml) {
  if (textOrHtml instanceof goog.html.SafeHtml) {
    return textOrHtml;
  }
  var textIsObject = typeof textOrHtml == "object";
  var dir = null;
  if (textIsObject && textOrHtml.implementsGoogI18nBidiDirectionalString) {
    dir = textOrHtml.getDirection();
  }
  var textAsString;
  if (textIsObject && textOrHtml.implementsGoogStringTypedString) {
    textAsString = textOrHtml.getTypedStringValue();
  } else {
    textAsString = String(textOrHtml);
  }
  return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(goog.string.internal.htmlEscape(textAsString), dir);
};
goog.html.SafeHtml.htmlEscapePreservingNewlines = function(textOrHtml) {
  if (textOrHtml instanceof goog.html.SafeHtml) {
    return textOrHtml;
  }
  var html = goog.html.SafeHtml.htmlEscape(textOrHtml);
  return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(goog.string.internal.newLineToBr(goog.html.SafeHtml.unwrap(html)), html.getDirection());
};
goog.html.SafeHtml.htmlEscapePreservingNewlinesAndSpaces = function(textOrHtml) {
  if (textOrHtml instanceof goog.html.SafeHtml) {
    return textOrHtml;
  }
  var html = goog.html.SafeHtml.htmlEscape(textOrHtml);
  return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(goog.string.internal.whitespaceEscape(goog.html.SafeHtml.unwrap(html)), html.getDirection());
};
goog.html.SafeHtml.from = goog.html.SafeHtml.htmlEscape;
goog.html.SafeHtml.VALID_NAMES_IN_TAG_ = /^[a-zA-Z0-9-]+$/;
goog.html.SafeHtml.URL_ATTRIBUTES_ = goog.object.createSet("action", "cite", "data", "formaction", "href", "manifest", "poster", "src");
goog.html.SafeHtml.NOT_ALLOWED_TAG_NAMES_ = goog.object.createSet(goog.dom.TagName.APPLET, goog.dom.TagName.BASE, goog.dom.TagName.EMBED, goog.dom.TagName.IFRAME, goog.dom.TagName.LINK, goog.dom.TagName.MATH, goog.dom.TagName.META, goog.dom.TagName.OBJECT, goog.dom.TagName.SCRIPT, goog.dom.TagName.STYLE, goog.dom.TagName.SVG, goog.dom.TagName.TEMPLATE);
goog.html.SafeHtml.AttributeValue;
goog.html.SafeHtml.create = function(tagName, opt_attributes, opt_content) {
  goog.html.SafeHtml.verifyTagName(String(tagName));
  return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse(String(tagName), opt_attributes, opt_content);
};
goog.html.SafeHtml.verifyTagName = function(tagName) {
  if (!goog.html.SafeHtml.VALID_NAMES_IN_TAG_.test(tagName)) {
    throw new Error(goog.html.SafeHtml.ENABLE_ERROR_MESSAGES ? "Invalid tag name \x3c" + tagName + "\x3e." : "");
  }
  if (tagName.toUpperCase() in goog.html.SafeHtml.NOT_ALLOWED_TAG_NAMES_) {
    throw new Error(goog.html.SafeHtml.ENABLE_ERROR_MESSAGES ? "Tag name \x3c" + tagName + "\x3e is not allowed for SafeHtml." : "");
  }
};
goog.html.SafeHtml.createIframe = function(opt_src, opt_srcdoc, opt_attributes, opt_content) {
  if (opt_src) {
    goog.html.TrustedResourceUrl.unwrap(opt_src);
  }
  var fixedAttributes = {};
  fixedAttributes["src"] = opt_src || null;
  fixedAttributes["srcdoc"] = opt_srcdoc && goog.html.SafeHtml.unwrap(opt_srcdoc);
  var defaultAttributes = {"sandbox":""};
  var attributes = goog.html.SafeHtml.combineAttributes(fixedAttributes, defaultAttributes, opt_attributes);
  return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse("iframe", attributes, opt_content);
};
goog.html.SafeHtml.createSandboxIframe = function(opt_src, opt_srcdoc, opt_attributes, opt_content) {
  if (!goog.html.SafeHtml.canUseSandboxIframe()) {
    throw new Error(goog.html.SafeHtml.ENABLE_ERROR_MESSAGES ? "The browser does not support sandboxed iframes." : "");
  }
  var fixedAttributes = {};
  if (opt_src) {
    fixedAttributes["src"] = goog.html.SafeUrl.unwrap(goog.html.SafeUrl.sanitize(opt_src));
  } else {
    fixedAttributes["src"] = null;
  }
  fixedAttributes["srcdoc"] = opt_srcdoc || null;
  fixedAttributes["sandbox"] = "";
  var attributes = goog.html.SafeHtml.combineAttributes(fixedAttributes, {}, opt_attributes);
  return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse("iframe", attributes, opt_content);
};
goog.html.SafeHtml.canUseSandboxIframe = function() {
  return goog.global["HTMLIFrameElement"] && "sandbox" in goog.global["HTMLIFrameElement"].prototype;
};
goog.html.SafeHtml.createScriptSrc = function(src, opt_attributes) {
  goog.html.TrustedResourceUrl.unwrap(src);
  var fixedAttributes = {"src":src};
  var defaultAttributes = {};
  var attributes = goog.html.SafeHtml.combineAttributes(fixedAttributes, defaultAttributes, opt_attributes);
  return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse("script", attributes);
};
goog.html.SafeHtml.createScript = function(script, opt_attributes) {
  for (var attr in opt_attributes) {
    var attrLower = attr.toLowerCase();
    if (attrLower == "language" || attrLower == "src" || attrLower == "text" || attrLower == "type") {
      throw new Error(goog.html.SafeHtml.ENABLE_ERROR_MESSAGES ? 'Cannot set "' + attrLower + '" attribute' : "");
    }
  }
  var content = "";
  script = goog.array.concat(script);
  for (var i = 0; i < script.length; i++) {
    content += goog.html.SafeScript.unwrap(script[i]);
  }
  var htmlContent = goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(content, goog.i18n.bidi.Dir.NEUTRAL);
  return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse("script", opt_attributes, htmlContent);
};
goog.html.SafeHtml.createStyle = function(styleSheet, opt_attributes) {
  var fixedAttributes = {"type":"text/css"};
  var defaultAttributes = {};
  var attributes = goog.html.SafeHtml.combineAttributes(fixedAttributes, defaultAttributes, opt_attributes);
  var content = "";
  styleSheet = goog.array.concat(styleSheet);
  for (var i = 0; i < styleSheet.length; i++) {
    content += goog.html.SafeStyleSheet.unwrap(styleSheet[i]);
  }
  var htmlContent = goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(content, goog.i18n.bidi.Dir.NEUTRAL);
  return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse("style", attributes, htmlContent);
};
goog.html.SafeHtml.createMetaRefresh = function(url, opt_secs) {
  var unwrappedUrl = goog.html.SafeUrl.unwrap(goog.html.SafeUrl.sanitize(url));
  if (goog.labs.userAgent.browser.isIE() || goog.labs.userAgent.browser.isEdge()) {
    if (goog.string.internal.contains(unwrappedUrl, ";")) {
      unwrappedUrl = "'" + unwrappedUrl.replace(/'/g, "%27") + "'";
    }
  }
  var attributes = {"http-equiv":"refresh", "content":(opt_secs || 0) + "; url\x3d" + unwrappedUrl};
  return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse("meta", attributes);
};
goog.html.SafeHtml.getAttrNameAndValue_ = function(tagName, name, value) {
  if (value instanceof goog.string.Const) {
    value = goog.string.Const.unwrap(value);
  } else {
    if (name.toLowerCase() == "style") {
      if (goog.html.SafeHtml.SUPPORT_STYLE_ATTRIBUTE) {
        value = goog.html.SafeHtml.getStyleValue_(value);
      } else {
        throw new Error(goog.html.SafeHtml.ENABLE_ERROR_MESSAGES ? 'Attribute "style" not supported.' : "");
      }
    } else {
      if (/^on/i.test(name)) {
        throw new Error(goog.html.SafeHtml.ENABLE_ERROR_MESSAGES ? 'Attribute "' + name + '" requires goog.string.Const value, "' + value + '" given.' : "");
      } else {
        if (name.toLowerCase() in goog.html.SafeHtml.URL_ATTRIBUTES_) {
          if (value instanceof goog.html.TrustedResourceUrl) {
            value = goog.html.TrustedResourceUrl.unwrap(value);
          } else {
            if (value instanceof goog.html.SafeUrl) {
              value = goog.html.SafeUrl.unwrap(value);
            } else {
              if (typeof value === "string") {
                value = goog.html.SafeUrl.sanitize(value).getTypedStringValue();
              } else {
                throw new Error(goog.html.SafeHtml.ENABLE_ERROR_MESSAGES ? 'Attribute "' + name + '" on tag "' + tagName + '" requires goog.html.SafeUrl, goog.string.Const, or' + ' string, value "' + value + '" given.' : "");
              }
            }
          }
        }
      }
    }
  }
  if (value.implementsGoogStringTypedString) {
    value = value.getTypedStringValue();
  }
  goog.asserts.assert(typeof value === "string" || typeof value === "number", "String or number value expected, got " + typeof value + " with value: " + value);
  return name + '\x3d"' + goog.string.internal.htmlEscape(String(value)) + '"';
};
goog.html.SafeHtml.getStyleValue_ = function(value) {
  if (!goog.isObject(value)) {
    throw new Error(goog.html.SafeHtml.ENABLE_ERROR_MESSAGES ? 'The "style" attribute requires goog.html.SafeStyle or map ' + "of style properties, " + typeof value + " given: " + value : "");
  }
  if (!(value instanceof goog.html.SafeStyle)) {
    value = goog.html.SafeStyle.create(value);
  }
  return goog.html.SafeStyle.unwrap(value);
};
goog.html.SafeHtml.createWithDir = function(dir, tagName, opt_attributes, opt_content) {
  var html = goog.html.SafeHtml.create(tagName, opt_attributes, opt_content);
  html.dir_ = dir;
  return html;
};
goog.html.SafeHtml.join = function(separator, parts) {
  var separatorHtml = goog.html.SafeHtml.htmlEscape(separator);
  var dir = separatorHtml.getDirection();
  var content = [];
  var addArgument = function(argument) {
    if (goog.isArray(argument)) {
      goog.array.forEach(argument, addArgument);
    } else {
      var html = goog.html.SafeHtml.htmlEscape(argument);
      content.push(goog.html.SafeHtml.unwrap(html));
      var htmlDir = html.getDirection();
      if (dir == goog.i18n.bidi.Dir.NEUTRAL) {
        dir = htmlDir;
      } else {
        if (htmlDir != goog.i18n.bidi.Dir.NEUTRAL && dir != htmlDir) {
          dir = null;
        }
      }
    }
  };
  goog.array.forEach(parts, addArgument);
  return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(content.join(goog.html.SafeHtml.unwrap(separatorHtml)), dir);
};
goog.html.SafeHtml.concat = function(var_args) {
  return goog.html.SafeHtml.join(goog.html.SafeHtml.EMPTY, Array.prototype.slice.call(arguments));
};
goog.html.SafeHtml.concatWithDir = function(dir, var_args) {
  var html = goog.html.SafeHtml.concat(goog.array.slice(arguments, 1));
  html.dir_ = dir;
  return html;
};
goog.html.SafeHtml.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = {};
goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse = function(html, dir) {
  return (new goog.html.SafeHtml).initSecurityPrivateDoNotAccessOrElse_(html, dir);
};
goog.html.SafeHtml.prototype.initSecurityPrivateDoNotAccessOrElse_ = function(html, dir) {
  this.privateDoNotAccessOrElseSafeHtmlWrappedValue_ = goog.html.trustedtypes.PRIVATE_DO_NOT_ACCESS_OR_ELSE_POLICY ? goog.html.trustedtypes.PRIVATE_DO_NOT_ACCESS_OR_ELSE_POLICY.createHTML(html) : html;
  this.dir_ = dir;
  return this;
};
goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse = function(tagName, opt_attributes, opt_content) {
  var dir = null;
  var result = "\x3c" + tagName;
  result += goog.html.SafeHtml.stringifyAttributes(tagName, opt_attributes);
  var content = opt_content;
  if (content == null) {
    content = [];
  } else {
    if (!goog.isArray(content)) {
      content = [content];
    }
  }
  if (goog.dom.tags.isVoidTag(tagName.toLowerCase())) {
    goog.asserts.assert(!content.length, "Void tag \x3c" + tagName + "\x3e does not allow content.");
    result += "\x3e";
  } else {
    var html = goog.html.SafeHtml.concat(content);
    result += "\x3e" + goog.html.SafeHtml.unwrap(html) + "\x3c/" + tagName + "\x3e";
    dir = html.getDirection();
  }
  var dirAttribute = opt_attributes && opt_attributes["dir"];
  if (dirAttribute) {
    if (/^(ltr|rtl|auto)$/i.test(dirAttribute)) {
      dir = goog.i18n.bidi.Dir.NEUTRAL;
    } else {
      dir = null;
    }
  }
  return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(result, dir);
};
goog.html.SafeHtml.stringifyAttributes = function(tagName, opt_attributes) {
  var result = "";
  if (opt_attributes) {
    for (var name in opt_attributes) {
      if (!goog.html.SafeHtml.VALID_NAMES_IN_TAG_.test(name)) {
        throw new Error(goog.html.SafeHtml.ENABLE_ERROR_MESSAGES ? 'Invalid attribute name "' + name + '".' : "");
      }
      var value = opt_attributes[name];
      if (value == null) {
        continue;
      }
      result += " " + goog.html.SafeHtml.getAttrNameAndValue_(tagName, name, value);
    }
  }
  return result;
};
goog.html.SafeHtml.combineAttributes = function(fixedAttributes, defaultAttributes, opt_attributes) {
  var combinedAttributes = {};
  var name;
  for (name in fixedAttributes) {
    goog.asserts.assert(name.toLowerCase() == name, "Must be lower case");
    combinedAttributes[name] = fixedAttributes[name];
  }
  for (name in defaultAttributes) {
    goog.asserts.assert(name.toLowerCase() == name, "Must be lower case");
    combinedAttributes[name] = defaultAttributes[name];
  }
  if (opt_attributes) {
    for (name in opt_attributes) {
      var nameLower = name.toLowerCase();
      if (nameLower in fixedAttributes) {
        throw new Error(goog.html.SafeHtml.ENABLE_ERROR_MESSAGES ? 'Cannot override "' + nameLower + '" attribute, got "' + name + '" with value "' + opt_attributes[name] + '"' : "");
      }
      if (nameLower in defaultAttributes) {
        delete combinedAttributes[nameLower];
      }
      combinedAttributes[name] = opt_attributes[name];
    }
  }
  return combinedAttributes;
};
goog.html.SafeHtml.DOCTYPE_HTML = goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse("\x3c!DOCTYPE html\x3e", goog.i18n.bidi.Dir.NEUTRAL);
goog.html.SafeHtml.EMPTY = goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse("", goog.i18n.bidi.Dir.NEUTRAL);
goog.html.SafeHtml.BR = goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse("\x3cbr\x3e", goog.i18n.bidi.Dir.NEUTRAL);
goog.provide("goog.html.uncheckedconversions");
goog.require("goog.asserts");
goog.require("goog.html.SafeHtml");
goog.require("goog.html.SafeScript");
goog.require("goog.html.SafeStyle");
goog.require("goog.html.SafeStyleSheet");
goog.require("goog.html.SafeUrl");
goog.require("goog.html.TrustedResourceUrl");
goog.require("goog.string.Const");
goog.require("goog.string.internal");
goog.html.uncheckedconversions.safeHtmlFromStringKnownToSatisfyTypeContract = function(justification, html, opt_dir) {
  goog.asserts.assertString(goog.string.Const.unwrap(justification), "must provide justification");
  goog.asserts.assert(!goog.string.internal.isEmptyOrWhitespace(goog.string.Const.unwrap(justification)), "must provide non-empty justification");
  return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(html, opt_dir || null);
};
goog.html.uncheckedconversions.safeScriptFromStringKnownToSatisfyTypeContract = function(justification, script) {
  goog.asserts.assertString(goog.string.Const.unwrap(justification), "must provide justification");
  goog.asserts.assert(!goog.string.internal.isEmptyOrWhitespace(goog.string.Const.unwrap(justification)), "must provide non-empty justification");
  return goog.html.SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse(script);
};
goog.html.uncheckedconversions.safeStyleFromStringKnownToSatisfyTypeContract = function(justification, style) {
  goog.asserts.assertString(goog.string.Const.unwrap(justification), "must provide justification");
  goog.asserts.assert(!goog.string.internal.isEmptyOrWhitespace(goog.string.Const.unwrap(justification)), "must provide non-empty justification");
  return goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(style);
};
goog.html.uncheckedconversions.safeStyleSheetFromStringKnownToSatisfyTypeContract = function(justification, styleSheet) {
  goog.asserts.assertString(goog.string.Const.unwrap(justification), "must provide justification");
  goog.asserts.assert(!goog.string.internal.isEmptyOrWhitespace(goog.string.Const.unwrap(justification)), "must provide non-empty justification");
  return goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(styleSheet);
};
goog.html.uncheckedconversions.safeUrlFromStringKnownToSatisfyTypeContract = function(justification, url) {
  goog.asserts.assertString(goog.string.Const.unwrap(justification), "must provide justification");
  goog.asserts.assert(!goog.string.internal.isEmptyOrWhitespace(goog.string.Const.unwrap(justification)), "must provide non-empty justification");
  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(url);
};
goog.html.uncheckedconversions.trustedResourceUrlFromStringKnownToSatisfyTypeContract = function(justification, url) {
  goog.asserts.assertString(goog.string.Const.unwrap(justification), "must provide justification");
  goog.asserts.assert(!goog.string.internal.isEmptyOrWhitespace(goog.string.Const.unwrap(justification)), "must provide non-empty justification");
  return goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(url);
};
goog.provide("goog.dom.safe");
goog.provide("goog.dom.safe.InsertAdjacentHtmlPosition");
goog.require("goog.asserts");
goog.require("goog.dom.asserts");
goog.require("goog.functions");
goog.require("goog.html.SafeHtml");
goog.require("goog.html.SafeScript");
goog.require("goog.html.SafeStyle");
goog.require("goog.html.SafeUrl");
goog.require("goog.html.TrustedResourceUrl");
goog.require("goog.html.uncheckedconversions");
goog.require("goog.string.Const");
goog.require("goog.string.internal");
goog.dom.safe.InsertAdjacentHtmlPosition = {AFTERBEGIN:"afterbegin", AFTEREND:"afterend", BEFOREBEGIN:"beforebegin", BEFOREEND:"beforeend"};
goog.dom.safe.insertAdjacentHtml = function(node, position, html) {
  node.insertAdjacentHTML(position, goog.html.SafeHtml.unwrapTrustedHTML(html));
};
goog.dom.safe.SET_INNER_HTML_DISALLOWED_TAGS_ = {"MATH":true, "SCRIPT":true, "STYLE":true, "SVG":true, "TEMPLATE":true};
goog.dom.safe.isInnerHtmlCleanupRecursive_ = goog.functions.cacheReturnValue(function() {
  if (goog.DEBUG && typeof document === "undefined") {
    return false;
  }
  var div = document.createElement("div");
  var childDiv = document.createElement("div");
  childDiv.appendChild(document.createElement("div"));
  div.appendChild(childDiv);
  if (goog.DEBUG && !div.firstChild) {
    return false;
  }
  var innerChild = div.firstChild.firstChild;
  div.innerHTML = goog.html.SafeHtml.unwrapTrustedHTML(goog.html.SafeHtml.EMPTY);
  return !innerChild.parentElement;
});
goog.dom.safe.unsafeSetInnerHtmlDoNotUseOrElse = function(elem, html) {
  if (goog.dom.safe.isInnerHtmlCleanupRecursive_()) {
    while (elem.lastChild) {
      elem.removeChild(elem.lastChild);
    }
  }
  elem.innerHTML = goog.html.SafeHtml.unwrapTrustedHTML(html);
};
goog.dom.safe.setInnerHtml = function(elem, html) {
  if (goog.asserts.ENABLE_ASSERTS) {
    var tagName = elem.tagName.toUpperCase();
    if (goog.dom.safe.SET_INNER_HTML_DISALLOWED_TAGS_[tagName]) {
      throw new Error("goog.dom.safe.setInnerHtml cannot be used to set content of " + elem.tagName + ".");
    }
  }
  goog.dom.safe.unsafeSetInnerHtmlDoNotUseOrElse(elem, html);
};
goog.dom.safe.setOuterHtml = function(elem, html) {
  elem.outerHTML = goog.html.SafeHtml.unwrapTrustedHTML(html);
};
goog.dom.safe.setFormElementAction = function(form, url) {
  var safeUrl;
  if (url instanceof goog.html.SafeUrl) {
    safeUrl = url;
  } else {
    safeUrl = goog.html.SafeUrl.sanitizeAssertUnchanged(url);
  }
  goog.dom.asserts.assertIsHTMLFormElement(form).action = goog.html.SafeUrl.unwrap(safeUrl);
};
goog.dom.safe.setButtonFormAction = function(button, url) {
  var safeUrl;
  if (url instanceof goog.html.SafeUrl) {
    safeUrl = url;
  } else {
    safeUrl = goog.html.SafeUrl.sanitizeAssertUnchanged(url);
  }
  goog.dom.asserts.assertIsHTMLButtonElement(button).formAction = goog.html.SafeUrl.unwrap(safeUrl);
};
goog.dom.safe.setInputFormAction = function(input, url) {
  var safeUrl;
  if (url instanceof goog.html.SafeUrl) {
    safeUrl = url;
  } else {
    safeUrl = goog.html.SafeUrl.sanitizeAssertUnchanged(url);
  }
  goog.dom.asserts.assertIsHTMLInputElement(input).formAction = goog.html.SafeUrl.unwrap(safeUrl);
};
goog.dom.safe.setStyle = function(elem, style) {
  elem.style.cssText = goog.html.SafeStyle.unwrap(style);
};
goog.dom.safe.documentWrite = function(doc, html) {
  doc.write(goog.html.SafeHtml.unwrapTrustedHTML(html));
};
goog.dom.safe.setAnchorHref = function(anchor, url) {
  goog.dom.asserts.assertIsHTMLAnchorElement(anchor);
  var safeUrl;
  if (url instanceof goog.html.SafeUrl) {
    safeUrl = url;
  } else {
    safeUrl = goog.html.SafeUrl.sanitizeAssertUnchanged(url);
  }
  anchor.href = goog.html.SafeUrl.unwrap(safeUrl);
};
goog.dom.safe.setImageSrc = function(imageElement, url) {
  goog.dom.asserts.assertIsHTMLImageElement(imageElement);
  var safeUrl;
  if (url instanceof goog.html.SafeUrl) {
    safeUrl = url;
  } else {
    var allowDataUrl = /^data:image\//i.test(url);
    safeUrl = goog.html.SafeUrl.sanitizeAssertUnchanged(url, allowDataUrl);
  }
  imageElement.src = goog.html.SafeUrl.unwrap(safeUrl);
};
goog.dom.safe.setAudioSrc = function(audioElement, url) {
  goog.dom.asserts.assertIsHTMLAudioElement(audioElement);
  var safeUrl;
  if (url instanceof goog.html.SafeUrl) {
    safeUrl = url;
  } else {
    var allowDataUrl = /^data:audio\//i.test(url);
    safeUrl = goog.html.SafeUrl.sanitizeAssertUnchanged(url, allowDataUrl);
  }
  audioElement.src = goog.html.SafeUrl.unwrap(safeUrl);
};
goog.dom.safe.setVideoSrc = function(videoElement, url) {
  goog.dom.asserts.assertIsHTMLVideoElement(videoElement);
  var safeUrl;
  if (url instanceof goog.html.SafeUrl) {
    safeUrl = url;
  } else {
    var allowDataUrl = /^data:video\//i.test(url);
    safeUrl = goog.html.SafeUrl.sanitizeAssertUnchanged(url, allowDataUrl);
  }
  videoElement.src = goog.html.SafeUrl.unwrap(safeUrl);
};
goog.dom.safe.setEmbedSrc = function(embed, url) {
  goog.dom.asserts.assertIsHTMLEmbedElement(embed);
  embed.src = goog.html.TrustedResourceUrl.unwrapTrustedScriptURL(url);
};
goog.dom.safe.setFrameSrc = function(frame, url) {
  goog.dom.asserts.assertIsHTMLFrameElement(frame);
  frame.src = goog.html.TrustedResourceUrl.unwrap(url);
};
goog.dom.safe.setIframeSrc = function(iframe, url) {
  goog.dom.asserts.assertIsHTMLIFrameElement(iframe);
  iframe.src = goog.html.TrustedResourceUrl.unwrap(url);
};
goog.dom.safe.setIframeSrcdoc = function(iframe, html) {
  goog.dom.asserts.assertIsHTMLIFrameElement(iframe);
  iframe.srcdoc = goog.html.SafeHtml.unwrapTrustedHTML(html);
};
goog.dom.safe.setLinkHrefAndRel = function(link, url, rel) {
  goog.dom.asserts.assertIsHTMLLinkElement(link);
  link.rel = rel;
  if (goog.string.internal.caseInsensitiveContains(rel, "stylesheet")) {
    goog.asserts.assert(url instanceof goog.html.TrustedResourceUrl, 'URL must be TrustedResourceUrl because "rel" contains "stylesheet"');
    link.href = goog.html.TrustedResourceUrl.unwrap(url);
  } else {
    if (url instanceof goog.html.TrustedResourceUrl) {
      link.href = goog.html.TrustedResourceUrl.unwrap(url);
    } else {
      if (url instanceof goog.html.SafeUrl) {
        link.href = goog.html.SafeUrl.unwrap(url);
      } else {
        link.href = goog.html.SafeUrl.unwrap(goog.html.SafeUrl.sanitizeAssertUnchanged(url));
      }
    }
  }
};
goog.dom.safe.setObjectData = function(object, url) {
  goog.dom.asserts.assertIsHTMLObjectElement(object);
  object.data = goog.html.TrustedResourceUrl.unwrapTrustedScriptURL(url);
};
goog.dom.safe.setScriptSrc = function(script, url) {
  goog.dom.asserts.assertIsHTMLScriptElement(script);
  script.src = goog.html.TrustedResourceUrl.unwrapTrustedScriptURL(url);
  var nonce = goog.getScriptNonce();
  if (nonce) {
    script.setAttribute("nonce", nonce);
  }
};
goog.dom.safe.setScriptContent = function(script, content) {
  goog.dom.asserts.assertIsHTMLScriptElement(script);
  script.text = goog.html.SafeScript.unwrapTrustedScript(content);
  var nonce = goog.getScriptNonce();
  if (nonce) {
    script.setAttribute("nonce", nonce);
  }
};
goog.dom.safe.setLocationHref = function(loc, url) {
  goog.dom.asserts.assertIsLocation(loc);
  var safeUrl;
  if (url instanceof goog.html.SafeUrl) {
    safeUrl = url;
  } else {
    safeUrl = goog.html.SafeUrl.sanitizeAssertUnchanged(url);
  }
  loc.href = goog.html.SafeUrl.unwrap(safeUrl);
};
goog.dom.safe.assignLocation = function(loc, url) {
  goog.dom.asserts.assertIsLocation(loc);
  var safeUrl;
  if (url instanceof goog.html.SafeUrl) {
    safeUrl = url;
  } else {
    safeUrl = goog.html.SafeUrl.sanitizeAssertUnchanged(url);
  }
  loc.assign(goog.html.SafeUrl.unwrap(safeUrl));
};
goog.dom.safe.replaceLocation = function(loc, url) {
  goog.dom.asserts.assertIsLocation(loc);
  var safeUrl;
  if (url instanceof goog.html.SafeUrl) {
    safeUrl = url;
  } else {
    safeUrl = goog.html.SafeUrl.sanitizeAssertUnchanged(url);
  }
  loc.replace(goog.html.SafeUrl.unwrap(safeUrl));
};
goog.dom.safe.openInWindow = function(url, opt_openerWin, opt_name, opt_specs, opt_replace) {
  var safeUrl;
  if (url instanceof goog.html.SafeUrl) {
    safeUrl = url;
  } else {
    safeUrl = goog.html.SafeUrl.sanitizeAssertUnchanged(url);
  }
  var win = opt_openerWin || goog.global;
  return win.open(goog.html.SafeUrl.unwrap(safeUrl), opt_name ? goog.string.Const.unwrap(opt_name) : "", opt_specs, opt_replace);
};
goog.dom.safe.parseFromStringHtml = function(parser, html) {
  return goog.dom.safe.parseFromString(parser, html, "text/html");
};
goog.dom.safe.parseFromString = function(parser, content, type) {
  return parser.parseFromString(goog.html.SafeHtml.unwrapTrustedHTML(content), type);
};
goog.dom.safe.createImageFromBlob = function(blob) {
  if (!/^image\/.*/g.test(blob.type)) {
    throw new Error("goog.dom.safe.createImageFromBlob only accepts MIME type image/.*.");
  }
  var objectUrl = goog.global.URL.createObjectURL(blob);
  var image = new goog.global.Image;
  image.onload = function() {
    goog.global.URL.revokeObjectURL(objectUrl);
  };
  goog.dom.safe.setImageSrc(image, goog.html.uncheckedconversions.safeUrlFromStringKnownToSatisfyTypeContract(goog.string.Const.from("Image blob URL."), objectUrl));
  return image;
};
goog.provide("goog.string");
goog.provide("goog.string.Unicode");
goog.require("goog.dom.safe");
goog.require("goog.html.uncheckedconversions");
goog.require("goog.string.Const");
goog.require("goog.string.internal");
goog.string.DETECT_DOUBLE_ESCAPING = goog.define("goog.string.DETECT_DOUBLE_ESCAPING", false);
goog.string.FORCE_NON_DOM_HTML_UNESCAPING = goog.define("goog.string.FORCE_NON_DOM_HTML_UNESCAPING", false);
goog.string.Unicode = {NBSP:" "};
goog.string.startsWith = goog.string.internal.startsWith;
goog.string.endsWith = goog.string.internal.endsWith;
goog.string.caseInsensitiveStartsWith = goog.string.internal.caseInsensitiveStartsWith;
goog.string.caseInsensitiveEndsWith = goog.string.internal.caseInsensitiveEndsWith;
goog.string.caseInsensitiveEquals = goog.string.internal.caseInsensitiveEquals;
goog.string.subs = function(str, var_args) {
  var splitParts = str.split("%s");
  var returnString = "";
  var subsArguments = Array.prototype.slice.call(arguments, 1);
  while (subsArguments.length && splitParts.length > 1) {
    returnString += splitParts.shift() + subsArguments.shift();
  }
  return returnString + splitParts.join("%s");
};
goog.string.collapseWhitespace = function(str) {
  return str.replace(/[\s\xa0]+/g, " ").replace(/^\s+|\s+$/g, "");
};
goog.string.isEmptyOrWhitespace = goog.string.internal.isEmptyOrWhitespace;
goog.string.isEmptyString = function(str) {
  return str.length == 0;
};
goog.string.isEmpty = goog.string.isEmptyOrWhitespace;
goog.string.isEmptyOrWhitespaceSafe = function(str) {
  return goog.string.isEmptyOrWhitespace(goog.string.makeSafe(str));
};
goog.string.isEmptySafe = goog.string.isEmptyOrWhitespaceSafe;
goog.string.isBreakingWhitespace = function(str) {
  return !/[^\t\n\r ]/.test(str);
};
goog.string.isAlpha = function(str) {
  return !/[^a-zA-Z]/.test(str);
};
goog.string.isNumeric = function(str) {
  return !/[^0-9]/.test(str);
};
goog.string.isAlphaNumeric = function(str) {
  return !/[^a-zA-Z0-9]/.test(str);
};
goog.string.isSpace = function(ch) {
  return ch == " ";
};
goog.string.isUnicodeChar = function(ch) {
  return ch.length == 1 && ch >= " " && ch <= "~" || ch >= "" && ch <= "�";
};
goog.string.stripNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)+/g, " ");
};
goog.string.canonicalizeNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)/g, "\n");
};
goog.string.normalizeWhitespace = function(str) {
  return str.replace(/\xa0|\s/g, " ");
};
goog.string.normalizeSpaces = function(str) {
  return str.replace(/\xa0|[ \t]+/g, " ");
};
goog.string.collapseBreakingSpaces = function(str) {
  return str.replace(/[\t\r\n ]+/g, " ").replace(/^[\t\r\n ]+|[\t\r\n ]+$/g, "");
};
goog.string.trim = goog.string.internal.trim;
goog.string.trimLeft = function(str) {
  return str.replace(/^[\s\xa0]+/, "");
};
goog.string.trimRight = function(str) {
  return str.replace(/[\s\xa0]+$/, "");
};
goog.string.caseInsensitiveCompare = goog.string.internal.caseInsensitiveCompare;
goog.string.numberAwareCompare_ = function(str1, str2, tokenizerRegExp) {
  if (str1 == str2) {
    return 0;
  }
  if (!str1) {
    return -1;
  }
  if (!str2) {
    return 1;
  }
  var tokens1 = str1.toLowerCase().match(tokenizerRegExp);
  var tokens2 = str2.toLowerCase().match(tokenizerRegExp);
  var count = Math.min(tokens1.length, tokens2.length);
  for (var i = 0; i < count; i++) {
    var a = tokens1[i];
    var b = tokens2[i];
    if (a != b) {
      var num1 = parseInt(a, 10);
      if (!isNaN(num1)) {
        var num2 = parseInt(b, 10);
        if (!isNaN(num2) && num1 - num2) {
          return num1 - num2;
        }
      }
      return a < b ? -1 : 1;
    }
  }
  if (tokens1.length != tokens2.length) {
    return tokens1.length - tokens2.length;
  }
  return str1 < str2 ? -1 : 1;
};
goog.string.intAwareCompare = function(str1, str2) {
  return goog.string.numberAwareCompare_(str1, str2, /\d+|\D+/g);
};
goog.string.floatAwareCompare = function(str1, str2) {
  return goog.string.numberAwareCompare_(str1, str2, /\d+|\.\d+|\D+/g);
};
goog.string.numerateCompare = goog.string.floatAwareCompare;
goog.string.urlEncode = function(str) {
  return encodeURIComponent(String(str));
};
goog.string.urlDecode = function(str) {
  return decodeURIComponent(str.replace(/\+/g, " "));
};
goog.string.newLineToBr = goog.string.internal.newLineToBr;
goog.string.htmlEscape = function(str, opt_isLikelyToContainHtmlChars) {
  str = goog.string.internal.htmlEscape(str, opt_isLikelyToContainHtmlChars);
  if (goog.string.DETECT_DOUBLE_ESCAPING) {
    str = str.replace(goog.string.E_RE_, "\x26#101;");
  }
  return str;
};
goog.string.E_RE_ = /e/g;
goog.string.unescapeEntities = function(str) {
  if (goog.string.contains(str, "\x26")) {
    if (!goog.string.FORCE_NON_DOM_HTML_UNESCAPING && "document" in goog.global) {
      return goog.string.unescapeEntitiesUsingDom_(str);
    } else {
      return goog.string.unescapePureXmlEntities_(str);
    }
  }
  return str;
};
goog.string.unescapeEntitiesWithDocument = function(str, document) {
  if (goog.string.contains(str, "\x26")) {
    return goog.string.unescapeEntitiesUsingDom_(str, document);
  }
  return str;
};
goog.string.unescapeEntitiesUsingDom_ = function(str, opt_document) {
  var seen = {"\x26amp;":"\x26", "\x26lt;":"\x3c", "\x26gt;":"\x3e", "\x26quot;":'"'};
  var div;
  if (opt_document) {
    div = opt_document.createElement("div");
  } else {
    div = goog.global.document.createElement("div");
  }
  return str.replace(goog.string.HTML_ENTITY_PATTERN_, function(s, entity) {
    var value = seen[s];
    if (value) {
      return value;
    }
    if (entity.charAt(0) == "#") {
      var n = Number("0" + entity.substr(1));
      if (!isNaN(n)) {
        value = String.fromCharCode(n);
      }
    }
    if (!value) {
      goog.dom.safe.setInnerHtml(div, goog.html.uncheckedconversions.safeHtmlFromStringKnownToSatisfyTypeContract(goog.string.Const.from("Single HTML entity."), s + " "));
      value = div.firstChild.nodeValue.slice(0, -1);
    }
    return seen[s] = value;
  });
};
goog.string.unescapePureXmlEntities_ = function(str) {
  return str.replace(/&([^;]+);/g, function(s, entity) {
    switch(entity) {
      case "amp":
        return "\x26";
      case "lt":
        return "\x3c";
      case "gt":
        return "\x3e";
      case "quot":
        return '"';
      default:
        if (entity.charAt(0) == "#") {
          var n = Number("0" + entity.substr(1));
          if (!isNaN(n)) {
            return String.fromCharCode(n);
          }
        }
        return s;
    }
  });
};
goog.string.HTML_ENTITY_PATTERN_ = /&([^;\s<&]+);?/g;
goog.string.whitespaceEscape = function(str, opt_xml) {
  return goog.string.newLineToBr(str.replace(/  /g, " \x26#160;"), opt_xml);
};
goog.string.preserveSpaces = function(str) {
  return str.replace(/(^|[\n ]) /g, "$1" + goog.string.Unicode.NBSP);
};
goog.string.stripQuotes = function(str, quoteChars) {
  var length = quoteChars.length;
  for (var i = 0; i < length; i++) {
    var quoteChar = length == 1 ? quoteChars : quoteChars.charAt(i);
    if (str.charAt(0) == quoteChar && str.charAt(str.length - 1) == quoteChar) {
      return str.substring(1, str.length - 1);
    }
  }
  return str;
};
goog.string.truncate = function(str, chars, opt_protectEscapedCharacters) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (str.length > chars) {
    str = str.substring(0, chars - 3) + "...";
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.truncateMiddle = function(str, chars, opt_protectEscapedCharacters, opt_trailingChars) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (opt_trailingChars && str.length > chars) {
    if (opt_trailingChars > chars) {
      opt_trailingChars = chars;
    }
    var endPoint = str.length - opt_trailingChars;
    var startPoint = chars - opt_trailingChars;
    str = str.substring(0, startPoint) + "..." + str.substring(endPoint);
  } else {
    if (str.length > chars) {
      var half = Math.floor(chars / 2);
      var endPos = str.length - half;
      half += chars % 2;
      str = str.substring(0, half) + "..." + str.substring(endPos);
    }
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.specialEscapeChars_ = {"\x00":"\\0", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t", "\x0B":"\\x0B", '"':'\\"', "\\":"\\\\", "\x3c":"\\u003C"};
goog.string.jsEscapeCache_ = {"'":"\\'"};
goog.string.quote = function(s) {
  s = String(s);
  var sb = ['"'];
  for (var i = 0; i < s.length; i++) {
    var ch = s.charAt(i);
    var cc = ch.charCodeAt(0);
    sb[i + 1] = goog.string.specialEscapeChars_[ch] || (cc > 31 && cc < 127 ? ch : goog.string.escapeChar(ch));
  }
  sb.push('"');
  return sb.join("");
};
goog.string.escapeString = function(str) {
  var sb = [];
  for (var i = 0; i < str.length; i++) {
    sb[i] = goog.string.escapeChar(str.charAt(i));
  }
  return sb.join("");
};
goog.string.escapeChar = function(c) {
  if (c in goog.string.jsEscapeCache_) {
    return goog.string.jsEscapeCache_[c];
  }
  if (c in goog.string.specialEscapeChars_) {
    return goog.string.jsEscapeCache_[c] = goog.string.specialEscapeChars_[c];
  }
  var rv = c;
  var cc = c.charCodeAt(0);
  if (cc > 31 && cc < 127) {
    rv = c;
  } else {
    if (cc < 256) {
      rv = "\\x";
      if (cc < 16 || cc > 256) {
        rv += "0";
      }
    } else {
      rv = "\\u";
      if (cc < 4096) {
        rv += "0";
      }
    }
    rv += cc.toString(16).toUpperCase();
  }
  return goog.string.jsEscapeCache_[c] = rv;
};
goog.string.contains = goog.string.internal.contains;
goog.string.caseInsensitiveContains = goog.string.internal.caseInsensitiveContains;
goog.string.countOf = function(s, ss) {
  return s && ss ? s.split(ss).length - 1 : 0;
};
goog.string.removeAt = function(s, index, stringLength) {
  var resultStr = s;
  if (index >= 0 && index < s.length && stringLength > 0) {
    resultStr = s.substr(0, index) + s.substr(index + stringLength, s.length - index - stringLength);
  }
  return resultStr;
};
goog.string.remove = function(str, substr) {
  return str.replace(substr, "");
};
goog.string.removeAll = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "g");
  return s.replace(re, "");
};
goog.string.replaceAll = function(s, ss, replacement) {
  var re = new RegExp(goog.string.regExpEscape(ss), "g");
  return s.replace(re, replacement.replace(/\$/g, "$$$$"));
};
goog.string.regExpEscape = function(s) {
  return String(s).replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, "\\$1").replace(/\x08/g, "\\x08");
};
goog.string.repeat = String.prototype.repeat ? function(string, length) {
  return string.repeat(length);
} : function(string, length) {
  return (new Array(length + 1)).join(string);
};
goog.string.padNumber = function(num, length, opt_precision) {
  var s = opt_precision !== undefined ? num.toFixed(opt_precision) : String(num);
  var index = s.indexOf(".");
  if (index == -1) {
    index = s.length;
  }
  return goog.string.repeat("0", Math.max(0, length - index)) + s;
};
goog.string.makeSafe = function(obj) {
  return obj == null ? "" : String(obj);
};
goog.string.buildString = function(var_args) {
  return Array.prototype.join.call(arguments, "");
};
goog.string.getRandomString = function() {
  var x = 2147483648;
  return Math.floor(Math.random() * x).toString(36) + Math.abs(Math.floor(Math.random() * x) ^ goog.now()).toString(36);
};
goog.string.compareVersions = goog.string.internal.compareVersions;
goog.string.hashCode = function(str) {
  var result = 0;
  for (var i = 0; i < str.length; ++i) {
    result = 31 * result + str.charCodeAt(i) >>> 0;
  }
  return result;
};
goog.string.uniqueStringCounter_ = Math.random() * 2147483648 | 0;
goog.string.createUniqueString = function() {
  return "goog_" + goog.string.uniqueStringCounter_++;
};
goog.string.toNumber = function(str) {
  var num = Number(str);
  if (num == 0 && goog.string.isEmptyOrWhitespace(str)) {
    return NaN;
  }
  return num;
};
goog.string.isLowerCamelCase = function(str) {
  return /^[a-z]+([A-Z][a-z]*)*$/.test(str);
};
goog.string.isUpperCamelCase = function(str) {
  return /^([A-Z][a-z]*)+$/.test(str);
};
goog.string.toCamelCase = function(str) {
  return String(str).replace(/\-([a-z])/g, function(all, match) {
    return match.toUpperCase();
  });
};
goog.string.toSelectorCase = function(str) {
  return String(str).replace(/([A-Z])/g, "-$1").toLowerCase();
};
goog.string.toTitleCase = function(str, opt_delimiters) {
  var delimiters = typeof opt_delimiters === "string" ? goog.string.regExpEscape(opt_delimiters) : "\\s";
  delimiters = delimiters ? "|[" + delimiters + "]+" : "";
  var regexp = new RegExp("(^" + delimiters + ")([a-z])", "g");
  return str.replace(regexp, function(all, p1, p2) {
    return p1 + p2.toUpperCase();
  });
};
goog.string.capitalize = function(str) {
  return String(str.charAt(0)).toUpperCase() + String(str.substr(1)).toLowerCase();
};
goog.string.parseInt = function(value) {
  if (isFinite(value)) {
    value = String(value);
  }
  if (typeof value === "string") {
    return /^\s*-?0x/i.test(value) ? parseInt(value, 16) : parseInt(value, 10);
  }
  return NaN;
};
goog.string.splitLimit = function(str, separator, limit) {
  var parts = str.split(separator);
  var returnVal = [];
  while (limit > 0 && parts.length) {
    returnVal.push(parts.shift());
    limit--;
  }
  if (parts.length) {
    returnVal.push(parts.join(separator));
  }
  return returnVal;
};
goog.string.lastComponent = function(str, separators) {
  if (!separators) {
    return str;
  } else {
    if (typeof separators == "string") {
      separators = [separators];
    }
  }
  var lastSeparatorIndex = -1;
  for (var i = 0; i < separators.length; i++) {
    if (separators[i] == "") {
      continue;
    }
    var currentSeparatorIndex = str.lastIndexOf(separators[i]);
    if (currentSeparatorIndex > lastSeparatorIndex) {
      lastSeparatorIndex = currentSeparatorIndex;
    }
  }
  if (lastSeparatorIndex == -1) {
    return str;
  }
  return str.slice(lastSeparatorIndex + 1);
};
goog.string.editDistance = function(a, b) {
  var v0 = [];
  var v1 = [];
  if (a == b) {
    return 0;
  }
  if (!a.length || !b.length) {
    return Math.max(a.length, b.length);
  }
  for (var i = 0; i < b.length + 1; i++) {
    v0[i] = i;
  }
  for (var i = 0; i < a.length; i++) {
    v1[0] = i + 1;
    for (var j = 0; j < b.length; j++) {
      var cost = Number(a[i] != b[j]);
      v1[j + 1] = Math.min(v1[j] + 1, v0[j + 1] + 1, v0[j] + cost);
    }
    for (var j = 0; j < v0.length; j++) {
      v0[j] = v1[j];
    }
  }
  return v1[b.length];
};
goog.provide("goog.structs");
goog.require("goog.array");
goog.require("goog.object");
goog.structs.getCount = function(col) {
  if (col.getCount && typeof col.getCount == "function") {
    return col.getCount();
  }
  if (goog.isArrayLike(col) || typeof col === "string") {
    return col.length;
  }
  return goog.object.getCount(col);
};
goog.structs.getValues = function(col) {
  if (col.getValues && typeof col.getValues == "function") {
    return col.getValues();
  }
  if (typeof col === "string") {
    return col.split("");
  }
  if (goog.isArrayLike(col)) {
    var rv = [];
    var l = col.length;
    for (var i = 0; i < l; i++) {
      rv.push(col[i]);
    }
    return rv;
  }
  return goog.object.getValues(col);
};
goog.structs.getKeys = function(col) {
  if (col.getKeys && typeof col.getKeys == "function") {
    return col.getKeys();
  }
  if (col.getValues && typeof col.getValues == "function") {
    return undefined;
  }
  if (goog.isArrayLike(col) || typeof col === "string") {
    var rv = [];
    var l = col.length;
    for (var i = 0; i < l; i++) {
      rv.push(i);
    }
    return rv;
  }
  return goog.object.getKeys(col);
};
goog.structs.contains = function(col, val) {
  if (col.contains && typeof col.contains == "function") {
    return col.contains(val);
  }
  if (col.containsValue && typeof col.containsValue == "function") {
    return col.containsValue(val);
  }
  if (goog.isArrayLike(col) || typeof col === "string") {
    return goog.array.contains(col, val);
  }
  return goog.object.containsValue(col, val);
};
goog.structs.isEmpty = function(col) {
  if (col.isEmpty && typeof col.isEmpty == "function") {
    return col.isEmpty();
  }
  if (goog.isArrayLike(col) || typeof col === "string") {
    return goog.array.isEmpty(col);
  }
  return goog.object.isEmpty(col);
};
goog.structs.clear = function(col) {
  if (col.clear && typeof col.clear == "function") {
    col.clear();
  } else {
    if (goog.isArrayLike(col)) {
      goog.array.clear(col);
    } else {
      goog.object.clear(col);
    }
  }
};
goog.structs.forEach = function(col, f, opt_obj) {
  if (col.forEach && typeof col.forEach == "function") {
    col.forEach(f, opt_obj);
  } else {
    if (goog.isArrayLike(col) || typeof col === "string") {
      goog.array.forEach(col, f, opt_obj);
    } else {
      var keys = goog.structs.getKeys(col);
      var values = goog.structs.getValues(col);
      var l = values.length;
      for (var i = 0; i < l; i++) {
        f.call(opt_obj, values[i], keys && keys[i], col);
      }
    }
  }
};
goog.structs.filter = function(col, f, opt_obj) {
  if (typeof col.filter == "function") {
    return col.filter(f, opt_obj);
  }
  if (goog.isArrayLike(col) || typeof col === "string") {
    return goog.array.filter(col, f, opt_obj);
  }
  var rv;
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  if (keys) {
    rv = {};
    for (var i = 0; i < l; i++) {
      if (f.call(opt_obj, values[i], keys[i], col)) {
        rv[keys[i]] = values[i];
      }
    }
  } else {
    rv = [];
    for (var i = 0; i < l; i++) {
      if (f.call(opt_obj, values[i], undefined, col)) {
        rv.push(values[i]);
      }
    }
  }
  return rv;
};
goog.structs.map = function(col, f, opt_obj) {
  if (typeof col.map == "function") {
    return col.map(f, opt_obj);
  }
  if (goog.isArrayLike(col) || typeof col === "string") {
    return goog.array.map(col, f, opt_obj);
  }
  var rv;
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  if (keys) {
    rv = {};
    for (var i = 0; i < l; i++) {
      rv[keys[i]] = f.call(opt_obj, values[i], keys[i], col);
    }
  } else {
    rv = [];
    for (var i = 0; i < l; i++) {
      rv[i] = f.call(opt_obj, values[i], undefined, col);
    }
  }
  return rv;
};
goog.structs.some = function(col, f, opt_obj) {
  if (typeof col.some == "function") {
    return col.some(f, opt_obj);
  }
  if (goog.isArrayLike(col) || typeof col === "string") {
    return goog.array.some(col, f, opt_obj);
  }
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0; i < l; i++) {
    if (f.call(opt_obj, values[i], keys && keys[i], col)) {
      return true;
    }
  }
  return false;
};
goog.structs.every = function(col, f, opt_obj) {
  if (typeof col.every == "function") {
    return col.every(f, opt_obj);
  }
  if (goog.isArrayLike(col) || typeof col === "string") {
    return goog.array.every(col, f, opt_obj);
  }
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0; i < l; i++) {
    if (!f.call(opt_obj, values[i], keys && keys[i], col)) {
      return false;
    }
  }
  return true;
};
goog.provide("goog.math");
goog.require("goog.array");
goog.require("goog.asserts");
goog.math.randomInt = function(a) {
  return Math.floor(Math.random() * a);
};
goog.math.uniformRandom = function(a, b) {
  return a + Math.random() * (b - a);
};
goog.math.clamp = function(value, min, max) {
  return Math.min(Math.max(value, min), max);
};
goog.math.modulo = function(a, b) {
  var r = a % b;
  return r * b < 0 ? r + b : r;
};
goog.math.lerp = function(a, b, x) {
  return a + x * (b - a);
};
goog.math.nearlyEquals = function(a, b, opt_tolerance) {
  return Math.abs(a - b) <= (opt_tolerance || 0.000001);
};
goog.math.standardAngle = function(angle) {
  return goog.math.modulo(angle, 360);
};
goog.math.standardAngleInRadians = function(angle) {
  return goog.math.modulo(angle, 2 * Math.PI);
};
goog.math.toRadians = function(angleDegrees) {
  return angleDegrees * Math.PI / 180;
};
goog.math.toDegrees = function(angleRadians) {
  return angleRadians * 180 / Math.PI;
};
goog.math.angleDx = function(degrees, radius) {
  return radius * Math.cos(goog.math.toRadians(degrees));
};
goog.math.angleDy = function(degrees, radius) {
  return radius * Math.sin(goog.math.toRadians(degrees));
};
goog.math.angle = function(x1, y1, x2, y2) {
  return goog.math.standardAngle(goog.math.toDegrees(Math.atan2(y2 - y1, x2 - x1)));
};
goog.math.angleDifference = function(startAngle, endAngle) {
  var d = goog.math.standardAngle(endAngle) - goog.math.standardAngle(startAngle);
  if (d > 180) {
    d = d - 360;
  } else {
    if (d <= -180) {
      d = 360 + d;
    }
  }
  return d;
};
goog.math.sign = function(x) {
  if (x > 0) {
    return 1;
  }
  if (x < 0) {
    return -1;
  }
  return x;
};
goog.math.longestCommonSubsequence = function(array1, array2, opt_compareFn, opt_collectorFn) {
  var compare = opt_compareFn || function(a, b) {
    return a == b;
  };
  var collect = opt_collectorFn || function(i1, i2) {
    return array1[i1];
  };
  var length1 = array1.length;
  var length2 = array2.length;
  var arr = [];
  for (var i = 0; i < length1 + 1; i++) {
    arr[i] = [];
    arr[i][0] = 0;
  }
  for (var j = 0; j < length2 + 1; j++) {
    arr[0][j] = 0;
  }
  for (i = 1; i <= length1; i++) {
    for (j = 1; j <= length2; j++) {
      if (compare(array1[i - 1], array2[j - 1])) {
        arr[i][j] = arr[i - 1][j - 1] + 1;
      } else {
        arr[i][j] = Math.max(arr[i - 1][j], arr[i][j - 1]);
      }
    }
  }
  var result = [];
  var i = length1, j = length2;
  while (i > 0 && j > 0) {
    if (compare(array1[i - 1], array2[j - 1])) {
      result.unshift(collect(i - 1, j - 1));
      i--;
      j--;
    } else {
      if (arr[i - 1][j] > arr[i][j - 1]) {
        i--;
      } else {
        j--;
      }
    }
  }
  return result;
};
goog.math.sum = function(var_args) {
  return goog.array.reduce(arguments, function(sum, value) {
    return sum + value;
  }, 0);
};
goog.math.average = function(var_args) {
  return goog.math.sum.apply(null, arguments) / arguments.length;
};
goog.math.sampleVariance = function(var_args) {
  var sampleSize = arguments.length;
  if (sampleSize < 2) {
    return 0;
  }
  var mean = goog.math.average.apply(null, arguments);
  var variance = goog.math.sum.apply(null, goog.array.map(arguments, function(val) {
    return Math.pow(val - mean, 2);
  })) / (sampleSize - 1);
  return variance;
};
goog.math.standardDeviation = function(var_args) {
  return Math.sqrt(goog.math.sampleVariance.apply(null, arguments));
};
goog.math.isInt = function(num) {
  return isFinite(num) && num % 1 == 0;
};
goog.math.isFiniteNumber = function(num) {
  return isFinite(num);
};
goog.math.isNegativeZero = function(num) {
  return num == 0 && 1 / num < 0;
};
goog.math.log10Floor = function(num) {
  if (num > 0) {
    var x = Math.round(Math.log(num) * Math.LOG10E);
    return x - (parseFloat("1e" + x) > num ? 1 : 0);
  }
  return num == 0 ? -Infinity : NaN;
};
goog.math.safeFloor = function(num, opt_epsilon) {
  goog.asserts.assert(opt_epsilon === undefined || opt_epsilon > 0);
  return Math.floor(num + (opt_epsilon || 2e-15));
};
goog.math.safeCeil = function(num, opt_epsilon) {
  goog.asserts.assert(opt_epsilon === undefined || opt_epsilon > 0);
  return Math.ceil(num - (opt_epsilon || 2e-15));
};
goog.provide("goog.iter");
goog.provide("goog.iter.Iterable");
goog.provide("goog.iter.Iterator");
goog.provide("goog.iter.StopIteration");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.functions");
goog.require("goog.math");
goog.iter.Iterable;
goog.iter.StopIteration = "StopIteration" in goog.global ? goog.global["StopIteration"] : {message:"StopIteration", stack:""};
goog.iter.Iterator = function() {
};
goog.iter.Iterator.prototype.next = function() {
  throw goog.iter.StopIteration;
};
goog.iter.Iterator.prototype.__iterator__ = function(opt_keys) {
  return this;
};
goog.iter.toIterator = function(iterable) {
  if (iterable instanceof goog.iter.Iterator) {
    return iterable;
  }
  if (typeof iterable.__iterator__ == "function") {
    return iterable.__iterator__(false);
  }
  if (goog.isArrayLike(iterable)) {
    var like = iterable;
    var i = 0;
    var newIter = new goog.iter.Iterator;
    newIter.next = function() {
      while (true) {
        if (i >= like.length) {
          throw goog.iter.StopIteration;
        }
        if (!(i in like)) {
          i++;
          continue;
        }
        return like[i++];
      }
    };
    return newIter;
  }
  throw new Error("Not implemented");
};
goog.iter.forEach = function(iterable, f, opt_obj) {
  if (goog.isArrayLike(iterable)) {
    try {
      goog.array.forEach(iterable, f, opt_obj);
    } catch (ex) {
      if (ex !== goog.iter.StopIteration) {
        throw ex;
      }
    }
  } else {
    iterable = goog.iter.toIterator(iterable);
    try {
      while (true) {
        f.call(opt_obj, iterable.next(), undefined, iterable);
      }
    } catch (ex) {
      if (ex !== goog.iter.StopIteration) {
        throw ex;
      }
    }
  }
};
goog.iter.filter = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    while (true) {
      var val = iterator.next();
      if (f.call(opt_obj, val, undefined, iterator)) {
        return val;
      }
    }
  };
  return newIter;
};
goog.iter.filterFalse = function(iterable, f, opt_obj) {
  return goog.iter.filter(iterable, goog.functions.not(f), opt_obj);
};
goog.iter.range = function(startOrStop, opt_stop, opt_step) {
  var start = 0;
  var stop = startOrStop;
  var step = opt_step || 1;
  if (arguments.length > 1) {
    start = startOrStop;
    stop = +opt_stop;
  }
  if (step == 0) {
    throw new Error("Range step argument must not be zero");
  }
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    if (step > 0 && start >= stop || step < 0 && start <= stop) {
      throw goog.iter.StopIteration;
    }
    var rv = start;
    start += step;
    return rv;
  };
  return newIter;
};
goog.iter.join = function(iterable, deliminator) {
  return goog.iter.toArray(iterable).join(deliminator);
};
goog.iter.map = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    var val = iterator.next();
    return f.call(opt_obj, val, undefined, iterator);
  };
  return newIter;
};
goog.iter.reduce = function(iterable, f, val, opt_obj) {
  var rval = val;
  goog.iter.forEach(iterable, function(val) {
    rval = f.call(opt_obj, rval, val);
  });
  return rval;
};
goog.iter.some = function(iterable, f, opt_obj) {
  iterable = goog.iter.toIterator(iterable);
  try {
    while (true) {
      if (f.call(opt_obj, iterable.next(), undefined, iterable)) {
        return true;
      }
    }
  } catch (ex) {
    if (ex !== goog.iter.StopIteration) {
      throw ex;
    }
  }
  return false;
};
goog.iter.every = function(iterable, f, opt_obj) {
  iterable = goog.iter.toIterator(iterable);
  try {
    while (true) {
      if (!f.call(opt_obj, iterable.next(), undefined, iterable)) {
        return false;
      }
    }
  } catch (ex) {
    if (ex !== goog.iter.StopIteration) {
      throw ex;
    }
  }
  return true;
};
goog.iter.chain = function(var_args) {
  return goog.iter.chainFromIterable(arguments);
};
goog.iter.chainFromIterable = function(iterable) {
  var iterator = goog.iter.toIterator(iterable);
  var iter = new goog.iter.Iterator;
  var current = null;
  iter.next = function() {
    while (true) {
      if (current == null) {
        var it = iterator.next();
        current = goog.iter.toIterator(it);
      }
      try {
        return current.next();
      } catch (ex) {
        if (ex !== goog.iter.StopIteration) {
          throw ex;
        }
        current = null;
      }
    }
  };
  return iter;
};
goog.iter.dropWhile = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  var dropping = true;
  newIter.next = function() {
    while (true) {
      var val = iterator.next();
      if (dropping && f.call(opt_obj, val, undefined, iterator)) {
        continue;
      } else {
        dropping = false;
      }
      return val;
    }
  };
  return newIter;
};
goog.iter.takeWhile = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var iter = new goog.iter.Iterator;
  iter.next = function() {
    var val = iterator.next();
    if (f.call(opt_obj, val, undefined, iterator)) {
      return val;
    }
    throw goog.iter.StopIteration;
  };
  return iter;
};
goog.iter.toArray = function(iterable) {
  if (goog.isArrayLike(iterable)) {
    return goog.array.toArray(iterable);
  }
  iterable = goog.iter.toIterator(iterable);
  var array = [];
  goog.iter.forEach(iterable, function(val) {
    array.push(val);
  });
  return array;
};
goog.iter.equals = function(iterable1, iterable2, opt_equalsFn) {
  var fillValue = {};
  var pairs = goog.iter.zipLongest(fillValue, iterable1, iterable2);
  var equalsFn = opt_equalsFn || goog.array.defaultCompareEquality;
  return goog.iter.every(pairs, function(pair) {
    return equalsFn(pair[0], pair[1]);
  });
};
goog.iter.nextOrValue = function(iterable, defaultValue) {
  try {
    return goog.iter.toIterator(iterable).next();
  } catch (e) {
    if (e != goog.iter.StopIteration) {
      throw e;
    }
    return defaultValue;
  }
};
goog.iter.product = function(var_args) {
  var someArrayEmpty = goog.array.some(arguments, function(arr) {
    return !arr.length;
  });
  if (someArrayEmpty || !arguments.length) {
    return new goog.iter.Iterator;
  }
  var iter = new goog.iter.Iterator;
  var arrays = arguments;
  var indicies = goog.array.repeat(0, arrays.length);
  iter.next = function() {
    if (indicies) {
      var retVal = goog.array.map(indicies, function(valueIndex, arrayIndex) {
        return arrays[arrayIndex][valueIndex];
      });
      for (var i = indicies.length - 1; i >= 0; i--) {
        goog.asserts.assert(indicies);
        if (indicies[i] < arrays[i].length - 1) {
          indicies[i]++;
          break;
        }
        if (i == 0) {
          indicies = null;
          break;
        }
        indicies[i] = 0;
      }
      return retVal;
    }
    throw goog.iter.StopIteration;
  };
  return iter;
};
goog.iter.cycle = function(iterable) {
  var baseIterator = goog.iter.toIterator(iterable);
  var cache = [];
  var cacheIndex = 0;
  var iter = new goog.iter.Iterator;
  var useCache = false;
  iter.next = function() {
    var returnElement = null;
    if (!useCache) {
      try {
        returnElement = baseIterator.next();
        cache.push(returnElement);
        return returnElement;
      } catch (e) {
        if (e != goog.iter.StopIteration || goog.array.isEmpty(cache)) {
          throw e;
        }
        useCache = true;
      }
    }
    returnElement = cache[cacheIndex];
    cacheIndex = (cacheIndex + 1) % cache.length;
    return returnElement;
  };
  return iter;
};
goog.iter.count = function(opt_start, opt_step) {
  var counter = opt_start || 0;
  var step = opt_step !== undefined ? opt_step : 1;
  var iter = new goog.iter.Iterator;
  iter.next = function() {
    var returnValue = counter;
    counter += step;
    return returnValue;
  };
  return iter;
};
goog.iter.repeat = function(value) {
  var iter = new goog.iter.Iterator;
  iter.next = goog.functions.constant(value);
  return iter;
};
goog.iter.accumulate = function(iterable) {
  var iterator = goog.iter.toIterator(iterable);
  var total = 0;
  var iter = new goog.iter.Iterator;
  iter.next = function() {
    total += iterator.next();
    return total;
  };
  return iter;
};
goog.iter.zip = function(var_args) {
  var args = arguments;
  var iter = new goog.iter.Iterator;
  if (args.length > 0) {
    var iterators = goog.array.map(args, goog.iter.toIterator);
    iter.next = function() {
      var arr = goog.array.map(iterators, function(it) {
        return it.next();
      });
      return arr;
    };
  }
  return iter;
};
goog.iter.zipLongest = function(fillValue, var_args) {
  var args = goog.array.slice(arguments, 1);
  var iter = new goog.iter.Iterator;
  if (args.length > 0) {
    var iterators = goog.array.map(args, goog.iter.toIterator);
    iter.next = function() {
      var iteratorsHaveValues = false;
      var arr = goog.array.map(iterators, function(it) {
        var returnValue;
        try {
          returnValue = it.next();
          iteratorsHaveValues = true;
        } catch (ex) {
          if (ex !== goog.iter.StopIteration) {
            throw ex;
          }
          returnValue = fillValue;
        }
        return returnValue;
      });
      if (!iteratorsHaveValues) {
        throw goog.iter.StopIteration;
      }
      return arr;
    };
  }
  return iter;
};
goog.iter.compress = function(iterable, selectors) {
  var selectorIterator = goog.iter.toIterator(selectors);
  return goog.iter.filter(iterable, function() {
    return !!selectorIterator.next();
  });
};
goog.iter.GroupByIterator_ = function(iterable, opt_keyFunc) {
  this.iterator = goog.iter.toIterator(iterable);
  this.keyFunc = opt_keyFunc || goog.functions.identity;
  this.targetKey;
  this.currentKey;
  this.currentValue;
};
goog.inherits(goog.iter.GroupByIterator_, goog.iter.Iterator);
goog.iter.GroupByIterator_.prototype.next = function() {
  while (this.currentKey == this.targetKey) {
    this.currentValue = this.iterator.next();
    this.currentKey = this.keyFunc(this.currentValue);
  }
  this.targetKey = this.currentKey;
  return [this.currentKey, this.groupItems_(this.targetKey)];
};
goog.iter.GroupByIterator_.prototype.groupItems_ = function(targetKey) {
  var arr = [];
  while (this.currentKey == targetKey) {
    arr.push(this.currentValue);
    try {
      this.currentValue = this.iterator.next();
    } catch (ex) {
      if (ex !== goog.iter.StopIteration) {
        throw ex;
      }
      break;
    }
    this.currentKey = this.keyFunc(this.currentValue);
  }
  return arr;
};
goog.iter.groupBy = function(iterable, opt_keyFunc) {
  return new goog.iter.GroupByIterator_(iterable, opt_keyFunc);
};
goog.iter.starMap = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var iter = new goog.iter.Iterator;
  iter.next = function() {
    var args = goog.iter.toArray(iterator.next());
    return f.apply(opt_obj, goog.array.concat(args, undefined, iterator));
  };
  return iter;
};
goog.iter.tee = function(iterable, opt_num) {
  var iterator = goog.iter.toIterator(iterable);
  var num = typeof opt_num === "number" ? opt_num : 2;
  var buffers = goog.array.map(goog.array.range(num), function() {
    return [];
  });
  var addNextIteratorValueToBuffers = function() {
    var val = iterator.next();
    goog.array.forEach(buffers, function(buffer) {
      buffer.push(val);
    });
  };
  var createIterator = function(buffer) {
    var iter = new goog.iter.Iterator;
    iter.next = function() {
      if (goog.array.isEmpty(buffer)) {
        addNextIteratorValueToBuffers();
      }
      goog.asserts.assert(!goog.array.isEmpty(buffer));
      return buffer.shift();
    };
    return iter;
  };
  return goog.array.map(buffers, createIterator);
};
goog.iter.enumerate = function(iterable, opt_start) {
  return goog.iter.zip(goog.iter.count(opt_start), iterable);
};
goog.iter.limit = function(iterable, limitSize) {
  goog.asserts.assert(goog.math.isInt(limitSize) && limitSize >= 0);
  var iterator = goog.iter.toIterator(iterable);
  var iter = new goog.iter.Iterator;
  var remaining = limitSize;
  iter.next = function() {
    if (remaining-- > 0) {
      return iterator.next();
    }
    throw goog.iter.StopIteration;
  };
  return iter;
};
goog.iter.consume = function(iterable, count) {
  goog.asserts.assert(goog.math.isInt(count) && count >= 0);
  var iterator = goog.iter.toIterator(iterable);
  while (count-- > 0) {
    goog.iter.nextOrValue(iterator, null);
  }
  return iterator;
};
goog.iter.slice = function(iterable, start, opt_end) {
  goog.asserts.assert(goog.math.isInt(start) && start >= 0);
  var iterator = goog.iter.consume(iterable, start);
  if (typeof opt_end === "number") {
    goog.asserts.assert(goog.math.isInt(opt_end) && opt_end >= start);
    iterator = goog.iter.limit(iterator, opt_end - start);
  }
  return iterator;
};
goog.iter.hasDuplicates_ = function(arr) {
  var deduped = [];
  goog.array.removeDuplicates(arr, deduped);
  return arr.length != deduped.length;
};
goog.iter.permutations = function(iterable, opt_length) {
  var elements = goog.iter.toArray(iterable);
  var length = typeof opt_length === "number" ? opt_length : elements.length;
  var sets = goog.array.repeat(elements, length);
  var product = goog.iter.product.apply(undefined, sets);
  return goog.iter.filter(product, function(arr) {
    return !goog.iter.hasDuplicates_(arr);
  });
};
goog.iter.combinations = function(iterable, length) {
  var elements = goog.iter.toArray(iterable);
  var indexes = goog.iter.range(elements.length);
  var indexIterator = goog.iter.permutations(indexes, length);
  var sortedIndexIterator = goog.iter.filter(indexIterator, function(arr) {
    return goog.array.isSorted(arr);
  });
  var iter = new goog.iter.Iterator;
  function getIndexFromElements(index) {
    return elements[index];
  }
  iter.next = function() {
    return goog.array.map(sortedIndexIterator.next(), getIndexFromElements);
  };
  return iter;
};
goog.iter.combinationsWithReplacement = function(iterable, length) {
  var elements = goog.iter.toArray(iterable);
  var indexes = goog.array.range(elements.length);
  var sets = goog.array.repeat(indexes, length);
  var indexIterator = goog.iter.product.apply(undefined, sets);
  var sortedIndexIterator = goog.iter.filter(indexIterator, function(arr) {
    return goog.array.isSorted(arr);
  });
  var iter = new goog.iter.Iterator;
  function getIndexFromElements(index) {
    return elements[index];
  }
  iter.next = function() {
    return goog.array.map(sortedIndexIterator.next(), getIndexFromElements);
  };
  return iter;
};
goog.provide("goog.structs.Map");
goog.require("goog.iter.Iterator");
goog.require("goog.iter.StopIteration");
goog.structs.Map = function(opt_map, var_args) {
  this.map_ = {};
  this.keys_ = [];
  this.count_ = 0;
  this.version_ = 0;
  var argLength = arguments.length;
  if (argLength > 1) {
    if (argLength % 2) {
      throw new Error("Uneven number of arguments");
    }
    for (var i = 0; i < argLength; i += 2) {
      this.set(arguments[i], arguments[i + 1]);
    }
  } else {
    if (opt_map) {
      this.addAll(opt_map);
    }
  }
};
goog.structs.Map.prototype.getCount = function() {
  return this.count_;
};
goog.structs.Map.prototype.getValues = function() {
  this.cleanupKeysArray_();
  var rv = [];
  for (var i = 0; i < this.keys_.length; i++) {
    var key = this.keys_[i];
    rv.push(this.map_[key]);
  }
  return rv;
};
goog.structs.Map.prototype.getKeys = function() {
  this.cleanupKeysArray_();
  return this.keys_.concat();
};
goog.structs.Map.prototype.containsKey = function(key) {
  return goog.structs.Map.hasKey_(this.map_, key);
};
goog.structs.Map.prototype.containsValue = function(val) {
  for (var i = 0; i < this.keys_.length; i++) {
    var key = this.keys_[i];
    if (goog.structs.Map.hasKey_(this.map_, key) && this.map_[key] == val) {
      return true;
    }
  }
  return false;
};
goog.structs.Map.prototype.equals = function(otherMap, opt_equalityFn) {
  if (this === otherMap) {
    return true;
  }
  if (this.count_ != otherMap.getCount()) {
    return false;
  }
  var equalityFn = opt_equalityFn || goog.structs.Map.defaultEquals;
  this.cleanupKeysArray_();
  for (var key, i = 0; key = this.keys_[i]; i++) {
    if (!equalityFn(this.get(key), otherMap.get(key))) {
      return false;
    }
  }
  return true;
};
goog.structs.Map.defaultEquals = function(a, b) {
  return a === b;
};
goog.structs.Map.prototype.isEmpty = function() {
  return this.count_ == 0;
};
goog.structs.Map.prototype.clear = function() {
  this.map_ = {};
  this.keys_.length = 0;
  this.count_ = 0;
  this.version_ = 0;
};
goog.structs.Map.prototype.remove = function(key) {
  if (goog.structs.Map.hasKey_(this.map_, key)) {
    delete this.map_[key];
    this.count_--;
    this.version_++;
    if (this.keys_.length > 2 * this.count_) {
      this.cleanupKeysArray_();
    }
    return true;
  }
  return false;
};
goog.structs.Map.prototype.cleanupKeysArray_ = function() {
  if (this.count_ != this.keys_.length) {
    var srcIndex = 0;
    var destIndex = 0;
    while (srcIndex < this.keys_.length) {
      var key = this.keys_[srcIndex];
      if (goog.structs.Map.hasKey_(this.map_, key)) {
        this.keys_[destIndex++] = key;
      }
      srcIndex++;
    }
    this.keys_.length = destIndex;
  }
  if (this.count_ != this.keys_.length) {
    var seen = {};
    var srcIndex = 0;
    var destIndex = 0;
    while (srcIndex < this.keys_.length) {
      var key = this.keys_[srcIndex];
      if (!goog.structs.Map.hasKey_(seen, key)) {
        this.keys_[destIndex++] = key;
        seen[key] = 1;
      }
      srcIndex++;
    }
    this.keys_.length = destIndex;
  }
};
goog.structs.Map.prototype.get = function(key, opt_val) {
  if (goog.structs.Map.hasKey_(this.map_, key)) {
    return this.map_[key];
  }
  return opt_val;
};
goog.structs.Map.prototype.set = function(key, value) {
  if (!goog.structs.Map.hasKey_(this.map_, key)) {
    this.count_++;
    this.keys_.push(key);
    this.version_++;
  }
  this.map_[key] = value;
};
goog.structs.Map.prototype.addAll = function(map) {
  if (map instanceof goog.structs.Map) {
    var keys = map.getKeys();
    for (var i = 0; i < keys.length; i++) {
      this.set(keys[i], map.get(keys[i]));
    }
  } else {
    for (var key in map) {
      this.set(key, map[key]);
    }
  }
};
goog.structs.Map.prototype.forEach = function(f, opt_obj) {
  var keys = this.getKeys();
  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    var value = this.get(key);
    f.call(opt_obj, value, key, this);
  }
};
goog.structs.Map.prototype.clone = function() {
  return new goog.structs.Map(this);
};
goog.structs.Map.prototype.transpose = function() {
  var transposed = new goog.structs.Map;
  for (var i = 0; i < this.keys_.length; i++) {
    var key = this.keys_[i];
    var value = this.map_[key];
    transposed.set(value, key);
  }
  return transposed;
};
goog.structs.Map.prototype.toObject = function() {
  this.cleanupKeysArray_();
  var obj = {};
  for (var i = 0; i < this.keys_.length; i++) {
    var key = this.keys_[i];
    obj[key] = this.map_[key];
  }
  return obj;
};
goog.structs.Map.prototype.getKeyIterator = function() {
  return this.__iterator__(true);
};
goog.structs.Map.prototype.getValueIterator = function() {
  return this.__iterator__(false);
};
goog.structs.Map.prototype.__iterator__ = function(opt_keys) {
  this.cleanupKeysArray_();
  var i = 0;
  var version = this.version_;
  var selfObj = this;
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    if (version != selfObj.version_) {
      throw new Error("The map has changed since the iterator was created");
    }
    if (i >= selfObj.keys_.length) {
      throw goog.iter.StopIteration;
    }
    var key = selfObj.keys_[i++];
    return opt_keys ? key : selfObj.map_[key];
  };
  return newIter;
};
goog.structs.Map.hasKey_ = function(obj, key) {
  return Object.prototype.hasOwnProperty.call(obj, key);
};
goog.provide("goog.uri.utils");
goog.provide("goog.uri.utils.ComponentIndex");
goog.provide("goog.uri.utils.QueryArray");
goog.provide("goog.uri.utils.QueryValue");
goog.provide("goog.uri.utils.StandardQueryParam");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.string");
goog.uri.utils.CharCode_ = {AMPERSAND:38, EQUAL:61, HASH:35, QUESTION:63};
goog.uri.utils.buildFromEncodedParts = function(opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_queryData, opt_fragment) {
  var out = "";
  if (opt_scheme) {
    out += opt_scheme + ":";
  }
  if (opt_domain) {
    out += "//";
    if (opt_userInfo) {
      out += opt_userInfo + "@";
    }
    out += opt_domain;
    if (opt_port) {
      out += ":" + opt_port;
    }
  }
  if (opt_path) {
    out += opt_path;
  }
  if (opt_queryData) {
    out += "?" + opt_queryData;
  }
  if (opt_fragment) {
    out += "#" + opt_fragment;
  }
  return out;
};
goog.uri.utils.splitRe_ = new RegExp("^" + "(?:" + "([^:/?#.]+)" + ":)?" + "(?://" + "(?:([^/?#]*)@)?" + "([^/#?]*?)" + "(?::([0-9]+))?" + "(?\x3d[/#?]|$)" + ")?" + "([^?#]+)?" + "(?:\\?([^#]*))?" + "(?:#([\\s\\S]*))?" + "$");
goog.uri.utils.ComponentIndex = {SCHEME:1, USER_INFO:2, DOMAIN:3, PORT:4, PATH:5, QUERY_DATA:6, FRAGMENT:7};
goog.uri.utils.split = function(uri) {
  return uri.match(goog.uri.utils.splitRe_);
};
goog.uri.utils.decodeIfPossible_ = function(uri, opt_preserveReserved) {
  if (!uri) {
    return uri;
  }
  return opt_preserveReserved ? decodeURI(uri) : decodeURIComponent(uri);
};
goog.uri.utils.getComponentByIndex_ = function(componentIndex, uri) {
  return goog.uri.utils.split(uri)[componentIndex] || null;
};
goog.uri.utils.getScheme = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.SCHEME, uri);
};
goog.uri.utils.getEffectiveScheme = function(uri) {
  var scheme = goog.uri.utils.getScheme(uri);
  if (!scheme && goog.global.self && goog.global.self.location) {
    var protocol = goog.global.self.location.protocol;
    scheme = protocol.substr(0, protocol.length - 1);
  }
  return scheme ? scheme.toLowerCase() : "";
};
goog.uri.utils.getUserInfoEncoded = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.USER_INFO, uri);
};
goog.uri.utils.getUserInfo = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getUserInfoEncoded(uri));
};
goog.uri.utils.getDomainEncoded = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.DOMAIN, uri);
};
goog.uri.utils.getDomain = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getDomainEncoded(uri), true);
};
goog.uri.utils.getPort = function(uri) {
  return Number(goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.PORT, uri)) || null;
};
goog.uri.utils.getPathEncoded = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.PATH, uri);
};
goog.uri.utils.getPath = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getPathEncoded(uri), true);
};
goog.uri.utils.getQueryData = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.QUERY_DATA, uri);
};
goog.uri.utils.getFragmentEncoded = function(uri) {
  var hashIndex = uri.indexOf("#");
  return hashIndex < 0 ? null : uri.substr(hashIndex + 1);
};
goog.uri.utils.setFragmentEncoded = function(uri, fragment) {
  return goog.uri.utils.removeFragment(uri) + (fragment ? "#" + fragment : "");
};
goog.uri.utils.getFragment = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getFragmentEncoded(uri));
};
goog.uri.utils.getHost = function(uri) {
  var pieces = goog.uri.utils.split(uri);
  return goog.uri.utils.buildFromEncodedParts(pieces[goog.uri.utils.ComponentIndex.SCHEME], pieces[goog.uri.utils.ComponentIndex.USER_INFO], pieces[goog.uri.utils.ComponentIndex.DOMAIN], pieces[goog.uri.utils.ComponentIndex.PORT]);
};
goog.uri.utils.getOrigin = function(uri) {
  var pieces = goog.uri.utils.split(uri);
  return goog.uri.utils.buildFromEncodedParts(pieces[goog.uri.utils.ComponentIndex.SCHEME], null, pieces[goog.uri.utils.ComponentIndex.DOMAIN], pieces[goog.uri.utils.ComponentIndex.PORT]);
};
goog.uri.utils.getPathAndAfter = function(uri) {
  var pieces = goog.uri.utils.split(uri);
  return goog.uri.utils.buildFromEncodedParts(null, null, null, null, pieces[goog.uri.utils.ComponentIndex.PATH], pieces[goog.uri.utils.ComponentIndex.QUERY_DATA], pieces[goog.uri.utils.ComponentIndex.FRAGMENT]);
};
goog.uri.utils.removeFragment = function(uri) {
  var hashIndex = uri.indexOf("#");
  return hashIndex < 0 ? uri : uri.substr(0, hashIndex);
};
goog.uri.utils.haveSameDomain = function(uri1, uri2) {
  var pieces1 = goog.uri.utils.split(uri1);
  var pieces2 = goog.uri.utils.split(uri2);
  return pieces1[goog.uri.utils.ComponentIndex.DOMAIN] == pieces2[goog.uri.utils.ComponentIndex.DOMAIN] && pieces1[goog.uri.utils.ComponentIndex.SCHEME] == pieces2[goog.uri.utils.ComponentIndex.SCHEME] && pieces1[goog.uri.utils.ComponentIndex.PORT] == pieces2[goog.uri.utils.ComponentIndex.PORT];
};
goog.uri.utils.assertNoFragmentsOrQueries_ = function(uri) {
  goog.asserts.assert(uri.indexOf("#") < 0 && uri.indexOf("?") < 0, "goog.uri.utils: Fragment or query identifiers are not supported: [%s]", uri);
};
goog.uri.utils.QueryValue;
goog.uri.utils.QueryArray;
goog.uri.utils.parseQueryData = function(encodedQuery, callback) {
  if (!encodedQuery) {
    return;
  }
  var pairs = encodedQuery.split("\x26");
  for (var i = 0; i < pairs.length; i++) {
    var indexOfEquals = pairs[i].indexOf("\x3d");
    var name = null;
    var value = null;
    if (indexOfEquals >= 0) {
      name = pairs[i].substring(0, indexOfEquals);
      value = pairs[i].substring(indexOfEquals + 1);
    } else {
      name = pairs[i];
    }
    callback(name, value ? goog.string.urlDecode(value) : "");
  }
};
goog.uri.utils.splitQueryData_ = function(uri) {
  var hashIndex = uri.indexOf("#");
  if (hashIndex < 0) {
    hashIndex = uri.length;
  }
  var questionIndex = uri.indexOf("?");
  var queryData;
  if (questionIndex < 0 || questionIndex > hashIndex) {
    questionIndex = hashIndex;
    queryData = "";
  } else {
    queryData = uri.substring(questionIndex + 1, hashIndex);
  }
  return [uri.substr(0, questionIndex), queryData, uri.substr(hashIndex)];
};
goog.uri.utils.joinQueryData_ = function(parts) {
  return parts[0] + (parts[1] ? "?" + parts[1] : "") + parts[2];
};
goog.uri.utils.appendQueryData_ = function(queryData, newData) {
  if (!newData) {
    return queryData;
  }
  return queryData ? queryData + "\x26" + newData : newData;
};
goog.uri.utils.appendQueryDataToUri_ = function(uri, queryData) {
  if (!queryData) {
    return uri;
  }
  var parts = goog.uri.utils.splitQueryData_(uri);
  parts[1] = goog.uri.utils.appendQueryData_(parts[1], queryData);
  return goog.uri.utils.joinQueryData_(parts);
};
goog.uri.utils.appendKeyValuePairs_ = function(key, value, pairs) {
  goog.asserts.assertString(key);
  if (goog.isArray(value)) {
    goog.asserts.assertArray(value);
    for (var j = 0; j < value.length; j++) {
      goog.uri.utils.appendKeyValuePairs_(key, String(value[j]), pairs);
    }
  } else {
    if (value != null) {
      pairs.push(key + (value === "" ? "" : "\x3d" + goog.string.urlEncode(value)));
    }
  }
};
goog.uri.utils.buildQueryData = function(keysAndValues, opt_startIndex) {
  goog.asserts.assert(Math.max(keysAndValues.length - (opt_startIndex || 0), 0) % 2 == 0, "goog.uri.utils: Key/value lists must be even in length.");
  var params = [];
  for (var i = opt_startIndex || 0; i < keysAndValues.length; i += 2) {
    var key = keysAndValues[i];
    goog.uri.utils.appendKeyValuePairs_(key, keysAndValues[i + 1], params);
  }
  return params.join("\x26");
};
goog.uri.utils.buildQueryDataFromMap = function(map) {
  var params = [];
  for (var key in map) {
    goog.uri.utils.appendKeyValuePairs_(key, map[key], params);
  }
  return params.join("\x26");
};
goog.uri.utils.appendParams = function(uri, var_args) {
  var queryData = arguments.length == 2 ? goog.uri.utils.buildQueryData(arguments[1], 0) : goog.uri.utils.buildQueryData(arguments, 1);
  return goog.uri.utils.appendQueryDataToUri_(uri, queryData);
};
goog.uri.utils.appendParamsFromMap = function(uri, map) {
  var queryData = goog.uri.utils.buildQueryDataFromMap(map);
  return goog.uri.utils.appendQueryDataToUri_(uri, queryData);
};
goog.uri.utils.appendParam = function(uri, key, opt_value) {
  var value = opt_value != null ? "\x3d" + goog.string.urlEncode(opt_value) : "";
  return goog.uri.utils.appendQueryDataToUri_(uri, key + value);
};
goog.uri.utils.findParam_ = function(uri, startIndex, keyEncoded, hashOrEndIndex) {
  var index = startIndex;
  var keyLength = keyEncoded.length;
  while ((index = uri.indexOf(keyEncoded, index)) >= 0 && index < hashOrEndIndex) {
    var precedingChar = uri.charCodeAt(index - 1);
    if (precedingChar == goog.uri.utils.CharCode_.AMPERSAND || precedingChar == goog.uri.utils.CharCode_.QUESTION) {
      var followingChar = uri.charCodeAt(index + keyLength);
      if (!followingChar || followingChar == goog.uri.utils.CharCode_.EQUAL || followingChar == goog.uri.utils.CharCode_.AMPERSAND || followingChar == goog.uri.utils.CharCode_.HASH) {
        return index;
      }
    }
    index += keyLength + 1;
  }
  return -1;
};
goog.uri.utils.hashOrEndRe_ = /#|$/;
goog.uri.utils.hasParam = function(uri, keyEncoded) {
  return goog.uri.utils.findParam_(uri, 0, keyEncoded, uri.search(goog.uri.utils.hashOrEndRe_)) >= 0;
};
goog.uri.utils.getParamValue = function(uri, keyEncoded) {
  var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_);
  var foundIndex = goog.uri.utils.findParam_(uri, 0, keyEncoded, hashOrEndIndex);
  if (foundIndex < 0) {
    return null;
  } else {
    var endPosition = uri.indexOf("\x26", foundIndex);
    if (endPosition < 0 || endPosition > hashOrEndIndex) {
      endPosition = hashOrEndIndex;
    }
    foundIndex += keyEncoded.length + 1;
    return goog.string.urlDecode(uri.substr(foundIndex, endPosition - foundIndex));
  }
};
goog.uri.utils.getParamValues = function(uri, keyEncoded) {
  var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_);
  var position = 0;
  var foundIndex;
  var result = [];
  while ((foundIndex = goog.uri.utils.findParam_(uri, position, keyEncoded, hashOrEndIndex)) >= 0) {
    position = uri.indexOf("\x26", foundIndex);
    if (position < 0 || position > hashOrEndIndex) {
      position = hashOrEndIndex;
    }
    foundIndex += keyEncoded.length + 1;
    result.push(goog.string.urlDecode(uri.substr(foundIndex, position - foundIndex)));
  }
  return result;
};
goog.uri.utils.trailingQueryPunctuationRe_ = /[?&]($|#)/;
goog.uri.utils.removeParam = function(uri, keyEncoded) {
  var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_);
  var position = 0;
  var foundIndex;
  var buffer = [];
  while ((foundIndex = goog.uri.utils.findParam_(uri, position, keyEncoded, hashOrEndIndex)) >= 0) {
    buffer.push(uri.substring(position, foundIndex));
    position = Math.min(uri.indexOf("\x26", foundIndex) + 1 || hashOrEndIndex, hashOrEndIndex);
  }
  buffer.push(uri.substr(position));
  return buffer.join("").replace(goog.uri.utils.trailingQueryPunctuationRe_, "$1");
};
goog.uri.utils.setParam = function(uri, keyEncoded, value) {
  return goog.uri.utils.appendParam(goog.uri.utils.removeParam(uri, keyEncoded), keyEncoded, value);
};
goog.uri.utils.setParamsFromMap = function(uri, params) {
  var parts = goog.uri.utils.splitQueryData_(uri);
  var queryData = parts[1];
  var buffer = [];
  if (queryData) {
    goog.array.forEach(queryData.split("\x26"), function(pair) {
      var indexOfEquals = pair.indexOf("\x3d");
      var name = indexOfEquals >= 0 ? pair.substr(0, indexOfEquals) : pair;
      if (!params.hasOwnProperty(name)) {
        buffer.push(pair);
      }
    });
  }
  parts[1] = goog.uri.utils.appendQueryData_(buffer.join("\x26"), goog.uri.utils.buildQueryDataFromMap(params));
  return goog.uri.utils.joinQueryData_(parts);
};
goog.uri.utils.appendPath = function(baseUri, path) {
  goog.uri.utils.assertNoFragmentsOrQueries_(baseUri);
  if (goog.string.endsWith(baseUri, "/")) {
    baseUri = baseUri.substr(0, baseUri.length - 1);
  }
  if (goog.string.startsWith(path, "/")) {
    path = path.substr(1);
  }
  return goog.string.buildString(baseUri, "/", path);
};
goog.uri.utils.setPath = function(uri, path) {
  if (!goog.string.startsWith(path, "/")) {
    path = "/" + path;
  }
  var parts = goog.uri.utils.split(uri);
  return goog.uri.utils.buildFromEncodedParts(parts[goog.uri.utils.ComponentIndex.SCHEME], parts[goog.uri.utils.ComponentIndex.USER_INFO], parts[goog.uri.utils.ComponentIndex.DOMAIN], parts[goog.uri.utils.ComponentIndex.PORT], path, parts[goog.uri.utils.ComponentIndex.QUERY_DATA], parts[goog.uri.utils.ComponentIndex.FRAGMENT]);
};
goog.uri.utils.StandardQueryParam = {RANDOM:"zx"};
goog.uri.utils.makeUnique = function(uri) {
  return goog.uri.utils.setParam(uri, goog.uri.utils.StandardQueryParam.RANDOM, goog.string.getRandomString());
};
goog.provide("goog.Uri");
goog.provide("goog.Uri.QueryData");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.string");
goog.require("goog.structs");
goog.require("goog.structs.Map");
goog.require("goog.uri.utils");
goog.require("goog.uri.utils.ComponentIndex");
goog.require("goog.uri.utils.StandardQueryParam");
goog.Uri = function(opt_uri, opt_ignoreCase) {
  this.scheme_ = "";
  this.userInfo_ = "";
  this.domain_ = "";
  this.port_ = null;
  this.path_ = "";
  this.fragment_ = "";
  this.isReadOnly_ = false;
  this.ignoreCase_ = false;
  this.queryData_;
  var m;
  if (opt_uri instanceof goog.Uri) {
    this.ignoreCase_ = opt_ignoreCase !== undefined ? opt_ignoreCase : opt_uri.getIgnoreCase();
    this.setScheme(opt_uri.getScheme());
    this.setUserInfo(opt_uri.getUserInfo());
    this.setDomain(opt_uri.getDomain());
    this.setPort(opt_uri.getPort());
    this.setPath(opt_uri.getPath());
    this.setQueryData(opt_uri.getQueryData().clone());
    this.setFragment(opt_uri.getFragment());
  } else {
    if (opt_uri && (m = goog.uri.utils.split(String(opt_uri)))) {
      this.ignoreCase_ = !!opt_ignoreCase;
      this.setScheme(m[goog.uri.utils.ComponentIndex.SCHEME] || "", true);
      this.setUserInfo(m[goog.uri.utils.ComponentIndex.USER_INFO] || "", true);
      this.setDomain(m[goog.uri.utils.ComponentIndex.DOMAIN] || "", true);
      this.setPort(m[goog.uri.utils.ComponentIndex.PORT]);
      this.setPath(m[goog.uri.utils.ComponentIndex.PATH] || "", true);
      this.setQueryData(m[goog.uri.utils.ComponentIndex.QUERY_DATA] || "", true);
      this.setFragment(m[goog.uri.utils.ComponentIndex.FRAGMENT] || "", true);
    } else {
      this.ignoreCase_ = !!opt_ignoreCase;
      this.queryData_ = new goog.Uri.QueryData(null, null, this.ignoreCase_);
    }
  }
};
goog.Uri.RANDOM_PARAM = goog.uri.utils.StandardQueryParam.RANDOM;
goog.Uri.prototype.toString = function() {
  var out = [];
  var scheme = this.getScheme();
  if (scheme) {
    out.push(goog.Uri.encodeSpecialChars_(scheme, goog.Uri.reDisallowedInSchemeOrUserInfo_, true), ":");
  }
  var domain = this.getDomain();
  if (domain || scheme == "file") {
    out.push("//");
    var userInfo = this.getUserInfo();
    if (userInfo) {
      out.push(goog.Uri.encodeSpecialChars_(userInfo, goog.Uri.reDisallowedInSchemeOrUserInfo_, true), "@");
    }
    out.push(goog.Uri.removeDoubleEncoding_(goog.string.urlEncode(domain)));
    var port = this.getPort();
    if (port != null) {
      out.push(":", String(port));
    }
  }
  var path = this.getPath();
  if (path) {
    if (this.hasDomain() && path.charAt(0) != "/") {
      out.push("/");
    }
    out.push(goog.Uri.encodeSpecialChars_(path, path.charAt(0) == "/" ? goog.Uri.reDisallowedInAbsolutePath_ : goog.Uri.reDisallowedInRelativePath_, true));
  }
  var query = this.getEncodedQuery();
  if (query) {
    out.push("?", query);
  }
  var fragment = this.getFragment();
  if (fragment) {
    out.push("#", goog.Uri.encodeSpecialChars_(fragment, goog.Uri.reDisallowedInFragment_));
  }
  return out.join("");
};
goog.Uri.prototype.resolve = function(relativeUri) {
  var absoluteUri = this.clone();
  var overridden = relativeUri.hasScheme();
  if (overridden) {
    absoluteUri.setScheme(relativeUri.getScheme());
  } else {
    overridden = relativeUri.hasUserInfo();
  }
  if (overridden) {
    absoluteUri.setUserInfo(relativeUri.getUserInfo());
  } else {
    overridden = relativeUri.hasDomain();
  }
  if (overridden) {
    absoluteUri.setDomain(relativeUri.getDomain());
  } else {
    overridden = relativeUri.hasPort();
  }
  var path = relativeUri.getPath();
  if (overridden) {
    absoluteUri.setPort(relativeUri.getPort());
  } else {
    overridden = relativeUri.hasPath();
    if (overridden) {
      if (path.charAt(0) != "/") {
        if (this.hasDomain() && !this.hasPath()) {
          path = "/" + path;
        } else {
          var lastSlashIndex = absoluteUri.getPath().lastIndexOf("/");
          if (lastSlashIndex != -1) {
            path = absoluteUri.getPath().substr(0, lastSlashIndex + 1) + path;
          }
        }
      }
      path = goog.Uri.removeDotSegments(path);
    }
  }
  if (overridden) {
    absoluteUri.setPath(path);
  } else {
    overridden = relativeUri.hasQuery();
  }
  if (overridden) {
    absoluteUri.setQueryData(relativeUri.getQueryData().clone());
  } else {
    overridden = relativeUri.hasFragment();
  }
  if (overridden) {
    absoluteUri.setFragment(relativeUri.getFragment());
  }
  return absoluteUri;
};
goog.Uri.prototype.clone = function() {
  return new goog.Uri(this);
};
goog.Uri.prototype.getScheme = function() {
  return this.scheme_;
};
goog.Uri.prototype.setScheme = function(newScheme, opt_decode) {
  this.enforceReadOnly();
  this.scheme_ = opt_decode ? goog.Uri.decodeOrEmpty_(newScheme, true) : newScheme;
  if (this.scheme_) {
    this.scheme_ = this.scheme_.replace(/:$/, "");
  }
  return this;
};
goog.Uri.prototype.hasScheme = function() {
  return !!this.scheme_;
};
goog.Uri.prototype.getUserInfo = function() {
  return this.userInfo_;
};
goog.Uri.prototype.setUserInfo = function(newUserInfo, opt_decode) {
  this.enforceReadOnly();
  this.userInfo_ = opt_decode ? goog.Uri.decodeOrEmpty_(newUserInfo) : newUserInfo;
  return this;
};
goog.Uri.prototype.hasUserInfo = function() {
  return !!this.userInfo_;
};
goog.Uri.prototype.getDomain = function() {
  return this.domain_;
};
goog.Uri.prototype.setDomain = function(newDomain, opt_decode) {
  this.enforceReadOnly();
  this.domain_ = opt_decode ? goog.Uri.decodeOrEmpty_(newDomain, true) : newDomain;
  return this;
};
goog.Uri.prototype.hasDomain = function() {
  return !!this.domain_;
};
goog.Uri.prototype.getPort = function() {
  return this.port_;
};
goog.Uri.prototype.setPort = function(newPort) {
  this.enforceReadOnly();
  if (newPort) {
    newPort = Number(newPort);
    if (isNaN(newPort) || newPort < 0) {
      throw new Error("Bad port number " + newPort);
    }
    this.port_ = newPort;
  } else {
    this.port_ = null;
  }
  return this;
};
goog.Uri.prototype.hasPort = function() {
  return this.port_ != null;
};
goog.Uri.prototype.getPath = function() {
  return this.path_;
};
goog.Uri.prototype.setPath = function(newPath, opt_decode) {
  this.enforceReadOnly();
  this.path_ = opt_decode ? goog.Uri.decodeOrEmpty_(newPath, true) : newPath;
  return this;
};
goog.Uri.prototype.hasPath = function() {
  return !!this.path_;
};
goog.Uri.prototype.hasQuery = function() {
  return this.queryData_.toString() !== "";
};
goog.Uri.prototype.setQueryData = function(queryData, opt_decode) {
  this.enforceReadOnly();
  if (queryData instanceof goog.Uri.QueryData) {
    this.queryData_ = queryData;
    this.queryData_.setIgnoreCase(this.ignoreCase_);
  } else {
    if (!opt_decode) {
      queryData = goog.Uri.encodeSpecialChars_(queryData, goog.Uri.reDisallowedInQuery_);
    }
    this.queryData_ = new goog.Uri.QueryData(queryData, null, this.ignoreCase_);
  }
  return this;
};
goog.Uri.prototype.setQuery = function(newQuery, opt_decode) {
  return this.setQueryData(newQuery, opt_decode);
};
goog.Uri.prototype.getEncodedQuery = function() {
  return this.queryData_.toString();
};
goog.Uri.prototype.getDecodedQuery = function() {
  return this.queryData_.toDecodedString();
};
goog.Uri.prototype.getQueryData = function() {
  return this.queryData_;
};
goog.Uri.prototype.getQuery = function() {
  return this.getEncodedQuery();
};
goog.Uri.prototype.setParameterValue = function(key, value) {
  this.enforceReadOnly();
  this.queryData_.set(key, value);
  return this;
};
goog.Uri.prototype.setParameterValues = function(key, values) {
  this.enforceReadOnly();
  if (!goog.isArray(values)) {
    values = [String(values)];
  }
  this.queryData_.setValues(key, values);
  return this;
};
goog.Uri.prototype.getParameterValues = function(name) {
  return this.queryData_.getValues(name);
};
goog.Uri.prototype.getParameterValue = function(paramName) {
  return this.queryData_.get(paramName);
};
goog.Uri.prototype.getFragment = function() {
  return this.fragment_;
};
goog.Uri.prototype.setFragment = function(newFragment, opt_decode) {
  this.enforceReadOnly();
  this.fragment_ = opt_decode ? goog.Uri.decodeOrEmpty_(newFragment) : newFragment;
  return this;
};
goog.Uri.prototype.hasFragment = function() {
  return !!this.fragment_;
};
goog.Uri.prototype.hasSameDomainAs = function(uri2) {
  return (!this.hasDomain() && !uri2.hasDomain() || this.getDomain() == uri2.getDomain()) && (!this.hasPort() && !uri2.hasPort() || this.getPort() == uri2.getPort());
};
goog.Uri.prototype.makeUnique = function() {
  this.enforceReadOnly();
  this.setParameterValue(goog.Uri.RANDOM_PARAM, goog.string.getRandomString());
  return this;
};
goog.Uri.prototype.removeParameter = function(key) {
  this.enforceReadOnly();
  this.queryData_.remove(key);
  return this;
};
goog.Uri.prototype.setReadOnly = function(isReadOnly) {
  this.isReadOnly_ = isReadOnly;
  return this;
};
goog.Uri.prototype.isReadOnly = function() {
  return this.isReadOnly_;
};
goog.Uri.prototype.enforceReadOnly = function() {
  if (this.isReadOnly_) {
    throw new Error("Tried to modify a read-only Uri");
  }
};
goog.Uri.prototype.setIgnoreCase = function(ignoreCase) {
  this.ignoreCase_ = ignoreCase;
  if (this.queryData_) {
    this.queryData_.setIgnoreCase(ignoreCase);
  }
  return this;
};
goog.Uri.prototype.getIgnoreCase = function() {
  return this.ignoreCase_;
};
goog.Uri.parse = function(uri, opt_ignoreCase) {
  return uri instanceof goog.Uri ? uri.clone() : new goog.Uri(uri, opt_ignoreCase);
};
goog.Uri.create = function(opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_query, opt_fragment, opt_ignoreCase) {
  var uri = new goog.Uri(null, opt_ignoreCase);
  opt_scheme && uri.setScheme(opt_scheme);
  opt_userInfo && uri.setUserInfo(opt_userInfo);
  opt_domain && uri.setDomain(opt_domain);
  opt_port && uri.setPort(opt_port);
  opt_path && uri.setPath(opt_path);
  opt_query && uri.setQueryData(opt_query);
  opt_fragment && uri.setFragment(opt_fragment);
  return uri;
};
goog.Uri.resolve = function(base, rel) {
  if (!(base instanceof goog.Uri)) {
    base = goog.Uri.parse(base);
  }
  if (!(rel instanceof goog.Uri)) {
    rel = goog.Uri.parse(rel);
  }
  return base.resolve(rel);
};
goog.Uri.removeDotSegments = function(path) {
  if (path == ".." || path == ".") {
    return "";
  } else {
    if (!goog.string.contains(path, "./") && !goog.string.contains(path, "/.")) {
      return path;
    } else {
      var leadingSlash = goog.string.startsWith(path, "/");
      var segments = path.split("/");
      var out = [];
      for (var pos = 0; pos < segments.length;) {
        var segment = segments[pos++];
        if (segment == ".") {
          if (leadingSlash && pos == segments.length) {
            out.push("");
          }
        } else {
          if (segment == "..") {
            if (out.length > 1 || out.length == 1 && out[0] != "") {
              out.pop();
            }
            if (leadingSlash && pos == segments.length) {
              out.push("");
            }
          } else {
            out.push(segment);
            leadingSlash = true;
          }
        }
      }
      return out.join("/");
    }
  }
};
goog.Uri.decodeOrEmpty_ = function(val, opt_preserveReserved) {
  if (!val) {
    return "";
  }
  return opt_preserveReserved ? decodeURI(val.replace(/%25/g, "%2525")) : decodeURIComponent(val);
};
goog.Uri.encodeSpecialChars_ = function(unescapedPart, extra, opt_removeDoubleEncoding) {
  if (typeof unescapedPart === "string") {
    var encoded = encodeURI(unescapedPart).replace(extra, goog.Uri.encodeChar_);
    if (opt_removeDoubleEncoding) {
      encoded = goog.Uri.removeDoubleEncoding_(encoded);
    }
    return encoded;
  }
  return null;
};
goog.Uri.encodeChar_ = function(ch) {
  var n = ch.charCodeAt(0);
  return "%" + (n >> 4 & 15).toString(16) + (n & 15).toString(16);
};
goog.Uri.removeDoubleEncoding_ = function(doubleEncodedString) {
  return doubleEncodedString.replace(/%25([0-9a-fA-F]{2})/g, "%$1");
};
goog.Uri.reDisallowedInSchemeOrUserInfo_ = /[#\/\?@]/g;
goog.Uri.reDisallowedInRelativePath_ = /[#\?:]/g;
goog.Uri.reDisallowedInAbsolutePath_ = /[#\?]/g;
goog.Uri.reDisallowedInQuery_ = /[#\?@]/g;
goog.Uri.reDisallowedInFragment_ = /#/g;
goog.Uri.haveSameDomain = function(uri1String, uri2String) {
  var pieces1 = goog.uri.utils.split(uri1String);
  var pieces2 = goog.uri.utils.split(uri2String);
  return pieces1[goog.uri.utils.ComponentIndex.DOMAIN] == pieces2[goog.uri.utils.ComponentIndex.DOMAIN] && pieces1[goog.uri.utils.ComponentIndex.PORT] == pieces2[goog.uri.utils.ComponentIndex.PORT];
};
goog.Uri.QueryData = function(opt_query, opt_uri, opt_ignoreCase) {
  this.keyMap_ = null;
  this.count_ = null;
  this.encodedQuery_ = opt_query || null;
  this.ignoreCase_ = !!opt_ignoreCase;
};
goog.Uri.QueryData.prototype.ensureKeyMapInitialized_ = function() {
  if (!this.keyMap_) {
    this.keyMap_ = new goog.structs.Map;
    this.count_ = 0;
    if (this.encodedQuery_) {
      var self = this;
      goog.uri.utils.parseQueryData(this.encodedQuery_, function(name, value) {
        self.add(goog.string.urlDecode(name), value);
      });
    }
  }
};
goog.Uri.QueryData.createFromMap = function(map, opt_uri, opt_ignoreCase) {
  var keys = goog.structs.getKeys(map);
  if (typeof keys == "undefined") {
    throw new Error("Keys are undefined");
  }
  var queryData = new goog.Uri.QueryData(null, null, opt_ignoreCase);
  var values = goog.structs.getValues(map);
  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    var value = values[i];
    if (!goog.isArray(value)) {
      queryData.add(key, value);
    } else {
      queryData.setValues(key, value);
    }
  }
  return queryData;
};
goog.Uri.QueryData.createFromKeysValues = function(keys, values, opt_uri, opt_ignoreCase) {
  if (keys.length != values.length) {
    throw new Error("Mismatched lengths for keys/values");
  }
  var queryData = new goog.Uri.QueryData(null, null, opt_ignoreCase);
  for (var i = 0; i < keys.length; i++) {
    queryData.add(keys[i], values[i]);
  }
  return queryData;
};
goog.Uri.QueryData.prototype.getCount = function() {
  this.ensureKeyMapInitialized_();
  return this.count_;
};
goog.Uri.QueryData.prototype.add = function(key, value) {
  this.ensureKeyMapInitialized_();
  this.invalidateCache_();
  key = this.getKeyName_(key);
  var values = this.keyMap_.get(key);
  if (!values) {
    this.keyMap_.set(key, values = []);
  }
  values.push(value);
  this.count_ = goog.asserts.assertNumber(this.count_) + 1;
  return this;
};
goog.Uri.QueryData.prototype.remove = function(key) {
  this.ensureKeyMapInitialized_();
  key = this.getKeyName_(key);
  if (this.keyMap_.containsKey(key)) {
    this.invalidateCache_();
    this.count_ = goog.asserts.assertNumber(this.count_) - this.keyMap_.get(key).length;
    return this.keyMap_.remove(key);
  }
  return false;
};
goog.Uri.QueryData.prototype.clear = function() {
  this.invalidateCache_();
  this.keyMap_ = null;
  this.count_ = 0;
};
goog.Uri.QueryData.prototype.isEmpty = function() {
  this.ensureKeyMapInitialized_();
  return this.count_ == 0;
};
goog.Uri.QueryData.prototype.containsKey = function(key) {
  this.ensureKeyMapInitialized_();
  key = this.getKeyName_(key);
  return this.keyMap_.containsKey(key);
};
goog.Uri.QueryData.prototype.containsValue = function(value) {
  var vals = this.getValues();
  return goog.array.contains(vals, value);
};
goog.Uri.QueryData.prototype.forEach = function(f, opt_scope) {
  this.ensureKeyMapInitialized_();
  this.keyMap_.forEach(function(values, key) {
    goog.array.forEach(values, function(value) {
      f.call(opt_scope, value, key, this);
    }, this);
  }, this);
};
goog.Uri.QueryData.prototype.getKeys = function() {
  this.ensureKeyMapInitialized_();
  var vals = this.keyMap_.getValues();
  var keys = this.keyMap_.getKeys();
  var rv = [];
  for (var i = 0; i < keys.length; i++) {
    var val = vals[i];
    for (var j = 0; j < val.length; j++) {
      rv.push(keys[i]);
    }
  }
  return rv;
};
goog.Uri.QueryData.prototype.getValues = function(opt_key) {
  this.ensureKeyMapInitialized_();
  var rv = [];
  if (typeof opt_key === "string") {
    if (this.containsKey(opt_key)) {
      rv = goog.array.concat(rv, this.keyMap_.get(this.getKeyName_(opt_key)));
    }
  } else {
    var values = this.keyMap_.getValues();
    for (var i = 0; i < values.length; i++) {
      rv = goog.array.concat(rv, values[i]);
    }
  }
  return rv;
};
goog.Uri.QueryData.prototype.set = function(key, value) {
  this.ensureKeyMapInitialized_();
  this.invalidateCache_();
  key = this.getKeyName_(key);
  if (this.containsKey(key)) {
    this.count_ = goog.asserts.assertNumber(this.count_) - this.keyMap_.get(key).length;
  }
  this.keyMap_.set(key, [value]);
  this.count_ = goog.asserts.assertNumber(this.count_) + 1;
  return this;
};
goog.Uri.QueryData.prototype.get = function(key, opt_default) {
  if (!key) {
    return opt_default;
  }
  var values = this.getValues(key);
  return values.length > 0 ? String(values[0]) : opt_default;
};
goog.Uri.QueryData.prototype.setValues = function(key, values) {
  this.remove(key);
  if (values.length > 0) {
    this.invalidateCache_();
    this.keyMap_.set(this.getKeyName_(key), goog.array.clone(values));
    this.count_ = goog.asserts.assertNumber(this.count_) + values.length;
  }
};
goog.Uri.QueryData.prototype.toString = function() {
  if (this.encodedQuery_) {
    return this.encodedQuery_;
  }
  if (!this.keyMap_) {
    return "";
  }
  var sb = [];
  var keys = this.keyMap_.getKeys();
  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    var encodedKey = goog.string.urlEncode(key);
    var val = this.getValues(key);
    for (var j = 0; j < val.length; j++) {
      var param = encodedKey;
      if (val[j] !== "") {
        param += "\x3d" + goog.string.urlEncode(val[j]);
      }
      sb.push(param);
    }
  }
  return this.encodedQuery_ = sb.join("\x26");
};
goog.Uri.QueryData.prototype.toDecodedString = function() {
  return goog.Uri.decodeOrEmpty_(this.toString());
};
goog.Uri.QueryData.prototype.invalidateCache_ = function() {
  this.encodedQuery_ = null;
};
goog.Uri.QueryData.prototype.filterKeys = function(keys) {
  this.ensureKeyMapInitialized_();
  this.keyMap_.forEach(function(value, key) {
    if (!goog.array.contains(keys, key)) {
      this.remove(key);
    }
  }, this);
  return this;
};
goog.Uri.QueryData.prototype.clone = function() {
  var rv = new goog.Uri.QueryData;
  rv.encodedQuery_ = this.encodedQuery_;
  if (this.keyMap_) {
    rv.keyMap_ = this.keyMap_.clone();
    rv.count_ = this.count_;
  }
  return rv;
};
goog.Uri.QueryData.prototype.getKeyName_ = function(arg) {
  var keyName = String(arg);
  if (this.ignoreCase_) {
    keyName = keyName.toLowerCase();
  }
  return keyName;
};
goog.Uri.QueryData.prototype.setIgnoreCase = function(ignoreCase) {
  var resetKeys = ignoreCase && !this.ignoreCase_;
  if (resetKeys) {
    this.ensureKeyMapInitialized_();
    this.invalidateCache_();
    this.keyMap_.forEach(function(value, key) {
      var lowerCase = key.toLowerCase();
      if (key != lowerCase) {
        this.remove(key);
        this.setValues(lowerCase, value);
      }
    }, this);
  }
  this.ignoreCase_ = ignoreCase;
};
goog.Uri.QueryData.prototype.extend = function(var_args) {
  for (var i = 0; i < arguments.length; i++) {
    var data = arguments[i];
    goog.structs.forEach(data, function(value, key) {
      this.add(key, value);
    }, this);
  }
};
goog.provide("goog.reflect");
goog.reflect.object = function(type, object) {
  return object;
};
goog.reflect.objectProperty = function(prop, object) {
  return prop;
};
goog.reflect.sinkValue = function(x) {
  goog.reflect.sinkValue[" "](x);
  return x;
};
goog.reflect.sinkValue[" "] = goog.nullFunction;
goog.reflect.canAccessProperty = function(obj, prop) {
  try {
    goog.reflect.sinkValue(obj[prop]);
    return true;
  } catch (e) {
  }
  return false;
};
goog.reflect.cache = function(cacheObj, key, valueFn, opt_keyFn) {
  const storedKey = opt_keyFn ? opt_keyFn(key) : key;
  if (Object.prototype.hasOwnProperty.call(cacheObj, storedKey)) {
    return cacheObj[storedKey];
  }
  return cacheObj[storedKey] = valueFn(key);
};
goog.provide("goog.math.Integer");
goog.require("goog.reflect");
goog.math.Integer = function(bits, sign) {
  this.sign_ = sign;
  var localBits = [];
  var top = true;
  for (var i = bits.length - 1; i >= 0; i--) {
    var val = bits[i] | 0;
    if (!top || val != sign) {
      localBits[i] = val;
      top = false;
    }
  }
  this.bits_ = localBits;
};
goog.math.Integer.IntCache_ = {};
goog.math.Integer.fromInt = function(value) {
  if (-128 <= value && value < 128) {
    return goog.reflect.cache(goog.math.Integer.IntCache_, value, function(val) {
      return new goog.math.Integer([val | 0], val < 0 ? -1 : 0);
    });
  }
  return new goog.math.Integer([value | 0], value < 0 ? -1 : 0);
};
goog.math.Integer.fromNumber = function(value) {
  if (isNaN(value) || !isFinite(value)) {
    return goog.math.Integer.ZERO;
  } else {
    if (value < 0) {
      return goog.math.Integer.fromNumber(-value).negate();
    } else {
      var bits = [];
      var pow = 1;
      for (var i = 0; value >= pow; i++) {
        bits[i] = value / pow | 0;
        pow *= goog.math.Integer.TWO_PWR_32_DBL_;
      }
      return new goog.math.Integer(bits, 0);
    }
  }
};
goog.math.Integer.fromBits = function(bits) {
  var high = bits[bits.length - 1];
  return new goog.math.Integer(bits, high & 1 << 31 ? -1 : 0);
};
goog.math.Integer.fromString = function(str, opt_radix) {
  if (str.length == 0) {
    throw new Error("number format error: empty string");
  }
  var radix = opt_radix || 10;
  if (radix < 2 || 36 < radix) {
    throw new Error("radix out of range: " + radix);
  }
  if (str.charAt(0) == "-") {
    return goog.math.Integer.fromString(str.substring(1), radix).negate();
  } else {
    if (str.indexOf("-") >= 0) {
      throw new Error('number format error: interior "-" character');
    }
  }
  var radixToPower = goog.math.Integer.fromNumber(Math.pow(radix, 8));
  var result = goog.math.Integer.ZERO;
  for (var i = 0; i < str.length; i += 8) {
    var size = Math.min(8, str.length - i);
    var value = parseInt(str.substring(i, i + size), radix);
    if (size < 8) {
      var power = goog.math.Integer.fromNumber(Math.pow(radix, size));
      result = result.multiply(power).add(goog.math.Integer.fromNumber(value));
    } else {
      result = result.multiply(radixToPower);
      result = result.add(goog.math.Integer.fromNumber(value));
    }
  }
  return result;
};
goog.math.Integer.TWO_PWR_32_DBL_ = (1 << 16) * (1 << 16);
goog.math.Integer.ZERO = goog.math.Integer.fromInt(0);
goog.math.Integer.ONE = goog.math.Integer.fromInt(1);
goog.math.Integer.TWO_PWR_24_ = goog.math.Integer.fromInt(1 << 24);
goog.math.Integer.prototype.toInt = function() {
  return this.bits_.length > 0 ? this.bits_[0] : this.sign_;
};
goog.math.Integer.prototype.toNumber = function() {
  if (this.isNegative()) {
    return -this.negate().toNumber();
  } else {
    var val = 0;
    var pow = 1;
    for (var i = 0; i < this.bits_.length; i++) {
      val += this.getBitsUnsigned(i) * pow;
      pow *= goog.math.Integer.TWO_PWR_32_DBL_;
    }
    return val;
  }
};
goog.math.Integer.prototype.toString = function(opt_radix) {
  var radix = opt_radix || 10;
  if (radix < 2 || 36 < radix) {
    throw new Error("radix out of range: " + radix);
  }
  if (this.isZero()) {
    return "0";
  } else {
    if (this.isNegative()) {
      return "-" + this.negate().toString(radix);
    }
  }
  var radixToPower = goog.math.Integer.fromNumber(Math.pow(radix, 6));
  var rem = this;
  var result = "";
  while (true) {
    var remDiv = rem.divide(radixToPower);
    var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt() >>> 0;
    var digits = intval.toString(radix);
    rem = remDiv;
    if (rem.isZero()) {
      return digits + result;
    } else {
      while (digits.length < 6) {
        digits = "0" + digits;
      }
      result = "" + digits + result;
    }
  }
};
goog.math.Integer.prototype.getBits = function(index) {
  if (index < 0) {
    return 0;
  } else {
    if (index < this.bits_.length) {
      return this.bits_[index];
    } else {
      return this.sign_;
    }
  }
};
goog.math.Integer.prototype.getBitsUnsigned = function(index) {
  var val = this.getBits(index);
  return val >= 0 ? val : goog.math.Integer.TWO_PWR_32_DBL_ + val;
};
goog.math.Integer.prototype.getSign = function() {
  return this.sign_;
};
goog.math.Integer.prototype.isZero = function() {
  if (this.sign_ != 0) {
    return false;
  }
  for (var i = 0; i < this.bits_.length; i++) {
    if (this.bits_[i] != 0) {
      return false;
    }
  }
  return true;
};
goog.math.Integer.prototype.isNegative = function() {
  return this.sign_ == -1;
};
goog.math.Integer.prototype.isOdd = function() {
  return this.bits_.length == 0 && this.sign_ == -1 || this.bits_.length > 0 && (this.bits_[0] & 1) != 0;
};
goog.math.Integer.prototype.equals = function(other) {
  if (this.sign_ != other.sign_) {
    return false;
  }
  var len = Math.max(this.bits_.length, other.bits_.length);
  for (var i = 0; i < len; i++) {
    if (this.getBits(i) != other.getBits(i)) {
      return false;
    }
  }
  return true;
};
goog.math.Integer.prototype.notEquals = function(other) {
  return !this.equals(other);
};
goog.math.Integer.prototype.greaterThan = function(other) {
  return this.compare(other) > 0;
};
goog.math.Integer.prototype.greaterThanOrEqual = function(other) {
  return this.compare(other) >= 0;
};
goog.math.Integer.prototype.lessThan = function(other) {
  return this.compare(other) < 0;
};
goog.math.Integer.prototype.lessThanOrEqual = function(other) {
  return this.compare(other) <= 0;
};
goog.math.Integer.prototype.compare = function(other) {
  var diff = this.subtract(other);
  if (diff.isNegative()) {
    return -1;
  } else {
    if (diff.isZero()) {
      return 0;
    } else {
      return +1;
    }
  }
};
goog.math.Integer.prototype.shorten = function(numBits) {
  var arr_index = numBits - 1 >> 5;
  var bit_index = (numBits - 1) % 32;
  var bits = [];
  for (var i = 0; i < arr_index; i++) {
    bits[i] = this.getBits(i);
  }
  var sigBits = bit_index == 31 ? 4294967295 : (1 << bit_index + 1) - 1;
  var val = this.getBits(arr_index) & sigBits;
  if (val & 1 << bit_index) {
    val |= 4294967295 - sigBits;
    bits[arr_index] = val;
    return new goog.math.Integer(bits, -1);
  } else {
    bits[arr_index] = val;
    return new goog.math.Integer(bits, 0);
  }
};
goog.math.Integer.prototype.negate = function() {
  return this.not().add(goog.math.Integer.ONE);
};
goog.math.Integer.prototype.abs = function() {
  return this.isNegative() ? this.negate() : this;
};
goog.math.Integer.prototype.add = function(other) {
  var len = Math.max(this.bits_.length, other.bits_.length);
  var arr = [];
  var carry = 0;
  for (var i = 0; i <= len; i++) {
    var a1 = this.getBits(i) >>> 16;
    var a0 = this.getBits(i) & 65535;
    var b1 = other.getBits(i) >>> 16;
    var b0 = other.getBits(i) & 65535;
    var c0 = carry + a0 + b0;
    var c1 = (c0 >>> 16) + a1 + b1;
    carry = c1 >>> 16;
    c0 &= 65535;
    c1 &= 65535;
    arr[i] = c1 << 16 | c0;
  }
  return goog.math.Integer.fromBits(arr);
};
goog.math.Integer.prototype.subtract = function(other) {
  return this.add(other.negate());
};
goog.math.Integer.prototype.multiply = function(other) {
  if (this.isZero()) {
    return goog.math.Integer.ZERO;
  } else {
    if (other.isZero()) {
      return goog.math.Integer.ZERO;
    }
  }
  if (this.isNegative()) {
    if (other.isNegative()) {
      return this.negate().multiply(other.negate());
    } else {
      return this.negate().multiply(other).negate();
    }
  } else {
    if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }
  }
  if (this.lessThan(goog.math.Integer.TWO_PWR_24_) && other.lessThan(goog.math.Integer.TWO_PWR_24_)) {
    return goog.math.Integer.fromNumber(this.toNumber() * other.toNumber());
  }
  var len = this.bits_.length + other.bits_.length;
  var arr = [];
  for (var i = 0; i < 2 * len; i++) {
    arr[i] = 0;
  }
  for (var i = 0; i < this.bits_.length; i++) {
    for (var j = 0; j < other.bits_.length; j++) {
      var a1 = this.getBits(i) >>> 16;
      var a0 = this.getBits(i) & 65535;
      var b1 = other.getBits(j) >>> 16;
      var b0 = other.getBits(j) & 65535;
      arr[2 * i + 2 * j] += a0 * b0;
      goog.math.Integer.carry16_(arr, 2 * i + 2 * j);
      arr[2 * i + 2 * j + 1] += a1 * b0;
      goog.math.Integer.carry16_(arr, 2 * i + 2 * j + 1);
      arr[2 * i + 2 * j + 1] += a0 * b1;
      goog.math.Integer.carry16_(arr, 2 * i + 2 * j + 1);
      arr[2 * i + 2 * j + 2] += a1 * b1;
      goog.math.Integer.carry16_(arr, 2 * i + 2 * j + 2);
    }
  }
  for (var i = 0; i < len; i++) {
    arr[i] = arr[2 * i + 1] << 16 | arr[2 * i];
  }
  for (var i = len; i < 2 * len; i++) {
    arr[i] = 0;
  }
  return new goog.math.Integer(arr, 0);
};
goog.math.Integer.carry16_ = function(bits, index) {
  while ((bits[index] & 65535) != bits[index]) {
    bits[index + 1] += bits[index] >>> 16;
    bits[index] &= 65535;
    index++;
  }
};
goog.math.Integer.prototype.slowDivide_ = function(other) {
  if (this.isNegative() || other.isNegative()) {
    throw new Error("slowDivide_ only works with positive integers.");
  }
  var twoPower = goog.math.Integer.ONE;
  var multiple = other;
  while (multiple.lessThanOrEqual(this)) {
    twoPower = twoPower.shiftLeft(1);
    multiple = multiple.shiftLeft(1);
  }
  var res = twoPower.shiftRight(1);
  var total = multiple.shiftRight(1);
  var total2;
  multiple = multiple.shiftRight(2);
  twoPower = twoPower.shiftRight(2);
  while (!multiple.isZero()) {
    total2 = total.add(multiple);
    if (total2.lessThanOrEqual(this)) {
      res = res.add(twoPower);
      total = total2;
    }
    multiple = multiple.shiftRight(1);
    twoPower = twoPower.shiftRight(1);
  }
  var remainder = this.subtract(res.multiply(other));
  return new goog.math.Integer.DivisionResult(res, remainder);
};
goog.math.Integer.prototype.divide = function(other) {
  return this.divideAndRemainder(other).quotient;
};
goog.math.Integer.DivisionResult = function(quotient, remainder) {
  this.quotient = quotient;
  this.remainder = remainder;
};
goog.math.Integer.prototype.divideAndRemainder = function(other) {
  if (other.isZero()) {
    throw new Error("division by zero");
  } else {
    if (this.isZero()) {
      return new goog.math.Integer.DivisionResult(goog.math.Integer.ZERO, goog.math.Integer.ZERO);
    }
  }
  if (this.isNegative()) {
    var result = this.negate().divideAndRemainder(other);
    return new goog.math.Integer.DivisionResult(result.quotient.negate(), result.remainder.negate());
  } else {
    if (other.isNegative()) {
      var result = this.divideAndRemainder(other.negate());
      return new goog.math.Integer.DivisionResult(result.quotient.negate(), result.remainder);
    }
  }
  if (this.bits_.length > 30) {
    return this.slowDivide_(other);
  }
  var res = goog.math.Integer.ZERO;
  var rem = this;
  while (rem.greaterThanOrEqual(other)) {
    var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));
    var log2 = Math.ceil(Math.log(approx) / Math.LN2);
    var delta = log2 <= 48 ? 1 : Math.pow(2, log2 - 48);
    var approxRes = goog.math.Integer.fromNumber(approx);
    var approxRem = approxRes.multiply(other);
    while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
      approx -= delta;
      approxRes = goog.math.Integer.fromNumber(approx);
      approxRem = approxRes.multiply(other);
    }
    if (approxRes.isZero()) {
      approxRes = goog.math.Integer.ONE;
    }
    res = res.add(approxRes);
    rem = rem.subtract(approxRem);
  }
  return new goog.math.Integer.DivisionResult(res, rem);
};
goog.math.Integer.prototype.modulo = function(other) {
  return this.divideAndRemainder(other).remainder;
};
goog.math.Integer.prototype.not = function() {
  var len = this.bits_.length;
  var arr = [];
  for (var i = 0; i < len; i++) {
    arr[i] = ~this.bits_[i];
  }
  return new goog.math.Integer(arr, ~this.sign_);
};
goog.math.Integer.prototype.and = function(other) {
  var len = Math.max(this.bits_.length, other.bits_.length);
  var arr = [];
  for (var i = 0; i < len; i++) {
    arr[i] = this.getBits(i) & other.getBits(i);
  }
  return new goog.math.Integer(arr, this.sign_ & other.sign_);
};
goog.math.Integer.prototype.or = function(other) {
  var len = Math.max(this.bits_.length, other.bits_.length);
  var arr = [];
  for (var i = 0; i < len; i++) {
    arr[i] = this.getBits(i) | other.getBits(i);
  }
  return new goog.math.Integer(arr, this.sign_ | other.sign_);
};
goog.math.Integer.prototype.xor = function(other) {
  var len = Math.max(this.bits_.length, other.bits_.length);
  var arr = [];
  for (var i = 0; i < len; i++) {
    arr[i] = this.getBits(i) ^ other.getBits(i);
  }
  return new goog.math.Integer(arr, this.sign_ ^ other.sign_);
};
goog.math.Integer.prototype.shiftLeft = function(numBits) {
  var arr_delta = numBits >> 5;
  var bit_delta = numBits % 32;
  var len = this.bits_.length + arr_delta + (bit_delta > 0 ? 1 : 0);
  var arr = [];
  for (var i = 0; i < len; i++) {
    if (bit_delta > 0) {
      arr[i] = this.getBits(i - arr_delta) << bit_delta | this.getBits(i - arr_delta - 1) >>> 32 - bit_delta;
    } else {
      arr[i] = this.getBits(i - arr_delta);
    }
  }
  return new goog.math.Integer(arr, this.sign_);
};
goog.math.Integer.prototype.shiftRight = function(numBits) {
  var arr_delta = numBits >> 5;
  var bit_delta = numBits % 32;
  var len = this.bits_.length - arr_delta;
  var arr = [];
  for (var i = 0; i < len; i++) {
    if (bit_delta > 0) {
      arr[i] = this.getBits(i + arr_delta) >>> bit_delta | this.getBits(i + arr_delta + 1) << 32 - bit_delta;
    } else {
      arr[i] = this.getBits(i + arr_delta);
    }
  }
  return new goog.math.Integer(arr, this.sign_);
};
goog.provide("goog.string.StringBuffer");
goog.string.StringBuffer = function(opt_a1, var_args) {
  if (opt_a1 != null) {
    this.append.apply(this, arguments);
  }
};
goog.string.StringBuffer.prototype.buffer_ = "";
goog.string.StringBuffer.prototype.set = function(s) {
  this.buffer_ = "" + s;
};
goog.string.StringBuffer.prototype.append = function(a1, opt_a2, var_args) {
  this.buffer_ += String(a1);
  if (opt_a2 != null) {
    for (let i = 1; i < arguments.length; i++) {
      this.buffer_ += arguments[i];
    }
  }
  return this;
};
goog.string.StringBuffer.prototype.clear = function() {
  this.buffer_ = "";
};
goog.string.StringBuffer.prototype.getLength = function() {
  return this.buffer_.length;
};
goog.string.StringBuffer.prototype.toString = function() {
  return this.buffer_;
};
goog.loadModule(function(exports) {
  "use strict";
  goog.module("goog.math.Long");
  goog.module.declareLegacyNamespace();
  const asserts = goog.require("goog.asserts");
  const reflect = goog.require("goog.reflect");
  class Long {
    constructor(low, high) {
      this.low_ = low | 0;
      this.high_ = high | 0;
    }
    toInt() {
      return this.low_;
    }
    toNumber() {
      return this.high_ * TWO_PWR_32_DBL_ + this.getLowBitsUnsigned();
    }
    isSafeInteger() {
      var top11Bits = this.high_ >> 21;
      return top11Bits == 0 || top11Bits == -1 && !(this.low_ == 0 && this.high_ == (4292870144 | 0));
    }
    toString(opt_radix) {
      var radix = opt_radix || 10;
      if (radix < 2 || 36 < radix) {
        throw new Error("radix out of range: " + radix);
      }
      if (this.isSafeInteger()) {
        var asNumber = this.toNumber();
        return radix == 10 ? "" + asNumber : asNumber.toString(radix);
      }
      var safeDigits = 14 - (radix >> 2);
      var radixPowSafeDigits = Math.pow(radix, safeDigits);
      var radixToPower = Long.fromBits(radixPowSafeDigits, radixPowSafeDigits / TWO_PWR_32_DBL_);
      var remDiv = this.div(radixToPower);
      var val = Math.abs(this.subtract(remDiv.multiply(radixToPower)).toNumber());
      var digits = radix == 10 ? "" + val : val.toString(radix);
      if (digits.length < safeDigits) {
        digits = "0000000000000".substr(digits.length - safeDigits) + digits;
      }
      val = remDiv.toNumber();
      return (radix == 10 ? val : val.toString(radix)) + digits;
    }
    getHighBits() {
      return this.high_;
    }
    getLowBits() {
      return this.low_;
    }
    getLowBitsUnsigned() {
      return this.low_ >>> 0;
    }
    getNumBitsAbs() {
      if (this.isNegative()) {
        if (this.equals(Long.getMinValue())) {
          return 64;
        } else {
          return this.negate().getNumBitsAbs();
        }
      } else {
        var val = this.high_ != 0 ? this.high_ : this.low_;
        for (var bit = 31; bit > 0; bit--) {
          if ((val & 1 << bit) != 0) {
            break;
          }
        }
        return this.high_ != 0 ? bit + 33 : bit + 1;
      }
    }
    isZero() {
      return this.low_ == 0 && this.high_ == 0;
    }
    isNegative() {
      return this.high_ < 0;
    }
    isOdd() {
      return (this.low_ & 1) == 1;
    }
    equals(other) {
      return this.low_ == other.low_ && this.high_ == other.high_;
    }
    notEquals(other) {
      return !this.equals(other);
    }
    lessThan(other) {
      return this.compare(other) < 0;
    }
    lessThanOrEqual(other) {
      return this.compare(other) <= 0;
    }
    greaterThan(other) {
      return this.compare(other) > 0;
    }
    greaterThanOrEqual(other) {
      return this.compare(other) >= 0;
    }
    compare(other) {
      if (this.high_ == other.high_) {
        if (this.low_ == other.low_) {
          return 0;
        }
        return this.getLowBitsUnsigned() > other.getLowBitsUnsigned() ? 1 : -1;
      }
      return this.high_ > other.high_ ? 1 : -1;
    }
    negate() {
      var negLow = ~this.low_ + 1 | 0;
      var overflowFromLow = !negLow;
      var negHigh = ~this.high_ + overflowFromLow | 0;
      return Long.fromBits(negLow, negHigh);
    }
    add(other) {
      var a48 = this.high_ >>> 16;
      var a32 = this.high_ & 65535;
      var a16 = this.low_ >>> 16;
      var a00 = this.low_ & 65535;
      var b48 = other.high_ >>> 16;
      var b32 = other.high_ & 65535;
      var b16 = other.low_ >>> 16;
      var b00 = other.low_ & 65535;
      var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
      c00 += a00 + b00;
      c16 += c00 >>> 16;
      c00 &= 65535;
      c16 += a16 + b16;
      c32 += c16 >>> 16;
      c16 &= 65535;
      c32 += a32 + b32;
      c48 += c32 >>> 16;
      c32 &= 65535;
      c48 += a48 + b48;
      c48 &= 65535;
      return Long.fromBits(c16 << 16 | c00, c48 << 16 | c32);
    }
    subtract(other) {
      return this.add(other.negate());
    }
    multiply(other) {
      if (this.isZero()) {
        return this;
      }
      if (other.isZero()) {
        return other;
      }
      var a48 = this.high_ >>> 16;
      var a32 = this.high_ & 65535;
      var a16 = this.low_ >>> 16;
      var a00 = this.low_ & 65535;
      var b48 = other.high_ >>> 16;
      var b32 = other.high_ & 65535;
      var b16 = other.low_ >>> 16;
      var b00 = other.low_ & 65535;
      var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
      c00 += a00 * b00;
      c16 += c00 >>> 16;
      c00 &= 65535;
      c16 += a16 * b00;
      c32 += c16 >>> 16;
      c16 &= 65535;
      c16 += a00 * b16;
      c32 += c16 >>> 16;
      c16 &= 65535;
      c32 += a32 * b00;
      c48 += c32 >>> 16;
      c32 &= 65535;
      c32 += a16 * b16;
      c48 += c32 >>> 16;
      c32 &= 65535;
      c32 += a00 * b32;
      c48 += c32 >>> 16;
      c32 &= 65535;
      c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
      c48 &= 65535;
      return Long.fromBits(c16 << 16 | c00, c48 << 16 | c32);
    }
    div(other) {
      if (other.isZero()) {
        throw new Error("division by zero");
      }
      if (this.isNegative()) {
        if (this.equals(Long.getMinValue())) {
          if (other.equals(Long.getOne()) || other.equals(Long.getNegOne())) {
            return Long.getMinValue();
          }
          if (other.equals(Long.getMinValue())) {
            return Long.getOne();
          }
          var halfThis = this.shiftRight(1);
          var approx = halfThis.div(other).shiftLeft(1);
          if (approx.equals(Long.getZero())) {
            return other.isNegative() ? Long.getOne() : Long.getNegOne();
          }
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
        if (other.isNegative()) {
          return this.negate().div(other.negate());
        }
        return this.negate().div(other).negate();
      }
      if (this.isZero()) {
        return Long.getZero();
      }
      if (other.isNegative()) {
        if (other.equals(Long.getMinValue())) {
          return Long.getZero();
        }
        return this.div(other.negate()).negate();
      }
      var res = Long.getZero();
      var rem = this;
      while (rem.greaterThanOrEqual(other)) {
        var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));
        var log2 = Math.ceil(Math.log(approx) / Math.LN2);
        var delta = log2 <= 48 ? 1 : Math.pow(2, log2 - 48);
        var approxRes = Long.fromNumber(approx);
        var approxRem = approxRes.multiply(other);
        while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
          approx -= delta;
          approxRes = Long.fromNumber(approx);
          approxRem = approxRes.multiply(other);
        }
        if (approxRes.isZero()) {
          approxRes = Long.getOne();
        }
        res = res.add(approxRes);
        rem = rem.subtract(approxRem);
      }
      return res;
    }
    modulo(other) {
      return this.subtract(this.div(other).multiply(other));
    }
    not() {
      return Long.fromBits(~this.low_, ~this.high_);
    }
    and(other) {
      return Long.fromBits(this.low_ & other.low_, this.high_ & other.high_);
    }
    or(other) {
      return Long.fromBits(this.low_ | other.low_, this.high_ | other.high_);
    }
    xor(other) {
      return Long.fromBits(this.low_ ^ other.low_, this.high_ ^ other.high_);
    }
    shiftLeft(numBits) {
      numBits &= 63;
      if (numBits == 0) {
        return this;
      } else {
        var low = this.low_;
        if (numBits < 32) {
          var high = this.high_;
          return Long.fromBits(low << numBits, high << numBits | low >>> 32 - numBits);
        } else {
          return Long.fromBits(0, low << numBits - 32);
        }
      }
    }
    shiftRight(numBits) {
      numBits &= 63;
      if (numBits == 0) {
        return this;
      } else {
        var high = this.high_;
        if (numBits < 32) {
          var low = this.low_;
          return Long.fromBits(low >>> numBits | high << 32 - numBits, high >> numBits);
        } else {
          return Long.fromBits(high >> numBits - 32, high >= 0 ? 0 : -1);
        }
      }
    }
    shiftRightUnsigned(numBits) {
      numBits &= 63;
      if (numBits == 0) {
        return this;
      } else {
        var high = this.high_;
        if (numBits < 32) {
          var low = this.low_;
          return Long.fromBits(low >>> numBits | high << 32 - numBits, high >>> numBits);
        } else {
          if (numBits == 32) {
            return Long.fromBits(high, 0);
          } else {
            return Long.fromBits(high >>> numBits - 32, 0);
          }
        }
      }
    }
    static fromInt(value) {
      var intValue = value | 0;
      asserts.assert(value === intValue, "value should be a 32-bit integer");
      if (-128 <= intValue && intValue < 128) {
        return getCachedIntValue_(intValue);
      } else {
        return new Long(intValue, intValue < 0 ? -1 : 0);
      }
    }
    static fromNumber(value) {
      if (value > 0) {
        if (value >= TWO_PWR_63_DBL_) {
          return Long.getMaxValue();
        }
        return new Long(value, value / TWO_PWR_32_DBL_);
      } else {
        if (value < 0) {
          if (value <= -TWO_PWR_63_DBL_) {
            return Long.getMinValue();
          }
          return (new Long(-value, -value / TWO_PWR_32_DBL_)).negate();
        } else {
          return Long.getZero();
        }
      }
    }
    static fromBits(lowBits, highBits) {
      return new Long(lowBits, highBits);
    }
    static fromString(str, opt_radix) {
      if (str.charAt(0) == "-") {
        return Long.fromString(str.substring(1), opt_radix).negate();
      }
      var numberValue = parseInt(str, opt_radix || 10);
      if (numberValue <= MAX_SAFE_INTEGER_) {
        return new Long(numberValue % TWO_PWR_32_DBL_ | 0, numberValue / TWO_PWR_32_DBL_ | 0);
      }
      if (str.length == 0) {
        throw new Error("number format error: empty string");
      }
      if (str.indexOf("-") >= 0) {
        throw new Error('number format error: interior "-" character: ' + str);
      }
      var radix = opt_radix || 10;
      if (radix < 2 || 36 < radix) {
        throw new Error("radix out of range: " + radix);
      }
      var radixToPower = Long.fromNumber(Math.pow(radix, 8));
      var result = Long.getZero();
      for (var i = 0; i < str.length; i += 8) {
        var size = Math.min(8, str.length - i);
        var value = parseInt(str.substring(i, i + size), radix);
        if (size < 8) {
          var power = Long.fromNumber(Math.pow(radix, size));
          result = result.multiply(power).add(Long.fromNumber(value));
        } else {
          result = result.multiply(radixToPower);
          result = result.add(Long.fromNumber(value));
        }
      }
      return result;
    }
    static isStringInRange(str, opt_radix) {
      var radix = opt_radix || 10;
      if (radix < 2 || 36 < radix) {
        throw new Error("radix out of range: " + radix);
      }
      var extremeValue = str.charAt(0) == "-" ? MIN_VALUE_FOR_RADIX_[radix] : MAX_VALUE_FOR_RADIX_[radix];
      if (str.length < extremeValue.length) {
        return true;
      } else {
        if (str.length == extremeValue.length && str <= extremeValue) {
          return true;
        } else {
          return false;
        }
      }
    }
    static getZero() {
      return ZERO_;
    }
    static getOne() {
      return ONE_;
    }
    static getNegOne() {
      return NEG_ONE_;
    }
    static getMaxValue() {
      return MAX_VALUE_;
    }
    static getMinValue() {
      return MIN_VALUE_;
    }
    static getTwoPwr24() {
      return TWO_PWR_24_;
    }
  }
  exports = Long;
  const IntCache_ = {};
  function getCachedIntValue_(value) {
    return reflect.cache(IntCache_, value, function(val) {
      return new Long(val, val < 0 ? -1 : 0);
    });
  }
  const MAX_VALUE_FOR_RADIX_ = ["", "", "111111111111111111111111111111111111111111111111111111111111111", "2021110011022210012102010021220101220221", "13333333333333333333333333333333", "1104332401304422434310311212", "1540241003031030222122211", "22341010611245052052300", "777777777777777777777", "67404283172107811827", "9223372036854775807", "1728002635214590697", "41a792678515120367", "10b269549075433c37", "4340724c6c71dc7a7", "160e2ad3246366807", "7fffffffffffffff", "33d3d8307b214008", "16agh595df825fa7", 
  "ba643dci0ffeehh", "5cbfjia3fh26ja7", "2heiciiie82dh97", "1adaibb21dckfa7", "i6k448cf4192c2", "acd772jnc9l0l7", "64ie1focnn5g77", "3igoecjbmca687", "27c48l5b37oaop", "1bk39f3ah3dmq7", "q1se8f0m04isb", "hajppbc1fc207", "bm03i95hia437", "7vvvvvvvvvvvv", "5hg4ck9jd4u37", "3tdtk1v8j6tpp", "2pijmikexrxp7", "1y2p0ij32e8e7"];
  const MIN_VALUE_FOR_RADIX_ = ["", "", "-1000000000000000000000000000000000000000000000000000000000000000", "-2021110011022210012102010021220101220222", "-20000000000000000000000000000000", "-1104332401304422434310311213", "-1540241003031030222122212", "-22341010611245052052301", "-1000000000000000000000", "-67404283172107811828", "-9223372036854775808", "-1728002635214590698", "-41a792678515120368", "-10b269549075433c38", "-4340724c6c71dc7a8", "-160e2ad3246366808", "-8000000000000000", "-33d3d8307b214009", 
  "-16agh595df825fa8", "-ba643dci0ffeehi", "-5cbfjia3fh26ja8", "-2heiciiie82dh98", "-1adaibb21dckfa8", "-i6k448cf4192c3", "-acd772jnc9l0l8", "-64ie1focnn5g78", "-3igoecjbmca688", "-27c48l5b37oaoq", "-1bk39f3ah3dmq8", "-q1se8f0m04isc", "-hajppbc1fc208", "-bm03i95hia438", "-8000000000000", "-5hg4ck9jd4u38", "-3tdtk1v8j6tpq", "-2pijmikexrxp8", "-1y2p0ij32e8e8"];
  const MAX_SAFE_INTEGER_ = 9007199254740991;
  const TWO_PWR_32_DBL_ = 4294967296;
  const TWO_PWR_63_DBL_ = 0x7fffffffffffffff;
  const ZERO_ = Long.fromBits(0, 0);
  const ONE_ = Long.fromBits(1, 0);
  const NEG_ONE_ = Long.fromBits(-1, -1);
  const MAX_VALUE_ = Long.fromBits(4294967295, 2147483647);
  const MIN_VALUE_ = Long.fromBits(0, 2147483648);
  const TWO_PWR_24_ = Long.fromBits(1 << 24, 0);
  return exports;
});
goog.provide("cljs.core");
goog.require("goog.math.Long");
goog.require("goog.math.Integer");
goog.require("goog.string");
goog.require("goog.object");
goog.require("goog.array");
goog.require("goog.Uri");
goog.require("goog.string.StringBuffer");
cljs.core._STAR_clojurescript_version_STAR_ = "1.10.758";
cljs.core._STAR_unchecked_if_STAR_ = false;
cljs.core._STAR_unchecked_arrays_STAR_ = false;
cljs.core._STAR_warn_on_infer_STAR_ = false;
if (typeof cljs !== "undefined" && typeof cljs.core !== "undefined" && typeof cljs.core.PROTOCOL_SENTINEL !== "undefined") {
} else {
  cljs.core.PROTOCOL_SENTINEL = {};
}
cljs.core.MODULE_URIS = null;
cljs.core.MODULE_INFOS = null;
cljs.core._STAR_target_STAR_ = goog.define("cljs.core._STAR_target_STAR_", "default");
cljs.core._STAR_global_STAR_ = goog.define("cljs.core._STAR_global_STAR_", "default");
cljs.core._STAR_ns_STAR_ = null;
cljs.core._STAR_out_STAR_ = null;
cljs.core._STAR_assert_STAR_ = true;
if (typeof cljs !== "undefined" && typeof cljs.core !== "undefined" && typeof cljs.core._STAR_print_fn_STAR_ !== "undefined") {
} else {
  cljs.core._STAR_print_fn_STAR_ = null;
}
cljs.core._STAR_exec_tap_fn_STAR_ = function cljs$core$_STAR_exec_tap_fn_STAR_(f) {
  if (typeof setTimeout !== "undefined") {
    var and__4115__auto__ = setTimeout(f, 0);
    if (cljs.core.truth_(and__4115__auto__)) {
      return true;
    } else {
      return and__4115__auto__;
    }
  } else {
    return false;
  }
};
if (typeof cljs !== "undefined" && typeof cljs.core !== "undefined" && typeof cljs.core._STAR_print_err_fn_STAR_ !== "undefined") {
} else {
  cljs.core._STAR_print_err_fn_STAR_ = null;
}
cljs.core.set_print_fn_BANG_ = function cljs$core$set_print_fn_BANG_(f) {
  return cljs.core._STAR_print_fn_STAR_ = f;
};
cljs.core.set_print_err_fn_BANG_ = function cljs$core$set_print_err_fn_BANG_(f) {
  return cljs.core._STAR_print_err_fn_STAR_ = f;
};
cljs.core._STAR_flush_on_newline_STAR_ = true;
cljs.core._STAR_print_newline_STAR_ = true;
cljs.core._STAR_print_readably_STAR_ = true;
cljs.core._STAR_print_meta_STAR_ = false;
cljs.core._STAR_print_dup_STAR_ = false;
cljs.core._STAR_print_namespace_maps_STAR_ = false;
cljs.core._STAR_print_length_STAR_ = null;
cljs.core._STAR_print_level_STAR_ = null;
cljs.core._STAR_print_fn_bodies_STAR_ = false;
if (typeof cljs !== "undefined" && typeof cljs.core !== "undefined" && typeof cljs.core._STAR_loaded_libs_STAR_ !== "undefined") {
} else {
  cljs.core._STAR_loaded_libs_STAR_ = null;
}
cljs.core.pr_opts = function cljs$core$pr_opts() {
  return new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", -151457939), cljs.core._STAR_flush_on_newline_STAR_, new cljs.core.Keyword(null, "readably", "readably", 1129599760), cljs.core._STAR_print_readably_STAR_, new cljs.core.Keyword(null, "meta", "meta", 1499536964), cljs.core._STAR_print_meta_STAR_, new cljs.core.Keyword(null, "dup", "dup", 556298533), cljs.core._STAR_print_dup_STAR_, new cljs.core.Keyword(null, "print-length", "print-length", 
  1931866356), cljs.core._STAR_print_length_STAR_], null);
};
cljs.core.enable_console_print_BANG_ = function cljs$core$enable_console_print_BANG_() {
  cljs.core._STAR_print_newline_STAR_ = false;
  cljs.core.set_print_fn_BANG_(function() {
    var xs = arguments;
    return console.log.apply(console, goog.array.clone(xs));
  });
  cljs.core.set_print_err_fn_BANG_(function() {
    var xs = arguments;
    return console.error.apply(console, goog.array.clone(xs));
  });
  return null;
};
cljs.core.truth_ = function cljs$core$truth_(x) {
  return x != null && x !== false;
};
cljs.core.not_native = null;
cljs.core.identical_QMARK_ = function cljs$core$identical_QMARK_(x, y) {
  return x === y;
};
cljs.core.nil_QMARK_ = function cljs$core$nil_QMARK_(x) {
  return x == null;
};
cljs.core.array_QMARK_ = function cljs$core$array_QMARK_(x) {
  if (cljs.core._STAR_target_STAR_ === "nodejs") {
    return Array.isArray(x);
  } else {
    return x instanceof Array;
  }
};
cljs.core.number_QMARK_ = function cljs$core$number_QMARK_(x) {
  return typeof x === "number";
};
cljs.core.not = function cljs$core$not(x) {
  if (x == null) {
    return true;
  } else {
    if (x === false) {
      return true;
    } else {
      return false;
    }
  }
};
cljs.core.some_QMARK_ = function cljs$core$some_QMARK_(x) {
  return !(x == null);
};
cljs.core.object_QMARK_ = function cljs$core$object_QMARK_(x) {
  if (!(x == null)) {
    return x.constructor === Object;
  } else {
    return false;
  }
};
cljs.core.string_QMARK_ = function cljs$core$string_QMARK_(x) {
  return goog.isString(x);
};
cljs.core.char_QMARK_ = function cljs$core$char_QMARK_(x) {
  return typeof x === "string" && 1 === x.length;
};
cljs.core.any_QMARK_ = function cljs$core$any_QMARK_(x) {
  return true;
};
cljs.core.native_satisfies_QMARK_ = function cljs$core$native_satisfies_QMARK_(p, x) {
  var x__$1 = x == null ? null : x;
  if (p[goog.typeOf(x__$1)]) {
    return true;
  } else {
    if (p["_"]) {
      return true;
    } else {
      return false;
    }
  }
};
cljs.core.is_proto_ = function cljs$core$is_proto_(x) {
  return x.constructor.prototype === x;
};
cljs.core._STAR_main_cli_fn_STAR_ = null;
cljs.core._STAR_command_line_args_STAR_ = null;
cljs.core.type = function cljs$core$type(x) {
  if (x == null) {
    return null;
  } else {
    return x.constructor;
  }
};
cljs.core.missing_protocol = function cljs$core$missing_protocol(proto, obj) {
  var ty = cljs.core.type(obj);
  var ty__$1 = cljs.core.truth_(function() {
    var and__4115__auto__ = ty;
    if (cljs.core.truth_(and__4115__auto__)) {
      return ty.cljs$lang$type;
    } else {
      return and__4115__auto__;
    }
  }()) ? ty.cljs$lang$ctorStr : goog.typeOf(obj);
  return new Error(["No protocol method ", proto, " defined for type ", ty__$1, ": ", obj].join(""));
};
cljs.core.type__GT_str = function cljs$core$type__GT_str(ty) {
  var temp__5733__auto__ = ty.cljs$lang$ctorStr;
  if (cljs.core.truth_(temp__5733__auto__)) {
    var s = temp__5733__auto__;
    return s;
  } else {
    return cljs.core.str.cljs$core$IFn$_invoke$arity$1(ty);
  }
};
cljs.core.load_file = function cljs$core$load_file(file) {
  if (cljs.core.truth_(COMPILED)) {
    return null;
  } else {
    return goog.nodeGlobalRequire(file);
  }
};
if (typeof Symbol !== "undefined" && goog.typeOf(Symbol) === "function") {
  cljs.core.ITER_SYMBOL = Symbol.iterator;
} else {
  cljs.core.ITER_SYMBOL = "@@iterator";
}
cljs.core.CHAR_MAP = {"]":"_RBRACK_", "'":"_SINGLEQUOTE_", "\x3d":"_EQ_", '"':"_DOUBLEQUOTE_", "!":"_BANG_", "*":"_STAR_", "%":"_PERCENT_", "|":"_BAR_", "~":"_TILDE_", "/":"_SLASH_", "\\":"_BSLASH_", "-":"_", "?":"_QMARK_", "\x26":"_AMPERSAND_", ":":"_COLON_", "\x3c":"_LT_", "{":"_LBRACE_", "}":"_RBRACE_", "[":"_LBRACK_", "#":"_SHARP_", "^":"_CARET_", "+":"_PLUS_", "@":"_CIRCA_", "\x3e":"_GT_"};
cljs.core.DEMUNGE_MAP = {"_RBRACE_":"}", "_COLON_":":", "_BANG_":"!", "_QMARK_":"?", "_BSLASH_":"\\\\", "_SLASH_":"/", "_PERCENT_":"%", "_PLUS_":"+", "_SHARP_":"#", "_LBRACE_":"{", "_BAR_":"|", "_LBRACK_":"[", "_EQ_":"\x3d", "_":"-", "_TILDE_":"~", "_RBRACK_":"]", "_GT_":"\x3e", "_SINGLEQUOTE_":"'", "_CIRCA_":"@", "_AMPERSAND_":"\x26", "_DOUBLEQUOTE_":'\\"', "_CARET_":"^", "_LT_":"\x3c", "_STAR_":"*"};
cljs.core.DEMUNGE_PATTERN = null;
cljs.core.system_time = function cljs$core$system_time() {
  if (typeof performance !== "undefined" && !(performance.now == null)) {
    return performance.now();
  } else {
    if (typeof process !== "undefined" && !(process.hrtime == null)) {
      var t = process.hrtime();
      return (t[0] * 1.0E9 + t[1]) / 1000000.0;
    } else {
      return (new Date).getTime();
    }
  }
};
cljs.core.make_array = function cljs$core$make_array(var_args) {
  var G__1996 = arguments.length;
  switch(G__1996) {
    case 1:
      return cljs.core.make_array.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.make_array.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var args_arr__4757__auto__ = [];
      var len__4736__auto___1998 = arguments.length;
      var i__4737__auto___1999 = 0;
      while (true) {
        if (i__4737__auto___1999 < len__4736__auto___1998) {
          args_arr__4757__auto__.push(arguments[i__4737__auto___1999]);
          var G__2000 = i__4737__auto___1999 + 1;
          i__4737__auto___1999 = G__2000;
          continue;
        } else {
        }
        break;
      }
      var argseq__4758__auto__ = new cljs.core.IndexedSeq(args_arr__4757__auto__.slice(2), 0, null);
      return cljs.core.make_array.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__4758__auto__);
  }
};
cljs.core.make_array.cljs$core$IFn$_invoke$arity$1 = function(size) {
  return new Array(size);
};
cljs.core.make_array.cljs$core$IFn$_invoke$arity$2 = function(type, size) {
  return new Array(size);
};
cljs.core.make_array.cljs$core$IFn$_invoke$arity$variadic = function(type, size, more_sizes) {
  var dims = more_sizes;
  var dimarray = new Array(size);
  var n__4613__auto___2001 = dimarray.length;
  var i_2002 = 0;
  while (true) {
    if (i_2002 < n__4613__auto___2001) {
      dimarray[i_2002] = cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.make_array, null, dims);
      var G__2003 = i_2002 + 1;
      i_2002 = G__2003;
      continue;
    } else {
    }
    break;
  }
  return dimarray;
};
cljs.core.make_array.cljs$lang$applyTo = function(seq1993) {
  var G__1994 = cljs.core.first(seq1993);
  var seq1993__$1 = cljs.core.next(seq1993);
  var G__1995 = cljs.core.first(seq1993__$1);
  var seq1993__$2 = cljs.core.next(seq1993__$1);
  var self__4723__auto__ = this;
  return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__1994, G__1995, seq1993__$2);
};
cljs.core.make_array.cljs$lang$maxFixedArity = 2;
cljs.core.aclone = function cljs$core$aclone(arr) {
  var len = arr.length;
  var new_arr = new Array(len);
  var n__4613__auto___2004 = len;
  var i_2005 = 0;
  while (true) {
    if (i_2005 < n__4613__auto___2004) {
      new_arr[i_2005] = arr[i_2005];
      var G__2006 = i_2005 + 1;
      i_2005 = G__2006;
      continue;
    } else {
    }
    break;
  }
  return new_arr;
};
cljs.core.array = function cljs$core$array(var_args) {
  var a = new Array(arguments.length);
  var i = 0;
  while (true) {
    if (i < a.length) {
      a[i] = arguments[i];
      var G__2007 = i + 1;
      i = G__2007;
      continue;
    } else {
      return a;
    }
    break;
  }
};
cljs.core.maybe_warn = function cljs$core$maybe_warn(e) {
  if (cljs.core.truth_(cljs.core._STAR_print_err_fn_STAR_)) {
    return cljs.core._STAR_print_err_fn_STAR_.cljs$core$IFn$_invoke$arity$1 ? cljs.core._STAR_print_err_fn_STAR_.cljs$core$IFn$_invoke$arity$1(e) : cljs.core._STAR_print_err_fn_STAR_.call(null, e);
  } else {
    return null;
  }
};
cljs.core.checked_aget = function cljs$core$checked_aget(var_args) {
  var G__2012 = arguments.length;
  switch(G__2012) {
    case 2:
      return cljs.core.checked_aget.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var args_arr__4757__auto__ = [];
      var len__4736__auto___2015 = arguments.length;
      var i__4737__auto___2016 = 0;
      while (true) {
        if (i__4737__auto___2016 < len__4736__auto___2015) {
          args_arr__4757__auto__.push(arguments[i__4737__auto___2016]);
          var G__2017 = i__4737__auto___2016 + 1;
          i__4737__auto___2016 = G__2017;
          continue;
        } else {
        }
        break;
      }
      var argseq__4758__auto__ = new cljs.core.IndexedSeq(args_arr__4757__auto__.slice(2), 0, null);
      return cljs.core.checked_aget.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__4758__auto__);
  }
};
cljs.core.checked_aget.cljs$core$IFn$_invoke$arity$2 = function(array, idx) {
  try {
    if (cljs.core.truth_(function() {
      var or__4126__auto__ = cljs.core.array_QMARK_(array);
      if (or__4126__auto__) {
        return or__4126__auto__;
      } else {
        return goog.isArrayLike(array);
      }
    }())) {
    } else {
      throw new Error("Assert failed: (or (array? array) (goog/isArrayLike array))");
    }
    if (typeof idx === "number") {
    } else {
      throw new Error("Assert failed: (number? idx)");
    }
    if (!(idx < 0)) {
    } else {
      throw new Error("Assert failed: (not (neg? idx))");
    }
    if (idx < array.length) {
    } else {
      throw new Error("Assert failed: (\x3c idx (alength array))");
    }
  } catch (e2013) {
    var e_2018 = e2013;
    cljs.core.maybe_warn(e_2018);
  }
  return array[idx];
};
cljs.core.checked_aget.cljs$core$IFn$_invoke$arity$variadic = function(array, idx, idxs) {
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.checked_aget, cljs.core.checked_aget.cljs$core$IFn$_invoke$arity$2(array, idx), idxs);
};
cljs.core.checked_aget.cljs$lang$applyTo = function(seq2009) {
  var G__2010 = cljs.core.first(seq2009);
  var seq2009__$1 = cljs.core.next(seq2009);
  var G__2011 = cljs.core.first(seq2009__$1);
  var seq2009__$2 = cljs.core.next(seq2009__$1);
  var self__4723__auto__ = this;
  return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__2010, G__2011, seq2009__$2);
};
cljs.core.checked_aget.cljs$lang$maxFixedArity = 2;
cljs.core.checked_aset = function cljs$core$checked_aset(var_args) {
  var G__2024 = arguments.length;
  switch(G__2024) {
    case 3:
      return cljs.core.checked_aset.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var args_arr__4757__auto__ = [];
      var len__4736__auto___2027 = arguments.length;
      var i__4737__auto___2028 = 0;
      while (true) {
        if (i__4737__auto___2028 < len__4736__auto___2027) {
          args_arr__4757__auto__.push(arguments[i__4737__auto___2028]);
          var G__2029 = i__4737__auto___2028 + 1;
          i__4737__auto___2028 = G__2029;
          continue;
        } else {
        }
        break;
      }
      var argseq__4758__auto__ = new cljs.core.IndexedSeq(args_arr__4757__auto__.slice(3), 0, null);
      return cljs.core.checked_aset.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__4758__auto__);
  }
};
cljs.core.checked_aset.cljs$core$IFn$_invoke$arity$3 = function(array, idx, val) {
  try {
    if (cljs.core.truth_(function() {
      var or__4126__auto__ = cljs.core.array_QMARK_(array);
      if (or__4126__auto__) {
        return or__4126__auto__;
      } else {
        return goog.isArrayLike(array);
      }
    }())) {
    } else {
      throw new Error("Assert failed: (or (array? array) (goog/isArrayLike array))");
    }
    if (typeof idx === "number") {
    } else {
      throw new Error("Assert failed: (number? idx)");
    }
    if (!(idx < 0)) {
    } else {
      throw new Error("Assert failed: (not (neg? idx))");
    }
    if (idx < array.length) {
    } else {
      throw new Error("Assert failed: (\x3c idx (alength array))");
    }
  } catch (e2025) {
    var e_2030 = e2025;
    cljs.core.maybe_warn(e_2030);
  }
  return array[idx] = val;
};
cljs.core.checked_aset.cljs$core$IFn$_invoke$arity$variadic = function(array, idx, idx2, idxv) {
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$4(cljs.core.checked_aset, cljs.core.checked_aget.cljs$core$IFn$_invoke$arity$2(array, idx), idx2, idxv);
};
cljs.core.checked_aset.cljs$lang$applyTo = function(seq2020) {
  var G__2021 = cljs.core.first(seq2020);
  var seq2020__$1 = cljs.core.next(seq2020);
  var G__2022 = cljs.core.first(seq2020__$1);
  var seq2020__$2 = cljs.core.next(seq2020__$1);
  var G__2023 = cljs.core.first(seq2020__$2);
  var seq2020__$3 = cljs.core.next(seq2020__$2);
  var self__4723__auto__ = this;
  return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__2021, G__2022, G__2023, seq2020__$3);
};
cljs.core.checked_aset.cljs$lang$maxFixedArity = 3;
cljs.core.checked_aget_SINGLEQUOTE_ = function cljs$core$checked_aget_SINGLEQUOTE_(var_args) {
  var G__2035 = arguments.length;
  switch(G__2035) {
    case 2:
      return cljs.core.checked_aget_SINGLEQUOTE_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var args_arr__4757__auto__ = [];
      var len__4736__auto___2037 = arguments.length;
      var i__4737__auto___2038 = 0;
      while (true) {
        if (i__4737__auto___2038 < len__4736__auto___2037) {
          args_arr__4757__auto__.push(arguments[i__4737__auto___2038]);
          var G__2039 = i__4737__auto___2038 + 1;
          i__4737__auto___2038 = G__2039;
          continue;
        } else {
        }
        break;
      }
      var argseq__4758__auto__ = new cljs.core.IndexedSeq(args_arr__4757__auto__.slice(2), 0, null);
      return cljs.core.checked_aget_SINGLEQUOTE_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__4758__auto__);
  }
};
cljs.core.checked_aget_SINGLEQUOTE_.cljs$core$IFn$_invoke$arity$2 = function(array, idx) {
  if (cljs.core.truth_(function() {
    var or__4126__auto__ = cljs.core.array_QMARK_(array);
    if (or__4126__auto__) {
      return or__4126__auto__;
    } else {
      return goog.isArrayLike(array);
    }
  }())) {
  } else {
    throw new Error("Assert failed: (or (array? array) (goog/isArrayLike array))");
  }
  if (typeof idx === "number") {
  } else {
    throw new Error("Assert failed: (number? idx)");
  }
  if (!(idx < 0)) {
  } else {
    throw new Error("Assert failed: (not (neg? idx))");
  }
  if (idx < array.length) {
  } else {
    throw new Error("Assert failed: (\x3c idx (alength array))");
  }
  return array[idx];
};
cljs.core.checked_aget_SINGLEQUOTE_.cljs$core$IFn$_invoke$arity$variadic = function(array, idx, idxs) {
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.checked_aget_SINGLEQUOTE_, cljs.core.checked_aget_SINGLEQUOTE_.cljs$core$IFn$_invoke$arity$2(array, idx), idxs);
};
cljs.core.checked_aget_SINGLEQUOTE_.cljs$lang$applyTo = function(seq2032) {
  var G__2033 = cljs.core.first(seq2032);
  var seq2032__$1 = cljs.core.next(seq2032);
  var G__2034 = cljs.core.first(seq2032__$1);
  var seq2032__$2 = cljs.core.next(seq2032__$1);
  var self__4723__auto__ = this;
  return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__2033, G__2034, seq2032__$2);
};
cljs.core.checked_aget_SINGLEQUOTE_.cljs$lang$maxFixedArity = 2;
cljs.core.checked_aset_SINGLEQUOTE_ = function cljs$core$checked_aset_SINGLEQUOTE_(var_args) {
  var G__2045 = arguments.length;
  switch(G__2045) {
    case 3:
      return cljs.core.checked_aset_SINGLEQUOTE_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var args_arr__4757__auto__ = [];
      var len__4736__auto___2047 = arguments.length;
      var i__4737__auto___2048 = 0;
      while (true) {
        if (i__4737__auto___2048 < len__4736__auto___2047) {
          args_arr__4757__auto__.push(arguments[i__4737__auto___2048]);
          var G__2049 = i__4737__auto___2048 + 1;
          i__4737__auto___2048 = G__2049;
          continue;
        } else {
        }
        break;
      }
      var argseq__4758__auto__ = new cljs.core.IndexedSeq(args_arr__4757__auto__.slice(3), 0, null);
      return cljs.core.checked_aset_SINGLEQUOTE_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__4758__auto__);
  }
};
cljs.core.checked_aset_SINGLEQUOTE_.cljs$core$IFn$_invoke$arity$3 = function(array, idx, val) {
  if (cljs.core.truth_(function() {
    var or__4126__auto__ = cljs.core.array_QMARK_(array);
    if (or__4126__auto__) {
      return or__4126__auto__;
    } else {
      return goog.isArrayLike(array);
    }
  }())) {
  } else {
    throw new Error("Assert failed: (or (array? array) (goog/isArrayLike array))");
  }
  if (typeof idx === "number") {
  } else {
    throw new Error("Assert failed: (number? idx)");
  }
  if (!(idx < 0)) {
  } else {
    throw new Error("Assert failed: (not (neg? idx))");
  }
  if (idx < array.length) {
  } else {
    throw new Error("Assert failed: (\x3c idx (alength array))");
  }
  return array[idx] = val;
};
cljs.core.checked_aset_SINGLEQUOTE_.cljs$core$IFn$_invoke$arity$variadic = function(array, idx, idx2, idxv) {
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$4(cljs.core.checked_aset_SINGLEQUOTE_, cljs.core.checked_aget_SINGLEQUOTE_.cljs$core$IFn$_invoke$arity$2(array, idx), idx2, idxv);
};
cljs.core.checked_aset_SINGLEQUOTE_.cljs$lang$applyTo = function(seq2041) {
  var G__2042 = cljs.core.first(seq2041);
  var seq2041__$1 = cljs.core.next(seq2041);
  var G__2043 = cljs.core.first(seq2041__$1);
  var seq2041__$2 = cljs.core.next(seq2041__$1);
  var G__2044 = cljs.core.first(seq2041__$2);
  var seq2041__$3 = cljs.core.next(seq2041__$2);
  var self__4723__auto__ = this;
  return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__2042, G__2043, G__2044, seq2041__$3);
};
cljs.core.checked_aset_SINGLEQUOTE_.cljs$lang$maxFixedArity = 3;
cljs.core.aget = function cljs$core$aget(var_args) {
  var G__2054 = arguments.length;
  switch(G__2054) {
    case 2:
      return cljs.core.aget.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var args_arr__4757__auto__ = [];
      var len__4736__auto___2056 = arguments.length;
      var i__4737__auto___2057 = 0;
      while (true) {
        if (i__4737__auto___2057 < len__4736__auto___2056) {
          args_arr__4757__auto__.push(arguments[i__4737__auto___2057]);
          var G__2058 = i__4737__auto___2057 + 1;
          i__4737__auto___2057 = G__2058;
          continue;
        } else {
        }
        break;
      }
      var argseq__4758__auto__ = new cljs.core.IndexedSeq(args_arr__4757__auto__.slice(2), 0, null);
      return cljs.core.aget.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__4758__auto__);
  }
};
cljs.core.aget.cljs$core$IFn$_invoke$arity$2 = function(array, idx) {
  return array[idx];
};
cljs.core.aget.cljs$core$IFn$_invoke$arity$variadic = function(array, idx, idxs) {
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.aget, array[idx], idxs);
};
cljs.core.aget.cljs$lang$applyTo = function(seq2051) {
  var G__2052 = cljs.core.first(seq2051);
  var seq2051__$1 = cljs.core.next(seq2051);
  var G__2053 = cljs.core.first(seq2051__$1);
  var seq2051__$2 = cljs.core.next(seq2051__$1);
  var self__4723__auto__ = this;
  return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__2052, G__2053, seq2051__$2);
};
cljs.core.aget.cljs$lang$maxFixedArity = 2;
cljs.core.aset = function cljs$core$aset(var_args) {
  var G__2064 = arguments.length;
  switch(G__2064) {
    case 3:
      return cljs.core.aset.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var args_arr__4757__auto__ = [];
      var len__4736__auto___2066 = arguments.length;
      var i__4737__auto___2067 = 0;
      while (true) {
        if (i__4737__auto___2067 < len__4736__auto___2066) {
          args_arr__4757__auto__.push(arguments[i__4737__auto___2067]);
          var G__2068 = i__4737__auto___2067 + 1;
          i__4737__auto___2067 = G__2068;
          continue;
        } else {
        }
        break;
      }
      var argseq__4758__auto__ = new cljs.core.IndexedSeq(args_arr__4757__auto__.slice(3), 0, null);
      return cljs.core.aset.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__4758__auto__);
  }
};
cljs.core.aset.cljs$core$IFn$_invoke$arity$3 = function(array, idx, val) {
  return array[idx] = val;
};
cljs.core.aset.cljs$core$IFn$_invoke$arity$variadic = function(array, idx, idx2, idxv) {
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$4(cljs.core.aset, array[idx], idx2, idxv);
};
cljs.core.aset.cljs$lang$applyTo = function(seq2060) {
  var G__2061 = cljs.core.first(seq2060);
  var seq2060__$1 = cljs.core.next(seq2060);
  var G__2062 = cljs.core.first(seq2060__$1);
  var seq2060__$2 = cljs.core.next(seq2060__$1);
  var G__2063 = cljs.core.first(seq2060__$2);
  var seq2060__$3 = cljs.core.next(seq2060__$2);
  var self__4723__auto__ = this;
  return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__2061, G__2062, G__2063, seq2060__$3);
};
cljs.core.aset.cljs$lang$maxFixedArity = 3;
cljs.core.alength = function cljs$core$alength(array) {
  return array.length;
};
cljs.core.into_array = function cljs$core$into_array(var_args) {
  var G__2070 = arguments.length;
  switch(G__2070) {
    case 1:
      return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.into_array.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
cljs.core.into_array.cljs$core$IFn$_invoke$arity$1 = function(aseq) {
  return cljs.core.into_array.cljs$core$IFn$_invoke$arity$2(null, aseq);
};
cljs.core.into_array.cljs$core$IFn$_invoke$arity$2 = function(type, aseq) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(a, x) {
    a.push(x);
    return a;
  }, [], aseq);
};
cljs.core.into_array.cljs$lang$maxFixedArity = 2;
cljs.core.js_invoke = function cljs$core$js_invoke(var_args) {
  var args__4742__auto__ = [];
  var len__4736__auto___2075 = arguments.length;
  var i__4737__auto___2076 = 0;
  while (true) {
    if (i__4737__auto___2076 < len__4736__auto___2075) {
      args__4742__auto__.push(arguments[i__4737__auto___2076]);
      var G__2077 = i__4737__auto___2076 + 1;
      i__4737__auto___2076 = G__2077;
      continue;
    } else {
    }
    break;
  }
  var argseq__4743__auto__ = 2 < args__4742__auto__.length ? new cljs.core.IndexedSeq(args__4742__auto__.slice(2), 0, null) : null;
  return cljs.core.js_invoke.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__4743__auto__);
};
cljs.core.js_invoke.cljs$core$IFn$_invoke$arity$variadic = function(obj, s, args) {
  return obj[s].apply(obj, cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(args));
};
cljs.core.js_invoke.cljs$lang$maxFixedArity = 2;
cljs.core.js_invoke.cljs$lang$applyTo = function(seq2072) {
  var G__2073 = cljs.core.first(seq2072);
  var seq2072__$1 = cljs.core.next(seq2072);
  var G__2074 = cljs.core.first(seq2072__$1);
  var seq2072__$2 = cljs.core.next(seq2072__$1);
  var self__4723__auto__ = this;
  return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__2073, G__2074, seq2072__$2);
};
cljs.core.js_symbol_QMARK_ = function cljs$core$js_symbol_QMARK_(x) {
  return goog.typeOf(x) === "symbol" || typeof Symbol !== "undefined" && x instanceof Symbol;
};
cljs.core.Fn = function() {
};
cljs.core.IFn = function() {
};
var cljs$core$IFn$_invoke$dyn_2080 = function() {
  var G__2081 = null;
  var G__2081__1 = function(this$) {
    var x__4428__auto__ = this$ == null ? null : this$;
    var m__4429__auto__ = cljs.core._invoke[goog.typeOf(x__4428__auto__)];
    if (!(m__4429__auto__ == null)) {
      return m__4429__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4429__auto__.cljs$core$IFn$_invoke$arity$1(this$) : m__4429__auto__.call(null, this$);
    } else {
      var m__4426__auto__ = cljs.core._invoke["_"];
      if (!(m__4426__auto__ == null)) {
        return m__4426__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4426__auto__.cljs$core$IFn$_invoke$arity$1(this$) : m__4426__auto__.call(null, this$);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  };
  var G__2081__2 = function(this$, a) {
    var x__4428__auto__ = this$ == null ? null : this$;
    var m__4429__auto__ = cljs.core._invoke[goog.typeOf(x__4428__auto__)];
    if (!(m__4429__auto__ == null)) {
      return m__4429__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4429__auto__.cljs$core$IFn$_invoke$arity$2(this$, a) : m__4429__auto__.call(null, this$, a);
    } else {
      var m__4426__auto__ = cljs.core._invoke["_"];
      if (!(m__4426__auto__ == null)) {
        return m__4426__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4426__auto__.cljs$core$IFn$_invoke$arity$2(this$, a) : m__4426__auto__.call(null, this$, a);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  };
  var G__2081__3 = function(this$, a, b) {
    var x__4428__auto__ = this$ == null ? null : this$;
    var m__4429__auto__ = cljs.core._invoke[goog.typeOf(x__4428__auto__)];
    if (!(m__4429__auto__ == null)) {
      return m__4429__auto__.cljs$core$IFn$_invoke$arity$3 ? m__4429__auto__.cljs$core$IFn$_invoke$arity$3(this$, a, b) : m__4429__auto__.call(null, this$, a, b);
    } else {
      var m__4426__auto__ = cljs.core._invoke["_"];
      if (!(m__4426__auto__ == null)) {
        return m__4426__auto__.cljs$core$IFn$_invoke$arity$3 ? m__4426__auto__.cljs$core$IFn$_invoke$arity$3(this$, a, b) : m__4426__auto__.call(null, this$, a, b);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  };
  var G__2081__4 = function(this$, a, b, c) {
    var x__4428__auto__ = this$ == null ? null : this$;
    var m__4429__auto__ = cljs.core._invoke[goog.typeOf(x__4428__auto__)];
    if (!(m__4429__auto__ == null)) {
      return m__4429__auto__.cljs$core$IFn$_invoke$arity$4 ? m__4429__auto__.cljs$core$IFn$_invoke$arity$4(this$, a, b, c) : m__4429__auto__.call(null, this$, a, b, c);
    } else {
      var m__4426__auto__ = cljs.core._invoke["_"];
      if (!(m__4426__auto__ == null)) {
        return m__4426__auto__.cljs$core$IFn$_invoke$arity$4 ? m__4426__auto__.cljs$core$IFn$_invoke$arity$4(this$, a, b, c) : m__4426__auto__.call(null, this$, a, b, c);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  };
  var G__2081__5 = function(this$, a, b, c, d) {
    var x__4428__auto__ = this$ == null ? null : this$;
    var m__4429__auto__ = cljs.core._invoke[goog.typeOf(x__4428__auto__)];
    if (!(m__4429__auto__ == null)) {
      return m__4429__auto__.cljs$core$IFn$_invoke$arity$5 ? m__4429__auto__.cljs$core$IFn$_invoke$arity$5(this$, a, b, c, d) : m__4429__auto__.call(null, this$, a, b, c, d);
    } else {
      var m__4426__auto__ = cljs.core._invoke["_"];
      if (!(m__4426__auto__ == null)) {
        return m__4426__auto__.cljs$core$IFn$_invoke$arity$5 ? m__4426__auto__.cljs$core$IFn$_invoke$arity$5(this$, a, b, c, d) : m__4426__auto__.call(null, this$, a, b, c, d);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  };
  var G__2081__6 = function(this$, a, b, c, d, e) {
    var x__4428__auto__ = this$ == null ? null : this$;
    var m__4429__auto__ = cljs.core._invoke[goog.typeOf(x__4428__auto__)];
    if (!(m__4429__auto__ == null)) {
      return m__4429__auto__.cljs$core$IFn$_invoke$arity$6 ? m__4429__auto__.cljs$core$IFn$_invoke$arity$6(this$, a, b, c, d, e) : m__4429__auto__.call(null, this$, a, b, c, d, e);
    } else {
      var m__4426__auto__ = cljs.core._invoke["_"];
      if (!(m__4426__auto__ == null)) {
        return m__4426__auto__.cljs$core$IFn$_invoke$arity$6 ? m__4426__auto__.cljs$core$IFn$_invoke$arity$6(this$, a, b, c, d, e) : m__4426__auto__.call(null, this$, a, b, c, d, e);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  };
  var G__2081__7 = function(this$, a, b, c, d, e, f) {
    var x__4428__auto__ = this$ == null ? null : this$;
    var m__4429__auto__ = cljs.core._invoke[goog.typeOf(x__4428__auto__)];
    if (!(m__4429__auto__ == null)) {
      return m__4429__auto__.cljs$core$IFn$_invoke$arity$7 ? m__4429__auto__.cljs$core$IFn$_invoke$arity$7(this$, a, b, c, d, e, f) : m__4429__auto__.call(null, this$, a, b, c, d, e, f);
    } else {
      var m__4426__auto__ = cljs.core._invoke["_"];
      if (!(m__4426__auto__ == null)) {
        return m__4426__auto__.cljs$core$IFn$_invoke$arity$7 ? m__4426__auto__.cljs$core$IFn$_invoke$arity$7(this$, a, b, c, d, e, f) : m__4426__auto__.call(null, this$, a, b, c, d, e, f);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  };
  var G__2081__8 = function(this$, a, b, c, d, e, f, g) {
    var x__4428__auto__ = this$ == null ? null : this$;
    var m__4429__auto__ = cljs.core._invoke[goog.typeOf(x__4428__auto__)];
    if (!(m__4429__auto__ == null)) {
      return m__4429__auto__.cljs$core$IFn$_invoke$arity$8 ? m__4429__auto__.cljs$core$IFn$_invoke$arity$8(this$, a, b, c, d, e, f, g) : m__4429__auto__.call(null, this$, a, b, c, d, e, f, g);
    } else {
      var m__4426__auto__ = cljs.core._invoke["_"];
      if (!(m__4426__auto__ == null)) {
        return m__4426__auto__.cljs$core$IFn$_invoke$arity$8 ? m__4426__auto__.cljs$core$IFn$_invoke$arity$8(this$, a, b, c, d, e, f, g) : m__4426__auto__.call(null, this$, a, b, c, d, e, f, g);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  };
  var G__2081__9 = function(this$, a, b, c, d, e, f, g, h) {
    var x__4428__auto__ = this$ == null ? null : this$;
    var m__4429__auto__ = cljs.core._invoke[goog.typeOf(x__4428__auto__)];
    if (!(m__4429__auto__ == null)) {
      return m__4429__auto__.cljs$core$IFn$_invoke$arity$9 ? m__4429__auto__.cljs$core$IFn$_invoke$arity$9(this$, a, b, c, d, e, f, g, h) : m__4429__auto__.call(null, this$, a, b, c, d, e, f, g, h);
    } else {
      var m__4426__auto__ = cljs.core._invoke["_"];
      if (!(m__4426__auto__ == null)) {
        return m__4426__auto__.cljs$core$IFn$_invoke$arity$9 ? m__4426__auto__.cljs$core$IFn$_invoke$arity$9(this$, a, b, c, d, e, f, g, h) : m__4426__auto__.call(null, this$, a, b, c, d, e, f, g, h);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  };
  var G__2081__10 = function(this$, a, b, c, d, e, f, g, h, i) {
    var x__4428__auto__ = this$ == null ? null : this$;
    var m__4429__auto__ = cljs.core._invoke[goog.typeOf(x__4428__auto__)];
    if (!(m__4429__auto__ == null)) {
      return m__4429__auto__.cljs$core$IFn$_invoke$arity$10 ? m__4429__auto__.cljs$core$IFn$_invoke$arity$10(this$, a, b, c, d, e, f, g, h, i) : m__4429__auto__.call(null, this$, a, b, c, d, e, f, g, h, i);
    } else {
      var m__4426__auto__ = cljs.core._invoke["_"];
      if (!(m__4426__auto__ == null)) {
        return m__4426__auto__.cljs$core$IFn$_invoke$arity$10 ? m__4426__auto__.cljs$core$IFn$_invoke$arity$10(this$, a, b, c, d, e, f, g, h, i) : m__4426__auto__.call(null, this$, a, b, c, d, e, f, g, h, i);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  };
  var G__2081__11 = function(this$, a, b, c, d, e, f, g, h, i, j) {
    var x__4428__auto__ = this$ == null ? null : this$;
    var m__4429__auto__ = cljs.core._invoke[goog.typeOf(x__4428__auto__)];
    if (!(m__4429__auto__ == null)) {
      return m__4429__auto__.cljs$core$IFn$_invoke$arity$11 ? m__4429__auto__.cljs$core$IFn$_invoke$arity$11(this$, a, b, c, d, e, f, g, h, i, j) : m__4429__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j);
    } else {
      var m__4426__auto__ = cljs.core._invoke["_"];
      if (!(m__4426__auto__ == null)) {
        return m__4426__auto__.cljs$core$IFn$_invoke$arity$11 ? m__4426__auto__.cljs$core$IFn$_invoke$arity$11(this$, a, b, c, d, e, f, g, h, i, j) : m__4426__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  };
  var G__2081__12 = function(this$, a, b, c, d, e, f, g, h, i, j, k) {
    var x__4428__auto__ = this$ == null ? null : this$;
    var m__4429__auto__ = cljs.core._invoke[goog.typeOf(x__4428__auto__)];
    if (!(m__4429__auto__ == null)) {
      return m__4429__auto__.cljs$core$IFn$_invoke$arity$12 ? m__4429__auto__.cljs$core$IFn$_invoke$arity$12(this$, a, b, c, d, e, f, g, h, i, j, k) : m__4429__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k);
    } else {
      var m__4426__auto__ = cljs.core._invoke["_"];
      if (!(m__4426__auto__ == null)) {
        return m__4426__auto__.cljs$core$IFn$_invoke$arity$12 ? m__4426__auto__.cljs$core$IFn$_invoke$arity$12(this$, a, b, c, d, e, f, g, h, i, j, k) : m__4426__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  };
  var G__2081__13 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l) {
    var x__4428__auto__ = this$ == null ? null : this$;
    var m__4429__auto__ = cljs.core._invoke[goog.typeOf(x__4428__auto__)];
    if (!(m__4429__auto__ == null)) {
      return m__4429__auto__.cljs$core$IFn$_invoke$arity$13 ? m__4429__auto__.cljs$core$IFn$_invoke$arity$13(this$, a, b, c, d, e, f, g, h, i, j, k, l) : m__4429__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l);
    } else {
      var m__4426__auto__ = cljs.core._invoke["_"];
      if (!(m__4426__auto__ == null)) {
        return m__4426__auto__.cljs$core$IFn$_invoke$arity$13 ? m__4426__auto__.cljs$core$IFn$_invoke$arity$13(this$, a, b, c, d, e, f, g, h, i, j, k, l) : m__4426__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  };
  var G__2081__14 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var x__4428__auto__ = this$ == null ? null : this$;
    var m__4429__auto__ = cljs.core._invoke[goog.typeOf(x__4428__auto__)];
    if (!(m__4429__auto__ == null)) {
      return m__4429__auto__.cljs$core$IFn$_invoke$arity$14 ? m__4429__auto__.cljs$core$IFn$_invoke$arity$14(this$, a, b, c, d, e, f, g, h, i, j, k, l, m) : m__4429__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
    } else {
      var m__4426__auto__ = cljs.core._invoke["_"];
      if (!(m__4426__auto__ == null)) {
        return m__4426__auto__.cljs$core$IFn$_invoke$arity$14 ? m__4426__auto__.cljs$core$IFn$_invoke$arity$14(this$, a, b, c, d, e, f, g, h, i, j, k, l, m) : m__4426__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  };
  var G__2081__15 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var x__4428__auto__ = this$ == null ? null : this$;
    var m__4429__auto__ = cljs.core._invoke[goog.typeOf(x__4428__auto__)];
    if (!(m__4429__auto__ == null)) {
      return m__4429__auto__.cljs$core$IFn$_invoke$arity$15 ? m__4429__auto__.cljs$core$IFn$_invoke$arity$15(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n) : m__4429__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    } else {
      var m__4426__auto__ = cljs.core._invoke["_"];
      if (!(m__4426__auto__ == null)) {
        return m__4426__auto__.cljs$core$IFn$_invoke$arity$15 ? m__4426__auto__.cljs$core$IFn$_invoke$arity$15(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n) : m__4426__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  };
  var G__2081__16 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var x__4428__auto__ = this$ == null ? null : this$;
    var m__4429__auto__ = cljs.core._invoke[goog.typeOf(x__4428__auto__)];
    if (!(m__4429__auto__ == null)) {
      return m__4429__auto__.cljs$core$IFn$_invoke$arity$16 ? m__4429__auto__.cljs$core$IFn$_invoke$arity$16(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) : m__4429__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    } else {
      var m__4426__auto__ = cljs.core._invoke["_"];
      if (!(m__4426__auto__ == null)) {
        return m__4426__auto__.cljs$core$IFn$_invoke$arity$16 ? m__4426__auto__.cljs$core$IFn$_invoke$arity$16(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) : m__4426__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  };
  var G__2081__17 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var x__4428__auto__ = this$ == null ? null : this$;
    var m__4429__auto__ = cljs.core._invoke[goog.typeOf(x__4428__auto__)];
    if (!(m__4429__auto__ == null)) {
      return m__4429__auto__.cljs$core$IFn$_invoke$arity$17 ? m__4429__auto__.cljs$core$IFn$_invoke$arity$17(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) : m__4429__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    } else {
      var m__4426__auto__ = cljs.core._invoke["_"];
      if (!(m__4426__auto__ == null)) {
        return m__4426__auto__.cljs$core$IFn$_invoke$arity$17 ? m__4426__auto__.cljs$core$IFn$_invoke$arity$17(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) : m__4426__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  };
  var G__2081__18 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var x__4428__auto__ = this$ == null ? null : this$;
    var m__4429__auto__ = cljs.core._invoke[goog.typeOf(x__4428__auto__)];
    if (!(m__4429__auto__ == null)) {
      return m__4429__auto__.cljs$core$IFn$_invoke$arity$18 ? m__4429__auto__.cljs$core$IFn$_invoke$arity$18(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) : m__4429__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    } else {
      var m__4426__auto__ = cljs.core._invoke["_"];
      if (!(m__4426__auto__ == null)) {
        return m__4426__auto__.cljs$core$IFn$_invoke$arity$18 ? m__4426__auto__.cljs$core$IFn$_invoke$arity$18(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) : m__4426__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  };
  var G__2081__19 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var x__4428__auto__ = this$ == null ? null : this$;
    var m__4429__auto__ = cljs.core._invoke[goog.typeOf(x__4428__auto__)];
    if (!(m__4429__auto__ == null)) {
      return m__4429__auto__.cljs$core$IFn$_invoke$arity$19 ? m__4429__auto__.cljs$core$IFn$_invoke$arity$19(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) : m__4429__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
    } else {
      var m__4426__auto__ = cljs.core._invoke["_"];
      if (!(m__4426__auto__ == null)) {
        return m__4426__auto__.cljs$core$IFn$_invoke$arity$19 ? m__4426__auto__.cljs$core$IFn$_invoke$arity$19(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) : m__4426__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  };
  var G__2081__20 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var x__4428__auto__ = this$ == null ? null : this$;
    var m__4429__auto__ = cljs.core._invoke[goog.typeOf(x__4428__auto__)];
    if (!(m__4429__auto__ == null)) {
      return m__4429__auto__.cljs$core$IFn$_invoke$arity$20 ? m__4429__auto__.cljs$core$IFn$_invoke$arity$20(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) : m__4429__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
    } else {
      var m__4426__auto__ = cljs.core._invoke["_"];
      if (!(m__4426__auto__ == null)) {
        return m__4426__auto__.cljs$core$IFn$_invoke$arity$20 ? m__4426__auto__.cljs$core$IFn$_invoke$arity$20(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) : m__4426__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  };
  var G__2081__21 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var x__4428__auto__ = this$ == null ? null : this$;
    var m__4429__auto__ = cljs.core._invoke[goog.typeOf(x__4428__auto__)];
    if (!(m__4429__auto__ == null)) {
      return m__4429__auto__.cljs$core$IFn$_invoke$arity$21 ? m__4429__auto__.cljs$core$IFn$_invoke$arity$21(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) : m__4429__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
    } else {
      var m__4426__auto__ = cljs.core._invoke["_"];
      if (!(m__4426__auto__ == null)) {
        return m__4426__auto__.cljs$core$IFn$_invoke$arity$21 ? m__4426__auto__.cljs$core$IFn$_invoke$arity$21(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) : m__4426__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  };
  var G__2081__22 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var x__4428__auto__ = this$ == null ? null : this$;
    var m__4429__auto__ = cljs.core._invoke[goog.typeOf(x__4428__auto__)];
    if (!(m__4429__auto__ == null)) {
      return m__4429__auto__.cljs$core$IFn$_invoke$arity$22 ? m__4429__auto__.cljs$core$IFn$_invoke$arity$22(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) : m__4429__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    } else {
      var m__4426__auto__ = cljs.core._invoke["_"];
      if (!(m__4426__auto__ == null)) {
        return m__4426__auto__.cljs$core$IFn$_invoke$arity$22 ? m__4426__auto__.cljs$core$IFn$_invoke$arity$22(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) : m__4426__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  };
  G__2081 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return G__2081__1.call(this, this$);
      case 2:
        return G__2081__2.call(this, this$, a);
      case 3:
        return G__2081__3.call(this, this$, a, b);
      case 4:
        return G__2081__4.call(this, this$, a, b, c);
      case 5:
        return G__2081__5.call(this, this$, a, b, c, d);
      case 6:
        return G__2081__6.call(this, this$, a, b, c, d, e);
      case 7:
        return G__2081__7.call(this, this$, a, b, c, d, e, f);
      case 8:
        return G__2081__8.call(this, this$, a, b, c, d, e, f, g);
      case 9:
        return G__2081__9.call(this, this$, a, b, c, d, e, f, g, h);
      case 10:
        return G__2081__10.call(this, this$, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__2081__11.call(this, this$, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__2081__12.call(this, this$, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__2081__13.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__2081__14.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__2081__15.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__2081__16.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__2081__17.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__2081__18.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__2081__19.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__2081__20.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__2081__21.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__2081__22.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__2081.cljs$core$IFn$_invoke$arity$1 = G__2081__1;
  G__2081.cljs$core$IFn$_invoke$arity$2 = G__2081__2;
  G__2081.cljs$core$IFn$_invoke$arity$3 = G__2081__3;
  G__2081.cljs$core$IFn$_invoke$arity$4 = G__2081__4;
  G__2081.cljs$core$IFn$_invoke$arity$5 = G__2081__5;
  G__2081.cljs$core$IFn$_invoke$arity$6 = G__2081__6;
  G__2081.cljs$core$IFn$_invoke$arity$7 = G__2081__7;
  G__2081.cljs$core$IFn$_invoke$arity$8 = G__2081__8;
  G__2081.cljs$core$IFn$_invoke$arity$9 = G__2081__9;
  G__2081.cljs$core$IFn$_invoke$arity$10 = G__2081__10;
  G__2081.cljs$core$IFn$_invoke$arity$11 = G__2081__11;
  G__2081.cljs$core$IFn$_invoke$arity$12 = G__2081__12;
  G__2081.cljs$core$IFn$_invoke$arity$13 = G__2081__13;
  G__2081.cljs$core$IFn$_invoke$arity$14 = G__2081__14;
  G__2081.cljs$core$IFn$_invoke$arity$15 = G__2081__15;
  G__2081.cljs$core$IFn$_invoke$arity$16 = G__2081__16;
  G__2081.cljs$core$IFn$_invoke$arity$17 = G__2081__17;
  G__2081.cljs$core$IFn$_invoke$arity$18 = G__2081__18;
  G__2081.cljs$core$IFn$_invoke$arity$19 = G__2081__19;
  G__2081.cljs$core$IFn$_invoke$arity$20 = G__2081__20;
  G__2081.cljs$core$IFn$_invoke$arity$21 = G__2081__21;
  G__2081.cljs$core$IFn$_invoke$arity$22 = G__2081__22;
  return G__2081;
}();
cljs.core._invoke = function cljs$core$_invoke(var_args) {
  var G__2079 = arguments.length;
  switch(G__2079) {
    case 1:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    case 6:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    case 7:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$7(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6]);
      break;
    case 8:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$8(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7]);
      break;
    case 9:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$9(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8]);
      break;
    case 10:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$10(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9]);
      break;
    case 11:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$11(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10]);
      break;
    case 12:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$12(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11]);
      break;
    case 13:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$13(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12]);
      break;
    case 14:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$14(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13]);
      break;
    case 15:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$15(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14]);
      break;
    case 16:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$16(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15]);
      break;
    case 17:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$17(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15], arguments[16]);
      break;
    case 18:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$18(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15], arguments[16], arguments[17]);
      break;
    case 19:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$19(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15], arguments[16], arguments[17], arguments[18]);
      break;
    case 20:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$20(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15], arguments[16], arguments[17], arguments[18], arguments[19]);
      break;
    case 21:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$21(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15], arguments[16], arguments[17], arguments[18], arguments[19], arguments[20]);
      break;
    case 22:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$22(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15], arguments[16], arguments[17], arguments[18], arguments[19], arguments[20], arguments[21]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$1 = function(this$) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$1 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$1(this$);
  } else {
    return cljs$core$IFn$_invoke$dyn_2080.cljs$core$IFn$_invoke$arity$1(this$);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$2 = function(this$, a) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$2 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$2(this$, a);
  } else {
    return cljs$core$IFn$_invoke$dyn_2080.cljs$core$IFn$_invoke$arity$2(this$, a);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$3 = function(this$, a, b) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$3 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$3(this$, a, b);
  } else {
    return cljs$core$IFn$_invoke$dyn_2080.cljs$core$IFn$_invoke$arity$3(this$, a, b);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$4 = function(this$, a, b, c) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$4 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$4(this$, a, b, c);
  } else {
    return cljs$core$IFn$_invoke$dyn_2080.cljs$core$IFn$_invoke$arity$4(this$, a, b, c);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$5 = function(this$, a, b, c, d) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$5 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$5(this$, a, b, c, d);
  } else {
    return cljs$core$IFn$_invoke$dyn_2080.cljs$core$IFn$_invoke$arity$5(this$, a, b, c, d);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$6 = function(this$, a, b, c, d, e) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$6 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$6(this$, a, b, c, d, e);
  } else {
    return cljs$core$IFn$_invoke$dyn_2080.cljs$core$IFn$_invoke$arity$6(this$, a, b, c, d, e);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$7 = function(this$, a, b, c, d, e, f) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$7 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$7(this$, a, b, c, d, e, f);
  } else {
    return cljs$core$IFn$_invoke$dyn_2080.cljs$core$IFn$_invoke$arity$7(this$, a, b, c, d, e, f);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$8 = function(this$, a, b, c, d, e, f, g) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$8 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$8(this$, a, b, c, d, e, f, g);
  } else {
    return cljs$core$IFn$_invoke$dyn_2080.cljs$core$IFn$_invoke$arity$8(this$, a, b, c, d, e, f, g);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$9 = function(this$, a, b, c, d, e, f, g, h) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$9 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$9(this$, a, b, c, d, e, f, g, h);
  } else {
    return cljs$core$IFn$_invoke$dyn_2080.cljs$core$IFn$_invoke$arity$9(this$, a, b, c, d, e, f, g, h);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$10 = function(this$, a, b, c, d, e, f, g, h, i) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$10 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$10(this$, a, b, c, d, e, f, g, h, i);
  } else {
    return cljs$core$IFn$_invoke$dyn_2080.cljs$core$IFn$_invoke$arity$10(this$, a, b, c, d, e, f, g, h, i);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$11 = function(this$, a, b, c, d, e, f, g, h, i, j) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$11 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$11(this$, a, b, c, d, e, f, g, h, i, j);
  } else {
    return cljs$core$IFn$_invoke$dyn_2080.cljs$core$IFn$_invoke$arity$11(this$, a, b, c, d, e, f, g, h, i, j);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$12 = function(this$, a, b, c, d, e, f, g, h, i, j, k) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$12 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$12(this$, a, b, c, d, e, f, g, h, i, j, k);
  } else {
    return cljs$core$IFn$_invoke$dyn_2080.cljs$core$IFn$_invoke$arity$12(this$, a, b, c, d, e, f, g, h, i, j, k);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$13 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$13 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$13(this$, a, b, c, d, e, f, g, h, i, j, k, l);
  } else {
    return cljs$core$IFn$_invoke$dyn_2080.cljs$core$IFn$_invoke$arity$13(this$, a, b, c, d, e, f, g, h, i, j, k, l);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$14 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$14 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$14(this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
  } else {
    return cljs$core$IFn$_invoke$dyn_2080.cljs$core$IFn$_invoke$arity$14(this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$15 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$15 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$15(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  } else {
    return cljs$core$IFn$_invoke$dyn_2080.cljs$core$IFn$_invoke$arity$15(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$16 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$16 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$16(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  } else {
    return cljs$core$IFn$_invoke$dyn_2080.cljs$core$IFn$_invoke$arity$16(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$17 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$17 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$17(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  } else {
    return cljs$core$IFn$_invoke$dyn_2080.cljs$core$IFn$_invoke$arity$17(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$18 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$18 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$18(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  } else {
    return cljs$core$IFn$_invoke$dyn_2080.cljs$core$IFn$_invoke$arity$18(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$19 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$19 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$19(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  } else {
    return cljs$core$IFn$_invoke$dyn_2080.cljs$core$IFn$_invoke$arity$19(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$20 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$20 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$20(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  } else {
    return cljs$core$IFn$_invoke$dyn_2080.cljs$core$IFn$_invoke$arity$20(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$21 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$21 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$21(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  } else {
    return cljs$core$IFn$_invoke$dyn_2080.cljs$core$IFn$_invoke$arity$21(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$22 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$22 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$22(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
  } else {
    return cljs$core$IFn$_invoke$dyn_2080.cljs$core$IFn$_invoke$arity$22(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
  }
};
cljs.core._invoke.cljs$lang$maxFixedArity = 22;
cljs.core.ICloneable = function() {
};
var cljs$core$ICloneable$_clone$dyn_2083 = function(value) {
  var x__4428__auto__ = value == null ? null : value;
  var m__4429__auto__ = cljs.core._clone[goog.typeOf(x__4428__auto__)];
  if (!(m__4429__auto__ == null)) {
    return m__4429__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4429__auto__.cljs$core$IFn$_invoke$arity$1(value) : m__4429__auto__.call(null, value);
  } else {
    var m__4426__auto__ = cljs.core._clone["_"];
    if (!(m__4426__auto__ == null)) {
      return m__4426__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4426__auto__.cljs$core$IFn$_invoke$arity$1(value) : m__4426__auto__.call(null, value);
    } else {
      throw cljs.core.missing_protocol("ICloneable.-clone", value);
    }
  }
};
cljs.core._clone = function cljs$core$_clone(value) {
  if (!(value == null) && !(value.cljs$core$ICloneable$_clone$arity$1 == null)) {
    return value.cljs$core$ICloneable$_clone$arity$1(value);
  } else {
    return cljs$core$ICloneable$_clone$dyn_2083(value);
  }
};
cljs.core.ICounted = function() {
};
var cljs$core$ICounted$_count$dyn_2084 = function(coll) {
  var x__4428__auto__ = coll == null ? null : coll;
  var m__4429__auto__ = cljs.core._count[goog.typeOf(x__4428__auto__)];
  if (!(m__4429__auto__ == null)) {
    return m__4429__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4429__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__4429__auto__.call(null, coll);
  } else {
    var m__4426__auto__ = cljs.core._count["_"];
    if (!(m__4426__auto__ == null)) {
      return m__4426__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4426__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__4426__auto__.call(null, coll);
    } else {
      throw cljs.core.missing_protocol("ICounted.-count", coll);
    }
  }
};
cljs.core._count = function cljs$core$_count(coll) {
  if (!(coll == null) && !(coll.cljs$core$ICounted$_count$arity$1 == null)) {
    return coll.cljs$core$ICounted$_count$arity$1(coll);
  } else {
    return cljs$core$ICounted$_count$dyn_2084(coll);
  }
};
cljs.core.IEmptyableCollection = function() {
};
var cljs$core$IEmptyableCollection$_empty$dyn_2085 = function(coll) {
  var x__4428__auto__ = coll == null ? null : coll;
  var m__4429__auto__ = cljs.core._empty[goog.typeOf(x__4428__auto__)];
  if (!(m__4429__auto__ == null)) {
    return m__4429__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4429__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__4429__auto__.call(null, coll);
  } else {
    var m__4426__auto__ = cljs.core._empty["_"];
    if (!(m__4426__auto__ == null)) {
      return m__4426__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4426__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__4426__auto__.call(null, coll);
    } else {
      throw cljs.core.missing_protocol("IEmptyableCollection.-empty", coll);
    }
  }
};
cljs.core._empty = function cljs$core$_empty(coll) {
  if (!(coll == null) && !(coll.cljs$core$IEmptyableCollection$_empty$arity$1 == null)) {
    return coll.cljs$core$IEmptyableCollection$_empty$arity$1(coll);
  } else {
    return cljs$core$IEmptyableCollection$_empty$dyn_2085(coll);
  }
};
cljs.core.ICollection = function() {
};
var cljs$core$ICollection$_conj$dyn_2086 = function(coll, o) {
  var x__4428__auto__ = coll == null ? null : coll;
  var m__4429__auto__ = cljs.core._conj[goog.typeOf(x__4428__auto__)];
  if (!(m__4429__auto__ == null)) {
    return m__4429__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4429__auto__.cljs$core$IFn$_invoke$arity$2(coll, o) : m__4429__auto__.call(null, coll, o);
  } else {
    var m__4426__auto__ = cljs.core._conj["_"];
    if (!(m__4426__auto__ == null)) {
      return m__4426__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4426__auto__.cljs$core$IFn$_invoke$arity$2(coll, o) : m__4426__auto__.call(null, coll, o);
    } else {
      throw cljs.core.missing_protocol("ICollection.-conj", coll);
    }
  }
};
cljs.core._conj = function cljs$core$_conj(coll, o) {
  if (!(coll == null) && !(coll.cljs$core$ICollection$_conj$arity$2 == null)) {
    return coll.cljs$core$ICollection$_conj$arity$2(coll, o);
  } else {
    return cljs$core$ICollection$_conj$dyn_2086(coll, o);
  }
};
cljs.core.IIndexed = function() {
};
var cljs$core$IIndexed$_nth$dyn_2089 = function() {
  var G__2090 = null;
  var G__2090__2 = function(coll, n) {
    var x__4428__auto__ = coll == null ? null : coll;
    var m__4429__auto__ = cljs.core._nth[goog.typeOf(x__4428__auto__)];
    if (!(m__4429__auto__ == null)) {
      return m__4429__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4429__auto__.cljs$core$IFn$_invoke$arity$2(coll, n) : m__4429__auto__.call(null, coll, n);
    } else {
      var m__4426__auto__ = cljs.core._nth["_"];
      if (!(m__4426__auto__ == null)) {
        return m__4426__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4426__auto__.cljs$core$IFn$_invoke$arity$2(coll, n) : m__4426__auto__.call(null, coll, n);
      } else {
        throw cljs.core.missing_protocol("IIndexed.-nth", coll);
      }
    }
  };
  var G__2090__3 = function(coll, n, not_found) {
    var x__4428__auto__ = coll == null ? null : coll;
    var m__4429__auto__ = cljs.core._nth[goog.typeOf(x__4428__auto__)];
    if (!(m__4429__auto__ == null)) {
      return m__4429__auto__.cljs$core$IFn$_invoke$arity$3 ? m__4429__auto__.cljs$core$IFn$_invoke$arity$3(coll, n, not_found) : m__4429__auto__.call(null, coll, n, not_found);
    } else {
      var m__4426__auto__ = cljs.core._nth["_"];
      if (!(m__4426__auto__ == null)) {
        return m__4426__auto__.cljs$core$IFn$_invoke$arity$3 ? m__4426__auto__.cljs$core$IFn$_invoke$arity$3(coll, n, not_found) : m__4426__auto__.call(null, coll, n, not_found);
      } else {
        throw cljs.core.missing_protocol("IIndexed.-nth", coll);
      }
    }
  };
  G__2090 = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return G__2090__2.call(this, coll, n);
      case 3:
        return G__2090__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__2090.cljs$core$IFn$_invoke$arity$2 = G__2090__2;
  G__2090.cljs$core$IFn$_invoke$arity$3 = G__2090__3;
  return G__2090;
}();
cljs.core._nth = function cljs$core$_nth(var_args) {
  var G__2088 = arguments.length;
  switch(G__2088) {
    case 2:
      return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
cljs.core._nth.cljs$core$IFn$_invoke$arity$2 = function(coll, n) {
  if (!(coll == null) && !(coll.cljs$core$IIndexed$_nth$arity$2 == null)) {
    return coll.cljs$core$IIndexed$_nth$arity$2(coll, n);
  } else {
    return cljs$core$IIndexed$_nth$dyn_2089.cljs$core$IFn$_invoke$arity$2(coll, n);
  }
};
cljs.core._nth.cljs$core$IFn$_invoke$arity$3 = function(coll, n, not_found) {
  if (!(coll == null) && !(coll.cljs$core$IIndexed$_nth$arity$3 == null)) {
    return coll.cljs$core$IIndexed$_nth$arity$3(coll, n, not_found);
  } else {
    return cljs$core$IIndexed$_nth$dyn_2089.cljs$core$IFn$_invoke$arity$3(coll, n, not_found);
  }
};
cljs.core._nth.cljs$lang$maxFixedArity = 3;
cljs.core.ASeq = function() {
};
cljs.core.ISeq = function() {
};
var cljs$core$ISeq$_first$dyn_2092 = function(coll) {
  var x__4428__auto__ = coll == null ? null : coll;
  var m__4429__auto__ = cljs.core._first[goog.typeOf(x__4428__auto__)];
  if (!(m__4429__auto__ == null)) {
    return m__4429__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4429__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__4429__auto__.call(null, coll);
  } else {
    var m__4426__auto__ = cljs.core._first["_"];
    if (!(m__4426__auto__ == null)) {
      return m__4426__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4426__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__4426__auto__.call(null, coll);
    } else {
      throw cljs.core.missing_protocol("ISeq.-first", coll);
    }
  }
};
cljs.core._first = function cljs$core$_first(coll) {
  if (!(coll == null) && !(coll.cljs$core$ISeq$_first$arity$1 == null)) {
    return coll.cljs$core$ISeq$_first$arity$1(coll);
  } else {
    return cljs$core$ISeq$_first$dyn_2092(coll);
  }
};
var cljs$core$ISeq$_rest$dyn_2093 = function(coll) {
  var x__4428__auto__ = coll == null ? null : coll;
  var m__4429__auto__ = cljs.core._rest[goog.typeOf(x__4428__auto__)];
  if (!(m__4429__auto__ == null)) {
    return m__4429__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4429__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__4429__auto__.call(null, coll);
  } else {
    var m__4426__auto__ = cljs.core._rest["_"];
    if (!(m__4426__auto__ == null)) {
      return m__4426__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4426__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__4426__auto__.call(null, coll);
    } else {
      throw cljs.core.missing_protocol("ISeq.-rest", coll);
    }
  }
};
cljs.core._rest = function cljs$core$_rest(coll) {
  if (!(coll == null) && !(coll.cljs$core$ISeq$_rest$arity$1 == null)) {
    return coll.cljs$core$ISeq$_rest$arity$1(coll);
  } else {
    return cljs$core$ISeq$_rest$dyn_2093(coll);
  }
};
cljs.core.INext = function() {
};
var cljs$core$INext$_next$dyn_2094 = function(coll) {
  var x__4428__auto__ = coll == null ? null : coll;
  var m__4429__auto__ = cljs.core._next[goog.typeOf(x__4428__auto__)];
  if (!(m__4429__auto__ == null)) {
    return m__4429__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4429__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__4429__auto__.call(null, coll);
  } else {
    var m__4426__auto__ = cljs.core._next["_"];
    if (!(m__4426__auto__ == null)) {
      return m__4426__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4426__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__4426__auto__.call(null, coll);
    } else {
      throw cljs.core.missing_protocol("INext.-next", coll);
    }
  }
};
cljs.core._next = function cljs$core$_next(coll) {
  if (!(coll == null) && !(coll.cljs$core$INext$_next$arity$1 == null)) {
    return coll.cljs$core$INext$_next$arity$1(coll);
  } else {
    return cljs$core$INext$_next$dyn_2094(coll);
  }
};
cljs.core.ILookup = function() {
};
var cljs$core$ILookup$_lookup$dyn_2097 = function() {
  var G__2098 = null;
  var G__2098__2 = function(o, k) {
    var x__4428__auto__ = o == null ? null : o;
    var m__4429__auto__ = cljs.core._lookup[goog.typeOf(x__4428__auto__)];
    if (!(m__4429__auto__ == null)) {
      return m__4429__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4429__auto__.cljs$core$IFn$_invoke$arity$2(o, k) : m__4429__auto__.call(null, o, k);
    } else {
      var m__4426__auto__ = cljs.core._lookup["_"];
      if (!(m__4426__auto__ == null)) {
        return m__4426__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4426__auto__.cljs$core$IFn$_invoke$arity$2(o, k) : m__4426__auto__.call(null, o, k);
      } else {
        throw cljs.core.missing_protocol("ILookup.-lookup", o);
      }
    }
  };
  var G__2098__3 = function(o, k, not_found) {
    var x__4428__auto__ = o == null ? null : o;
    var m__4429__auto__ = cljs.core._lookup[goog.typeOf(x__4428__auto__)];
    if (!(m__4429__auto__ == null)) {
      return m__4429__auto__.cljs$core$IFn$_invoke$arity$3 ? m__4429__auto__.cljs$core$IFn$_invoke$arity$3(o, k, not_found) : m__4429__auto__.call(null, o, k, not_found);
    } else {
      var m__4426__auto__ = cljs.core._lookup["_"];
      if (!(m__4426__auto__ == null)) {
        return m__4426__auto__.cljs$core$IFn$_invoke$arity$3 ? m__4426__auto__.cljs$core$IFn$_invoke$arity$3(o, k, not_found) : m__4426__auto__.call(null, o, k, not_found);
      } else {
        throw cljs.core.missing_protocol("ILookup.-lookup", o);
      }
    }
  };
  G__2098 = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__2098__2.call(this, o, k);
      case 3:
        return G__2098__3.call(this, o, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__2098.cljs$core$IFn$_invoke$arity$2 = G__2098__2;
  G__2098.cljs$core$IFn$_invoke$arity$3 = G__2098__3;
  return G__2098;
}();
cljs.core._lookup = function cljs$core$_lookup(var_args) {
  var G__2096 = arguments.length;
  switch(G__2096) {
    case 2:
      return cljs.core._lookup.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
cljs.core._lookup.cljs$core$IFn$_invoke$arity$2 = function(o, k) {
  if (!(o == null) && !(o.cljs$core$ILookup$_lookup$arity$2 == null)) {
    return o.cljs$core$ILookup$_lookup$arity$2(o, k);
  } else {
    return cljs$core$ILookup$_lookup$dyn_2097.cljs$core$IFn$_invoke$arity$2(o, k);
  }
};
cljs.core._lookup.cljs$core$IFn$_invoke$arity$3 = function(o, k, not_found) {
  if (!(o == null) && !(o.cljs$core$ILookup$_lookup$arity$3 == null)) {
    return o.cljs$core$ILookup$_lookup$arity$3(o, k, not_found);
  } else {
    return cljs$core$ILookup$_lookup$dyn_2097.cljs$core$IFn$_invoke$arity$3(o, k, not_found);
  }
};
cljs.core._lookup.cljs$lang$maxFixedArity = 3;
cljs.core.IAssociative = function() {
};
var cljs$core$IAssociative$_contains_key_QMARK_$dyn_2100 = function(coll, k) {
  var x__4428__auto__ = coll == null ? null : coll;
  var m__4429__auto__ = cljs.core._contains_key_QMARK_[goog.typeOf(x__4428__auto__)];
  if (!(m__4429__auto__ == null)) {
    return m__4429__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4429__auto__.cljs$core$IFn$_invoke$arity$2(coll, k) : m__4429__auto__.call(null, coll, k);
  } else {
    var m__4426__auto__ = cljs.core._contains_key_QMARK_["_"];
    if (!(m__4426__auto__ == null)) {
      return m__4426__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4426__auto__.cljs$core$IFn$_invoke$arity$2(coll, k) : m__4426__auto__.call(null, coll, k);
    } else {
      throw cljs.core.missing_protocol("IAssociative.-contains-key?", coll);
    }
  }
};
cljs.core._contains_key_QMARK_ = function cljs$core$_contains_key_QMARK_(coll, k) {
  if (!(coll == null) && !(coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 == null)) {
    return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2(coll, k);
  } else {
    return cljs$core$IAssociative$_contains_key_QMARK_$dyn_2100(coll, k);
  }
};
var cljs$core$IAssociative$_assoc$dyn_2101 = function(coll, k, v) {
  var x__4428__auto__ = coll == null ? null : coll;
  var m__4429__auto__ = cljs.core._assoc[goog.typeOf(x__4428__auto__)];
  if (!(m__4429__auto__ == null)) {
    return m__4429__auto__.cljs$core$IFn$_invoke$arity$3 ? m__4429__auto__.cljs$core$IFn$_invoke$arity$3(coll, k, v) : m__4429__auto__.call(null, coll, k, v);
  } else {
    var m__4426__auto__ = cljs.core._assoc["_"];
    if (!(m__4426__auto__ == null)) {
      return m__4426__auto__.cljs$core$IFn$_invoke$arity$3 ? m__4426__auto__.cljs$core$IFn$_invoke$arity$3(coll, k, v) : m__4426__auto__.call(null, coll, k, v);
    } else {
      throw cljs.core.missing_protocol("IAssociative.-assoc", coll);
    }
  }
};
cljs.core._assoc = function cljs$core$_assoc(coll, k, v) {
  if (!(coll == null) && !(coll.cljs$core$IAssociative$_assoc$arity$3 == null)) {
    return coll.cljs$core$IAssociative$_assoc$arity$3(coll, k, v);
  } else {
    return cljs$core$IAssociative$_assoc$dyn_2101(coll, k, v);
  }
};
cljs.core.IFind = function() {
};
var cljs$core$IFind$_find$dyn_2102 = function(coll, k) {
  var x__4428__auto__ = coll == null ? null : coll;
  var m__4429__auto__ = cljs.core._find[goog.typeOf(x__4428__auto__)];
  if (!(m__4429__auto__ == null)) {
    return m__4429__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4429__auto__.cljs$core$IFn$_invoke$arity$2(coll, k) : m__4429__auto__.call(null, coll, k);
  } else {
    var m__4426__auto__ = cljs.core._find["_"];
    if (!(m__4426__auto__ == null)) {
      return m__4426__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4426__auto__.cljs$core$IFn$_invoke$arity$2(coll, k) : m__4426__auto__.call(null, coll, k);
    } else {
      throw cljs.core.missing_protocol("IFind.-find", coll);
    }
  }
};
cljs.core._find = function cljs$core$_find(coll, k) {
  if (!(coll == null) && !(coll.cljs$core$IFind$_find$arity$2 == null)) {
    return coll.cljs$core$IFind$_find$arity$2(coll, k);
  } else {
    return cljs$core$IFind$_find$dyn_2102(coll, k);
  }
};
cljs.core.IMap = function() {
};
var cljs$core$IMap$_dissoc$dyn_2103 = function(coll, k) {
  var x__4428__auto__ = coll == null ? null : coll;
  var m__4429__auto__ = cljs.core._dissoc[goog.typeOf(x__4428__auto__)];
  if (!(m__4429__auto__ == null)) {
    return m__4429__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4429__auto__.cljs$core$IFn$_invoke$arity$2(coll, k) : m__4429__auto__.call(null, coll, k);
  } else {
    var m__4426__auto__ = cljs.core._dissoc["_"];
    if (!(m__4426__auto__ == null)) {
      return m__4426__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4426__auto__.cljs$core$IFn$_invoke$arity$2(coll, k) : m__4426__auto__.call(null, coll, k);
    } else {
      throw cljs.core.missing_protocol("IMap.-dissoc", coll);
    }
  }
};
cljs.core._dissoc = function cljs$core$_dissoc(coll, k) {
  if (!(coll == null) && !(coll.cljs$core$IMap$_dissoc$arity$2 == null)) {
    return coll.cljs$core$IMap$_dissoc$arity$2(coll, k);
  } else {
    return cljs$core$IMap$_dissoc$dyn_2103(coll, k);
  }
};
cljs.core.IMapEntry = function() {
};
var cljs$core$IMapEntry$_key$dyn_2104 = function(coll) {
  var x__4428__auto__ = coll == null ? null : coll;
  var m__4429__auto__ = cljs.core._key[goog.typeOf(x__4428__auto__)];
  if (!(m__4429__auto__ == null)) {
    return m__4429__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4429__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__4429__auto__.call(null, coll);
  } else {
    var m__4426__auto__ = cljs.core._key["_"];
    if (!(m__4426__auto__ == null)) {
      return m__4426__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4426__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__4426__auto__.call(null, coll);
    } else {
      throw cljs.core.missing_protocol("IMapEntry.-key", coll);
    }
  }
};
cljs.core._key = function cljs$core$_key(coll) {
  if (!(coll == null) && !(coll.cljs$core$IMapEntry$_key$arity$1 == null)) {
    return coll.cljs$core$IMapEntry$_key$arity$1(coll);
  } else {
    return cljs$core$IMapEntry$_key$dyn_2104(coll);
  }
};
var cljs$core$IMapEntry$_val$dyn_2105 = function(coll) {
  var x__4428__auto__ = coll == null ? null : coll;
  var m__4429__auto__ = cljs.core._val[goog.typeOf(x__4428__auto__)];
  if (!(m__4429__auto__ == null)) {
    return m__4429__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4429__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__4429__auto__.call(null, coll);
  } else {
    var m__4426__auto__ = cljs.core._val["_"];
    if (!(m__4426__auto__ == null)) {
      return m__4426__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4426__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__4426__auto__.call(null, coll);
    } else {
      throw cljs.core.missing_protocol("IMapEntry.-val", coll);
    }
  }
};
cljs.core._val = function cljs$core$_val(coll) {
  if (!(coll == null) && !(coll.cljs$core$IMapEntry$_val$arity$1 == null)) {
    return coll.cljs$core$IMapEntry$_val$arity$1(coll);
  } else {
    return cljs$core$IMapEntry$_val$dyn_2105(coll);
  }
};
cljs.core.ISet = function() {
};
var cljs$core$ISet$_disjoin$dyn_2106 = function(coll, v) {
  var x__4428__auto__ = coll == null ? null : coll;
  var m__4429__auto__ = cljs.core._disjoin[goog.typeOf(x__4428__auto__)];
  if (!(m__4429__auto__ == null)) {
    return m__4429__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4429__auto__.cljs$core$IFn$_invoke$arity$2(coll, v) : m__4429__auto__.call(null, coll, v);
  } else {
    var m__4426__auto__ = cljs.core._disjoin["_"];
    if (!(m__4426__auto__ == null)) {
      return m__4426__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4426__auto__.cljs$core$IFn$_invoke$arity$2(coll, v) : m__4426__auto__.call(null, coll, v);
    } else {
      throw cljs.core.missing_protocol("ISet.-disjoin", coll);
    }
  }
};
cljs.core._disjoin = function cljs$core$_disjoin(coll, v) {
  if (!(coll == null) && !(coll.cljs$core$ISet$_disjoin$arity$2 == null)) {
    return coll.cljs$core$ISet$_disjoin$arity$2(coll, v);
  } else {
    return cljs$core$ISet$_disjoin$dyn_2106(coll, v);
  }
};
cljs.core.IStack = function() {
};
var cljs$core$IStack$_peek$dyn_2107 = function(coll) {
  var x__4428__auto__ = coll == null ? null : coll;
  var m__4429__auto__ = cljs.core._peek[goog.typeOf(x__4428__auto__)];
  if (!(m__4429__auto__ == null)) {
    return m__4429__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4429__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__4429__auto__.call(null, coll);
  } else {
    var m__4426__auto__ = cljs.core._peek["_"];
    if (!(m__4426__auto__ == null)) {
      return m__4426__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4426__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__4426__auto__.call(null, coll);
    } else {
      throw cljs.core.missing_protocol("IStack.-peek", coll);
    }
  }
};
cljs.core._peek = function cljs$core$_peek(coll) {
  if (!(coll == null) && !(coll.cljs$core$IStack$_peek$arity$1 == null)) {
    return coll.cljs$core$IStack$_peek$arity$1(coll);
  } else {
    return cljs$core$IStack$_peek$dyn_2107(coll);
  }
};
var cljs$core$IStack$_pop$dyn_2108 = function(coll) {
  var x__4428__auto__ = coll == null ? null : coll;
  var m__4429__auto__ = cljs.core._pop[goog.typeOf(x__4428__auto__)];
  if (!(m__4429__auto__ == null)) {
    return m__4429__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4429__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__4429__auto__.call(null, coll);
  } else {
    var m__4426__auto__ = cljs.core._pop["_"];
    if (!(m__4426__auto__ == null)) {
      return m__4426__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4426__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__4426__auto__.call(null, coll);
    } else {
      throw cljs.core.missing_protocol("IStack.-pop", coll);
    }
  }
};
cljs.core._pop = function cljs$core$_pop(coll) {
  if (!(coll == null) && !(coll.cljs$core$IStack$_pop$arity$1 == null)) {
    return coll.cljs$core$IStack$_pop$arity$1(coll);
  } else {
    return cljs$core$IStack$_pop$dyn_2108(coll);
  }
};
cljs.core.IVector = function() {
};
var cljs$core$IVector$_assoc_n$dyn_2109 = function(coll, n, val) {
  var x__4428__auto__ = coll == null ? null : coll;
  var m__4429__auto__ = cljs.core._assoc_n[goog.typeOf(x__4428__auto__)];
  if (!(m__4429__auto__ == null)) {
    return m__4429__auto__.cljs$core$IFn$_invoke$arity$3 ? m__4429__auto__.cljs$core$IFn$_invoke$arity$3(coll, n, val) : m__4429__auto__.call(null, coll, n, val);
  } else {
    var m__4426__auto__ = cljs.core._assoc_n["_"];
    if (!(m__4426__auto__ == null)) {
      return m__4426__auto__.cljs$core$IFn$_invoke$arity$3 ? m__4426__auto__.cljs$core$IFn$_invoke$arity$3(coll, n, val) : m__4426__auto__.call(null, coll, n, val);
    } else {
      throw cljs.core.missing_protocol("IVector.-assoc-n", coll);
    }
  }
};
cljs.core._assoc_n = function cljs$core$_assoc_n(coll, n, val) {
  if (!(coll == null) && !(coll.cljs$core$IVector$_assoc_n$arity$3 == null)) {
    return coll.cljs$core$IVector$_assoc_n$arity$3(coll, n, val);
  } else {
    return cljs$core$IVector$_assoc_n$dyn_2109(coll, n, val);
  }
};
cljs.core.IDeref = function() {
};
var cljs$core$IDeref$_deref$dyn_2110 = function(o) {
  var x__4428__auto__ = o == null ? null : o;
  var m__4429__auto__ = cljs.core._deref[goog.typeOf(x__4428__auto__)];
  if (!(m__4429__auto__ == null)) {
    return m__4429__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4429__auto__.cljs$core$IFn$_invoke$arity$1(o) : m__4429__auto__.call(null, o);
  } else {
    var m__4426__auto__ = cljs.core._deref["_"];
    if (!(m__4426__auto__ == null)) {
      return m__4426__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4426__auto__.cljs$core$IFn$_invoke$arity$1(o) : m__4426__auto__.call(null, o);
    } else {
      throw cljs.core.missing_protocol("IDeref.-deref", o);
    }
  }
};
cljs.core._deref = function cljs$core$_deref(o) {
  if (!(o == null) && !(o.cljs$core$IDeref$_deref$arity$1 == null)) {
    return o.cljs$core$IDeref$_deref$arity$1(o);
  } else {
    return cljs$core$IDeref$_deref$dyn_2110(o);
  }
};
cljs.core.IDerefWithTimeout = function() {
};
var cljs$core$IDerefWithTimeout$_deref_with_timeout$dyn_2111 = function(o, msec, timeout_val) {
  var x__4428__auto__ = o == null ? null : o;
  var m__4429__auto__ = cljs.core._deref_with_timeout[goog.typeOf(x__4428__auto__)];
  if (!(m__4429__auto__ == null)) {
    return m__4429__auto__.cljs$core$IFn$_invoke$arity$3 ? m__4429__auto__.cljs$core$IFn$_invoke$arity$3(o, msec, timeout_val) : m__4429__auto__.call(null, o, msec, timeout_val);
  } else {
    var m__4426__auto__ = cljs.core._deref_with_timeout["_"];
    if (!(m__4426__auto__ == null)) {
      return m__4426__auto__.cljs$core$IFn$_invoke$arity$3 ? m__4426__auto__.cljs$core$IFn$_invoke$arity$3(o, msec, timeout_val) : m__4426__auto__.call(null, o, msec, timeout_val);
    } else {
      throw cljs.core.missing_protocol("IDerefWithTimeout.-deref-with-timeout", o);
    }
  }
};
cljs.core._deref_with_timeout = function cljs$core$_deref_with_timeout(o, msec, timeout_val) {
  if (!(o == null) && !(o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3 == null)) {
    return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3(o, msec, timeout_val);
  } else {
    return cljs$core$IDerefWithTimeout$_deref_with_timeout$dyn_2111(o, msec, timeout_val);
  }
};
cljs.core.IMeta = function() {
};
var cljs$core$IMeta$_meta$dyn_2112 = function(o) {
  var x__4428__auto__ = o == null ? null : o;
  var m__4429__auto__ = cljs.core._meta[goog.typeOf(x__4428__auto__)];
  if (!(m__4429__auto__ == null)) {
    return m__4429__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4429__auto__.cljs$core$IFn$_invoke$arity$1(o) : m__4429__auto__.call(null, o);
  } else {
    var m__4426__auto__ = cljs.core._meta["_"];
    if (!(m__4426__auto__ == null)) {
      return m__4426__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4426__auto__.cljs$core$IFn$_invoke$arity$1(o) : m__4426__auto__.call(null, o);
    } else {
      throw cljs.core.missing_protocol("IMeta.-meta", o);
    }
  }
};
cljs.core._meta = function cljs$core$_meta(o) {
  if (!(o == null) && !(o.cljs$core$IMeta$_meta$arity$1 == null)) {
    return o.cljs$core$IMeta$_meta$arity$1(o);
  } else {
    return cljs$core$IMeta$_meta$dyn_2112(o);
  }
};
cljs.core.IWithMeta = function() {
};
var cljs$core$IWithMeta$_with_meta$dyn_2113 = function(o, meta) {
  var x__4428__auto__ = o == null ? null : o;
  var m__4429__auto__ = cljs.core._with_meta[goog.typeOf(x__4428__auto__)];
  if (!(m__4429__auto__ == null)) {
    return m__4429__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4429__auto__.cljs$core$IFn$_invoke$arity$2(o, meta) : m__4429__auto__.call(null, o, meta);
  } else {
    var m__4426__auto__ = cljs.core._with_meta["_"];
    if (!(m__4426__auto__ == null)) {
      return m__4426__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4426__auto__.cljs$core$IFn$_invoke$arity$2(o, meta) : m__4426__auto__.call(null, o, meta);
    } else {
      throw cljs.core.missing_protocol("IWithMeta.-with-meta", o);
    }
  }
};
cljs.core._with_meta = function cljs$core$_with_meta(o, meta) {
  if (!(o == null) && !(o.cljs$core$IWithMeta$_with_meta$arity$2 == null)) {
    return o.cljs$core$IWithMeta$_with_meta$arity$2(o, meta);
  } else {
    return cljs$core$IWithMeta$_with_meta$dyn_2113(o, meta);
  }
};
cljs.core.IReduce = function() {
};
var cljs$core$IReduce$_reduce$dyn_2116 = function() {
  var G__2117 = null;
  var G__2117__2 = function(coll, f) {
    var x__4428__auto__ = coll == null ? null : coll;
    var m__4429__auto__ = cljs.core._reduce[goog.typeOf(x__4428__auto__)];
    if (!(m__4429__auto__ == null)) {
      return m__4429__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4429__auto__.cljs$core$IFn$_invoke$arity$2(coll, f) : m__4429__auto__.call(null, coll, f);
    } else {
      var m__4426__auto__ = cljs.core._reduce["_"];
      if (!(m__4426__auto__ == null)) {
        return m__4426__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4426__auto__.cljs$core$IFn$_invoke$arity$2(coll, f) : m__4426__auto__.call(null, coll, f);
      } else {
        throw cljs.core.missing_protocol("IReduce.-reduce", coll);
      }
    }
  };
  var G__2117__3 = function(coll, f, start) {
    var x__4428__auto__ = coll == null ? null : coll;
    var m__4429__auto__ = cljs.core._reduce[goog.typeOf(x__4428__auto__)];
    if (!(m__4429__auto__ == null)) {
      return m__4429__auto__.cljs$core$IFn$_invoke$arity$3 ? m__4429__auto__.cljs$core$IFn$_invoke$arity$3(coll, f, start) : m__4429__auto__.call(null, coll, f, start);
    } else {
      var m__4426__auto__ = cljs.core._reduce["_"];
      if (!(m__4426__auto__ == null)) {
        return m__4426__auto__.cljs$core$IFn$_invoke$arity$3 ? m__4426__auto__.cljs$core$IFn$_invoke$arity$3(coll, f, start) : m__4426__auto__.call(null, coll, f, start);
      } else {
        throw cljs.core.missing_protocol("IReduce.-reduce", coll);
      }
    }
  };
  G__2117 = function(coll, f, start) {
    switch(arguments.length) {
      case 2:
        return G__2117__2.call(this, coll, f);
      case 3:
        return G__2117__3.call(this, coll, f, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__2117.cljs$core$IFn$_invoke$arity$2 = G__2117__2;
  G__2117.cljs$core$IFn$_invoke$arity$3 = G__2117__3;
  return G__2117;
}();
cljs.core._reduce = function cljs$core$_reduce(var_args) {
  var G__2115 = arguments.length;
  switch(G__2115) {
    case 2:
      return cljs.core._reduce.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core._reduce.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
cljs.core._reduce.cljs$core$IFn$_invoke$arity$2 = function(coll, f) {
  if (!(coll == null) && !(coll.cljs$core$IReduce$_reduce$arity$2 == null)) {
    return coll.cljs$core$IReduce$_reduce$arity$2(coll, f);
  } else {
    return cljs$core$IReduce$_reduce$dyn_2116.cljs$core$IFn$_invoke$arity$2(coll, f);
  }
};
cljs.core._reduce.cljs$core$IFn$_invoke$arity$3 = function(coll, f, start) {
  if (!(coll == null) && !(coll.cljs$core$IReduce$_reduce$arity$3 == null)) {
    return coll.cljs$core$IReduce$_reduce$arity$3(coll, f, start);
  } else {
    return cljs$core$IReduce$_reduce$dyn_2116.cljs$core$IFn$_invoke$arity$3(coll, f, start);
  }
};
cljs.core._reduce.cljs$lang$maxFixedArity = 3;
cljs.core.IKVReduce = function() {
};
var cljs$core$IKVReduce$_kv_reduce$dyn_2119 = function(coll, f, init) {
  var x__4428__auto__ = coll == null ? null : coll;
  var m__4429__auto__ = cljs.core._kv_reduce[goog.typeOf(x__4428__auto__)];
  if (!(m__4429__auto__ == null)) {
    return m__4429__auto__.cljs$core$IFn$_invoke$arity$3 ? m__4429__auto__.cljs$core$IFn$_invoke$arity$3(coll, f, init) : m__4429__auto__.call(null, coll, f, init);
  } else {
    var m__4426__auto__ = cljs.core._kv_reduce["_"];
    if (!(m__4426__auto__ == null)) {
      return m__4426__auto__.cljs$core$IFn$_invoke$arity$3 ? m__4426__auto__.cljs$core$IFn$_invoke$arity$3(coll, f, init) : m__4426__auto__.call(null, coll, f, init);
    } else {
      throw cljs.core.missing_protocol("IKVReduce.-kv-reduce", coll);
    }
  }
};
cljs.core._kv_reduce = function cljs$core$_kv_reduce(coll, f, init) {
  if (!(coll == null) && !(coll.cljs$core$IKVReduce$_kv_reduce$arity$3 == null)) {
    return coll.cljs$core$IKVReduce$_kv_reduce$arity$3(coll, f, init);
  } else {
    return cljs$core$IKVReduce$_kv_reduce$dyn_2119(coll, f, init);
  }
};
cljs.core.IEquiv = function() {
};
var cljs$core$IEquiv$_equiv$dyn_2120 = function(o, other) {
  var x__4428__auto__ = o == null ? null : o;
  var m__4429__auto__ = cljs.core._equiv[goog.typeOf(x__4428__auto__)];
  if (!(m__4429__auto__ == null)) {
    return m__4429__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4429__auto__.cljs$core$IFn$_invoke$arity$2(o, other) : m__4429__auto__.call(null, o, other);
  } else {
    var m__4426__auto__ = cljs.core._equiv["_"];
    if (!(m__4426__auto__ == null)) {
      return m__4426__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4426__auto__.cljs$core$IFn$_invoke$arity$2(o, other) : m__4426__auto__.call(null, o, other);
    } else {
      throw cljs.core.missing_protocol("IEquiv.-equiv", o);
    }
  }
};
cljs.core._equiv = function cljs$core$_equiv(o, other) {
  if (!(o == null) && !(o.cljs$core$IEquiv$_equiv$arity$2 == null)) {
    return o.cljs$core$IEquiv$_equiv$arity$2(o, other);
  } else {
    return cljs$core$IEquiv$_equiv$dyn_2120(o, other);
  }
};
cljs.core.IHash = function() {
};
var cljs$core$IHash$_hash$dyn_2121 = function(o) {
  var x__4428__auto__ = o == null ? null : o;
  var m__4429__auto__ = cljs.core._hash[goog.typeOf(x__4428__auto__)];
  if (!(m__4429__auto__ == null)) {
    return m__4429__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4429__auto__.cljs$core$IFn$_invoke$arity$1(o) : m__4429__auto__.call(null, o);
  } else {
    var m__4426__auto__ = cljs.core._hash["_"];
    if (!(m__4426__auto__ == null)) {
      return m__4426__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4426__auto__.cljs$core$IFn$_invoke$arity$1(o) : m__4426__auto__.call(null, o);
    } else {
      throw cljs.core.missing_protocol("IHash.-hash", o);
    }
  }
};
cljs.core._hash = function cljs$core$_hash(o) {
  if (!(o == null) && !(o.cljs$core$IHash$_hash$arity$1 == null)) {
    return o.cljs$core$IHash$_hash$arity$1(o);
  } else {
    return cljs$core$IHash$_hash$dyn_2121(o);
  }
};
cljs.core.ISeqable = function() {
};
var cljs$core$ISeqable$_seq$dyn_2122 = function(o) {
  var x__4428__auto__ = o == null ? null : o;
  var m__4429__auto__ = cljs.core._seq[goog.typeOf(x__4428__auto__)];
  if (!(m__4429__auto__ == null)) {
    return m__4429__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4429__auto__.cljs$core$IFn$_invoke$arity$1(o) : m__4429__auto__.call(null, o);
  } else {
    var m__4426__auto__ = cljs.core._seq["_"];
    if (!(m__4426__auto__ == null)) {
      return m__4426__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4426__auto__.cljs$core$IFn$_invoke$arity$1(o) : m__4426__auto__.call(null, o);
    } else {
      throw cljs.core.missing_protocol("ISeqable.-seq", o);
    }
  }
};
cljs.core._seq = function cljs$core$_seq(o) {
  if (!(o == null) && !(o.cljs$core$ISeqable$_seq$arity$1 == null)) {
    return o.cljs$core$ISeqable$_seq$arity$1(o);
  } else {
    return cljs$core$ISeqable$_seq$dyn_2122(o);
  }
};
cljs.core.ISequential = function() {
};
cljs.core.IList = function() {
};
cljs.core.IRecord = function() {
};
cljs.core.IReversible = function() {
};
var cljs$core$IReversible$_rseq$dyn_2123 = function(coll) {
  var x__4428__auto__ = coll == null ? null : coll;
  var m__4429__auto__ = cljs.core._rseq[goog.typeOf(x__4428__auto__)];
  if (!(m__4429__auto__ == null)) {
    return m__4429__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4429__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__4429__auto__.call(null, coll);
  } else {
    var m__4426__auto__ = cljs.core._rseq["_"];
    if (!(m__4426__auto__ == null)) {
      return m__4426__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4426__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__4426__auto__.call(null, coll);
    } else {
      throw cljs.core.missing_protocol("IReversible.-rseq", coll);
    }
  }
};
cljs.core._rseq = function cljs$core$_rseq(coll) {
  if (!(coll == null) && !(coll.cljs$core$IReversible$_rseq$arity$1 == null)) {
    return coll.cljs$core$IReversible$_rseq$arity$1(coll);
  } else {
    return cljs$core$IReversible$_rseq$dyn_2123(coll);
  }
};
cljs.core.ISorted = function() {
};
var cljs$core$ISorted$_sorted_seq$dyn_2124 = function(coll, ascending_QMARK_) {
  var x__4428__auto__ = coll == null ? null : coll;
  var m__4429__auto__ = cljs.core._sorted_seq[goog.typeOf(x__4428__auto__)];
  if (!(m__4429__auto__ == null)) {
    return m__4429__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4429__auto__.cljs$core$IFn$_invoke$arity$2(coll, ascending_QMARK_) : m__4429__auto__.call(null, coll, ascending_QMARK_);
  } else {
    var m__4426__auto__ = cljs.core._sorted_seq["_"];
    if (!(m__4426__auto__ == null)) {
      return m__4426__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4426__auto__.cljs$core$IFn$_invoke$arity$2(coll, ascending_QMARK_) : m__4426__auto__.call(null, coll, ascending_QMARK_);
    } else {
      throw cljs.core.missing_protocol("ISorted.-sorted-seq", coll);
    }
  }
};
cljs.core._sorted_seq = function cljs$core$_sorted_seq(coll, ascending_QMARK_) {
  if (!(coll == null) && !(coll.cljs$core$ISorted$_sorted_seq$arity$2 == null)) {
    return coll.cljs$core$ISorted$_sorted_seq$arity$2(coll, ascending_QMARK_);
  } else {
    return cljs$core$ISorted$_sorted_seq$dyn_2124(coll, ascending_QMARK_);
  }
};
var cljs$core$ISorted$_sorted_seq_from$dyn_2125 = function(coll, k, ascending_QMARK_) {
  var x__4428__auto__ = coll == null ? null : coll;
  var m__4429__auto__ = cljs.core._sorted_seq_from[goog.typeOf(x__4428__auto__)];
  if (!(m__4429__auto__ == null)) {
    return m__4429__auto__.cljs$core$IFn$_invoke$arity$3 ? m__4429__auto__.cljs$core$IFn$_invoke$arity$3(coll, k, ascending_QMARK_) : m__4429__auto__.call(null, coll, k, ascending_QMARK_);
  } else {
    var m__4426__auto__ = cljs.core._sorted_seq_from["_"];
    if (!(m__4426__auto__ == null)) {
      return m__4426__auto__.cljs$core$IFn$_invoke$arity$3 ? m__4426__auto__.cljs$core$IFn$_invoke$arity$3(coll, k, ascending_QMARK_) : m__4426__auto__.call(null, coll, k, ascending_QMARK_);
    } else {
      throw cljs.core.missing_protocol("ISorted.-sorted-seq-from", coll);
    }
  }
};
cljs.core._sorted_seq_from = function cljs$core$_sorted_seq_from(coll, k, ascending_QMARK_) {
  if (!(coll == null) && !(coll.cljs$core$ISorted$_sorted_seq_from$arity$3 == null)) {
    return coll.cljs$core$ISorted$_sorted_seq_from$arity$3(coll, k, ascending_QMARK_);
  } else {
    return cljs$core$ISorted$_sorted_seq_from$dyn_2125(coll, k, ascending_QMARK_);
  }
};
var cljs$core$ISorted$_entry_key$dyn_2126 = function(coll, entry) {
  var x__4428__auto__ = coll == null ? null : coll;
  var m__4429__auto__ = cljs.core._entry_key[goog.typeOf(x__4428__auto__)];
  if (!(m__4429__auto__ == null)) {
    return m__4429__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4429__auto__.cljs$core$IFn$_invoke$arity$2(coll, entry) : m__4429__auto__.call(null, coll, entry);
  } else {
    var m__4426__auto__ = cljs.core._entry_key["_"];
    if (!(m__4426__auto__ == null)) {
      return m__4426__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4426__auto__.cljs$core$IFn$_invoke$arity$2(coll, entry) : m__4426__auto__.call(null, coll, entry);
    } else {
      throw cljs.core.missing_protocol("ISorted.-entry-key", coll);
    }
  }
};
cljs.core._entry_key = function cljs$core$_entry_key(coll, entry) {
  if (!(coll == null) && !(coll.cljs$core$ISorted$_entry_key$arity$2 == null)) {
    return coll.cljs$core$ISorted$_entry_key$arity$2(coll, entry);
  } else {
    return cljs$core$ISorted$_entry_key$dyn_2126(coll, entry);
  }
};
var cljs$core$ISorted$_comparator$dyn_2127 = function(coll) {
  var x__4428__auto__ = coll == null ? null : coll;
  var m__4429__auto__ = cljs.core._comparator[goog.typeOf(x__4428__auto__)];
  if (!(m__4429__auto__ == null)) {
    return m__4429__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4429__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__4429__auto__.call(null, coll);
  } else {
    var m__4426__auto__ = cljs.core._comparator["_"];
    if (!(m__4426__auto__ == null)) {
      return m__4426__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4426__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__4426__auto__.call(null, coll);
    } else {
      throw cljs.core.missing_protocol("ISorted.-comparator", coll);
    }
  }
};
cljs.core._comparator = function cljs$core$_comparator(coll) {
  if (!(coll == null) && !(coll.cljs$core$ISorted$_comparator$arity$1 == null)) {
    return coll.cljs$core$ISorted$_comparator$arity$1(coll);
  } else {
    return cljs$core$ISorted$_comparator$dyn_2127(coll);
  }
};
cljs.core.IWriter = function() {
};
var cljs$core$IWriter$_write$dyn_2128 = function(writer, s) {
  var x__4428__auto__ = writer == null ? null : writer;
  var m__4429__auto__ = cljs.core._write[goog.typeOf(x__4428__auto__)];
  if (!(m__4429__auto__ == null)) {
    return m__4429__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4429__auto__.cljs$core$IFn$_invoke$arity$2(writer, s) : m__4429__auto__.call(null, writer, s);
  } else {
    var m__4426__auto__ = cljs.core._write["_"];
    if (!(m__4426__auto__ == null)) {
      return m__4426__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4426__auto__.cljs$core$IFn$_invoke$arity$2(writer, s) : m__4426__auto__.call(null, writer, s);
    } else {
      throw cljs.core.missing_protocol("IWriter.-write", writer);
    }
  }
};
cljs.core._write = function cljs$core$_write(writer, s) {
  if (!(writer == null) && !(writer.cljs$core$IWriter$_write$arity$2 == null)) {
    return writer.cljs$core$IWriter$_write$arity$2(writer, s);
  } else {
    return cljs$core$IWriter$_write$dyn_2128(writer, s);
  }
};
var cljs$core$IWriter$_flush$dyn_2129 = function(writer) {
  var x__4428__auto__ = writer == null ? null : writer;
  var m__4429__auto__ = cljs.core._flush[goog.typeOf(x__4428__auto__)];
  if (!(m__4429__auto__ == null)) {
    return m__4429__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4429__auto__.cljs$core$IFn$_invoke$arity$1(writer) : m__4429__auto__.call(null, writer);
  } else {
    var m__4426__auto__ = cljs.core._flush["_"];
    if (!(m__4426__auto__ == null)) {
      return m__4426__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4426__auto__.cljs$core$IFn$_invoke$arity$1(writer) : m__4426__auto__.call(null, writer);
    } else {
      throw cljs.core.missing_protocol("IWriter.-flush", writer);
    }
  }
};
cljs.core._flush = function cljs$core$_flush(writer) {
  if (!(writer == null) && !(writer.cljs$core$IWriter$_flush$arity$1 == null)) {
    return writer.cljs$core$IWriter$_flush$arity$1(writer);
  } else {
    return cljs$core$IWriter$_flush$dyn_2129(writer);
  }
};
cljs.core.IPrintWithWriter = function() {
};
var cljs$core$IPrintWithWriter$_pr_writer$dyn_2130 = function(o, writer, opts) {
  var x__4428__auto__ = o == null ? null : o;
  var m__4429__auto__ = cljs.core._pr_writer[goog.typeOf(x__4428__auto__)];
  if (!(m__4429__auto__ == null)) {
    return m__4429__auto__.cljs$core$IFn$_invoke$arity$3 ? m__4429__auto__.cljs$core$IFn$_invoke$arity$3(o, writer, opts) : m__4429__auto__.call(null, o, writer, opts);
  } else {
    var m__4426__auto__ = cljs.core._pr_writer["_"];
    if (!(m__4426__auto__ == null)) {
      return m__4426__auto__.cljs$core$IFn$_invoke$arity$3 ? m__4426__auto__.cljs$core$IFn$_invoke$arity$3(o, writer, opts) : m__4426__auto__.call(null, o, writer, opts);
    } else {
      throw cljs.core.missing_protocol("IPrintWithWriter.-pr-writer", o);
    }
  }
};
cljs.core._pr_writer = function cljs$core$_pr_writer(o, writer, opts) {
  if (!(o == null) && !(o.cljs$core$IPrintWithWriter$_pr_writer$arity$3 == null)) {
    return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3(o, writer, opts);
  } else {
    return cljs$core$IPrintWithWriter$_pr_writer$dyn_2130(o, writer, opts);
  }
};
cljs.core.IPending = function() {
};
var cljs$core$IPending$_realized_QMARK_$dyn_2131 = function(x) {
  var x__4428__auto__ = x == null ? null : x;
  var m__4429__auto__ = cljs.core._realized_QMARK_[goog.typeOf(x__4428__auto__)];
  if (!(m__4429__auto__ == null)) {
    return m__4429__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4429__auto__.cljs$core$IFn$_invoke$arity$1(x) : m__4429__auto__.call(null, x);
  } else {
    var m__4426__auto__ = cljs.core._realized_QMARK_["_"];
    if (!(m__4426__auto__ == null)) {
      return m__4426__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4426__auto__.cljs$core$IFn$_invoke$arity$1(x) : m__4426__auto__.call(null, x);
    } else {
      throw cljs.core.missing_protocol("IPending.-realized?", x);
    }
  }
};
cljs.core._realized_QMARK_ = function cljs$core$_realized_QMARK_(x) {
  if (!(x == null) && !(x.cljs$core$IPending$_realized_QMARK_$arity$1 == null)) {
    return x.cljs$core$IPending$_realized_QMARK_$arity$1(x);
  } else {
    return cljs$core$IPending$_realized_QMARK_$dyn_2131(x);
  }
};
cljs.core.IWatchable = function() {
};
var cljs$core$IWatchable$_notify_watches$dyn_2132 = function(this$, oldval, newval) {
  var x__4428__auto__ = this$ == null ? null : this$;
  var m__4429__auto__ = cljs.core._notify_watches[goog.typeOf(x__4428__auto__)];
  if (!(m__4429__auto__ == null)) {
    return m__4429__auto__.cljs$core$IFn$_invoke$arity$3 ? m__4429__auto__.cljs$core$IFn$_invoke$arity$3(this$, oldval, newval) : m__4429__auto__.call(null, this$, oldval, newval);
  } else {
    var m__4426__auto__ = cljs.core._notify_watches["_"];
    if (!(m__4426__auto__ == null)) {
      return m__4426__auto__.cljs$core$IFn$_invoke$arity$3 ? m__4426__auto__.cljs$core$IFn$_invoke$arity$3(this$, oldval, newval) : m__4426__auto__.call(null, this$, oldval, newval);
    } else {
      throw cljs.core.missing_protocol("IWatchable.-notify-watches", this$);
    }
  }
};
cljs.core._notify_watches = function cljs$core$_notify_watches(this$, oldval, newval) {
  if (!(this$ == null) && !(this$.cljs$core$IWatchable$_notify_watches$arity$3 == null)) {
    return this$.cljs$core$IWatchable$_notify_watches$arity$3(this$, oldval, newval);
  } else {
    return cljs$core$IWatchable$_notify_watches$dyn_2132(this$, oldval, newval);
  }
};
var cljs$core$IWatchable$_add_watch$dyn_2133 = function(this$, key, f) {
  var x__4428__auto__ = this$ == null ? null : this$;
  var m__4429__auto__ = cljs.core._add_watch[goog.typeOf(x__4428__auto__)];
  if (!(m__4429__auto__ == null)) {
    return m__4429__auto__.cljs$core$IFn$_invoke$arity$3 ? m__4429__auto__.cljs$core$IFn$_invoke$arity$3(this$, key, f) : m__4429__auto__.call(null, this$, key, f);
  } else {
    var m__4426__auto__ = cljs.core._add_watch["_"];
    if (!(m__4426__auto__ == null)) {
      return m__4426__auto__.cljs$core$IFn$_invoke$arity$3 ? m__4426__auto__.cljs$core$IFn$_invoke$arity$3(this$, key, f) : m__4426__auto__.call(null, this$, key, f);
    } else {
      throw cljs.core.missing_protocol("IWatchable.-add-watch", this$);
    }
  }
};
cljs.core._add_watch = function cljs$core$_add_watch(this$, key, f) {
  if (!(this$ == null) && !(this$.cljs$core$IWatchable$_add_watch$arity$3 == null)) {
    return this$.cljs$core$IWatchable$_add_watch$arity$3(this$, key, f);
  } else {
    return cljs$core$IWatchable$_add_watch$dyn_2133(this$, key, f);
  }
};
var cljs$core$IWatchable$_remove_watch$dyn_2134 = function(this$, key) {
  var x__4428__auto__ = this$ == null ? null : this$;
  var m__4429__auto__ = cljs.core._remove_watch[goog.typeOf(x__4428__auto__)];
  if (!(m__4429__auto__ == null)) {
    return m__4429__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4429__auto__.cljs$core$IFn$_invoke$arity$2(this$, key) : m__4429__auto__.call(null, this$, key);
  } else {
    var m__4426__auto__ = cljs.core._remove_watch["_"];
    if (!(m__4426__auto__ == null)) {
      return m__4426__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4426__auto__.cljs$core$IFn$_invoke$arity$2(this$, key) : m__4426__auto__.call(null, this$, key);
    } else {
      throw cljs.core.missing_protocol("IWatchable.-remove-watch", this$);
    }
  }
};
cljs.core._remove_watch = function cljs$core$_remove_watch(this$, key) {
  if (!(this$ == null) && !(this$.cljs$core$IWatchable$_remove_watch$arity$2 == null)) {
    return this$.cljs$core$IWatchable$_remove_watch$arity$2(this$, key);
  } else {
    return cljs$core$IWatchable$_remove_watch$dyn_2134(this$, key);
  }
};
cljs.core.IEditableCollection = function() {
};
var cljs$core$IEditableCollection$_as_transient$dyn_2135 = function(coll) {
  var x__4428__auto__ = coll == null ? null : coll;
  var m__4429__auto__ = cljs.core._as_transient[goog.typeOf(x__4428__auto__)];
  if (!(m__4429__auto__ == null)) {
    return m__4429__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4429__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__4429__auto__.call(null, coll);
  } else {
    var m__4426__auto__ = cljs.core._as_transient["_"];
    if (!(m__4426__auto__ == null)) {
      return m__4426__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4426__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__4426__auto__.call(null, coll);
    } else {
      throw cljs.core.missing_protocol("IEditableCollection.-as-transient", coll);
    }
  }
};
cljs.core._as_transient = function cljs$core$_as_transient(coll) {
  if (!(coll == null) && !(coll.cljs$core$IEditableCollection$_as_transient$arity$1 == null)) {
    return coll.cljs$core$IEditableCollection$_as_transient$arity$1(coll);
  } else {
    return cljs$core$IEditableCollection$_as_transient$dyn_2135(coll);
  }
};
cljs.core.ITransientCollection = function() {
};
var cljs$core$ITransientCollection$_conj_BANG_$dyn_2136 = function(tcoll, val) {
  var x__4428__auto__ = tcoll == null ? null : tcoll;
  var m__4429__auto__ = cljs.core._conj_BANG_[goog.typeOf(x__4428__auto__)];
  if (!(m__4429__auto__ == null)) {
    return m__4429__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4429__auto__.cljs$core$IFn$_invoke$arity$2(tcoll, val) : m__4429__auto__.call(null, tcoll, val);
  } else {
    var m__4426__auto__ = cljs.core._conj_BANG_["_"];
    if (!(m__4426__auto__ == null)) {
      return m__4426__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4426__auto__.cljs$core$IFn$_invoke$arity$2(tcoll, val) : m__4426__auto__.call(null, tcoll, val);
    } else {
      throw cljs.core.missing_protocol("ITransientCollection.-conj!", tcoll);
    }
  }
};
cljs.core._conj_BANG_ = function cljs$core$_conj_BANG_(tcoll, val) {
  if (!(tcoll == null) && !(tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2 == null)) {
    return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2(tcoll, val);
  } else {
    return cljs$core$ITransientCollection$_conj_BANG_$dyn_2136(tcoll, val);
  }
};
var cljs$core$ITransientCollection$_persistent_BANG_$dyn_2137 = function(tcoll) {
  var x__4428__auto__ = tcoll == null ? null : tcoll;
  var m__4429__auto__ = cljs.core._persistent_BANG_[goog.typeOf(x__4428__auto__)];
  if (!(m__4429__auto__ == null)) {
    return m__4429__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4429__auto__.cljs$core$IFn$_invoke$arity$1(tcoll) : m__4429__auto__.call(null, tcoll);
  } else {
    var m__4426__auto__ = cljs.core._persistent_BANG_["_"];
    if (!(m__4426__auto__ == null)) {
      return m__4426__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4426__auto__.cljs$core$IFn$_invoke$arity$1(tcoll) : m__4426__auto__.call(null, tcoll);
    } else {
      throw cljs.core.missing_protocol("ITransientCollection.-persistent!", tcoll);
    }
  }
};
cljs.core._persistent_BANG_ = function cljs$core$_persistent_BANG_(tcoll) {
  if (!(tcoll == null) && !(tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 == null)) {
    return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1(tcoll);
  } else {
    return cljs$core$ITransientCollection$_persistent_BANG_$dyn_2137(tcoll);
  }
};
cljs.core.ITransientAssociative = function() {
};
var cljs$core$ITransientAssociative$_assoc_BANG_$dyn_2138 = function(tcoll, key, val) {
  var x__4428__auto__ = tcoll == null ? null : tcoll;
  var m__4429__auto__ = cljs.core._assoc_BANG_[goog.typeOf(x__4428__auto__)];
  if (!(m__4429__auto__ == null)) {
    return m__4429__auto__.cljs$core$IFn$_invoke$arity$3 ? m__4429__auto__.cljs$core$IFn$_invoke$arity$3(tcoll, key, val) : m__4429__auto__.call(null, tcoll, key, val);
  } else {
    var m__4426__auto__ = cljs.core._assoc_BANG_["_"];
    if (!(m__4426__auto__ == null)) {
      return m__4426__auto__.cljs$core$IFn$_invoke$arity$3 ? m__4426__auto__.cljs$core$IFn$_invoke$arity$3(tcoll, key, val) : m__4426__auto__.call(null, tcoll, key, val);
    } else {
      throw cljs.core.missing_protocol("ITransientAssociative.-assoc!", tcoll);
    }
  }
};
cljs.core._assoc_BANG_ = function cljs$core$_assoc_BANG_(tcoll, key, val) {
  if (!(tcoll == null) && !(tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 == null)) {
    return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(tcoll, key, val);
  } else {
    return cljs$core$ITransientAssociative$_assoc_BANG_$dyn_2138(tcoll, key, val);
  }
};
cljs.core.ITransientMap = function() {
};
var cljs$core$ITransientMap$_dissoc_BANG_$dyn_2139 = function(tcoll, key) {
  var x__4428__auto__ = tcoll == null ? null : tcoll;
  var m__4429__auto__ = cljs.core._dissoc_BANG_[goog.typeOf(x__4428__auto__)];
  if (!(m__4429__auto__ == null)) {
    return m__4429__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4429__auto__.cljs$core$IFn$_invoke$arity$2(tcoll, key) : m__4429__auto__.call(null, tcoll, key);
  } else {
    var m__4426__auto__ = cljs.core._dissoc_BANG_["_"];
    if (!(m__4426__auto__ == null)) {
      return m__4426__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4426__auto__.cljs$core$IFn$_invoke$arity$2(tcoll, key) : m__4426__auto__.call(null, tcoll, key);
    } else {
      throw cljs.core.missing_protocol("ITransientMap.-dissoc!", tcoll);
    }
  }
};
cljs.core._dissoc_BANG_ = function cljs$core$_dissoc_BANG_(tcoll, key) {
  if (!(tcoll == null) && !(tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 == null)) {
    return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2(tcoll, key);
  } else {
    return cljs$core$ITransientMap$_dissoc_BANG_$dyn_2139(tcoll, key);
  }
};
cljs.core.ITransientVector = function() {
};
var cljs$core$ITransientVector$_assoc_n_BANG_$dyn_2140 = function(tcoll, n, val) {
  var x__4428__auto__ = tcoll == null ? null : tcoll;
  var m__4429__auto__ = cljs.core._assoc_n_BANG_[goog.typeOf(x__4428__auto__)];
  if (!(m__4429__auto__ == null)) {
    return m__4429__auto__.cljs$core$IFn$_invoke$arity$3 ? m__4429__auto__.cljs$core$IFn$_invoke$arity$3(tcoll, n, val) : m__4429__auto__.call(null, tcoll, n, val);
  } else {
    var m__4426__auto__ = cljs.core._assoc_n_BANG_["_"];
    if (!(m__4426__auto__ == null)) {
      return m__4426__auto__.cljs$core$IFn$_invoke$arity$3 ? m__4426__auto__.cljs$core$IFn$_invoke$arity$3(tcoll, n, val) : m__4426__auto__.call(null, tcoll, n, val);
    } else {
      throw cljs.core.missing_protocol("ITransientVector.-assoc-n!", tcoll);
    }
  }
};
cljs.core._assoc_n_BANG_ = function cljs$core$_assoc_n_BANG_(tcoll, n, val) {
  if (!(tcoll == null) && !(tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3 == null)) {
    return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3(tcoll, n, val);
  } else {
    return cljs$core$ITransientVector$_assoc_n_BANG_$dyn_2140(tcoll, n, val);
  }
};
var cljs$core$ITransientVector$_pop_BANG_$dyn_2141 = function(tcoll) {
  var x__4428__auto__ = tcoll == null ? null : tcoll;
  var m__4429__auto__ = cljs.core._pop_BANG_[goog.typeOf(x__4428__auto__)];
  if (!(m__4429__auto__ == null)) {
    return m__4429__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4429__auto__.cljs$core$IFn$_invoke$arity$1(tcoll) : m__4429__auto__.call(null, tcoll);
  } else {
    var m__4426__auto__ = cljs.core._pop_BANG_["_"];
    if (!(m__4426__auto__ == null)) {
      return m__4426__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4426__auto__.cljs$core$IFn$_invoke$arity$1(tcoll) : m__4426__auto__.call(null, tcoll);
    } else {
      throw cljs.core.missing_protocol("ITransientVector.-pop!", tcoll);
    }
  }
};
cljs.core._pop_BANG_ = function cljs$core$_pop_BANG_(tcoll) {
  if (!(tcoll == null) && !(tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1 == null)) {
    return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1(tcoll);
  } else {
    return cljs$core$ITransientVector$_pop_BANG_$dyn_2141(tcoll);
  }
};
cljs.core.ITransientSet = function() {
};
var cljs$core$ITransientSet$_disjoin_BANG_$dyn_2142 = function(tcoll, v) {
  var x__4428__auto__ = tcoll == null ? null : tcoll;
  var m__4429__auto__ = cljs.core._disjoin_BANG_[goog.typeOf(x__4428__auto__)];
  if (!(m__4429__auto__ == null)) {
    return m__4429__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4429__auto__.cljs$core$IFn$_invoke$arity$2(tcoll, v) : m__4429__auto__.call(null, tcoll, v);
  } else {
    var m__4426__auto__ = cljs.core._disjoin_BANG_["_"];
    if (!(m__4426__auto__ == null)) {
      return m__4426__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4426__auto__.cljs$core$IFn$_invoke$arity$2(tcoll, v) : m__4426__auto__.call(null, tcoll, v);
    } else {
      throw cljs.core.missing_protocol("ITransientSet.-disjoin!", tcoll);
    }
  }
};
cljs.core._disjoin_BANG_ = function cljs$core$_disjoin_BANG_(tcoll, v) {
  if (!(tcoll == null) && !(tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2 == null)) {
    return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2(tcoll, v);
  } else {
    return cljs$core$ITransientSet$_disjoin_BANG_$dyn_2142(tcoll, v);
  }
};
cljs.core.IComparable = function() {
};
var cljs$core$IComparable$_compare$dyn_2143 = function(x, y) {
  var x__4428__auto__ = x == null ? null : x;
  var m__4429__auto__ = cljs.core._compare[goog.typeOf(x__4428__auto__)];
  if (!(m__4429__auto__ == null)) {
    return m__4429__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4429__auto__.cljs$core$IFn$_invoke$arity$2(x, y) : m__4429__auto__.call(null, x, y);
  } else {
    var m__4426__auto__ = cljs.core._compare["_"];
    if (!(m__4426__auto__ == null)) {
      return m__4426__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4426__auto__.cljs$core$IFn$_invoke$arity$2(x, y) : m__4426__auto__.call(null, x, y);
    } else {
      throw cljs.core.missing_protocol("IComparable.-compare", x);
    }
  }
};
cljs.core._compare = function cljs$core$_compare(x, y) {
  if (!(x == null) && !(x.cljs$core$IComparable$_compare$arity$2 == null)) {
    return x.cljs$core$IComparable$_compare$arity$2(x, y);
  } else {
    return cljs$core$IComparable$_compare$dyn_2143(x, y);
  }
};
cljs.core.IChunk = function() {
};
var cljs$core$IChunk$_drop_first$dyn_2144 = function(coll) {
  var x__4428__auto__ = coll == null ? null : coll;
  var m__4429__auto__ = cljs.core._drop_first[goog.typeOf(x__4428__auto__)];
  if (!(m__4429__auto__ == null)) {
    return m__4429__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4429__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__4429__auto__.call(null, coll);
  } else {
    var m__4426__auto__ = cljs.core._drop_first["_"];
    if (!(m__4426__auto__ == null)) {
      return m__4426__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4426__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__4426__auto__.call(null, coll);
    } else {
      throw cljs.core.missing_protocol("IChunk.-drop-first", coll);
    }
  }
};
cljs.core._drop_first = function cljs$core$_drop_first(coll) {
  if (!(coll == null) && !(coll.cljs$core$IChunk$_drop_first$arity$1 == null)) {
    return coll.cljs$core$IChunk$_drop_first$arity$1(coll);
  } else {
    return cljs$core$IChunk$_drop_first$dyn_2144(coll);
  }
};
cljs.core.IChunkedSeq = function() {
};
var cljs$core$IChunkedSeq$_chunked_first$dyn_2145 = function(coll) {
  var x__4428__auto__ = coll == null ? null : coll;
  var m__4429__auto__ = cljs.core._chunked_first[goog.typeOf(x__4428__auto__)];
  if (!(m__4429__auto__ == null)) {
    return m__4429__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4429__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__4429__auto__.call(null, coll);
  } else {
    var m__4426__auto__ = cljs.core._chunked_first["_"];
    if (!(m__4426__auto__ == null)) {
      return m__4426__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4426__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__4426__auto__.call(null, coll);
    } else {
      throw cljs.core.missing_protocol("IChunkedSeq.-chunked-first", coll);
    }
  }
};
cljs.core._chunked_first = function cljs$core$_chunked_first(coll) {
  if (!(coll == null) && !(coll.cljs$core$IChunkedSeq$_chunked_first$arity$1 == null)) {
    return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1(coll);
  } else {
    return cljs$core$IChunkedSeq$_chunked_first$dyn_2145(coll);
  }
};
var cljs$core$IChunkedSeq$_chunked_rest$dyn_2146 = function(coll) {
  var x__4428__auto__ = coll == null ? null : coll;
  var m__4429__auto__ = cljs.core._chunked_rest[goog.typeOf(x__4428__auto__)];
  if (!(m__4429__auto__ == null)) {
    return m__4429__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4429__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__4429__auto__.call(null, coll);
  } else {
    var m__4426__auto__ = cljs.core._chunked_rest["_"];
    if (!(m__4426__auto__ == null)) {
      return m__4426__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4426__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__4426__auto__.call(null, coll);
    } else {
      throw cljs.core.missing_protocol("IChunkedSeq.-chunked-rest", coll);
    }
  }
};
cljs.core._chunked_rest = function cljs$core$_chunked_rest(coll) {
  if (!(coll == null) && !(coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1 == null)) {
    return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1(coll);
  } else {
    return cljs$core$IChunkedSeq$_chunked_rest$dyn_2146(coll);
  }
};
cljs.core.IChunkedNext = function() {
};
var cljs$core$IChunkedNext$_chunked_next$dyn_2147 = function(coll) {
  var x__4428__auto__ = coll == null ? null : coll;
  var m__4429__auto__ = cljs.core._chunked_next[goog.typeOf(x__4428__auto__)];
  if (!(m__4429__auto__ == null)) {
    return m__4429__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4429__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__4429__auto__.call(null, coll);
  } else {
    var m__4426__auto__ = cljs.core._chunked_next["_"];
    if (!(m__4426__auto__ == null)) {
      return m__4426__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4426__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__4426__auto__.call(null, coll);
    } else {
      throw cljs.core.missing_protocol("IChunkedNext.-chunked-next", coll);
    }
  }
};
cljs.core._chunked_next = function cljs$core$_chunked_next(coll) {
  if (!(coll == null) && !(coll.cljs$core$IChunkedNext$_chunked_next$arity$1 == null)) {
    return coll.cljs$core$IChunkedNext$_chunked_next$arity$1(coll);
  } else {
    return cljs$core$IChunkedNext$_chunked_next$dyn_2147(coll);
  }
};
cljs.core.INamed = function() {
};
var cljs$core$INamed$_name$dyn_2148 = function(x) {
  var x__4428__auto__ = x == null ? null : x;
  var m__4429__auto__ = cljs.core._name[goog.typeOf(x__4428__auto__)];
  if (!(m__4429__auto__ == null)) {
    return m__4429__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4429__auto__.cljs$core$IFn$_invoke$arity$1(x) : m__4429__auto__.call(null, x);
  } else {
    var m__4426__auto__ = cljs.core._name["_"];
    if (!(m__4426__auto__ == null)) {
      return m__4426__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4426__auto__.cljs$core$IFn$_invoke$arity$1(x) : m__4426__auto__.call(null, x);
    } else {
      throw cljs.core.missing_protocol("INamed.-name", x);
    }
  }
};
cljs.core._name = function cljs$core$_name(x) {
  if (!(x == null) && !(x.cljs$core$INamed$_name$arity$1 == null)) {
    return x.cljs$core$INamed$_name$arity$1(x);
  } else {
    return cljs$core$INamed$_name$dyn_2148(x);
  }
};
var cljs$core$INamed$_namespace$dyn_2149 = function(x) {
  var x__4428__auto__ = x == null ? null : x;
  var m__4429__auto__ = cljs.core._namespace[goog.typeOf(x__4428__auto__)];
  if (!(m__4429__auto__ == null)) {
    return m__4429__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4429__auto__.cljs$core$IFn$_invoke$arity$1(x) : m__4429__auto__.call(null, x);
  } else {
    var m__4426__auto__ = cljs.core._namespace["_"];
    if (!(m__4426__auto__ == null)) {
      return m__4426__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4426__auto__.cljs$core$IFn$_invoke$arity$1(x) : m__4426__auto__.call(null, x);
    } else {
      throw cljs.core.missing_protocol("INamed.-namespace", x);
    }
  }
};
cljs.core._namespace = function cljs$core$_namespace(x) {
  if (!(x == null) && !(x.cljs$core$INamed$_namespace$arity$1 == null)) {
    return x.cljs$core$INamed$_namespace$arity$1(x);
  } else {
    return cljs$core$INamed$_namespace$dyn_2149(x);
  }
};
cljs.core.IAtom = function() {
};
cljs.core.IReset = function() {
};
var cljs$core$IReset$_reset_BANG_$dyn_2150 = function(o, new_value) {
  var x__4428__auto__ = o == null ? null : o;
  var m__4429__auto__ = cljs.core._reset_BANG_[goog.typeOf(x__4428__auto__)];
  if (!(m__4429__auto__ == null)) {
    return m__4429__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4429__auto__.cljs$core$IFn$_invoke$arity$2(o, new_value) : m__4429__auto__.call(null, o, new_value);
  } else {
    var m__4426__auto__ = cljs.core._reset_BANG_["_"];
    if (!(m__4426__auto__ == null)) {
      return m__4426__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4426__auto__.cljs$core$IFn$_invoke$arity$2(o, new_value) : m__4426__auto__.call(null, o, new_value);
    } else {
      throw cljs.core.missing_protocol("IReset.-reset!", o);
    }
  }
};
cljs.core._reset_BANG_ = function cljs$core$_reset_BANG_(o, new_value) {
  if (!(o == null) && !(o.cljs$core$IReset$_reset_BANG_$arity$2 == null)) {
    return o.cljs$core$IReset$_reset_BANG_$arity$2(o, new_value);
  } else {
    return cljs$core$IReset$_reset_BANG_$dyn_2150(o, new_value);
  }
};
cljs.core.ISwap = function() {
};
var cljs$core$ISwap$_swap_BANG_$dyn_2153 = function() {
  var G__2154 = null;
  var G__2154__2 = function(o, f) {
    var x__4428__auto__ = o == null ? null : o;
    var m__4429__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__4428__auto__)];
    if (!(m__4429__auto__ == null)) {
      return m__4429__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4429__auto__.cljs$core$IFn$_invoke$arity$2(o, f) : m__4429__auto__.call(null, o, f);
    } else {
      var m__4426__auto__ = cljs.core._swap_BANG_["_"];
      if (!(m__4426__auto__ == null)) {
        return m__4426__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4426__auto__.cljs$core$IFn$_invoke$arity$2(o, f) : m__4426__auto__.call(null, o, f);
      } else {
        throw cljs.core.missing_protocol("ISwap.-swap!", o);
      }
    }
  };
  var G__2154__3 = function(o, f, a) {
    var x__4428__auto__ = o == null ? null : o;
    var m__4429__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__4428__auto__)];
    if (!(m__4429__auto__ == null)) {
      return m__4429__auto__.cljs$core$IFn$_invoke$arity$3 ? m__4429__auto__.cljs$core$IFn$_invoke$arity$3(o, f, a) : m__4429__auto__.call(null, o, f, a);
    } else {
      var m__4426__auto__ = cljs.core._swap_BANG_["_"];
      if (!(m__4426__auto__ == null)) {
        return m__4426__auto__.cljs$core$IFn$_invoke$arity$3 ? m__4426__auto__.cljs$core$IFn$_invoke$arity$3(o, f, a) : m__4426__auto__.call(null, o, f, a);
      } else {
        throw cljs.core.missing_protocol("ISwap.-swap!", o);
      }
    }
  };
  var G__2154__4 = function(o, f, a, b) {
    var x__4428__auto__ = o == null ? null : o;
    var m__4429__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__4428__auto__)];
    if (!(m__4429__auto__ == null)) {
      return m__4429__auto__.cljs$core$IFn$_invoke$arity$4 ? m__4429__auto__.cljs$core$IFn$_invoke$arity$4(o, f, a, b) : m__4429__auto__.call(null, o, f, a, b);
    } else {
      var m__4426__auto__ = cljs.core._swap_BANG_["_"];
      if (!(m__4426__auto__ == null)) {
        return m__4426__auto__.cljs$core$IFn$_invoke$arity$4 ? m__4426__auto__.cljs$core$IFn$_invoke$arity$4(o, f, a, b) : m__4426__auto__.call(null, o, f, a, b);
      } else {
        throw cljs.core.missing_protocol("ISwap.-swap!", o);
      }
    }
  };
  var G__2154__5 = function(o, f, a, b, xs) {
    var x__4428__auto__ = o == null ? null : o;
    var m__4429__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__4428__auto__)];
    if (!(m__4429__auto__ == null)) {
      return m__4429__auto__.cljs$core$IFn$_invoke$arity$5 ? m__4429__auto__.cljs$core$IFn$_invoke$arity$5(o, f, a, b, xs) : m__4429__auto__.call(null, o, f, a, b, xs);
    } else {
      var m__4426__auto__ = cljs.core._swap_BANG_["_"];
      if (!(m__4426__auto__ == null)) {
        return m__4426__auto__.cljs$core$IFn$_invoke$arity$5 ? m__4426__auto__.cljs$core$IFn$_invoke$arity$5(o, f, a, b, xs) : m__4426__auto__.call(null, o, f, a, b, xs);
      } else {
        throw cljs.core.missing_protocol("ISwap.-swap!", o);
      }
    }
  };
  G__2154 = function(o, f, a, b, xs) {
    switch(arguments.length) {
      case 2:
        return G__2154__2.call(this, o, f);
      case 3:
        return G__2154__3.call(this, o, f, a);
      case 4:
        return G__2154__4.call(this, o, f, a, b);
      case 5:
        return G__2154__5.call(this, o, f, a, b, xs);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__2154.cljs$core$IFn$_invoke$arity$2 = G__2154__2;
  G__2154.cljs$core$IFn$_invoke$arity$3 = G__2154__3;
  G__2154.cljs$core$IFn$_invoke$arity$4 = G__2154__4;
  G__2154.cljs$core$IFn$_invoke$arity$5 = G__2154__5;
  return G__2154;
}();
cljs.core._swap_BANG_ = function cljs$core$_swap_BANG_(var_args) {
  var G__2152 = arguments.length;
  switch(G__2152) {
    case 2:
      return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$2 = function(o, f) {
  if (!(o == null) && !(o.cljs$core$ISwap$_swap_BANG_$arity$2 == null)) {
    return o.cljs$core$ISwap$_swap_BANG_$arity$2(o, f);
  } else {
    return cljs$core$ISwap$_swap_BANG_$dyn_2153.cljs$core$IFn$_invoke$arity$2(o, f);
  }
};
cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$3 = function(o, f, a) {
  if (!(o == null) && !(o.cljs$core$ISwap$_swap_BANG_$arity$3 == null)) {
    return o.cljs$core$ISwap$_swap_BANG_$arity$3(o, f, a);
  } else {
    return cljs$core$ISwap$_swap_BANG_$dyn_2153.cljs$core$IFn$_invoke$arity$3(o, f, a);
  }
};
cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$4 = function(o, f, a, b) {
  if (!(o == null) && !(o.cljs$core$ISwap$_swap_BANG_$arity$4 == null)) {
    return o.cljs$core$ISwap$_swap_BANG_$arity$4(o, f, a, b);
  } else {
    return cljs$core$ISwap$_swap_BANG_$dyn_2153.cljs$core$IFn$_invoke$arity$4(o, f, a, b);
  }
};
cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$5 = function(o, f, a, b, xs) {
  if (!(o == null) && !(o.cljs$core$ISwap$_swap_BANG_$arity$5 == null)) {
    return o.cljs$core$ISwap$_swap_BANG_$arity$5(o, f, a, b, xs);
  } else {
    return cljs$core$ISwap$_swap_BANG_$dyn_2153.cljs$core$IFn$_invoke$arity$5(o, f, a, b, xs);
  }
};
cljs.core._swap_BANG_.cljs$lang$maxFixedArity = 5;
cljs.core.IVolatile = function() {
};
var cljs$core$IVolatile$_vreset_BANG_$dyn_2156 = function(o, new_value) {
  var x__4428__auto__ = o == null ? null : o;
  var m__4429__auto__ = cljs.core._vreset_BANG_[goog.typeOf(x__4428__auto__)];
  if (!(m__4429__auto__ == null)) {
    return m__4429__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4429__auto__.cljs$core$IFn$_invoke$arity$2(o, new_value) : m__4429__auto__.call(null, o, new_value);
  } else {
    var m__4426__auto__ = cljs.core._vreset_BANG_["_"];
    if (!(m__4426__auto__ == null)) {
      return m__4426__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4426__auto__.cljs$core$IFn$_invoke$arity$2(o, new_value) : m__4426__auto__.call(null, o, new_value);
    } else {
      throw cljs.core.missing_protocol("IVolatile.-vreset!", o);
    }
  }
};
cljs.core._vreset_BANG_ = function cljs$core$_vreset_BANG_(o, new_value) {
  if (!(o == null) && !(o.cljs$core$IVolatile$_vreset_BANG_$arity$2 == null)) {
    return o.cljs$core$IVolatile$_vreset_BANG_$arity$2(o, new_value);
  } else {
    return cljs$core$IVolatile$_vreset_BANG_$dyn_2156(o, new_value);
  }
};
cljs.core.IIterable = function() {
};
var cljs$core$IIterable$_iterator$dyn_2157 = function(coll) {
  var x__4428__auto__ = coll == null ? null : coll;
  var m__4429__auto__ = cljs.core._iterator[goog.typeOf(x__4428__auto__)];
  if (!(m__4429__auto__ == null)) {
    return m__4429__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4429__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__4429__auto__.call(null, coll);
  } else {
    var m__4426__auto__ = cljs.core._iterator["_"];
    if (!(m__4426__auto__ == null)) {
      return m__4426__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4426__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__4426__auto__.call(null, coll);
    } else {
      throw cljs.core.missing_protocol("IIterable.-iterator", coll);
    }
  }
};
cljs.core._iterator = function cljs$core$_iterator(coll) {
  if (!(coll == null) && !(coll.cljs$core$IIterable$_iterator$arity$1 == null)) {
    return coll.cljs$core$IIterable$_iterator$arity$1(coll);
  } else {
    return cljs$core$IIterable$_iterator$dyn_2157(coll);
  }
};
cljs.core.StringBufferWriter = function(sb) {
  this.sb = sb;
  this.cljs$lang$protocol_mask$partition0$ = 1073741824;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_write$arity$2 = function(_, s) {
  var self__ = this;
  var ___$1 = this;
  return self__.sb.append(s);
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_flush$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return null;
};
cljs.core.StringBufferWriter.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "sb", "sb", -1249746442, null)], null);
};
cljs.core.StringBufferWriter.cljs$lang$type = true;
cljs.core.StringBufferWriter.cljs$lang$ctorStr = "cljs.core/StringBufferWriter";
cljs.core.StringBufferWriter.cljs$lang$ctorPrWriter = function(this__4369__auto__, writer__4370__auto__, opt__4371__auto__) {
  return cljs.core._write(writer__4370__auto__, "cljs.core/StringBufferWriter");
};
cljs.core.__GT_StringBufferWriter = function cljs$core$__GT_StringBufferWriter(sb) {
  return new cljs.core.StringBufferWriter(sb);
};
cljs.core.pr_str_STAR_ = function cljs$core$pr_str_STAR_(obj) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  obj.cljs$core$IPrintWithWriter$_pr_writer$arity$3(null, writer, cljs.core.pr_opts());
  writer.cljs$core$IWriter$_flush$arity$1(null);
  return cljs.core.str.cljs$core$IFn$_invoke$arity$1(sb);
};
cljs.core.int_rotate_left = function cljs$core$int_rotate_left(x, n) {
  return x << n | x >>> -n;
};
if (typeof Math !== "undefined" && typeof Math.imul !== "undefined" && !(Math.imul(4294967295, 5) === 0)) {
  cljs.core.imul = function cljs$core$imul(a, b) {
    return Math.imul(a, b);
  };
} else {
  cljs.core.imul = function cljs$core$imul(a, b) {
    var ah = a >>> 16 & 65535;
    var al = a & 65535;
    var bh = b >>> 16 & 65535;
    var bl = b & 65535;
    return al * bl + (ah * bl + al * bh << 16 >>> 0) | 0;
  };
}
cljs.core.m3_seed = 0;
cljs.core.m3_C1 = 3432918353 | 0;
cljs.core.m3_C2 = 461845907 | 0;
cljs.core.m3_mix_K1 = function cljs$core$m3_mix_K1(k1) {
  return cljs.core.imul(cljs.core.int_rotate_left(cljs.core.imul(k1 | 0, cljs.core.m3_C1), 15), cljs.core.m3_C2);
};
cljs.core.m3_mix_H1 = function cljs$core$m3_mix_H1(h1, k1) {
  return cljs.core.imul(cljs.core.int_rotate_left((h1 | 0) ^ (k1 | 0), 13), 5) + (3864292196 | 0) | 0;
};
cljs.core.m3_fmix = function cljs$core$m3_fmix(h1, len) {
  var h1__$1 = h1 | 0;
  var h1__$2 = h1__$1 ^ len;
  var h1__$3 = h1__$2 ^ h1__$2 >>> 16;
  var h1__$4 = cljs.core.imul(h1__$3, 2246822507 | 0);
  var h1__$5 = h1__$4 ^ h1__$4 >>> 13;
  var h1__$6 = cljs.core.imul(h1__$5, 3266489909 | 0);
  return h1__$6 ^ h1__$6 >>> 16;
};
cljs.core.m3_hash_int = function cljs$core$m3_hash_int(in$) {
  if (in$ === 0) {
    return in$;
  } else {
    var k1 = cljs.core.m3_mix_K1(in$);
    var h1 = cljs.core.m3_mix_H1(cljs.core.m3_seed, k1);
    return cljs.core.m3_fmix(h1, 4);
  }
};
cljs.core.m3_hash_unencoded_chars = function cljs$core$m3_hash_unencoded_chars(in$) {
  var h1 = function() {
    var i = 1;
    var h1 = cljs.core.m3_seed;
    while (true) {
      if (i < in$.length) {
        var G__2158 = i + 2;
        var G__2159 = cljs.core.m3_mix_H1(h1, cljs.core.m3_mix_K1(in$.charCodeAt(i - 1) | in$.charCodeAt(i) << 16));
        i = G__2158;
        h1 = G__2159;
        continue;
      } else {
        return h1;
      }
      break;
    }
  }();
  var h1__$1 = (in$.length & 1) === 1 ? h1 ^ cljs.core.m3_mix_K1(in$.charCodeAt(in$.length - 1)) : h1;
  return cljs.core.m3_fmix(h1__$1, cljs.core.imul(2, in$.length));
};
cljs.core.string_hash_cache = {};
cljs.core.string_hash_cache_count = 0;
cljs.core.hash_string_STAR_ = function cljs$core$hash_string_STAR_(s) {
  if (!(s == null)) {
    var len = s.length;
    if (len > 0) {
      var i = 0;
      var hash = 0;
      while (true) {
        if (i < len) {
          var G__2162 = i + 1;
          var G__2163 = cljs.core.imul(31, hash) + s.charCodeAt(i);
          i = G__2162;
          hash = G__2163;
          continue;
        } else {
          return hash;
        }
        break;
      }
    } else {
      return 0;
    }
  } else {
    return 0;
  }
};
cljs.core.add_to_string_hash_cache = function cljs$core$add_to_string_hash_cache(k) {
  var h = cljs.core.hash_string_STAR_(k);
  goog.object.set(cljs.core.string_hash_cache, k, h);
  cljs.core.string_hash_cache_count = cljs.core.string_hash_cache_count + 1;
  return h;
};
cljs.core.hash_string = function cljs$core$hash_string(k) {
  if (cljs.core.string_hash_cache_count > 255) {
    cljs.core.string_hash_cache = {};
    cljs.core.string_hash_cache_count = 0;
  } else {
  }
  if (k == null) {
    return 0;
  } else {
    var h = cljs.core.string_hash_cache[k];
    if (typeof h === "number") {
      return h;
    } else {
      return cljs.core.add_to_string_hash_cache(k);
    }
  }
};
cljs.core.hash = function cljs$core$hash(o) {
  if (!(o == null) ? o.cljs$lang$protocol_mask$partition0$ & 4194304 || cljs.core.PROTOCOL_SENTINEL === o.cljs$core$IHash$ ? true : false : false) {
    return o.cljs$core$IHash$_hash$arity$1(null) ^ 0;
  } else {
    if (typeof o === "number") {
      if (cljs.core.truth_(isFinite(o))) {
        return Math.floor(o) % 2147483647;
      } else {
        var G__2167 = o;
        switch(G__2167) {
          case Infinity:
            return 2146435072;
            break;
          case -Infinity:
            return -1048576;
            break;
          default:
            return 2146959360;
        }
      }
    } else {
      if (o === true) {
        return 1231;
      } else {
        if (o === false) {
          return 1237;
        } else {
          if (typeof o === "string") {
            return cljs.core.m3_hash_int(cljs.core.hash_string(o));
          } else {
            if (o instanceof Date) {
              return o.valueOf() ^ 0;
            } else {
              if (o == null) {
                return 0;
              } else {
                return cljs.core._hash(o) ^ 0;
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.hash_combine = function cljs$core$hash_combine(seed, hash) {
  return seed ^ hash + 2654435769 + (seed << 6) + (seed >> 2);
};
cljs.core.instance_QMARK_ = function cljs$core$instance_QMARK_(c, x) {
  return x instanceof c;
};
cljs.core.symbol_QMARK_ = function cljs$core$symbol_QMARK_(x) {
  return x instanceof cljs.core.Symbol;
};
cljs.core.hash_symbol = function cljs$core$hash_symbol(sym) {
  return cljs.core.hash_combine(cljs.core.m3_hash_unencoded_chars(sym.name), cljs.core.hash_string(sym.ns));
};
cljs.core.compare_symbols = function cljs$core$compare_symbols(a, b) {
  if (a.str === b.str) {
    return 0;
  } else {
    if (cljs.core.truth_(cljs.core.not(a.ns) ? b.ns : false)) {
      return -1;
    } else {
      if (cljs.core.truth_(a.ns)) {
        if (cljs.core.not(b.ns)) {
          return 1;
        } else {
          var nsc = goog.array.defaultCompare(a.ns, b.ns);
          if (0 === nsc) {
            return goog.array.defaultCompare(a.name, b.name);
          } else {
            return nsc;
          }
        }
      } else {
        return goog.array.defaultCompare(a.name, b.name);
      }
    }
  }
};
cljs.core.Symbol = function(ns, name, str, _hash, _meta) {
  this.ns = ns;
  this.name = name;
  this.str = str;
  this._hash = _hash;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 2154168321;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Symbol.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return self__.str;
};
cljs.core.Symbol.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Symbol.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Symbol) {
    return self__.str === other.str;
  } else {
    return false;
  }
};
cljs.core.Symbol.prototype.call = function() {
  var G__2170 = null;
  var G__2170__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll, sym);
  };
  var G__2170__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core.get.cljs$core$IFn$_invoke$arity$3(coll, sym, not_found);
  };
  G__2170 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__2170__2.call(this, self__, coll);
      case 3:
        return G__2170__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__2170.cljs$core$IFn$_invoke$arity$2 = G__2170__2;
  G__2170.cljs$core$IFn$_invoke$arity$3 = G__2170__3;
  return G__2170;
}();
cljs.core.Symbol.prototype.apply = function(self__, args2169) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args2169)));
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var sym = this;
  return cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll, sym);
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var sym = this;
  return cljs.core.get.cljs$core$IFn$_invoke$arity$3(coll, sym, not_found);
};
cljs.core.Symbol.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__._meta;
};
cljs.core.Symbol.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Symbol(self__.ns, self__.name, self__.str, self__._hash, new_meta);
};
cljs.core.Symbol.prototype.cljs$core$IHash$_hash$arity$1 = function(sym) {
  var self__ = this;
  var sym__$1 = this;
  var h__4238__auto__ = self__._hash;
  if (!(h__4238__auto__ == null)) {
    return h__4238__auto__;
  } else {
    var h__4238__auto____$1 = cljs.core.hash_symbol(sym__$1);
    self__._hash = h__4238__auto____$1;
    return h__4238__auto____$1;
  }
};
cljs.core.Symbol.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Symbol.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Symbol.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write(writer, self__.str);
};
cljs.core.Symbol.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "ns", "ns", 2082130287, null), new cljs.core.Symbol(null, "name", "name", -810760592, null), new cljs.core.Symbol(null, "str", "str", -1564826950, null), cljs.core.with_meta(new cljs.core.Symbol(null, "_hash", "_hash", -2130838312, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), new cljs.core.Symbol(null, 
  "_meta", "_meta", -1716892533, null)], null);
};
cljs.core.Symbol.cljs$lang$type = true;
cljs.core.Symbol.cljs$lang$ctorStr = "cljs.core/Symbol";
cljs.core.Symbol.cljs$lang$ctorPrWriter = function(this__4369__auto__, writer__4370__auto__, opt__4371__auto__) {
  return cljs.core._write(writer__4370__auto__, "cljs.core/Symbol");
};
cljs.core.__GT_Symbol = function cljs$core$__GT_Symbol(ns, name, str, _hash, _meta) {
  return new cljs.core.Symbol(ns, name, str, _hash, _meta);
};
cljs.core.var_QMARK_ = function cljs$core$var_QMARK_(v) {
  return v instanceof cljs.core.Var;
};
cljs.core.symbol = function cljs$core$symbol(var_args) {
  var G__2172 = arguments.length;
  switch(G__2172) {
    case 1:
      return cljs.core.symbol.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
cljs.core.symbol.cljs$core$IFn$_invoke$arity$1 = function(name) {
  while (true) {
    if (name instanceof cljs.core.Symbol) {
      return name;
    } else {
      if (typeof name === "string") {
        var idx = name.indexOf("/");
        if (idx < 1) {
          return cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(null, name);
        } else {
          return cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(name.substring(0, idx), name.substring(idx + 1, name.length));
        }
      } else {
        if (cljs.core.var_QMARK_(name)) {
          return name.sym;
        } else {
          if (name instanceof cljs.core.Keyword) {
            var G__2174 = name.fqn;
            name = G__2174;
            continue;
          } else {
            throw new Error("no conversion to symbol");
          }
        }
      }
    }
    break;
  }
};
cljs.core.symbol.cljs$core$IFn$_invoke$arity$2 = function(ns, name) {
  var sym_str = !(ns == null) ? [cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns), "/", cljs.core.str.cljs$core$IFn$_invoke$arity$1(name)].join("") : name;
  return new cljs.core.Symbol(ns, name, sym_str, null, null);
};
cljs.core.symbol.cljs$lang$maxFixedArity = 2;
cljs.core.Var = function(val, sym, _meta) {
  this.val = val;
  this.sym = sym;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 6717441;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.Var.prototype.isMacro = function() {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).cljs$lang$macro;
};
cljs.core.Var.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return ["#'", cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.sym)].join("");
};
cljs.core.Var.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
};
cljs.core.Var.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__._meta;
};
cljs.core.Var.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Var(self__.val, self__.sym, new_meta);
};
cljs.core.Var.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var self__ = this;
  var this$__$1 = this;
  if (other instanceof cljs.core.Var) {
    return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(this$__$1.sym, other.sym);
  } else {
    return false;
  }
};
cljs.core.Var.prototype.cljs$core$IHash$_hash$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.hash_symbol(self__.sym);
};
cljs.core.Var.prototype.cljs$core$Fn$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.Var.prototype.call = function() {
  var G__2218 = null;
  var G__2218__1 = function(self__) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var fexpr__2176 = self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    return fexpr__2176.cljs$core$IFn$_invoke$arity$0 ? fexpr__2176.cljs$core$IFn$_invoke$arity$0() : fexpr__2176.call(null);
  };
  var G__2218__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var fexpr__2177 = self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    return fexpr__2177.cljs$core$IFn$_invoke$arity$1 ? fexpr__2177.cljs$core$IFn$_invoke$arity$1(a) : fexpr__2177.call(null, a);
  };
  var G__2218__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var fexpr__2178 = self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    return fexpr__2178.cljs$core$IFn$_invoke$arity$2 ? fexpr__2178.cljs$core$IFn$_invoke$arity$2(a, b) : fexpr__2178.call(null, a, b);
  };
  var G__2218__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var fexpr__2179 = self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    return fexpr__2179.cljs$core$IFn$_invoke$arity$3 ? fexpr__2179.cljs$core$IFn$_invoke$arity$3(a, b, c) : fexpr__2179.call(null, a, b, c);
  };
  var G__2218__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var fexpr__2180 = self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    return fexpr__2180.cljs$core$IFn$_invoke$arity$4 ? fexpr__2180.cljs$core$IFn$_invoke$arity$4(a, b, c, d) : fexpr__2180.call(null, a, b, c, d);
  };
  var G__2218__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var fexpr__2181 = self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    return fexpr__2181.cljs$core$IFn$_invoke$arity$5 ? fexpr__2181.cljs$core$IFn$_invoke$arity$5(a, b, c, d, e) : fexpr__2181.call(null, a, b, c, d, e);
  };
  var G__2218__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var fexpr__2182 = self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    return fexpr__2182.cljs$core$IFn$_invoke$arity$6 ? fexpr__2182.cljs$core$IFn$_invoke$arity$6(a, b, c, d, e, f) : fexpr__2182.call(null, a, b, c, d, e, f);
  };
  var G__2218__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var fexpr__2183 = self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    return fexpr__2183.cljs$core$IFn$_invoke$arity$7 ? fexpr__2183.cljs$core$IFn$_invoke$arity$7(a, b, c, d, e, f, g) : fexpr__2183.call(null, a, b, c, d, e, f, g);
  };
  var G__2218__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var fexpr__2184 = self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    return fexpr__2184.cljs$core$IFn$_invoke$arity$8 ? fexpr__2184.cljs$core$IFn$_invoke$arity$8(a, b, c, d, e, f, g, h) : fexpr__2184.call(null, a, b, c, d, e, f, g, h);
  };
  var G__2218__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var fexpr__2185 = self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    return fexpr__2185.cljs$core$IFn$_invoke$arity$9 ? fexpr__2185.cljs$core$IFn$_invoke$arity$9(a, b, c, d, e, f, g, h, i) : fexpr__2185.call(null, a, b, c, d, e, f, g, h, i);
  };
  var G__2218__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var fexpr__2186 = self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    return fexpr__2186.cljs$core$IFn$_invoke$arity$10 ? fexpr__2186.cljs$core$IFn$_invoke$arity$10(a, b, c, d, e, f, g, h, i, j) : fexpr__2186.call(null, a, b, c, d, e, f, g, h, i, j);
  };
  var G__2218__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var fexpr__2187 = self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    return fexpr__2187.cljs$core$IFn$_invoke$arity$11 ? fexpr__2187.cljs$core$IFn$_invoke$arity$11(a, b, c, d, e, f, g, h, i, j, k) : fexpr__2187.call(null, a, b, c, d, e, f, g, h, i, j, k);
  };
  var G__2218__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var fexpr__2188 = self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    return fexpr__2188.cljs$core$IFn$_invoke$arity$12 ? fexpr__2188.cljs$core$IFn$_invoke$arity$12(a, b, c, d, e, f, g, h, i, j, k, l) : fexpr__2188.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
  };
  var G__2218__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var fexpr__2189 = self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    return fexpr__2189.cljs$core$IFn$_invoke$arity$13 ? fexpr__2189.cljs$core$IFn$_invoke$arity$13(a, b, c, d, e, f, g, h, i, j, k, l, m) : fexpr__2189.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
  };
  var G__2218__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var fexpr__2190 = self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    return fexpr__2190.cljs$core$IFn$_invoke$arity$14 ? fexpr__2190.cljs$core$IFn$_invoke$arity$14(a, b, c, d, e, f, g, h, i, j, k, l, m, n) : fexpr__2190.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  };
  var G__2218__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var fexpr__2191 = self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    return fexpr__2191.cljs$core$IFn$_invoke$arity$15 ? fexpr__2191.cljs$core$IFn$_invoke$arity$15(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) : fexpr__2191.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  };
  var G__2218__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var fexpr__2192 = self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    return fexpr__2192.cljs$core$IFn$_invoke$arity$16 ? fexpr__2192.cljs$core$IFn$_invoke$arity$16(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) : fexpr__2192.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  };
  var G__2218__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var fexpr__2193 = self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    return fexpr__2193.cljs$core$IFn$_invoke$arity$17 ? fexpr__2193.cljs$core$IFn$_invoke$arity$17(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) : fexpr__2193.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  };
  var G__2218__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var fexpr__2194 = self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    return fexpr__2194.cljs$core$IFn$_invoke$arity$18 ? fexpr__2194.cljs$core$IFn$_invoke$arity$18(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) : fexpr__2194.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  };
  var G__2218__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var fexpr__2195 = self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    return fexpr__2195.cljs$core$IFn$_invoke$arity$19 ? fexpr__2195.cljs$core$IFn$_invoke$arity$19(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) : fexpr__2195.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  };
  var G__2218__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var fexpr__2196 = self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    return fexpr__2196.cljs$core$IFn$_invoke$arity$20 ? fexpr__2196.cljs$core$IFn$_invoke$arity$20(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) : fexpr__2196.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  };
  var G__2218__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null), a, b, c, d, cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest], 0));
  };
  G__2218 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return G__2218__1.call(this, self__);
      case 2:
        return G__2218__2.call(this, self__, a);
      case 3:
        return G__2218__3.call(this, self__, a, b);
      case 4:
        return G__2218__4.call(this, self__, a, b, c);
      case 5:
        return G__2218__5.call(this, self__, a, b, c, d);
      case 6:
        return G__2218__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__2218__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__2218__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__2218__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__2218__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__2218__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__2218__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__2218__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__2218__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__2218__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__2218__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__2218__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__2218__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__2218__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__2218__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__2218__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__2218__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__2218.cljs$core$IFn$_invoke$arity$1 = G__2218__1;
  G__2218.cljs$core$IFn$_invoke$arity$2 = G__2218__2;
  G__2218.cljs$core$IFn$_invoke$arity$3 = G__2218__3;
  G__2218.cljs$core$IFn$_invoke$arity$4 = G__2218__4;
  G__2218.cljs$core$IFn$_invoke$arity$5 = G__2218__5;
  G__2218.cljs$core$IFn$_invoke$arity$6 = G__2218__6;
  G__2218.cljs$core$IFn$_invoke$arity$7 = G__2218__7;
  G__2218.cljs$core$IFn$_invoke$arity$8 = G__2218__8;
  G__2218.cljs$core$IFn$_invoke$arity$9 = G__2218__9;
  G__2218.cljs$core$IFn$_invoke$arity$10 = G__2218__10;
  G__2218.cljs$core$IFn$_invoke$arity$11 = G__2218__11;
  G__2218.cljs$core$IFn$_invoke$arity$12 = G__2218__12;
  G__2218.cljs$core$IFn$_invoke$arity$13 = G__2218__13;
  G__2218.cljs$core$IFn$_invoke$arity$14 = G__2218__14;
  G__2218.cljs$core$IFn$_invoke$arity$15 = G__2218__15;
  G__2218.cljs$core$IFn$_invoke$arity$16 = G__2218__16;
  G__2218.cljs$core$IFn$_invoke$arity$17 = G__2218__17;
  G__2218.cljs$core$IFn$_invoke$arity$18 = G__2218__18;
  G__2218.cljs$core$IFn$_invoke$arity$19 = G__2218__19;
  G__2218.cljs$core$IFn$_invoke$arity$20 = G__2218__20;
  G__2218.cljs$core$IFn$_invoke$arity$21 = G__2218__21;
  G__2218.cljs$core$IFn$_invoke$arity$22 = G__2218__22;
  return G__2218;
}();
cljs.core.Var.prototype.apply = function(self__, args2175) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args2175)));
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$0 = function() {
  var self__ = this;
  var _ = this;
  var fexpr__2197 = self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  return fexpr__2197.cljs$core$IFn$_invoke$arity$0 ? fexpr__2197.cljs$core$IFn$_invoke$arity$0() : fexpr__2197.call(null);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var _ = this;
  var fexpr__2198 = self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  return fexpr__2198.cljs$core$IFn$_invoke$arity$1 ? fexpr__2198.cljs$core$IFn$_invoke$arity$1(a) : fexpr__2198.call(null, a);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var _ = this;
  var fexpr__2199 = self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  return fexpr__2199.cljs$core$IFn$_invoke$arity$2 ? fexpr__2199.cljs$core$IFn$_invoke$arity$2(a, b) : fexpr__2199.call(null, a, b);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var _ = this;
  var fexpr__2200 = self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  return fexpr__2200.cljs$core$IFn$_invoke$arity$3 ? fexpr__2200.cljs$core$IFn$_invoke$arity$3(a, b, c) : fexpr__2200.call(null, a, b, c);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var _ = this;
  var fexpr__2201 = self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  return fexpr__2201.cljs$core$IFn$_invoke$arity$4 ? fexpr__2201.cljs$core$IFn$_invoke$arity$4(a, b, c, d) : fexpr__2201.call(null, a, b, c, d);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var _ = this;
  var fexpr__2202 = self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  return fexpr__2202.cljs$core$IFn$_invoke$arity$5 ? fexpr__2202.cljs$core$IFn$_invoke$arity$5(a, b, c, d, e) : fexpr__2202.call(null, a, b, c, d, e);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var _ = this;
  var fexpr__2203 = self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  return fexpr__2203.cljs$core$IFn$_invoke$arity$6 ? fexpr__2203.cljs$core$IFn$_invoke$arity$6(a, b, c, d, e, f) : fexpr__2203.call(null, a, b, c, d, e, f);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var _ = this;
  var fexpr__2204 = self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  return fexpr__2204.cljs$core$IFn$_invoke$arity$7 ? fexpr__2204.cljs$core$IFn$_invoke$arity$7(a, b, c, d, e, f, g) : fexpr__2204.call(null, a, b, c, d, e, f, g);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var _ = this;
  var fexpr__2205 = self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  return fexpr__2205.cljs$core$IFn$_invoke$arity$8 ? fexpr__2205.cljs$core$IFn$_invoke$arity$8(a, b, c, d, e, f, g, h) : fexpr__2205.call(null, a, b, c, d, e, f, g, h);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var _ = this;
  var fexpr__2206 = self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  return fexpr__2206.cljs$core$IFn$_invoke$arity$9 ? fexpr__2206.cljs$core$IFn$_invoke$arity$9(a, b, c, d, e, f, g, h, i) : fexpr__2206.call(null, a, b, c, d, e, f, g, h, i);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var _ = this;
  var fexpr__2207 = self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  return fexpr__2207.cljs$core$IFn$_invoke$arity$10 ? fexpr__2207.cljs$core$IFn$_invoke$arity$10(a, b, c, d, e, f, g, h, i, j) : fexpr__2207.call(null, a, b, c, d, e, f, g, h, i, j);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var _ = this;
  var fexpr__2208 = self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  return fexpr__2208.cljs$core$IFn$_invoke$arity$11 ? fexpr__2208.cljs$core$IFn$_invoke$arity$11(a, b, c, d, e, f, g, h, i, j, k) : fexpr__2208.call(null, a, b, c, d, e, f, g, h, i, j, k);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var _ = this;
  var fexpr__2209 = self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  return fexpr__2209.cljs$core$IFn$_invoke$arity$12 ? fexpr__2209.cljs$core$IFn$_invoke$arity$12(a, b, c, d, e, f, g, h, i, j, k, l) : fexpr__2209.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var _ = this;
  var fexpr__2210 = self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  return fexpr__2210.cljs$core$IFn$_invoke$arity$13 ? fexpr__2210.cljs$core$IFn$_invoke$arity$13(a, b, c, d, e, f, g, h, i, j, k, l, m) : fexpr__2210.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var _ = this;
  var fexpr__2211 = self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  return fexpr__2211.cljs$core$IFn$_invoke$arity$14 ? fexpr__2211.cljs$core$IFn$_invoke$arity$14(a, b, c, d, e, f, g, h, i, j, k, l, m, n) : fexpr__2211.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var _ = this;
  var fexpr__2212 = self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  return fexpr__2212.cljs$core$IFn$_invoke$arity$15 ? fexpr__2212.cljs$core$IFn$_invoke$arity$15(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) : fexpr__2212.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var _ = this;
  var fexpr__2213 = self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  return fexpr__2213.cljs$core$IFn$_invoke$arity$16 ? fexpr__2213.cljs$core$IFn$_invoke$arity$16(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) : fexpr__2213.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var _ = this;
  var fexpr__2214 = self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  return fexpr__2214.cljs$core$IFn$_invoke$arity$17 ? fexpr__2214.cljs$core$IFn$_invoke$arity$17(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) : fexpr__2214.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var _ = this;
  var fexpr__2215 = self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  return fexpr__2215.cljs$core$IFn$_invoke$arity$18 ? fexpr__2215.cljs$core$IFn$_invoke$arity$18(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) : fexpr__2215.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var _ = this;
  var fexpr__2216 = self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  return fexpr__2216.cljs$core$IFn$_invoke$arity$19 ? fexpr__2216.cljs$core$IFn$_invoke$arity$19(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) : fexpr__2216.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var _ = this;
  var fexpr__2217 = self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  return fexpr__2217.cljs$core$IFn$_invoke$arity$20 ? fexpr__2217.cljs$core$IFn$_invoke$arity$20(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) : fexpr__2217.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  var self__ = this;
  var _ = this;
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null), a, b, c, d, cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest], 0));
};
cljs.core.Var.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "val", "val", 1769233139, null), new cljs.core.Symbol(null, "sym", "sym", 195671222, null), new cljs.core.Symbol(null, "_meta", "_meta", -1716892533, null)], null);
};
cljs.core.Var.cljs$lang$type = true;
cljs.core.Var.cljs$lang$ctorStr = "cljs.core/Var";
cljs.core.Var.cljs$lang$ctorPrWriter = function(this__4369__auto__, writer__4370__auto__, opt__4371__auto__) {
  return cljs.core._write(writer__4370__auto__, "cljs.core/Var");
};
cljs.core.__GT_Var = function cljs$core$__GT_Var(val, sym, _meta) {
  return new cljs.core.Var(val, sym, _meta);
};
cljs.core.iterable_QMARK_ = function cljs$core$iterable_QMARK_(x) {
  if (!(x == null)) {
    if (x.cljs$lang$protocol_mask$partition1$ & 131072 || cljs.core.PROTOCOL_SENTINEL === x.cljs$core$IIterable$) {
      return true;
    } else {
      if (!x.cljs$lang$protocol_mask$partition1$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IIterable, x);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IIterable, x);
  }
};
cljs.core.js_iterable_QMARK_ = function cljs$core$js_iterable_QMARK_(x) {
  return !(x == null) && !(x[cljs.core.ITER_SYMBOL] == null);
};
cljs.core.clone = function cljs$core$clone(value) {
  return cljs.core._clone(value);
};
cljs.core.cloneable_QMARK_ = function cljs$core$cloneable_QMARK_(value) {
  if (!(value == null)) {
    if (value.cljs$lang$protocol_mask$partition1$ & 8192 || cljs.core.PROTOCOL_SENTINEL === value.cljs$core$ICloneable$) {
      return true;
    } else {
      if (!value.cljs$lang$protocol_mask$partition1$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ICloneable, value);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ICloneable, value);
  }
};
cljs.core.seq = function cljs$core$seq(coll) {
  if (coll == null) {
    return null;
  } else {
    if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 8388608 || cljs.core.PROTOCOL_SENTINEL === coll.cljs$core$ISeqable$ ? true : false : false) {
      return coll.cljs$core$ISeqable$_seq$arity$1(null);
    } else {
      if (cljs.core.array_QMARK_(coll)) {
        if (coll.length === 0) {
          return null;
        } else {
          return new cljs.core.IndexedSeq(coll, 0, null);
        }
      } else {
        if (typeof coll === "string") {
          if (coll.length === 0) {
            return null;
          } else {
            return new cljs.core.IndexedSeq(coll, 0, null);
          }
        } else {
          if (cljs.core.js_iterable_QMARK_(coll)) {
            return cljs.core.es6_iterator_seq(goog.object.get(coll, cljs.core.ITER_SYMBOL).call(coll));
          } else {
            if (cljs.core.native_satisfies_QMARK_(cljs.core.ISeqable, coll)) {
              return cljs.core._seq(coll);
            } else {
              throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1(coll), " is not ISeqable"].join(""));
            }
          }
        }
      }
    }
  }
};
cljs.core.first = function cljs$core$first(coll) {
  if (coll == null) {
    return null;
  } else {
    if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === coll.cljs$core$ISeq$ ? true : false : false) {
      return coll.cljs$core$ISeq$_first$arity$1(null);
    } else {
      var s = cljs.core.seq(coll);
      if (s == null) {
        return null;
      } else {
        return cljs.core._first(s);
      }
    }
  }
};
cljs.core.rest = function cljs$core$rest(coll) {
  if (!(coll == null)) {
    if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === coll.cljs$core$ISeq$ ? true : false : false) {
      return coll.cljs$core$ISeq$_rest$arity$1(null);
    } else {
      var s = cljs.core.seq(coll);
      if (s) {
        return s.cljs$core$ISeq$_rest$arity$1(null);
      } else {
        return cljs.core.List.EMPTY;
      }
    }
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.next = function cljs$core$next(coll) {
  if (coll == null) {
    return null;
  } else {
    if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 128 || cljs.core.PROTOCOL_SENTINEL === coll.cljs$core$INext$ ? true : false : false) {
      return coll.cljs$core$INext$_next$arity$1(null);
    } else {
      return cljs.core.seq(cljs.core.rest(coll));
    }
  }
};
cljs.core._EQ_ = function cljs$core$_EQ_(var_args) {
  var G__2229 = arguments.length;
  switch(G__2229) {
    case 1:
      return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var args_arr__4757__auto__ = [];
      var len__4736__auto___2231 = arguments.length;
      var i__4737__auto___2232 = 0;
      while (true) {
        if (i__4737__auto___2232 < len__4736__auto___2231) {
          args_arr__4757__auto__.push(arguments[i__4737__auto___2232]);
          var G__2233 = i__4737__auto___2232 + 1;
          i__4737__auto___2232 = G__2233;
          continue;
        } else {
        }
        break;
      }
      var argseq__4758__auto__ = new cljs.core.IndexedSeq(args_arr__4757__auto__.slice(2), 0, null);
      return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__4758__auto__);
  }
};
cljs.core._EQ_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  if (x == null) {
    return y == null;
  } else {
    return x === y || cljs.core._equiv(x, y);
  }
};
cljs.core._EQ_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  while (true) {
    if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y)) {
      if (cljs.core.next(more)) {
        var G__2234 = y;
        var G__2235 = cljs.core.first(more);
        var G__2236 = cljs.core.next(more);
        x = G__2234;
        y = G__2235;
        more = G__2236;
        continue;
      } else {
        return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(y, cljs.core.first(more));
      }
    } else {
      return false;
    }
    break;
  }
};
cljs.core._EQ_.cljs$lang$applyTo = function(seq2226) {
  var G__2227 = cljs.core.first(seq2226);
  var seq2226__$1 = cljs.core.next(seq2226);
  var G__2228 = cljs.core.first(seq2226__$1);
  var seq2226__$2 = cljs.core.next(seq2226__$1);
  var self__4723__auto__ = this;
  return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__2227, G__2228, seq2226__$2);
};
cljs.core._EQ_.cljs$lang$maxFixedArity = 2;
cljs.core.ES6Iterator = function(s) {
  this.s = s;
};
cljs.core.ES6Iterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var x = cljs.core.first(self__.s);
    self__.s = cljs.core.next(self__.s);
    return {"value":x, "done":false};
  } else {
    return {"value":null, "done":true};
  }
};
cljs.core.ES6Iterator.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "s", "s", -948495851, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.ES6Iterator.cljs$lang$type = true;
cljs.core.ES6Iterator.cljs$lang$ctorStr = "cljs.core/ES6Iterator";
cljs.core.ES6Iterator.cljs$lang$ctorPrWriter = function(this__4369__auto__, writer__4370__auto__, opt__4371__auto__) {
  return cljs.core._write(writer__4370__auto__, "cljs.core/ES6Iterator");
};
cljs.core.__GT_ES6Iterator = function cljs$core$__GT_ES6Iterator(s) {
  return new cljs.core.ES6Iterator(s);
};
cljs.core.es6_iterator = function cljs$core$es6_iterator(coll) {
  return new cljs.core.ES6Iterator(cljs.core.seq(coll));
};
cljs.core.ES6IteratorSeq = function(value, iter, _rest) {
  this.value = value;
  this.iter = iter;
  this._rest = _rest;
  this.cljs$lang$protocol_mask$partition0$ = 8388672;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.ES6IteratorSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.ES6IteratorSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.value;
};
cljs.core.ES6IteratorSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__._rest == null) {
    self__._rest = cljs.core.es6_iterator_seq(self__.iter);
  } else {
  }
  return self__._rest;
};
cljs.core.ES6IteratorSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "value", "value", 1946509744, null), new cljs.core.Symbol(null, "iter", "iter", -1346195486, null), cljs.core.with_meta(new cljs.core.Symbol(null, "_rest", "_rest", -2100466189, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.ES6IteratorSeq.cljs$lang$type = true;
cljs.core.ES6IteratorSeq.cljs$lang$ctorStr = "cljs.core/ES6IteratorSeq";
cljs.core.ES6IteratorSeq.cljs$lang$ctorPrWriter = function(this__4369__auto__, writer__4370__auto__, opt__4371__auto__) {
  return cljs.core._write(writer__4370__auto__, "cljs.core/ES6IteratorSeq");
};
cljs.core.__GT_ES6IteratorSeq = function cljs$core$__GT_ES6IteratorSeq(value, iter, _rest) {
  return new cljs.core.ES6IteratorSeq(value, iter, _rest);
};
cljs.core.es6_iterator_seq = function cljs$core$es6_iterator_seq(iter) {
  var v = iter.next();
  if (cljs.core.truth_(v.done)) {
    return null;
  } else {
    return new cljs.core.ES6IteratorSeq(v.value, iter, null);
  }
};
cljs.core.mix_collection_hash = function cljs$core$mix_collection_hash(hash_basis, count) {
  var h1 = cljs.core.m3_seed;
  var k1 = cljs.core.m3_mix_K1(hash_basis);
  var h1__$1 = cljs.core.m3_mix_H1(h1, k1);
  return cljs.core.m3_fmix(h1__$1, count);
};
cljs.core.hash_ordered_coll = function cljs$core$hash_ordered_coll(coll) {
  var n = 0;
  var hash_code = 1;
  var coll__$1 = cljs.core.seq(coll);
  while (true) {
    if (!(coll__$1 == null)) {
      var G__2237 = n + 1;
      var G__2238 = cljs.core.imul(31, hash_code) + cljs.core.hash(cljs.core.first(coll__$1)) | 0;
      var G__2239 = cljs.core.next(coll__$1);
      n = G__2237;
      hash_code = G__2238;
      coll__$1 = G__2239;
      continue;
    } else {
      return cljs.core.mix_collection_hash(hash_code, n);
    }
    break;
  }
};
cljs.core.empty_ordered_hash = cljs.core.mix_collection_hash(1, 0);
cljs.core.hash_unordered_coll = function cljs$core$hash_unordered_coll(coll) {
  var n = 0;
  var hash_code = 0;
  var coll__$1 = cljs.core.seq(coll);
  while (true) {
    if (!(coll__$1 == null)) {
      var G__2240 = n + 1;
      var G__2241 = hash_code + cljs.core.hash(cljs.core.first(coll__$1)) | 0;
      var G__2242 = cljs.core.next(coll__$1);
      n = G__2240;
      hash_code = G__2241;
      coll__$1 = G__2242;
      continue;
    } else {
      return cljs.core.mix_collection_hash(hash_code, n);
    }
    break;
  }
};
cljs.core.empty_unordered_hash = cljs.core.mix_collection_hash(0, 0);
goog.object.set(cljs.core.ICounted, "null", true);
goog.object.set(cljs.core._count, "null", function(_) {
  return 0;
});
Date.prototype.cljs$core$IEquiv$ = cljs.core.PROTOCOL_SENTINEL;
Date.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var o__$1 = this;
  return other instanceof Date && o__$1.valueOf() === other.valueOf();
};
Date.prototype.cljs$core$IComparable$ = cljs.core.PROTOCOL_SENTINEL;
Date.prototype.cljs$core$IComparable$_compare$arity$2 = function(this$, other) {
  var this$__$1 = this;
  if (other instanceof Date) {
    return goog.array.defaultCompare(this$__$1.valueOf(), other.valueOf());
  } else {
    throw new Error(["Cannot compare ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(this$__$1), " to ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(other)].join(""));
  }
};
cljs.core.Inst = function() {
};
var cljs$core$Inst$inst_ms_STAR_$dyn_2243 = function(inst) {
  var x__4428__auto__ = inst == null ? null : inst;
  var m__4429__auto__ = cljs.core.inst_ms_STAR_[goog.typeOf(x__4428__auto__)];
  if (!(m__4429__auto__ == null)) {
    return m__4429__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4429__auto__.cljs$core$IFn$_invoke$arity$1(inst) : m__4429__auto__.call(null, inst);
  } else {
    var m__4426__auto__ = cljs.core.inst_ms_STAR_["_"];
    if (!(m__4426__auto__ == null)) {
      return m__4426__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4426__auto__.cljs$core$IFn$_invoke$arity$1(inst) : m__4426__auto__.call(null, inst);
    } else {
      throw cljs.core.missing_protocol("Inst.inst-ms*", inst);
    }
  }
};
cljs.core.inst_ms_STAR_ = function cljs$core$inst_ms_STAR_(inst) {
  if (!(inst == null) && !(inst.cljs$core$Inst$inst_ms_STAR_$arity$1 == null)) {
    return inst.cljs$core$Inst$inst_ms_STAR_$arity$1(inst);
  } else {
    return cljs$core$Inst$inst_ms_STAR_$dyn_2243(inst);
  }
};
Date.prototype.cljs$core$Inst$ = cljs.core.PROTOCOL_SENTINEL;
Date.prototype.cljs$core$Inst$inst_ms_STAR_$arity$1 = function(inst) {
  var inst__$1 = this;
  return inst__$1.getTime();
};
cljs.core.inst_ms = function cljs$core$inst_ms(inst) {
  return cljs.core.inst_ms_STAR_(inst);
};
cljs.core.inst_QMARK_ = function cljs$core$inst_QMARK_(x) {
  if (!(x == null)) {
    if (false || cljs.core.PROTOCOL_SENTINEL === x.cljs$core$Inst$) {
      return true;
    } else {
      if (!x.cljs$lang$protocol_mask$partition$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.Inst, x);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.Inst, x);
  }
};
goog.object.set(cljs.core.IEquiv, "number", true);
goog.object.set(cljs.core._equiv, "number", function(x, o) {
  return x === o;
});
goog.object.set(cljs.core.Fn, "function", true);
goog.object.set(cljs.core.IMeta, "function", true);
goog.object.set(cljs.core._meta, "function", function(_) {
  return null;
});
goog.object.set(cljs.core.IHash, "_", true);
goog.object.set(cljs.core._hash, "_", function(o) {
  return goog.getUid(o);
});
cljs.core.inc = function cljs$core$inc(x) {
  return x + 1;
};
cljs.core.Reduced = function(val) {
  this.val = val;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.Reduced.prototype.cljs$core$IDeref$_deref$arity$1 = function(o) {
  var self__ = this;
  var o__$1 = this;
  return self__.val;
};
cljs.core.Reduced.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "val", "val", 1769233139, null)], null);
};
cljs.core.Reduced.cljs$lang$type = true;
cljs.core.Reduced.cljs$lang$ctorStr = "cljs.core/Reduced";
cljs.core.Reduced.cljs$lang$ctorPrWriter = function(this__4369__auto__, writer__4370__auto__, opt__4371__auto__) {
  return cljs.core._write(writer__4370__auto__, "cljs.core/Reduced");
};
cljs.core.__GT_Reduced = function cljs$core$__GT_Reduced(val) {
  return new cljs.core.Reduced(val);
};
cljs.core.reduced = function cljs$core$reduced(x) {
  return new cljs.core.Reduced(x);
};
cljs.core.reduced_QMARK_ = function cljs$core$reduced_QMARK_(r) {
  return r instanceof cljs.core.Reduced;
};
cljs.core.ensure_reduced = function cljs$core$ensure_reduced(x) {
  if (cljs.core.reduced_QMARK_(x)) {
    return x;
  } else {
    return cljs.core.reduced(x);
  }
};
cljs.core.unreduced = function cljs$core$unreduced(x) {
  if (cljs.core.reduced_QMARK_(x)) {
    return cljs.core.deref(x);
  } else {
    return x;
  }
};
cljs.core.deref = function cljs$core$deref(o) {
  return cljs.core._deref(o);
};
cljs.core.ci_reduce = function cljs$core$ci_reduce(var_args) {
  var G__2246 = arguments.length;
  switch(G__2246) {
    case 2:
      return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2 = function(cicoll, f) {
  var cnt = cicoll.cljs$core$ICounted$_count$arity$1(null);
  if (cnt === 0) {
    return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
  } else {
    var val = cicoll.cljs$core$IIndexed$_nth$arity$2(null, 0);
    var n = 1;
    while (true) {
      if (n < cnt) {
        var nval = function() {
          var G__2247 = val;
          var G__2248 = cicoll.cljs$core$IIndexed$_nth$arity$2(null, n);
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__2247, G__2248) : f.call(null, G__2247, G__2248);
        }();
        if (cljs.core.reduced_QMARK_(nval)) {
          return cljs.core.deref(nval);
        } else {
          var G__2252 = nval;
          var G__2253 = n + 1;
          val = G__2252;
          n = G__2253;
          continue;
        }
      } else {
        return val;
      }
      break;
    }
  }
};
cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3 = function(cicoll, f, val) {
  var cnt = cicoll.cljs$core$ICounted$_count$arity$1(null);
  var val__$1 = val;
  var n = 0;
  while (true) {
    if (n < cnt) {
      var nval = function() {
        var G__2249 = val__$1;
        var G__2250 = cicoll.cljs$core$IIndexed$_nth$arity$2(null, n);
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__2249, G__2250) : f.call(null, G__2249, G__2250);
      }();
      if (cljs.core.reduced_QMARK_(nval)) {
        return cljs.core.deref(nval);
      } else {
        var G__2254 = nval;
        var G__2255 = n + 1;
        val__$1 = G__2254;
        n = G__2255;
        continue;
      }
    } else {
      return val__$1;
    }
    break;
  }
};
cljs.core.ci_reduce.cljs$lang$maxFixedArity = 3;
cljs.core.array_reduce = function cljs$core$array_reduce(var_args) {
  var G__2257 = arguments.length;
  switch(G__2257) {
    case 2:
      return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$2 = function(arr, f) {
  var cnt = arr.length;
  if (arr.length === 0) {
    return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
  } else {
    var val = arr[0];
    var n = 1;
    while (true) {
      if (n < cnt) {
        var nval = function() {
          var G__2258 = val;
          var G__2259 = arr[n];
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__2258, G__2259) : f.call(null, G__2258, G__2259);
        }();
        if (cljs.core.reduced_QMARK_(nval)) {
          return cljs.core.deref(nval);
        } else {
          var G__2265 = nval;
          var G__2266 = n + 1;
          val = G__2265;
          n = G__2266;
          continue;
        }
      } else {
        return val;
      }
      break;
    }
  }
};
cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$3 = function(arr, f, val) {
  var cnt = arr.length;
  var val__$1 = val;
  var n = 0;
  while (true) {
    if (n < cnt) {
      var nval = function() {
        var G__2260 = val__$1;
        var G__2261 = arr[n];
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__2260, G__2261) : f.call(null, G__2260, G__2261);
      }();
      if (cljs.core.reduced_QMARK_(nval)) {
        return cljs.core.deref(nval);
      } else {
        var G__2267 = nval;
        var G__2268 = n + 1;
        val__$1 = G__2267;
        n = G__2268;
        continue;
      }
    } else {
      return val__$1;
    }
    break;
  }
};
cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4 = function(arr, f, val, idx) {
  var cnt = arr.length;
  var val__$1 = val;
  var n = idx;
  while (true) {
    if (n < cnt) {
      var nval = function() {
        var G__2262 = val__$1;
        var G__2263 = arr[n];
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__2262, G__2263) : f.call(null, G__2262, G__2263);
      }();
      if (cljs.core.reduced_QMARK_(nval)) {
        return cljs.core.deref(nval);
      } else {
        var G__2269 = nval;
        var G__2270 = n + 1;
        val__$1 = G__2269;
        n = G__2270;
        continue;
      }
    } else {
      return val__$1;
    }
    break;
  }
};
cljs.core.array_reduce.cljs$lang$maxFixedArity = 4;
cljs.core.counted_QMARK_ = function cljs$core$counted_QMARK_(x) {
  if (!(x == null)) {
    if (x.cljs$lang$protocol_mask$partition0$ & 2 || cljs.core.PROTOCOL_SENTINEL === x.cljs$core$ICounted$) {
      return true;
    } else {
      if (!x.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ICounted, x);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ICounted, x);
  }
};
cljs.core.indexed_QMARK_ = function cljs$core$indexed_QMARK_(x) {
  if (!(x == null)) {
    if (x.cljs$lang$protocol_mask$partition0$ & 16 || cljs.core.PROTOCOL_SENTINEL === x.cljs$core$IIndexed$) {
      return true;
    } else {
      if (!x.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IIndexed, x);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IIndexed, x);
  }
};
cljs.core._indexOf = function cljs$core$_indexOf(var_args) {
  var G__2274 = arguments.length;
  switch(G__2274) {
    case 2:
      return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
cljs.core._indexOf.cljs$core$IFn$_invoke$arity$2 = function(coll, x) {
  return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
};
cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3 = function(coll, x, start) {
  var len = cljs.core.count(coll);
  if (start >= len) {
    return -1;
  } else {
    var idx = start > 0 ? start : start < 0 ? function() {
      var x__4214__auto__ = 0;
      var y__4215__auto__ = start + len;
      return x__4214__auto__ > y__4215__auto__ ? x__4214__auto__ : y__4215__auto__;
    }() : start;
    while (true) {
      if (idx < len) {
        if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.nth.cljs$core$IFn$_invoke$arity$2(coll, idx), x)) {
          return idx;
        } else {
          var G__2276 = idx + 1;
          idx = G__2276;
          continue;
        }
      } else {
        return -1;
      }
      break;
    }
  }
};
cljs.core._indexOf.cljs$lang$maxFixedArity = 3;
cljs.core._lastIndexOf = function cljs$core$_lastIndexOf(var_args) {
  var G__2278 = arguments.length;
  switch(G__2278) {
    case 2:
      return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$2 = function(coll, x) {
  return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, cljs.core.count(coll));
};
cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3 = function(coll, x, start) {
  var len = cljs.core.count(coll);
  if (len === 0) {
    return -1;
  } else {
    var idx = start > 0 ? function() {
      var x__4217__auto__ = len - 1;
      var y__4218__auto__ = start;
      return x__4217__auto__ < y__4218__auto__ ? x__4217__auto__ : y__4218__auto__;
    }() : start < 0 ? len + start : start;
    while (true) {
      if (idx >= 0) {
        if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.nth.cljs$core$IFn$_invoke$arity$2(coll, idx), x)) {
          return idx;
        } else {
          var G__2280 = idx - 1;
          idx = G__2280;
          continue;
        }
      } else {
        return -1;
      }
      break;
    }
  }
};
cljs.core._lastIndexOf.cljs$lang$maxFixedArity = 3;
cljs.core.IndexedSeqIterator = function(arr, i) {
  this.arr = arr;
  this.i = i;
};
cljs.core.IndexedSeqIterator.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.arr.length;
};
cljs.core.IndexedSeqIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.arr[self__.i];
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.IndexedSeqIterator.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), cljs.core.with_meta(new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.IndexedSeqIterator.cljs$lang$type = true;
cljs.core.IndexedSeqIterator.cljs$lang$ctorStr = "cljs.core/IndexedSeqIterator";
cljs.core.IndexedSeqIterator.cljs$lang$ctorPrWriter = function(this__4369__auto__, writer__4370__auto__, opt__4371__auto__) {
  return cljs.core._write(writer__4370__auto__, "cljs.core/IndexedSeqIterator");
};
cljs.core.__GT_IndexedSeqIterator = function cljs$core$__GT_IndexedSeqIterator(arr, i) {
  return new cljs.core.IndexedSeqIterator(arr, i);
};
cljs.core.IndexedSeq = function(arr, i, meta) {
  this.arr = arr;
  this.i = i;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 166592766;
  this.cljs$lang$protocol_mask$partition1$ = 139264;
};
cljs.core.IndexedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.IndexedSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.IndexedSeq.prototype.indexOf = function() {
  var G__2281 = null;
  var G__2281__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
  };
  var G__2281__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__2281 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__2281__1.call(this, x);
      case 2:
        return G__2281__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__2281.cljs$core$IFn$_invoke$arity$1 = G__2281__1;
  G__2281.cljs$core$IFn$_invoke$arity$2 = G__2281__2;
  return G__2281;
}();
cljs.core.IndexedSeq.prototype.lastIndexOf = function() {
  var G__2282 = null;
  var G__2282__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, cljs.core.count(coll));
  };
  var G__2282__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__2282 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__2282__1.call(this, x);
      case 2:
        return G__2282__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__2282.cljs$core$IFn$_invoke$arity$1 = G__2282__1;
  G__2282.cljs$core$IFn$_invoke$arity$2 = G__2282__2;
  return G__2282;
}();
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (0 <= i__$1 && i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    throw new Error("Index out of bounds");
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (0 <= i__$1 && i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return not_found;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IIterable$_iterator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.IndexedSeqIterator(self__.arr, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.IndexedSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.IndexedSeq(self__.arr, self__.i, self__.meta);
};
cljs.core.IndexedSeq.prototype.cljs$core$INext$_next$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1, null);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  var x__4214__auto__ = 0;
  var y__4215__auto__ = self__.arr.length - self__.i;
  return x__4214__auto__ > y__4215__auto__ ? x__4214__auto__ : y__4215__auto__;
};
cljs.core.IndexedSeq.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var c = coll__$1.cljs$core$ICounted$_count$arity$1(null);
  if (c > 0) {
    return new cljs.core.RSeq(coll__$1, c - 1, null);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.IndexedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(self__.arr, f, self__.arr[self__.i], self__.i + 1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(self__.arr, f, start, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr[self__.i];
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.i < self__.arr.length) {
    return this$__$1;
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  if (new_meta === self__.meta) {
    return coll__$1;
  } else {
    return new cljs.core.IndexedSeq(self__.arr, self__.i, new_meta);
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.IndexedSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.Symbol(null, "meta", "meta", -1154898805, null)], null);
};
cljs.core.IndexedSeq.cljs$lang$type = true;
cljs.core.IndexedSeq.cljs$lang$ctorStr = "cljs.core/IndexedSeq";
cljs.core.IndexedSeq.cljs$lang$ctorPrWriter = function(this__4369__auto__, writer__4370__auto__, opt__4371__auto__) {
  return cljs.core._write(writer__4370__auto__, "cljs.core/IndexedSeq");
};
cljs.core.__GT_IndexedSeq = function cljs$core$__GT_IndexedSeq(arr, i, meta) {
  return new cljs.core.IndexedSeq(arr, i, meta);
};
goog.object.set(cljs.core.IndexedSeq.prototype, cljs.core.ITER_SYMBOL, function() {
  var this__4675__auto__ = this;
  return cljs.core.es6_iterator(this__4675__auto__);
});
cljs.core.prim_seq = function cljs$core$prim_seq(var_args) {
  var G__2284 = arguments.length;
  switch(G__2284) {
    case 1:
      return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$1 = function(prim) {
  return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(prim, 0);
};
cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2 = function(prim, i) {
  if (i < prim.length) {
    return new cljs.core.IndexedSeq(prim, i, null);
  } else {
    return null;
  }
};
cljs.core.prim_seq.cljs$lang$maxFixedArity = 2;
cljs.core.array_seq = function cljs$core$array_seq(var_args) {
  var G__2287 = arguments.length;
  switch(G__2287) {
    case 1:
      return cljs.core.array_seq.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.array_seq.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
cljs.core.array_seq.cljs$core$IFn$_invoke$arity$1 = function(array) {
  return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(array, 0);
};
cljs.core.array_seq.cljs$core$IFn$_invoke$arity$2 = function(array, i) {
  return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(array, i);
};
cljs.core.array_seq.cljs$lang$maxFixedArity = 2;
cljs.core.RSeq = function(ci, i, meta) {
  this.ci = ci;
  this.i = i;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 32374990;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.RSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.RSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.RSeq.prototype.indexOf = function() {
  var G__2289 = null;
  var G__2289__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
  };
  var G__2289__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__2289 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__2289__1.call(this, x);
      case 2:
        return G__2289__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__2289.cljs$core$IFn$_invoke$arity$1 = G__2289__1;
  G__2289.cljs$core$IFn$_invoke$arity$2 = G__2289__2;
  return G__2289;
}();
cljs.core.RSeq.prototype.lastIndexOf = function() {
  var G__2290 = null;
  var G__2290__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, cljs.core.count(coll));
  };
  var G__2290__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__2290 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__2290__1.call(this, x);
      case 2:
        return G__2290__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__2290.cljs$core$IFn$_invoke$arity$1 = G__2290__1;
  G__2290.cljs$core$IFn$_invoke$arity$2 = G__2290__2;
  return G__2290;
}();
cljs.core.RSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.RSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, self__.meta);
};
cljs.core.RSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null);
  } else {
    return null;
  }
};
cljs.core.RSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.i + 1;
};
cljs.core.RSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.RSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(col, f) {
  var self__ = this;
  var col__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, col__$1);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(col, f, start) {
  var self__ = this;
  var col__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, col__$1);
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.ci, self__.i);
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.RSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.RSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  if (new_meta === self__.meta) {
    return coll__$1;
  } else {
    return new cljs.core.RSeq(self__.ci, self__.i, new_meta);
  }
};
cljs.core.RSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.RSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "ci", "ci", 2049808339, null), new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.Symbol(null, "meta", "meta", -1154898805, null)], null);
};
cljs.core.RSeq.cljs$lang$type = true;
cljs.core.RSeq.cljs$lang$ctorStr = "cljs.core/RSeq";
cljs.core.RSeq.cljs$lang$ctorPrWriter = function(this__4369__auto__, writer__4370__auto__, opt__4371__auto__) {
  return cljs.core._write(writer__4370__auto__, "cljs.core/RSeq");
};
cljs.core.__GT_RSeq = function cljs$core$__GT_RSeq(ci, i, meta) {
  return new cljs.core.RSeq(ci, i, meta);
};
goog.object.set(cljs.core.RSeq.prototype, cljs.core.ITER_SYMBOL, function() {
  var this__4675__auto__ = this;
  return cljs.core.es6_iterator(this__4675__auto__);
});
cljs.core.second = function cljs$core$second(coll) {
  return cljs.core.first(cljs.core.next(coll));
};
cljs.core.ffirst = function cljs$core$ffirst(coll) {
  return cljs.core.first(cljs.core.first(coll));
};
cljs.core.nfirst = function cljs$core$nfirst(coll) {
  return cljs.core.next(cljs.core.first(coll));
};
cljs.core.fnext = function cljs$core$fnext(coll) {
  return cljs.core.first(cljs.core.next(coll));
};
cljs.core.nnext = function cljs$core$nnext(coll) {
  return cljs.core.next(cljs.core.next(coll));
};
cljs.core.last = function cljs$core$last(s) {
  while (true) {
    var sn = cljs.core.next(s);
    if (!(sn == null)) {
      var G__2291 = sn;
      s = G__2291;
      continue;
    } else {
      return cljs.core.first(s);
    }
    break;
  }
};
goog.object.set(cljs.core.IEquiv, "_", true);
goog.object.set(cljs.core._equiv, "_", function(x, o) {
  return x === o;
});
cljs.core.conj = function cljs$core$conj(var_args) {
  var G__2296 = arguments.length;
  switch(G__2296) {
    case 0:
      return cljs.core.conj.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.conj.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var args_arr__4757__auto__ = [];
      var len__4736__auto___2298 = arguments.length;
      var i__4737__auto___2299 = 0;
      while (true) {
        if (i__4737__auto___2299 < len__4736__auto___2298) {
          args_arr__4757__auto__.push(arguments[i__4737__auto___2299]);
          var G__2300 = i__4737__auto___2299 + 1;
          i__4737__auto___2299 = G__2300;
          continue;
        } else {
        }
        break;
      }
      var argseq__4758__auto__ = new cljs.core.IndexedSeq(args_arr__4757__auto__.slice(2), 0, null);
      return cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__4758__auto__);
  }
};
cljs.core.conj.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.conj.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  return coll;
};
cljs.core.conj.cljs$core$IFn$_invoke$arity$2 = function(coll, x) {
  if (!(coll == null)) {
    return cljs.core._conj(coll, x);
  } else {
    return new cljs.core.List(null, x, null, 1, null);
  }
};
cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic = function(coll, x, xs) {
  while (true) {
    if (cljs.core.truth_(xs)) {
      var G__2301 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(coll, x);
      var G__2302 = cljs.core.first(xs);
      var G__2303 = cljs.core.next(xs);
      coll = G__2301;
      x = G__2302;
      xs = G__2303;
      continue;
    } else {
      return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(coll, x);
    }
    break;
  }
};
cljs.core.conj.cljs$lang$applyTo = function(seq2293) {
  var G__2294 = cljs.core.first(seq2293);
  var seq2293__$1 = cljs.core.next(seq2293);
  var G__2295 = cljs.core.first(seq2293__$1);
  var seq2293__$2 = cljs.core.next(seq2293__$1);
  var self__4723__auto__ = this;
  return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__2294, G__2295, seq2293__$2);
};
cljs.core.conj.cljs$lang$maxFixedArity = 2;
cljs.core.empty = function cljs$core$empty(coll) {
  if (coll == null) {
    return null;
  } else {
    if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 4 || cljs.core.PROTOCOL_SENTINEL === coll.cljs$core$IEmptyableCollection$ ? true : false : false) {
      return coll.cljs$core$IEmptyableCollection$_empty$arity$1(null);
    } else {
      if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 4 || cljs.core.PROTOCOL_SENTINEL === coll.cljs$core$IEmptyableCollection$ ? true : !coll.cljs$lang$protocol_mask$partition0$ ? cljs.core.native_satisfies_QMARK_(cljs.core.IEmptyableCollection, coll) : false : cljs.core.native_satisfies_QMARK_(cljs.core.IEmptyableCollection, coll)) {
        return cljs.core._empty(coll);
      } else {
        return null;
      }
    }
  }
};
cljs.core.accumulating_seq_count = function cljs$core$accumulating_seq_count(coll) {
  var s = cljs.core.seq(coll);
  var acc = 0;
  while (true) {
    if (cljs.core.counted_QMARK_(s)) {
      return acc + cljs.core._count(s);
    } else {
      var G__2306 = cljs.core.next(s);
      var G__2307 = acc + 1;
      s = G__2306;
      acc = G__2307;
      continue;
    }
    break;
  }
};
cljs.core.count = function cljs$core$count(coll) {
  if (!(coll == null)) {
    if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 2 || cljs.core.PROTOCOL_SENTINEL === coll.cljs$core$ICounted$ ? true : false : false) {
      return coll.cljs$core$ICounted$_count$arity$1(null);
    } else {
      if (cljs.core.array_QMARK_(coll)) {
        return coll.length;
      } else {
        if (typeof coll === "string") {
          return coll.length;
        } else {
          if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 8388608 || cljs.core.PROTOCOL_SENTINEL === coll.cljs$core$ISeqable$ ? true : false : false) {
            return cljs.core.accumulating_seq_count(coll);
          } else {
            return cljs.core._count(coll);
          }
        }
      }
    }
  } else {
    return 0;
  }
};
cljs.core.linear_traversal_nth = function cljs$core$linear_traversal_nth(var_args) {
  var G__2311 = arguments.length;
  switch(G__2311) {
    case 2:
      return cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$2 = function(coll, n) {
  while (true) {
    if (coll == null) {
      throw new Error("Index out of bounds");
    } else {
      if (n === 0) {
        if (cljs.core.seq(coll)) {
          return cljs.core.first(coll);
        } else {
          throw new Error("Index out of bounds");
        }
      } else {
        if (cljs.core.indexed_QMARK_(coll)) {
          return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll, n);
        } else {
          if (cljs.core.seq(coll)) {
            var G__2313 = cljs.core.next(coll);
            var G__2314 = n - 1;
            coll = G__2313;
            n = G__2314;
            continue;
          } else {
            throw new Error("Index out of bounds");
          }
        }
      }
    }
    break;
  }
};
cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$3 = function(coll, n, not_found) {
  while (true) {
    if (coll == null) {
      return not_found;
    } else {
      if (n === 0) {
        if (cljs.core.seq(coll)) {
          return cljs.core.first(coll);
        } else {
          return not_found;
        }
      } else {
        if (cljs.core.indexed_QMARK_(coll)) {
          return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(coll, n, not_found);
        } else {
          if (cljs.core.seq(coll)) {
            var G__2315 = cljs.core.next(coll);
            var G__2316 = n - 1;
            var G__2317 = not_found;
            coll = G__2315;
            n = G__2316;
            not_found = G__2317;
            continue;
          } else {
            return not_found;
          }
        }
      }
    }
    break;
  }
};
cljs.core.linear_traversal_nth.cljs$lang$maxFixedArity = 3;
cljs.core.nth = function cljs$core$nth(var_args) {
  var G__2319 = arguments.length;
  switch(G__2319) {
    case 2:
      return cljs.core.nth.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.nth.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
cljs.core.nth.cljs$core$IFn$_invoke$arity$2 = function(coll, n) {
  if (!(typeof n === "number")) {
    throw new Error("Index argument to nth must be a number");
  } else {
    if (coll == null) {
      return coll;
    } else {
      if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 16 || cljs.core.PROTOCOL_SENTINEL === coll.cljs$core$IIndexed$ ? true : false : false) {
        return coll.cljs$core$IIndexed$_nth$arity$2(null, n);
      } else {
        if (cljs.core.array_QMARK_(coll)) {
          if (-1 < n && n < coll.length) {
            return coll[n | 0];
          } else {
            throw new Error("Index out of bounds");
          }
        } else {
          if (typeof coll === "string") {
            if (-1 < n && n < coll.length) {
              return coll.charAt(n | 0);
            } else {
              throw new Error("Index out of bounds");
            }
          } else {
            if (function() {
              var or__4126__auto__ = !(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === coll.cljs$core$ISeq$ ? true : false : false;
              if (or__4126__auto__) {
                return or__4126__auto__;
              } else {
                if (!(coll == null)) {
                  if (coll.cljs$lang$protocol_mask$partition0$ & 16777216 || cljs.core.PROTOCOL_SENTINEL === coll.cljs$core$ISequential$) {
                    return true;
                  } else {
                    return false;
                  }
                } else {
                  return false;
                }
              }
            }()) {
              if (n < 0) {
                throw new Error("Index out of bounds");
              } else {
                return cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$2(coll, n);
              }
            } else {
              if (cljs.core.native_satisfies_QMARK_(cljs.core.IIndexed, coll)) {
                return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll, n);
              } else {
                throw new Error(["nth not supported on this type ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.type__GT_str(cljs.core.type(coll)))].join(""));
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.nth.cljs$core$IFn$_invoke$arity$3 = function(coll, n, not_found) {
  if (!(typeof n === "number")) {
    throw new Error("Index argument to nth must be a number.");
  } else {
    if (coll == null) {
      return not_found;
    } else {
      if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 16 || cljs.core.PROTOCOL_SENTINEL === coll.cljs$core$IIndexed$ ? true : false : false) {
        return coll.cljs$core$IIndexed$_nth$arity$3(null, n, not_found);
      } else {
        if (cljs.core.array_QMARK_(coll)) {
          if (-1 < n && n < coll.length) {
            return coll[n | 0];
          } else {
            return not_found;
          }
        } else {
          if (typeof coll === "string") {
            if (-1 < n && n < coll.length) {
              return coll.charAt(n | 0);
            } else {
              return not_found;
            }
          } else {
            if (function() {
              var or__4126__auto__ = !(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === coll.cljs$core$ISeq$ ? true : false : false;
              if (or__4126__auto__) {
                return or__4126__auto__;
              } else {
                if (!(coll == null)) {
                  if (coll.cljs$lang$protocol_mask$partition0$ & 16777216 || cljs.core.PROTOCOL_SENTINEL === coll.cljs$core$ISequential$) {
                    return true;
                  } else {
                    return false;
                  }
                } else {
                  return false;
                }
              }
            }()) {
              if (n < 0) {
                return not_found;
              } else {
                return cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$3(coll, n, not_found);
              }
            } else {
              if (cljs.core.native_satisfies_QMARK_(cljs.core.IIndexed, coll)) {
                return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(coll, n, not_found);
              } else {
                throw new Error(["nth not supported on this type ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.type__GT_str(cljs.core.type(coll)))].join(""));
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.nth.cljs$lang$maxFixedArity = 3;
cljs.core.nthrest = function cljs$core$nthrest(coll, n) {
  var n__$1 = n;
  var xs = coll;
  while (true) {
    var temp__5733__auto__ = n__$1 > 0 && cljs.core.seq(xs);
    if (temp__5733__auto__) {
      var xs__$1 = temp__5733__auto__;
      var G__2329 = n__$1 - 1;
      var G__2330 = cljs.core.rest(xs__$1);
      n__$1 = G__2329;
      xs = G__2330;
      continue;
    } else {
      return xs;
    }
    break;
  }
};
cljs.core.get = function cljs$core$get(var_args) {
  var G__2332 = arguments.length;
  switch(G__2332) {
    case 2:
      return cljs.core.get.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.get.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
cljs.core.get.cljs$core$IFn$_invoke$arity$2 = function(o, k) {
  if (o == null) {
    return null;
  } else {
    if (!(o == null) ? o.cljs$lang$protocol_mask$partition0$ & 256 || cljs.core.PROTOCOL_SENTINEL === o.cljs$core$ILookup$ ? true : false : false) {
      return o.cljs$core$ILookup$_lookup$arity$2(null, k);
    } else {
      if (cljs.core.array_QMARK_(o)) {
        if (!(k == null) && k < o.length) {
          return o[k | 0];
        } else {
          return null;
        }
      } else {
        if (typeof o === "string") {
          if (!(k == null) && (-1 < k && k < o.length)) {
            return o.charAt(k | 0);
          } else {
            return null;
          }
        } else {
          if (cljs.core.native_satisfies_QMARK_(cljs.core.ILookup, o)) {
            return cljs.core._lookup.cljs$core$IFn$_invoke$arity$2(o, k);
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.core.get.cljs$core$IFn$_invoke$arity$3 = function(o, k, not_found) {
  if (!(o == null)) {
    if (!(o == null) ? o.cljs$lang$protocol_mask$partition0$ & 256 || cljs.core.PROTOCOL_SENTINEL === o.cljs$core$ILookup$ ? true : false : false) {
      return o.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
    } else {
      if (cljs.core.array_QMARK_(o)) {
        if (!(k == null) && (-1 < k && k < o.length)) {
          return o[k | 0];
        } else {
          return not_found;
        }
      } else {
        if (typeof o === "string") {
          if (!(k == null) && (-1 < k && k < o.length)) {
            return o.charAt(k | 0);
          } else {
            return not_found;
          }
        } else {
          if (cljs.core.native_satisfies_QMARK_(cljs.core.ILookup, o)) {
            return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(o, k, not_found);
          } else {
            return not_found;
          }
        }
      }
    }
  } else {
    return not_found;
  }
};
cljs.core.get.cljs$lang$maxFixedArity = 3;
cljs.core.assoc = function cljs$core$assoc(var_args) {
  var G__2341 = arguments.length;
  switch(G__2341) {
    case 3:
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var args_arr__4757__auto__ = [];
      var len__4736__auto___2344 = arguments.length;
      var i__4737__auto___2345 = 0;
      while (true) {
        if (i__4737__auto___2345 < len__4736__auto___2344) {
          args_arr__4757__auto__.push(arguments[i__4737__auto___2345]);
          var G__2346 = i__4737__auto___2345 + 1;
          i__4737__auto___2345 = G__2346;
          continue;
        } else {
        }
        break;
      }
      var argseq__4758__auto__ = new cljs.core.IndexedSeq(args_arr__4757__auto__.slice(3), 0, null);
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__4758__auto__);
  }
};
cljs.core.assoc.cljs$core$IFn$_invoke$arity$3 = function(coll, k, v) {
  if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 512 || cljs.core.PROTOCOL_SENTINEL === coll.cljs$core$IAssociative$ ? true : false : false) {
    return coll.cljs$core$IAssociative$_assoc$arity$3(null, k, v);
  } else {
    if (!(coll == null)) {
      return cljs.core._assoc(coll, k, v);
    } else {
      return cljs.core.PersistentArrayMap.createAsIfByAssoc([k, v]);
    }
  }
};
cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic = function(coll, k, v, kvs) {
  while (true) {
    var ret = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(coll, k, v);
    if (cljs.core.truth_(kvs)) {
      var G__2347 = ret;
      var G__2348 = cljs.core.first(kvs);
      var G__2349 = cljs.core.second(kvs);
      var G__2350 = cljs.core.nnext(kvs);
      coll = G__2347;
      k = G__2348;
      v = G__2349;
      kvs = G__2350;
      continue;
    } else {
      return ret;
    }
    break;
  }
};
cljs.core.assoc.cljs$lang$applyTo = function(seq2337) {
  var G__2338 = cljs.core.first(seq2337);
  var seq2337__$1 = cljs.core.next(seq2337);
  var G__2339 = cljs.core.first(seq2337__$1);
  var seq2337__$2 = cljs.core.next(seq2337__$1);
  var G__2340 = cljs.core.first(seq2337__$2);
  var seq2337__$3 = cljs.core.next(seq2337__$2);
  var self__4723__auto__ = this;
  return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__2338, G__2339, G__2340, seq2337__$3);
};
cljs.core.assoc.cljs$lang$maxFixedArity = 3;
cljs.core.dissoc = function cljs$core$dissoc(var_args) {
  var G__2355 = arguments.length;
  switch(G__2355) {
    case 1:
      return cljs.core.dissoc.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var args_arr__4757__auto__ = [];
      var len__4736__auto___2357 = arguments.length;
      var i__4737__auto___2358 = 0;
      while (true) {
        if (i__4737__auto___2358 < len__4736__auto___2357) {
          args_arr__4757__auto__.push(arguments[i__4737__auto___2358]);
          var G__2359 = i__4737__auto___2358 + 1;
          i__4737__auto___2358 = G__2359;
          continue;
        } else {
        }
        break;
      }
      var argseq__4758__auto__ = new cljs.core.IndexedSeq(args_arr__4757__auto__.slice(2), 0, null);
      return cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__4758__auto__);
  }
};
cljs.core.dissoc.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  return coll;
};
cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2 = function(coll, k) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._dissoc(coll, k);
  }
};
cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic = function(coll, k, ks) {
  while (true) {
    if (coll == null) {
      return null;
    } else {
      var ret = cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(coll, k);
      if (cljs.core.truth_(ks)) {
        var G__2360 = ret;
        var G__2361 = cljs.core.first(ks);
        var G__2362 = cljs.core.next(ks);
        coll = G__2360;
        k = G__2361;
        ks = G__2362;
        continue;
      } else {
        return ret;
      }
    }
    break;
  }
};
cljs.core.dissoc.cljs$lang$applyTo = function(seq2352) {
  var G__2353 = cljs.core.first(seq2352);
  var seq2352__$1 = cljs.core.next(seq2352);
  var G__2354 = cljs.core.first(seq2352__$1);
  var seq2352__$2 = cljs.core.next(seq2352__$1);
  var self__4723__auto__ = this;
  return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__2353, G__2354, seq2352__$2);
};
cljs.core.dissoc.cljs$lang$maxFixedArity = 2;
cljs.core.fn_QMARK_ = function cljs$core$fn_QMARK_(f) {
  var or__4126__auto__ = goog.isFunction(f);
  if (or__4126__auto__) {
    return or__4126__auto__;
  } else {
    if (!(f == null)) {
      if (false || cljs.core.PROTOCOL_SENTINEL === f.cljs$core$Fn$) {
        return true;
      } else {
        if (!f.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.Fn, f);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.Fn, f);
    }
  }
};
cljs.core.MetaFn = function(afn, meta) {
  this.afn = afn;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 393217;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.MetaFn.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
cljs.core.MetaFn.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.MetaFn(self__.afn, new_meta);
};
cljs.core.MetaFn.prototype.cljs$core$Fn$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.MetaFn.prototype.call = function() {
  var G__2366 = null;
  var G__2366__1 = function(self__) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$0 ? self__.afn.cljs$core$IFn$_invoke$arity$0() : self__.afn.call(null);
  };
  var G__2366__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$1 ? self__.afn.cljs$core$IFn$_invoke$arity$1(a) : self__.afn.call(null, a);
  };
  var G__2366__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$2 ? self__.afn.cljs$core$IFn$_invoke$arity$2(a, b) : self__.afn.call(null, a, b);
  };
  var G__2366__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$3 ? self__.afn.cljs$core$IFn$_invoke$arity$3(a, b, c) : self__.afn.call(null, a, b, c);
  };
  var G__2366__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$4 ? self__.afn.cljs$core$IFn$_invoke$arity$4(a, b, c, d) : self__.afn.call(null, a, b, c, d);
  };
  var G__2366__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$5 ? self__.afn.cljs$core$IFn$_invoke$arity$5(a, b, c, d, e) : self__.afn.call(null, a, b, c, d, e);
  };
  var G__2366__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$6 ? self__.afn.cljs$core$IFn$_invoke$arity$6(a, b, c, d, e, f) : self__.afn.call(null, a, b, c, d, e, f);
  };
  var G__2366__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$7 ? self__.afn.cljs$core$IFn$_invoke$arity$7(a, b, c, d, e, f, g) : self__.afn.call(null, a, b, c, d, e, f, g);
  };
  var G__2366__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$8 ? self__.afn.cljs$core$IFn$_invoke$arity$8(a, b, c, d, e, f, g, h) : self__.afn.call(null, a, b, c, d, e, f, g, h);
  };
  var G__2366__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$9 ? self__.afn.cljs$core$IFn$_invoke$arity$9(a, b, c, d, e, f, g, h, i) : self__.afn.call(null, a, b, c, d, e, f, g, h, i);
  };
  var G__2366__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$10 ? self__.afn.cljs$core$IFn$_invoke$arity$10(a, b, c, d, e, f, g, h, i, j) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j);
  };
  var G__2366__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$11 ? self__.afn.cljs$core$IFn$_invoke$arity$11(a, b, c, d, e, f, g, h, i, j, k) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k);
  };
  var G__2366__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$12 ? self__.afn.cljs$core$IFn$_invoke$arity$12(a, b, c, d, e, f, g, h, i, j, k, l) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
  };
  var G__2366__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$13 ? self__.afn.cljs$core$IFn$_invoke$arity$13(a, b, c, d, e, f, g, h, i, j, k, l, m) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
  };
  var G__2366__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$14 ? self__.afn.cljs$core$IFn$_invoke$arity$14(a, b, c, d, e, f, g, h, i, j, k, l, m, n) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  };
  var G__2366__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$15 ? self__.afn.cljs$core$IFn$_invoke$arity$15(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  };
  var G__2366__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$16 ? self__.afn.cljs$core$IFn$_invoke$arity$16(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  };
  var G__2366__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$17 ? self__.afn.cljs$core$IFn$_invoke$arity$17(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  };
  var G__2366__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$18 ? self__.afn.cljs$core$IFn$_invoke$arity$18(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  };
  var G__2366__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$19 ? self__.afn.cljs$core$IFn$_invoke$arity$19(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  };
  var G__2366__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$20 ? self__.afn.cljs$core$IFn$_invoke$arity$20(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  };
  var G__2366__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(self__.afn, a, b, c, d, cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest], 0));
  };
  G__2366 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return G__2366__1.call(this, self__);
      case 2:
        return G__2366__2.call(this, self__, a);
      case 3:
        return G__2366__3.call(this, self__, a, b);
      case 4:
        return G__2366__4.call(this, self__, a, b, c);
      case 5:
        return G__2366__5.call(this, self__, a, b, c, d);
      case 6:
        return G__2366__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__2366__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__2366__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__2366__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__2366__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__2366__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__2366__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__2366__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__2366__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__2366__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__2366__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__2366__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__2366__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__2366__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__2366__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__2366__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__2366__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__2366.cljs$core$IFn$_invoke$arity$1 = G__2366__1;
  G__2366.cljs$core$IFn$_invoke$arity$2 = G__2366__2;
  G__2366.cljs$core$IFn$_invoke$arity$3 = G__2366__3;
  G__2366.cljs$core$IFn$_invoke$arity$4 = G__2366__4;
  G__2366.cljs$core$IFn$_invoke$arity$5 = G__2366__5;
  G__2366.cljs$core$IFn$_invoke$arity$6 = G__2366__6;
  G__2366.cljs$core$IFn$_invoke$arity$7 = G__2366__7;
  G__2366.cljs$core$IFn$_invoke$arity$8 = G__2366__8;
  G__2366.cljs$core$IFn$_invoke$arity$9 = G__2366__9;
  G__2366.cljs$core$IFn$_invoke$arity$10 = G__2366__10;
  G__2366.cljs$core$IFn$_invoke$arity$11 = G__2366__11;
  G__2366.cljs$core$IFn$_invoke$arity$12 = G__2366__12;
  G__2366.cljs$core$IFn$_invoke$arity$13 = G__2366__13;
  G__2366.cljs$core$IFn$_invoke$arity$14 = G__2366__14;
  G__2366.cljs$core$IFn$_invoke$arity$15 = G__2366__15;
  G__2366.cljs$core$IFn$_invoke$arity$16 = G__2366__16;
  G__2366.cljs$core$IFn$_invoke$arity$17 = G__2366__17;
  G__2366.cljs$core$IFn$_invoke$arity$18 = G__2366__18;
  G__2366.cljs$core$IFn$_invoke$arity$19 = G__2366__19;
  G__2366.cljs$core$IFn$_invoke$arity$20 = G__2366__20;
  G__2366.cljs$core$IFn$_invoke$arity$21 = G__2366__21;
  G__2366.cljs$core$IFn$_invoke$arity$22 = G__2366__22;
  return G__2366;
}();
cljs.core.MetaFn.prototype.apply = function(self__, args2365) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args2365)));
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$0 = function() {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$0 ? self__.afn.cljs$core$IFn$_invoke$arity$0() : self__.afn.call(null);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$1 ? self__.afn.cljs$core$IFn$_invoke$arity$1(a) : self__.afn.call(null, a);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$2 ? self__.afn.cljs$core$IFn$_invoke$arity$2(a, b) : self__.afn.call(null, a, b);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$3 ? self__.afn.cljs$core$IFn$_invoke$arity$3(a, b, c) : self__.afn.call(null, a, b, c);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$4 ? self__.afn.cljs$core$IFn$_invoke$arity$4(a, b, c, d) : self__.afn.call(null, a, b, c, d);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$5 ? self__.afn.cljs$core$IFn$_invoke$arity$5(a, b, c, d, e) : self__.afn.call(null, a, b, c, d, e);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$6 ? self__.afn.cljs$core$IFn$_invoke$arity$6(a, b, c, d, e, f) : self__.afn.call(null, a, b, c, d, e, f);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$7 ? self__.afn.cljs$core$IFn$_invoke$arity$7(a, b, c, d, e, f, g) : self__.afn.call(null, a, b, c, d, e, f, g);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$8 ? self__.afn.cljs$core$IFn$_invoke$arity$8(a, b, c, d, e, f, g, h) : self__.afn.call(null, a, b, c, d, e, f, g, h);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$9 ? self__.afn.cljs$core$IFn$_invoke$arity$9(a, b, c, d, e, f, g, h, i) : self__.afn.call(null, a, b, c, d, e, f, g, h, i);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$10 ? self__.afn.cljs$core$IFn$_invoke$arity$10(a, b, c, d, e, f, g, h, i, j) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$11 ? self__.afn.cljs$core$IFn$_invoke$arity$11(a, b, c, d, e, f, g, h, i, j, k) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$12 ? self__.afn.cljs$core$IFn$_invoke$arity$12(a, b, c, d, e, f, g, h, i, j, k, l) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$13 ? self__.afn.cljs$core$IFn$_invoke$arity$13(a, b, c, d, e, f, g, h, i, j, k, l, m) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$14 ? self__.afn.cljs$core$IFn$_invoke$arity$14(a, b, c, d, e, f, g, h, i, j, k, l, m, n) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$15 ? self__.afn.cljs$core$IFn$_invoke$arity$15(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$16 ? self__.afn.cljs$core$IFn$_invoke$arity$16(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$17 ? self__.afn.cljs$core$IFn$_invoke$arity$17(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$18 ? self__.afn.cljs$core$IFn$_invoke$arity$18(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$19 ? self__.afn.cljs$core$IFn$_invoke$arity$19(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$20 ? self__.afn.cljs$core$IFn$_invoke$arity$20(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  var self__ = this;
  var _ = this;
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(self__.afn, a, b, c, d, cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest], 0));
};
cljs.core.MetaFn.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "afn", "afn", 216963467, null), new cljs.core.Symbol(null, "meta", "meta", -1154898805, null)], null);
};
cljs.core.MetaFn.cljs$lang$type = true;
cljs.core.MetaFn.cljs$lang$ctorStr = "cljs.core/MetaFn";
cljs.core.MetaFn.cljs$lang$ctorPrWriter = function(this__4369__auto__, writer__4370__auto__, opt__4371__auto__) {
  return cljs.core._write(writer__4370__auto__, "cljs.core/MetaFn");
};
cljs.core.__GT_MetaFn = function cljs$core$__GT_MetaFn(afn, meta) {
  return new cljs.core.MetaFn(afn, meta);
};
cljs.core.with_meta = function cljs$core$with_meta(o, meta) {
  if (goog.isFunction(o)) {
    return new cljs.core.MetaFn(o, meta);
  } else {
    if (o == null) {
      return null;
    } else {
      return cljs.core._with_meta(o, meta);
    }
  }
};
cljs.core.meta = function cljs$core$meta(o) {
  if (!(o == null) ? !(o == null) ? o.cljs$lang$protocol_mask$partition0$ & 131072 || cljs.core.PROTOCOL_SENTINEL === o.cljs$core$IMeta$ ? true : !o.cljs$lang$protocol_mask$partition0$ ? cljs.core.native_satisfies_QMARK_(cljs.core.IMeta, o) : false : cljs.core.native_satisfies_QMARK_(cljs.core.IMeta, o) : false) {
    return cljs.core._meta(o);
  } else {
    return null;
  }
};
cljs.core.peek = function cljs$core$peek(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._peek(coll);
  }
};
cljs.core.pop = function cljs$core$pop(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._pop(coll);
  }
};
cljs.core.disj = function cljs$core$disj(var_args) {
  var G__2373 = arguments.length;
  switch(G__2373) {
    case 1:
      return cljs.core.disj.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.disj.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var args_arr__4757__auto__ = [];
      var len__4736__auto___2375 = arguments.length;
      var i__4737__auto___2376 = 0;
      while (true) {
        if (i__4737__auto___2376 < len__4736__auto___2375) {
          args_arr__4757__auto__.push(arguments[i__4737__auto___2376]);
          var G__2377 = i__4737__auto___2376 + 1;
          i__4737__auto___2376 = G__2377;
          continue;
        } else {
        }
        break;
      }
      var argseq__4758__auto__ = new cljs.core.IndexedSeq(args_arr__4757__auto__.slice(2), 0, null);
      return cljs.core.disj.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__4758__auto__);
  }
};
cljs.core.disj.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  return coll;
};
cljs.core.disj.cljs$core$IFn$_invoke$arity$2 = function(coll, k) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._disjoin(coll, k);
  }
};
cljs.core.disj.cljs$core$IFn$_invoke$arity$variadic = function(coll, k, ks) {
  while (true) {
    if (coll == null) {
      return null;
    } else {
      var ret = cljs.core.disj.cljs$core$IFn$_invoke$arity$2(coll, k);
      if (cljs.core.truth_(ks)) {
        var G__2378 = ret;
        var G__2379 = cljs.core.first(ks);
        var G__2380 = cljs.core.next(ks);
        coll = G__2378;
        k = G__2379;
        ks = G__2380;
        continue;
      } else {
        return ret;
      }
    }
    break;
  }
};
cljs.core.disj.cljs$lang$applyTo = function(seq2370) {
  var G__2371 = cljs.core.first(seq2370);
  var seq2370__$1 = cljs.core.next(seq2370);
  var G__2372 = cljs.core.first(seq2370__$1);
  var seq2370__$2 = cljs.core.next(seq2370__$1);
  var self__4723__auto__ = this;
  return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__2371, G__2372, seq2370__$2);
};
cljs.core.disj.cljs$lang$maxFixedArity = 2;
cljs.core.empty_QMARK_ = function cljs$core$empty_QMARK_(coll) {
  return coll == null || cljs.core.not(cljs.core.seq(coll));
};
cljs.core.coll_QMARK_ = function cljs$core$coll_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    if (!(x == null)) {
      if (x.cljs$lang$protocol_mask$partition0$ & 8 || cljs.core.PROTOCOL_SENTINEL === x.cljs$core$ICollection$) {
        return true;
      } else {
        if (!x.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.ICollection, x);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.ICollection, x);
    }
  }
};
cljs.core.set_QMARK_ = function cljs$core$set_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    if (!(x == null)) {
      if (x.cljs$lang$protocol_mask$partition0$ & 4096 || cljs.core.PROTOCOL_SENTINEL === x.cljs$core$ISet$) {
        return true;
      } else {
        if (!x.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.ISet, x);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.ISet, x);
    }
  }
};
cljs.core.associative_QMARK_ = function cljs$core$associative_QMARK_(x) {
  if (!(x == null)) {
    if (x.cljs$lang$protocol_mask$partition0$ & 512 || cljs.core.PROTOCOL_SENTINEL === x.cljs$core$IAssociative$) {
      return true;
    } else {
      if (!x.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IAssociative, x);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IAssociative, x);
  }
};
cljs.core.ifind_QMARK_ = function cljs$core$ifind_QMARK_(x) {
  if (!(x == null)) {
    if (false || cljs.core.PROTOCOL_SENTINEL === x.cljs$core$IFind$) {
      return true;
    } else {
      if (!x.cljs$lang$protocol_mask$partition$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IFind, x);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IFind, x);
  }
};
cljs.core.sequential_QMARK_ = function cljs$core$sequential_QMARK_(x) {
  if (!(x == null)) {
    if (x.cljs$lang$protocol_mask$partition0$ & 16777216 || cljs.core.PROTOCOL_SENTINEL === x.cljs$core$ISequential$) {
      return true;
    } else {
      if (!x.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ISequential, x);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ISequential, x);
  }
};
cljs.core.sorted_QMARK_ = function cljs$core$sorted_QMARK_(x) {
  if (!(x == null)) {
    if (x.cljs$lang$protocol_mask$partition0$ & 268435456 || cljs.core.PROTOCOL_SENTINEL === x.cljs$core$ISorted$) {
      return true;
    } else {
      if (!x.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ISorted, x);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ISorted, x);
  }
};
cljs.core.reduceable_QMARK_ = function cljs$core$reduceable_QMARK_(x) {
  if (!(x == null)) {
    if (x.cljs$lang$protocol_mask$partition0$ & 524288 || cljs.core.PROTOCOL_SENTINEL === x.cljs$core$IReduce$) {
      return true;
    } else {
      if (!x.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IReduce, x);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IReduce, x);
  }
};
cljs.core.map_QMARK_ = function cljs$core$map_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    if (!(x == null)) {
      if (x.cljs$lang$protocol_mask$partition0$ & 1024 || cljs.core.PROTOCOL_SENTINEL === x.cljs$core$IMap$) {
        return true;
      } else {
        if (!x.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.IMap, x);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.IMap, x);
    }
  }
};
cljs.core.record_QMARK_ = function cljs$core$record_QMARK_(x) {
  if (!(x == null)) {
    if (x.cljs$lang$protocol_mask$partition0$ & 67108864 || cljs.core.PROTOCOL_SENTINEL === x.cljs$core$IRecord$) {
      return true;
    } else {
      if (!x.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IRecord, x);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IRecord, x);
  }
};
cljs.core.vector_QMARK_ = function cljs$core$vector_QMARK_(x) {
  if (!(x == null)) {
    if (x.cljs$lang$protocol_mask$partition0$ & 16384 || cljs.core.PROTOCOL_SENTINEL === x.cljs$core$IVector$) {
      return true;
    } else {
      if (!x.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IVector, x);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IVector, x);
  }
};
cljs.core.chunked_seq_QMARK_ = function cljs$core$chunked_seq_QMARK_(x) {
  if (!(x == null)) {
    if (x.cljs$lang$protocol_mask$partition1$ & 512 || cljs.core.PROTOCOL_SENTINEL === x.cljs$core$IChunkedSeq$) {
      return true;
    } else {
      return false;
    }
  } else {
    return false;
  }
};
cljs.core.js_obj = function cljs$core$js_obj(var_args) {
  var G__2394 = arguments.length;
  switch(G__2394) {
    case 0:
      return cljs.core.js_obj.cljs$core$IFn$_invoke$arity$0();
      break;
    default:
      var args_arr__4757__auto__ = [];
      var len__4736__auto___2398 = arguments.length;
      var i__4737__auto___2399 = 0;
      while (true) {
        if (i__4737__auto___2399 < len__4736__auto___2398) {
          args_arr__4757__auto__.push(arguments[i__4737__auto___2399]);
          var G__2400 = i__4737__auto___2399 + 1;
          i__4737__auto___2399 = G__2400;
          continue;
        } else {
        }
        break;
      }
      var argseq__4758__auto__ = new cljs.core.IndexedSeq(args_arr__4757__auto__.slice(0), 0, null);
      return cljs.core.js_obj.cljs$core$IFn$_invoke$arity$variadic(argseq__4758__auto__);
  }
};
cljs.core.js_obj.cljs$core$IFn$_invoke$arity$0 = function() {
  return {};
};
cljs.core.js_obj.cljs$core$IFn$_invoke$arity$variadic = function(keyvals) {
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(goog.object.create, keyvals);
};
cljs.core.js_obj.cljs$lang$applyTo = function(seq2393) {
  var self__4724__auto__ = this;
  return self__4724__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq2393));
};
cljs.core.js_obj.cljs$lang$maxFixedArity = 0;
cljs.core.js_keys = function cljs$core$js_keys(obj) {
  return goog.object.getKeys(obj);
};
cljs.core.js_delete = function cljs$core$js_delete(obj, key) {
  return delete obj[key];
};
cljs.core.array_copy = function cljs$core$array_copy(from, i, to, j, len) {
  var i__$1 = i;
  var j__$1 = j;
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__2401 = i__$1 + 1;
      var G__2402 = j__$1 + 1;
      var G__2403 = len__$1 - 1;
      i__$1 = G__2401;
      j__$1 = G__2402;
      len__$1 = G__2403;
      continue;
    }
    break;
  }
};
cljs.core.array_copy_downward = function cljs$core$array_copy_downward(from, i, to, j, len) {
  var i__$1 = i + (len - 1);
  var j__$1 = j + (len - 1);
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__2404 = i__$1 - 1;
      var G__2405 = j__$1 - 1;
      var G__2406 = len__$1 - 1;
      i__$1 = G__2404;
      j__$1 = G__2405;
      len__$1 = G__2406;
      continue;
    }
    break;
  }
};
cljs.core.lookup_sentinel = {};
cljs.core.false_QMARK_ = function cljs$core$false_QMARK_(x) {
  return x === false;
};
cljs.core.true_QMARK_ = function cljs$core$true_QMARK_(x) {
  return x === true;
};
cljs.core.boolean_QMARK_ = function cljs$core$boolean_QMARK_(x) {
  return x === true || x === false;
};
cljs.core.undefined_QMARK_ = function cljs$core$undefined_QMARK_(x) {
  return void 0 === x;
};
cljs.core.seq_QMARK_ = function cljs$core$seq_QMARK_(s) {
  if (s == null) {
    return false;
  } else {
    if (!(s == null)) {
      if (s.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === s.cljs$core$ISeq$) {
        return true;
      } else {
        if (!s.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, s);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, s);
    }
  }
};
cljs.core.seqable_QMARK_ = function cljs$core$seqable_QMARK_(s) {
  var or__4126__auto__ = s == null;
  if (or__4126__auto__) {
    return or__4126__auto__;
  } else {
    var or__4126__auto____$1 = !(s == null) ? s.cljs$lang$protocol_mask$partition0$ & 8388608 || cljs.core.PROTOCOL_SENTINEL === s.cljs$core$ISeqable$ ? true : !s.cljs$lang$protocol_mask$partition0$ ? cljs.core.native_satisfies_QMARK_(cljs.core.ISeqable, s) : false : cljs.core.native_satisfies_QMARK_(cljs.core.ISeqable, s);
    if (or__4126__auto____$1) {
      return or__4126__auto____$1;
    } else {
      return cljs.core.array_QMARK_(s) || typeof s === "string";
    }
  }
};
cljs.core.boolean$ = function cljs$core$boolean(x) {
  if (x == null) {
    return false;
  } else {
    if (x === false) {
      return false;
    } else {
      return true;
    }
  }
};
cljs.core.ifn_QMARK_ = function cljs$core$ifn_QMARK_(f) {
  var or__4126__auto__ = cljs.core.fn_QMARK_(f);
  if (or__4126__auto__) {
    return or__4126__auto__;
  } else {
    if (!(f == null)) {
      if (f.cljs$lang$protocol_mask$partition0$ & 1 || cljs.core.PROTOCOL_SENTINEL === f.cljs$core$IFn$) {
        return true;
      } else {
        if (!f.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.IFn, f);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.IFn, f);
    }
  }
};
cljs.core.integer_QMARK_ = function cljs$core$integer_QMARK_(n) {
  return typeof n === "number" && !isNaN(n) && !(n === Infinity) && parseFloat(n) === parseInt(n, 10);
};
cljs.core.int_QMARK_ = function cljs$core$int_QMARK_(x) {
  return cljs.core.integer_QMARK_(x) || x instanceof goog.math.Integer || x instanceof goog.math.Long;
};
cljs.core.pos_int_QMARK_ = function cljs$core$pos_int_QMARK_(x) {
  if (cljs.core.integer_QMARK_(x)) {
    return x > 0;
  } else {
    if (x instanceof goog.math.Integer) {
      return cljs.core.not(x.isNegative()) && cljs.core.not(x.isZero());
    } else {
      if (x instanceof goog.math.Long) {
        return cljs.core.not(x.isNegative()) && cljs.core.not(x.isZero());
      } else {
        return false;
      }
    }
  }
};
cljs.core.neg_int_QMARK_ = function cljs$core$neg_int_QMARK_(x) {
  if (cljs.core.integer_QMARK_(x)) {
    return x < 0;
  } else {
    if (x instanceof goog.math.Integer) {
      return x.isNegative();
    } else {
      if (x instanceof goog.math.Long) {
        return x.isNegative();
      } else {
        return false;
      }
    }
  }
};
cljs.core.nat_int_QMARK_ = function cljs$core$nat_int_QMARK_(x) {
  if (cljs.core.integer_QMARK_(x)) {
    return !(x < 0);
  } else {
    if (x instanceof goog.math.Integer) {
      return cljs.core.not(x.isNegative());
    } else {
      if (x instanceof goog.math.Long) {
        return cljs.core.not(x.isNegative());
      } else {
        return false;
      }
    }
  }
};
cljs.core.float_QMARK_ = function cljs$core$float_QMARK_(x) {
  return typeof x === "number";
};
cljs.core.double_QMARK_ = function cljs$core$double_QMARK_(x) {
  return typeof x === "number";
};
cljs.core.infinite_QMARK_ = function cljs$core$infinite_QMARK_(x) {
  return x === Number.POSITIVE_INFINITY || x === Number.NEGATIVE_INFINITY;
};
cljs.core.contains_QMARK_ = function cljs$core$contains_QMARK_(coll, v) {
  if (cljs.core.get.cljs$core$IFn$_invoke$arity$3(coll, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return false;
  } else {
    return true;
  }
};
cljs.core.find = function cljs$core$find(coll, k) {
  if (cljs.core.ifind_QMARK_(coll)) {
    return cljs.core._find(coll, k);
  } else {
    if (!(coll == null) && cljs.core.associative_QMARK_(coll) && cljs.core.contains_QMARK_(coll, k)) {
      return new cljs.core.MapEntry(k, cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll, k), null);
    } else {
      return null;
    }
  }
};
cljs.core.distinct_QMARK_ = function cljs$core$distinct_QMARK_(var_args) {
  var G__2419 = arguments.length;
  switch(G__2419) {
    case 1:
      return cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var args_arr__4757__auto__ = [];
      var len__4736__auto___2421 = arguments.length;
      var i__4737__auto___2422 = 0;
      while (true) {
        if (i__4737__auto___2422 < len__4736__auto___2421) {
          args_arr__4757__auto__.push(arguments[i__4737__auto___2422]);
          var G__2423 = i__4737__auto___2422 + 1;
          i__4737__auto___2422 = G__2423;
          continue;
        } else {
        }
        break;
      }
      var argseq__4758__auto__ = new cljs.core.IndexedSeq(args_arr__4757__auto__.slice(2), 0, null);
      return cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__4758__auto__);
  }
};
cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return !cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y);
};
cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  if (!cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y)) {
    var s = cljs.core.PersistentHashSet.createAsIfByAssoc([x, y]);
    var xs = more;
    while (true) {
      var x__$1 = cljs.core.first(xs);
      var etc = cljs.core.next(xs);
      if (cljs.core.truth_(xs)) {
        if (cljs.core.contains_QMARK_(s, x__$1)) {
          return false;
        } else {
          var G__2424 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(s, x__$1);
          var G__2425 = etc;
          s = G__2424;
          xs = G__2425;
          continue;
        }
      } else {
        return true;
      }
      break;
    }
  } else {
    return false;
  }
};
cljs.core.distinct_QMARK_.cljs$lang$applyTo = function(seq2416) {
  var G__2417 = cljs.core.first(seq2416);
  var seq2416__$1 = cljs.core.next(seq2416);
  var G__2418 = cljs.core.first(seq2416__$1);
  var seq2416__$2 = cljs.core.next(seq2416__$1);
  var self__4723__auto__ = this;
  return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__2417, G__2418, seq2416__$2);
};
cljs.core.distinct_QMARK_.cljs$lang$maxFixedArity = 2;
cljs.core.compare = function cljs$core$compare(x, y) {
  if (x === y) {
    return 0;
  } else {
    if (x == null) {
      return -1;
    } else {
      if (y == null) {
        return 1;
      } else {
        if (typeof x === "number") {
          if (typeof y === "number") {
            return goog.array.defaultCompare(x, y);
          } else {
            throw new Error(["Cannot compare ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(x), " to ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(y)].join(""));
          }
        } else {
          if (!(x == null) ? x.cljs$lang$protocol_mask$partition1$ & 2048 || cljs.core.PROTOCOL_SENTINEL === x.cljs$core$IComparable$ ? true : !x.cljs$lang$protocol_mask$partition1$ ? cljs.core.native_satisfies_QMARK_(cljs.core.IComparable, x) : false : cljs.core.native_satisfies_QMARK_(cljs.core.IComparable, x)) {
            return cljs.core._compare(x, y);
          } else {
            if ((typeof x === "string" || cljs.core.array_QMARK_(x) || x === true || x === false) && cljs.core.type(x) === cljs.core.type(y)) {
              return goog.array.defaultCompare(x, y);
            } else {
              throw new Error(["Cannot compare ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(x), " to ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(y)].join(""));
            }
          }
        }
      }
    }
  }
};
cljs.core.compare_indexed = function cljs$core$compare_indexed(var_args) {
  var G__2428 = arguments.length;
  switch(G__2428) {
    case 2:
      return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 4:
      return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$2 = function(xs, ys) {
  var xl = cljs.core.count(xs);
  var yl = cljs.core.count(ys);
  if (xl < yl) {
    return -1;
  } else {
    if (xl > yl) {
      return 1;
    } else {
      if (xl === 0) {
        return 0;
      } else {
        return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$4(xs, ys, xl, 0);
      }
    }
  }
};
cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$4 = function(xs, ys, len, n) {
  while (true) {
    var d = cljs.core.compare(cljs.core.nth.cljs$core$IFn$_invoke$arity$2(xs, n), cljs.core.nth.cljs$core$IFn$_invoke$arity$2(ys, n));
    if (d === 0 && n + 1 < len) {
      var G__2430 = xs;
      var G__2431 = ys;
      var G__2432 = len;
      var G__2433 = n + 1;
      xs = G__2430;
      ys = G__2431;
      len = G__2432;
      n = G__2433;
      continue;
    } else {
      return d;
    }
    break;
  }
};
cljs.core.compare_indexed.cljs$lang$maxFixedArity = 4;
cljs.core.fn__GT_comparator = function cljs$core$fn__GT_comparator(f) {
  if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(f, cljs.core.compare)) {
    return cljs.core.compare;
  } else {
    return function(x, y) {
      var r = f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(x, y) : f.call(null, x, y);
      if (typeof r === "number") {
        return r;
      } else {
        if (cljs.core.truth_(r)) {
          return -1;
        } else {
          if (cljs.core.truth_(f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(y, x) : f.call(null, y, x))) {
            return 1;
          } else {
            return 0;
          }
        }
      }
    };
  }
};
cljs.core.sort = function cljs$core$sort(var_args) {
  var G__2435 = arguments.length;
  switch(G__2435) {
    case 1:
      return cljs.core.sort.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.sort.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
cljs.core.sort.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  return cljs.core.sort.cljs$core$IFn$_invoke$arity$2(cljs.core.compare, coll);
};
cljs.core.sort.cljs$core$IFn$_invoke$arity$2 = function(comp, coll) {
  if (cljs.core.seq(coll)) {
    var a = cljs.core.to_array(coll);
    goog.array.stableSort(a, cljs.core.fn__GT_comparator(comp));
    return cljs.core.seq(a);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.sort.cljs$lang$maxFixedArity = 2;
cljs.core.sort_by = function cljs$core$sort_by(var_args) {
  var G__2438 = arguments.length;
  switch(G__2438) {
    case 2:
      return cljs.core.sort_by.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.sort_by.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
cljs.core.sort_by.cljs$core$IFn$_invoke$arity$2 = function(keyfn, coll) {
  return cljs.core.sort_by.cljs$core$IFn$_invoke$arity$3(keyfn, cljs.core.compare, coll);
};
cljs.core.sort_by.cljs$core$IFn$_invoke$arity$3 = function(keyfn, comp, coll) {
  return cljs.core.sort.cljs$core$IFn$_invoke$arity$2(function(x, y) {
    var G__2440 = keyfn.cljs$core$IFn$_invoke$arity$1 ? keyfn.cljs$core$IFn$_invoke$arity$1(x) : keyfn.call(null, x);
    var G__2441 = keyfn.cljs$core$IFn$_invoke$arity$1 ? keyfn.cljs$core$IFn$_invoke$arity$1(y) : keyfn.call(null, y);
    var fexpr__2439 = cljs.core.fn__GT_comparator(comp);
    return fexpr__2439.cljs$core$IFn$_invoke$arity$2 ? fexpr__2439.cljs$core$IFn$_invoke$arity$2(G__2440, G__2441) : fexpr__2439.call(null, G__2440, G__2441);
  }, coll);
};
cljs.core.sort_by.cljs$lang$maxFixedArity = 3;
cljs.core.seq_reduce = function cljs$core$seq_reduce(var_args) {
  var G__2444 = arguments.length;
  switch(G__2444) {
    case 2:
      return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  var temp__5733__auto__ = cljs.core.seq(coll);
  if (temp__5733__auto__) {
    var s = temp__5733__auto__;
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(f, cljs.core.first(s), cljs.core.next(s));
  } else {
    return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
  }
};
cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3 = function(f, val, coll) {
  var val__$1 = val;
  var coll__$1 = cljs.core.seq(coll);
  while (true) {
    if (coll__$1) {
      var nval = function() {
        var G__2445 = val__$1;
        var G__2446 = cljs.core.first(coll__$1);
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__2445, G__2446) : f.call(null, G__2445, G__2446);
      }();
      if (cljs.core.reduced_QMARK_(nval)) {
        return cljs.core.deref(nval);
      } else {
        var G__2448 = nval;
        var G__2449 = cljs.core.next(coll__$1);
        val__$1 = G__2448;
        coll__$1 = G__2449;
        continue;
      }
    } else {
      return val__$1;
    }
    break;
  }
};
cljs.core.seq_reduce.cljs$lang$maxFixedArity = 3;
cljs.core.shuffle = function cljs$core$shuffle(coll) {
  var a = cljs.core.to_array(coll);
  goog.array.shuffle(a);
  return cljs.core.vec(a);
};
cljs.core.iter_reduce = function cljs$core$iter_reduce(var_args) {
  var G__2451 = arguments.length;
  switch(G__2451) {
    case 2:
      return cljs.core.iter_reduce.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.iter_reduce.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
cljs.core.iter_reduce.cljs$core$IFn$_invoke$arity$2 = function(coll, f) {
  var iter = cljs.core._iterator(coll);
  if (cljs.core.truth_(iter.hasNext())) {
    var init = iter.next();
    var acc = init;
    while (true) {
      if (iter.hasNext()) {
        var nacc = function() {
          var G__2452 = acc;
          var G__2453 = iter.next();
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__2452, G__2453) : f.call(null, G__2452, G__2453);
        }();
        if (cljs.core.reduced_QMARK_(nacc)) {
          return cljs.core.deref(nacc);
        } else {
          var G__2457 = nacc;
          acc = G__2457;
          continue;
        }
      } else {
        return acc;
      }
      break;
    }
  } else {
    return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
  }
};
cljs.core.iter_reduce.cljs$core$IFn$_invoke$arity$3 = function(coll, f, init) {
  var iter = cljs.core._iterator(coll);
  var acc = init;
  while (true) {
    if (iter.hasNext()) {
      var nacc = function() {
        var G__2454 = acc;
        var G__2455 = iter.next();
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__2454, G__2455) : f.call(null, G__2454, G__2455);
      }();
      if (cljs.core.reduced_QMARK_(nacc)) {
        return cljs.core.deref(nacc);
      } else {
        var G__2458 = nacc;
        acc = G__2458;
        continue;
      }
    } else {
      return acc;
    }
    break;
  }
};
cljs.core.iter_reduce.cljs$lang$maxFixedArity = 3;
cljs.core.reduce = function cljs$core$reduce(var_args) {
  var G__2460 = arguments.length;
  switch(G__2460) {
    case 2:
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
cljs.core.reduce.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 524288 || cljs.core.PROTOCOL_SENTINEL === coll.cljs$core$IReduce$ ? true : false : false) {
    return coll.cljs$core$IReduce$_reduce$arity$2(null, f);
  } else {
    if (cljs.core.array_QMARK_(coll)) {
      return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$2(coll, f);
    } else {
      if (typeof coll === "string") {
        return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$2(coll, f);
      } else {
        if (cljs.core.native_satisfies_QMARK_(cljs.core.IReduce, coll)) {
          return cljs.core._reduce.cljs$core$IFn$_invoke$arity$2(coll, f);
        } else {
          if (cljs.core.iterable_QMARK_(coll)) {
            return cljs.core.iter_reduce.cljs$core$IFn$_invoke$arity$2(coll, f);
          } else {
            return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll);
          }
        }
      }
    }
  }
};
cljs.core.reduce.cljs$core$IFn$_invoke$arity$3 = function(f, val, coll) {
  if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 524288 || cljs.core.PROTOCOL_SENTINEL === coll.cljs$core$IReduce$ ? true : false : false) {
    return coll.cljs$core$IReduce$_reduce$arity$3(null, f, val);
  } else {
    if (cljs.core.array_QMARK_(coll)) {
      return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$3(coll, f, val);
    } else {
      if (typeof coll === "string") {
        return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$3(coll, f, val);
      } else {
        if (cljs.core.native_satisfies_QMARK_(cljs.core.IReduce, coll)) {
          return cljs.core._reduce.cljs$core$IFn$_invoke$arity$3(coll, f, val);
        } else {
          if (cljs.core.iterable_QMARK_(coll)) {
            return cljs.core.iter_reduce.cljs$core$IFn$_invoke$arity$3(coll, f, val);
          } else {
            return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, val, coll);
          }
        }
      }
    }
  }
};
cljs.core.reduce.cljs$lang$maxFixedArity = 3;
cljs.core.reduce_kv = function cljs$core$reduce_kv(f, init, coll) {
  if (!(coll == null)) {
    return cljs.core._kv_reduce(coll, f, init);
  } else {
    return init;
  }
};
cljs.core.identity = function cljs$core$identity(x) {
  return x;
};
cljs.core.completing = function cljs$core$completing(var_args) {
  var G__2465 = arguments.length;
  switch(G__2465) {
    case 1:
      return cljs.core.completing.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.completing.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
cljs.core.completing.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return cljs.core.completing.cljs$core$IFn$_invoke$arity$2(f, cljs.core.identity);
};
cljs.core.completing.cljs$core$IFn$_invoke$arity$2 = function(f, cf) {
  return function() {
    var G__2467 = null;
    var G__2467__0 = function() {
      return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
    };
    var G__2467__1 = function(x) {
      return cf.cljs$core$IFn$_invoke$arity$1 ? cf.cljs$core$IFn$_invoke$arity$1(x) : cf.call(null, x);
    };
    var G__2467__2 = function(x, y) {
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(x, y) : f.call(null, x, y);
    };
    G__2467 = function(x, y) {
      switch(arguments.length) {
        case 0:
          return G__2467__0.call(this);
        case 1:
          return G__2467__1.call(this, x);
        case 2:
          return G__2467__2.call(this, x, y);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__2467.cljs$core$IFn$_invoke$arity$0 = G__2467__0;
    G__2467.cljs$core$IFn$_invoke$arity$1 = G__2467__1;
    G__2467.cljs$core$IFn$_invoke$arity$2 = G__2467__2;
    return G__2467;
  }();
};
cljs.core.completing.cljs$lang$maxFixedArity = 2;
cljs.core.transduce = function cljs$core$transduce(var_args) {
  var G__2469 = arguments.length;
  switch(G__2469) {
    case 3:
      return cljs.core.transduce.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
cljs.core.transduce.cljs$core$IFn$_invoke$arity$3 = function(xform, f, coll) {
  return cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(xform, f, f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null), coll);
};
cljs.core.transduce.cljs$core$IFn$_invoke$arity$4 = function(xform, f, init, coll) {
  var f__$1 = xform.cljs$core$IFn$_invoke$arity$1 ? xform.cljs$core$IFn$_invoke$arity$1(f) : xform.call(null, f);
  var ret = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(f__$1, init, coll);
  return f__$1.cljs$core$IFn$_invoke$arity$1 ? f__$1.cljs$core$IFn$_invoke$arity$1(ret) : f__$1.call(null, ret);
};
cljs.core.transduce.cljs$lang$maxFixedArity = 4;
cljs.core._PLUS_ = function cljs$core$_PLUS_(var_args) {
  var G__2475 = arguments.length;
  switch(G__2475) {
    case 0:
      return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var args_arr__4757__auto__ = [];
      var len__4736__auto___2477 = arguments.length;
      var i__4737__auto___2478 = 0;
      while (true) {
        if (i__4737__auto___2478 < len__4736__auto___2477) {
          args_arr__4757__auto__.push(arguments[i__4737__auto___2478]);
          var G__2479 = i__4737__auto___2478 + 1;
          i__4737__auto___2478 = G__2479;
          continue;
        } else {
        }
        break;
      }
      var argseq__4758__auto__ = new cljs.core.IndexedSeq(args_arr__4757__auto__.slice(2), 0, null);
      return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__4758__auto__);
  }
};
cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$0 = function() {
  return 0;
};
cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x + y;
};
cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._PLUS_, x + y, more);
};
cljs.core._PLUS_.cljs$lang$applyTo = function(seq2472) {
  var G__2473 = cljs.core.first(seq2472);
  var seq2472__$1 = cljs.core.next(seq2472);
  var G__2474 = cljs.core.first(seq2472__$1);
  var seq2472__$2 = cljs.core.next(seq2472__$1);
  var self__4723__auto__ = this;
  return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__2473, G__2474, seq2472__$2);
};
cljs.core._PLUS_.cljs$lang$maxFixedArity = 2;
cljs.core._ = function cljs$core$_(var_args) {
  var G__2484 = arguments.length;
  switch(G__2484) {
    case 1:
      return cljs.core._.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var args_arr__4757__auto__ = [];
      var len__4736__auto___2486 = arguments.length;
      var i__4737__auto___2487 = 0;
      while (true) {
        if (i__4737__auto___2487 < len__4736__auto___2486) {
          args_arr__4757__auto__.push(arguments[i__4737__auto___2487]);
          var G__2488 = i__4737__auto___2487 + 1;
          i__4737__auto___2487 = G__2488;
          continue;
        } else {
        }
        break;
      }
      var argseq__4758__auto__ = new cljs.core.IndexedSeq(args_arr__4757__auto__.slice(2), 0, null);
      return cljs.core._.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__4758__auto__);
  }
};
cljs.core._.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return -x;
};
cljs.core._.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x - y;
};
cljs.core._.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._, x - y, more);
};
cljs.core._.cljs$lang$applyTo = function(seq2481) {
  var G__2482 = cljs.core.first(seq2481);
  var seq2481__$1 = cljs.core.next(seq2481);
  var G__2483 = cljs.core.first(seq2481__$1);
  var seq2481__$2 = cljs.core.next(seq2481__$1);
  var self__4723__auto__ = this;
  return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__2482, G__2483, seq2481__$2);
};
cljs.core._.cljs$lang$maxFixedArity = 2;
cljs.core._STAR_ = function cljs$core$_STAR_(var_args) {
  var G__2493 = arguments.length;
  switch(G__2493) {
    case 0:
      return cljs.core._STAR_.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core._STAR_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._STAR_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var args_arr__4757__auto__ = [];
      var len__4736__auto___2495 = arguments.length;
      var i__4737__auto___2496 = 0;
      while (true) {
        if (i__4737__auto___2496 < len__4736__auto___2495) {
          args_arr__4757__auto__.push(arguments[i__4737__auto___2496]);
          var G__2497 = i__4737__auto___2496 + 1;
          i__4737__auto___2496 = G__2497;
          continue;
        } else {
        }
        break;
      }
      var argseq__4758__auto__ = new cljs.core.IndexedSeq(args_arr__4757__auto__.slice(2), 0, null);
      return cljs.core._STAR_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__4758__auto__);
  }
};
cljs.core._STAR_.cljs$core$IFn$_invoke$arity$0 = function() {
  return 1;
};
cljs.core._STAR_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core._STAR_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x * y;
};
cljs.core._STAR_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._STAR_, x * y, more);
};
cljs.core._STAR_.cljs$lang$applyTo = function(seq2490) {
  var G__2491 = cljs.core.first(seq2490);
  var seq2490__$1 = cljs.core.next(seq2490);
  var G__2492 = cljs.core.first(seq2490__$1);
  var seq2490__$2 = cljs.core.next(seq2490__$1);
  var self__4723__auto__ = this;
  return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__2491, G__2492, seq2490__$2);
};
cljs.core._STAR_.cljs$lang$maxFixedArity = 2;
cljs.core._SLASH_ = function cljs$core$_SLASH_(var_args) {
  var G__2502 = arguments.length;
  switch(G__2502) {
    case 1:
      return cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var args_arr__4757__auto__ = [];
      var len__4736__auto___2504 = arguments.length;
      var i__4737__auto___2505 = 0;
      while (true) {
        if (i__4737__auto___2505 < len__4736__auto___2504) {
          args_arr__4757__auto__.push(arguments[i__4737__auto___2505]);
          var G__2506 = i__4737__auto___2505 + 1;
          i__4737__auto___2505 = G__2506;
          continue;
        } else {
        }
        break;
      }
      var argseq__4758__auto__ = new cljs.core.IndexedSeq(args_arr__4757__auto__.slice(2), 0, null);
      return cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__4758__auto__);
  }
};
cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return 1 / x;
};
cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x / y;
};
cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._SLASH_, x / y, more);
};
cljs.core._SLASH_.cljs$lang$applyTo = function(seq2499) {
  var G__2500 = cljs.core.first(seq2499);
  var seq2499__$1 = cljs.core.next(seq2499);
  var G__2501 = cljs.core.first(seq2499__$1);
  var seq2499__$2 = cljs.core.next(seq2499__$1);
  var self__4723__auto__ = this;
  return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__2500, G__2501, seq2499__$2);
};
cljs.core._SLASH_.cljs$lang$maxFixedArity = 2;
cljs.core._LT_ = function cljs$core$_LT_(var_args) {
  var G__2511 = arguments.length;
  switch(G__2511) {
    case 1:
      return cljs.core._LT_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._LT_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var args_arr__4757__auto__ = [];
      var len__4736__auto___2513 = arguments.length;
      var i__4737__auto___2514 = 0;
      while (true) {
        if (i__4737__auto___2514 < len__4736__auto___2513) {
          args_arr__4757__auto__.push(arguments[i__4737__auto___2514]);
          var G__2515 = i__4737__auto___2514 + 1;
          i__4737__auto___2514 = G__2515;
          continue;
        } else {
        }
        break;
      }
      var argseq__4758__auto__ = new cljs.core.IndexedSeq(args_arr__4757__auto__.slice(2), 0, null);
      return cljs.core._LT_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__4758__auto__);
  }
};
cljs.core._LT_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core._LT_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x < y;
};
cljs.core._LT_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  while (true) {
    if (x < y) {
      if (cljs.core.next(more)) {
        var G__2516 = y;
        var G__2517 = cljs.core.first(more);
        var G__2518 = cljs.core.next(more);
        x = G__2516;
        y = G__2517;
        more = G__2518;
        continue;
      } else {
        return y < cljs.core.first(more);
      }
    } else {
      return false;
    }
    break;
  }
};
cljs.core._LT_.cljs$lang$applyTo = function(seq2508) {
  var G__2509 = cljs.core.first(seq2508);
  var seq2508__$1 = cljs.core.next(seq2508);
  var G__2510 = cljs.core.first(seq2508__$1);
  var seq2508__$2 = cljs.core.next(seq2508__$1);
  var self__4723__auto__ = this;
  return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__2509, G__2510, seq2508__$2);
};
cljs.core._LT_.cljs$lang$maxFixedArity = 2;
cljs.core._LT__EQ_ = function cljs$core$_LT__EQ_(var_args) {
  var G__2523 = arguments.length;
  switch(G__2523) {
    case 1:
      return cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var args_arr__4757__auto__ = [];
      var len__4736__auto___2525 = arguments.length;
      var i__4737__auto___2526 = 0;
      while (true) {
        if (i__4737__auto___2526 < len__4736__auto___2525) {
          args_arr__4757__auto__.push(arguments[i__4737__auto___2526]);
          var G__2527 = i__4737__auto___2526 + 1;
          i__4737__auto___2526 = G__2527;
          continue;
        } else {
        }
        break;
      }
      var argseq__4758__auto__ = new cljs.core.IndexedSeq(args_arr__4757__auto__.slice(2), 0, null);
      return cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__4758__auto__);
  }
};
cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x <= y;
};
cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  while (true) {
    if (x <= y) {
      if (cljs.core.next(more)) {
        var G__2528 = y;
        var G__2529 = cljs.core.first(more);
        var G__2530 = cljs.core.next(more);
        x = G__2528;
        y = G__2529;
        more = G__2530;
        continue;
      } else {
        return y <= cljs.core.first(more);
      }
    } else {
      return false;
    }
    break;
  }
};
cljs.core._LT__EQ_.cljs$lang$applyTo = function(seq2520) {
  var G__2521 = cljs.core.first(seq2520);
  var seq2520__$1 = cljs.core.next(seq2520);
  var G__2522 = cljs.core.first(seq2520__$1);
  var seq2520__$2 = cljs.core.next(seq2520__$1);
  var self__4723__auto__ = this;
  return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__2521, G__2522, seq2520__$2);
};
cljs.core._LT__EQ_.cljs$lang$maxFixedArity = 2;
cljs.core._GT_ = function cljs$core$_GT_(var_args) {
  var G__2535 = arguments.length;
  switch(G__2535) {
    case 1:
      return cljs.core._GT_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._GT_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var args_arr__4757__auto__ = [];
      var len__4736__auto___2537 = arguments.length;
      var i__4737__auto___2538 = 0;
      while (true) {
        if (i__4737__auto___2538 < len__4736__auto___2537) {
          args_arr__4757__auto__.push(arguments[i__4737__auto___2538]);
          var G__2539 = i__4737__auto___2538 + 1;
          i__4737__auto___2538 = G__2539;
          continue;
        } else {
        }
        break;
      }
      var argseq__4758__auto__ = new cljs.core.IndexedSeq(args_arr__4757__auto__.slice(2), 0, null);
      return cljs.core._GT_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__4758__auto__);
  }
};
cljs.core._GT_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core._GT_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x > y;
};
cljs.core._GT_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  while (true) {
    if (x > y) {
      if (cljs.core.next(more)) {
        var G__2540 = y;
        var G__2541 = cljs.core.first(more);
        var G__2542 = cljs.core.next(more);
        x = G__2540;
        y = G__2541;
        more = G__2542;
        continue;
      } else {
        return y > cljs.core.first(more);
      }
    } else {
      return false;
    }
    break;
  }
};
cljs.core._GT_.cljs$lang$applyTo = function(seq2532) {
  var G__2533 = cljs.core.first(seq2532);
  var seq2532__$1 = cljs.core.next(seq2532);
  var G__2534 = cljs.core.first(seq2532__$1);
  var seq2532__$2 = cljs.core.next(seq2532__$1);
  var self__4723__auto__ = this;
  return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__2533, G__2534, seq2532__$2);
};
cljs.core._GT_.cljs$lang$maxFixedArity = 2;
cljs.core._GT__EQ_ = function cljs$core$_GT__EQ_(var_args) {
  var G__2547 = arguments.length;
  switch(G__2547) {
    case 1:
      return cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var args_arr__4757__auto__ = [];
      var len__4736__auto___2549 = arguments.length;
      var i__4737__auto___2550 = 0;
      while (true) {
        if (i__4737__auto___2550 < len__4736__auto___2549) {
          args_arr__4757__auto__.push(arguments[i__4737__auto___2550]);
          var G__2551 = i__4737__auto___2550 + 1;
          i__4737__auto___2550 = G__2551;
          continue;
        } else {
        }
        break;
      }
      var argseq__4758__auto__ = new cljs.core.IndexedSeq(args_arr__4757__auto__.slice(2), 0, null);
      return cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__4758__auto__);
  }
};
cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x >= y;
};
cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  while (true) {
    if (x >= y) {
      if (cljs.core.next(more)) {
        var G__2552 = y;
        var G__2553 = cljs.core.first(more);
        var G__2554 = cljs.core.next(more);
        x = G__2552;
        y = G__2553;
        more = G__2554;
        continue;
      } else {
        return y >= cljs.core.first(more);
      }
    } else {
      return false;
    }
    break;
  }
};
cljs.core._GT__EQ_.cljs$lang$applyTo = function(seq2544) {
  var G__2545 = cljs.core.first(seq2544);
  var seq2544__$1 = cljs.core.next(seq2544);
  var G__2546 = cljs.core.first(seq2544__$1);
  var seq2544__$2 = cljs.core.next(seq2544__$1);
  var self__4723__auto__ = this;
  return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__2545, G__2546, seq2544__$2);
};
cljs.core._GT__EQ_.cljs$lang$maxFixedArity = 2;
cljs.core.dec = function cljs$core$dec(x) {
  return x - 1;
};
cljs.core.max = function cljs$core$max(var_args) {
  var G__2559 = arguments.length;
  switch(G__2559) {
    case 1:
      return cljs.core.max.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.max.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var args_arr__4757__auto__ = [];
      var len__4736__auto___2561 = arguments.length;
      var i__4737__auto___2562 = 0;
      while (true) {
        if (i__4737__auto___2562 < len__4736__auto___2561) {
          args_arr__4757__auto__.push(arguments[i__4737__auto___2562]);
          var G__2563 = i__4737__auto___2562 + 1;
          i__4737__auto___2562 = G__2563;
          continue;
        } else {
        }
        break;
      }
      var argseq__4758__auto__ = new cljs.core.IndexedSeq(args_arr__4757__auto__.slice(2), 0, null);
      return cljs.core.max.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__4758__auto__);
  }
};
cljs.core.max.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core.max.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  var x__4214__auto__ = x;
  var y__4215__auto__ = y;
  return x__4214__auto__ > y__4215__auto__ ? x__4214__auto__ : y__4215__auto__;
};
cljs.core.max.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.max, function() {
    var x__4214__auto__ = x;
    var y__4215__auto__ = y;
    return x__4214__auto__ > y__4215__auto__ ? x__4214__auto__ : y__4215__auto__;
  }(), more);
};
cljs.core.max.cljs$lang$applyTo = function(seq2556) {
  var G__2557 = cljs.core.first(seq2556);
  var seq2556__$1 = cljs.core.next(seq2556);
  var G__2558 = cljs.core.first(seq2556__$1);
  var seq2556__$2 = cljs.core.next(seq2556__$1);
  var self__4723__auto__ = this;
  return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__2557, G__2558, seq2556__$2);
};
cljs.core.max.cljs$lang$maxFixedArity = 2;
cljs.core.min = function cljs$core$min(var_args) {
  var G__2568 = arguments.length;
  switch(G__2568) {
    case 1:
      return cljs.core.min.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.min.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var args_arr__4757__auto__ = [];
      var len__4736__auto___2570 = arguments.length;
      var i__4737__auto___2571 = 0;
      while (true) {
        if (i__4737__auto___2571 < len__4736__auto___2570) {
          args_arr__4757__auto__.push(arguments[i__4737__auto___2571]);
          var G__2572 = i__4737__auto___2571 + 1;
          i__4737__auto___2571 = G__2572;
          continue;
        } else {
        }
        break;
      }
      var argseq__4758__auto__ = new cljs.core.IndexedSeq(args_arr__4757__auto__.slice(2), 0, null);
      return cljs.core.min.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__4758__auto__);
  }
};
cljs.core.min.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core.min.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  var x__4217__auto__ = x;
  var y__4218__auto__ = y;
  return x__4217__auto__ < y__4218__auto__ ? x__4217__auto__ : y__4218__auto__;
};
cljs.core.min.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.min, function() {
    var x__4217__auto__ = x;
    var y__4218__auto__ = y;
    return x__4217__auto__ < y__4218__auto__ ? x__4217__auto__ : y__4218__auto__;
  }(), more);
};
cljs.core.min.cljs$lang$applyTo = function(seq2565) {
  var G__2566 = cljs.core.first(seq2565);
  var seq2565__$1 = cljs.core.next(seq2565);
  var G__2567 = cljs.core.first(seq2565__$1);
  var seq2565__$2 = cljs.core.next(seq2565__$1);
  var self__4723__auto__ = this;
  return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__2566, G__2567, seq2565__$2);
};
cljs.core.min.cljs$lang$maxFixedArity = 2;
cljs.core.byte$ = function cljs$core$byte(x) {
  return x;
};
cljs.core.char$ = function cljs$core$char(x) {
  if (typeof x === "number") {
    return String.fromCharCode(x);
  } else {
    if (typeof x === "string" && x.length === 1) {
      return x;
    } else {
      throw new Error("Argument to char must be a character or number");
    }
  }
};
cljs.core.short$ = function cljs$core$short(x) {
  return x;
};
cljs.core.float$ = function cljs$core$float(x) {
  return x;
};
cljs.core.double$ = function cljs$core$double(x) {
  return x;
};
cljs.core.unchecked_byte = function cljs$core$unchecked_byte(x) {
  return x;
};
cljs.core.unchecked_char = function cljs$core$unchecked_char(x) {
  return x;
};
cljs.core.unchecked_short = function cljs$core$unchecked_short(x) {
  return x;
};
cljs.core.unchecked_float = function cljs$core$unchecked_float(x) {
  return x;
};
cljs.core.unchecked_double = function cljs$core$unchecked_double(x) {
  return x;
};
cljs.core.unchecked_add = function cljs$core$unchecked_add(var_args) {
  var G__2577 = arguments.length;
  switch(G__2577) {
    case 0:
      return cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var args_arr__4757__auto__ = [];
      var len__4736__auto___2579 = arguments.length;
      var i__4737__auto___2580 = 0;
      while (true) {
        if (i__4737__auto___2580 < len__4736__auto___2579) {
          args_arr__4757__auto__.push(arguments[i__4737__auto___2580]);
          var G__2581 = i__4737__auto___2580 + 1;
          i__4737__auto___2580 = G__2581;
          continue;
        } else {
        }
        break;
      }
      var argseq__4758__auto__ = new cljs.core.IndexedSeq(args_arr__4757__auto__.slice(2), 0, null);
      return cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__4758__auto__);
  }
};
cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$0 = function() {
  return 0;
};
cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x + y;
};
cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_add, x + y, more);
};
cljs.core.unchecked_add.cljs$lang$applyTo = function(seq2574) {
  var G__2575 = cljs.core.first(seq2574);
  var seq2574__$1 = cljs.core.next(seq2574);
  var G__2576 = cljs.core.first(seq2574__$1);
  var seq2574__$2 = cljs.core.next(seq2574__$1);
  var self__4723__auto__ = this;
  return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__2575, G__2576, seq2574__$2);
};
cljs.core.unchecked_add.cljs$lang$maxFixedArity = 2;
cljs.core.unchecked_add_int = function cljs$core$unchecked_add_int(var_args) {
  var G__2586 = arguments.length;
  switch(G__2586) {
    case 0:
      return cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var args_arr__4757__auto__ = [];
      var len__4736__auto___2588 = arguments.length;
      var i__4737__auto___2589 = 0;
      while (true) {
        if (i__4737__auto___2589 < len__4736__auto___2588) {
          args_arr__4757__auto__.push(arguments[i__4737__auto___2589]);
          var G__2590 = i__4737__auto___2589 + 1;
          i__4737__auto___2589 = G__2590;
          continue;
        } else {
        }
        break;
      }
      var argseq__4758__auto__ = new cljs.core.IndexedSeq(args_arr__4757__auto__.slice(2), 0, null);
      return cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__4758__auto__);
  }
};
cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$0 = function() {
  return 0;
};
cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x + y;
};
cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_add_int, x + y, more);
};
cljs.core.unchecked_add_int.cljs$lang$applyTo = function(seq2583) {
  var G__2584 = cljs.core.first(seq2583);
  var seq2583__$1 = cljs.core.next(seq2583);
  var G__2585 = cljs.core.first(seq2583__$1);
  var seq2583__$2 = cljs.core.next(seq2583__$1);
  var self__4723__auto__ = this;
  return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__2584, G__2585, seq2583__$2);
};
cljs.core.unchecked_add_int.cljs$lang$maxFixedArity = 2;
cljs.core.unchecked_dec = function cljs$core$unchecked_dec(x) {
  return x - 1;
};
cljs.core.unchecked_dec_int = function cljs$core$unchecked_dec_int(x) {
  return x - 1;
};
cljs.core.unchecked_divide_int = function cljs$core$unchecked_divide_int(var_args) {
  var G__2595 = arguments.length;
  switch(G__2595) {
    case 1:
      return cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var args_arr__4757__auto__ = [];
      var len__4736__auto___2597 = arguments.length;
      var i__4737__auto___2598 = 0;
      while (true) {
        if (i__4737__auto___2598 < len__4736__auto___2597) {
          args_arr__4757__auto__.push(arguments[i__4737__auto___2598]);
          var G__2599 = i__4737__auto___2598 + 1;
          i__4737__auto___2598 = G__2599;
          continue;
        } else {
        }
        break;
      }
      var argseq__4758__auto__ = new cljs.core.IndexedSeq(args_arr__4757__auto__.slice(2), 0, null);
      return cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__4758__auto__);
  }
};
cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return 1 / x;
};
cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x / y;
};
cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_divide_int, x / y, more);
};
cljs.core.unchecked_divide_int.cljs$lang$applyTo = function(seq2592) {
  var G__2593 = cljs.core.first(seq2592);
  var seq2592__$1 = cljs.core.next(seq2592);
  var G__2594 = cljs.core.first(seq2592__$1);
  var seq2592__$2 = cljs.core.next(seq2592__$1);
  var self__4723__auto__ = this;
  return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__2593, G__2594, seq2592__$2);
};
cljs.core.unchecked_divide_int.cljs$lang$maxFixedArity = 2;
cljs.core.unchecked_inc = function cljs$core$unchecked_inc(x) {
  return x + 1;
};
cljs.core.unchecked_inc_int = function cljs$core$unchecked_inc_int(x) {
  return x + 1;
};
cljs.core.unchecked_multiply = function cljs$core$unchecked_multiply(var_args) {
  var G__2604 = arguments.length;
  switch(G__2604) {
    case 0:
      return cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var args_arr__4757__auto__ = [];
      var len__4736__auto___2606 = arguments.length;
      var i__4737__auto___2607 = 0;
      while (true) {
        if (i__4737__auto___2607 < len__4736__auto___2606) {
          args_arr__4757__auto__.push(arguments[i__4737__auto___2607]);
          var G__2608 = i__4737__auto___2607 + 1;
          i__4737__auto___2607 = G__2608;
          continue;
        } else {
        }
        break;
      }
      var argseq__4758__auto__ = new cljs.core.IndexedSeq(args_arr__4757__auto__.slice(2), 0, null);
      return cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__4758__auto__);
  }
};
cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$0 = function() {
  return 1;
};
cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x * y;
};
cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_multiply, x * y, more);
};
cljs.core.unchecked_multiply.cljs$lang$applyTo = function(seq2601) {
  var G__2602 = cljs.core.first(seq2601);
  var seq2601__$1 = cljs.core.next(seq2601);
  var G__2603 = cljs.core.first(seq2601__$1);
  var seq2601__$2 = cljs.core.next(seq2601__$1);
  var self__4723__auto__ = this;
  return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__2602, G__2603, seq2601__$2);
};
cljs.core.unchecked_multiply.cljs$lang$maxFixedArity = 2;
cljs.core.unchecked_multiply_int = function cljs$core$unchecked_multiply_int(var_args) {
  var G__2613 = arguments.length;
  switch(G__2613) {
    case 0:
      return cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var args_arr__4757__auto__ = [];
      var len__4736__auto___2615 = arguments.length;
      var i__4737__auto___2616 = 0;
      while (true) {
        if (i__4737__auto___2616 < len__4736__auto___2615) {
          args_arr__4757__auto__.push(arguments[i__4737__auto___2616]);
          var G__2617 = i__4737__auto___2616 + 1;
          i__4737__auto___2616 = G__2617;
          continue;
        } else {
        }
        break;
      }
      var argseq__4758__auto__ = new cljs.core.IndexedSeq(args_arr__4757__auto__.slice(2), 0, null);
      return cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__4758__auto__);
  }
};
cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$0 = function() {
  return 1;
};
cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x * y;
};
cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_multiply_int, x * y, more);
};
cljs.core.unchecked_multiply_int.cljs$lang$applyTo = function(seq2610) {
  var G__2611 = cljs.core.first(seq2610);
  var seq2610__$1 = cljs.core.next(seq2610);
  var G__2612 = cljs.core.first(seq2610__$1);
  var seq2610__$2 = cljs.core.next(seq2610__$1);
  var self__4723__auto__ = this;
  return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__2611, G__2612, seq2610__$2);
};
cljs.core.unchecked_multiply_int.cljs$lang$maxFixedArity = 2;
cljs.core.unchecked_negate = function cljs$core$unchecked_negate(x) {
  return -x;
};
cljs.core.unchecked_negate_int = function cljs$core$unchecked_negate_int(x) {
  return -x;
};
cljs.core.unchecked_remainder_int = function cljs$core$unchecked_remainder_int(x, n) {
  return cljs.core.mod(x, n);
};
cljs.core.unchecked_subtract = function cljs$core$unchecked_subtract(var_args) {
  var G__2622 = arguments.length;
  switch(G__2622) {
    case 1:
      return cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var args_arr__4757__auto__ = [];
      var len__4736__auto___2624 = arguments.length;
      var i__4737__auto___2625 = 0;
      while (true) {
        if (i__4737__auto___2625 < len__4736__auto___2624) {
          args_arr__4757__auto__.push(arguments[i__4737__auto___2625]);
          var G__2626 = i__4737__auto___2625 + 1;
          i__4737__auto___2625 = G__2626;
          continue;
        } else {
        }
        break;
      }
      var argseq__4758__auto__ = new cljs.core.IndexedSeq(args_arr__4757__auto__.slice(2), 0, null);
      return cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__4758__auto__);
  }
};
cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return -x;
};
cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x - y;
};
cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_subtract, x - y, more);
};
cljs.core.unchecked_subtract.cljs$lang$applyTo = function(seq2619) {
  var G__2620 = cljs.core.first(seq2619);
  var seq2619__$1 = cljs.core.next(seq2619);
  var G__2621 = cljs.core.first(seq2619__$1);
  var seq2619__$2 = cljs.core.next(seq2619__$1);
  var self__4723__auto__ = this;
  return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__2620, G__2621, seq2619__$2);
};
cljs.core.unchecked_subtract.cljs$lang$maxFixedArity = 2;
cljs.core.unchecked_subtract_int = function cljs$core$unchecked_subtract_int(var_args) {
  var G__2631 = arguments.length;
  switch(G__2631) {
    case 1:
      return cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var args_arr__4757__auto__ = [];
      var len__4736__auto___2633 = arguments.length;
      var i__4737__auto___2634 = 0;
      while (true) {
        if (i__4737__auto___2634 < len__4736__auto___2633) {
          args_arr__4757__auto__.push(arguments[i__4737__auto___2634]);
          var G__2635 = i__4737__auto___2634 + 1;
          i__4737__auto___2634 = G__2635;
          continue;
        } else {
        }
        break;
      }
      var argseq__4758__auto__ = new cljs.core.IndexedSeq(args_arr__4757__auto__.slice(2), 0, null);
      return cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__4758__auto__);
  }
};
cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return -x;
};
cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x - y;
};
cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_subtract_int, x - y, more);
};
cljs.core.unchecked_subtract_int.cljs$lang$applyTo = function(seq2628) {
  var G__2629 = cljs.core.first(seq2628);
  var seq2628__$1 = cljs.core.next(seq2628);
  var G__2630 = cljs.core.first(seq2628__$1);
  var seq2628__$2 = cljs.core.next(seq2628__$1);
  var self__4723__auto__ = this;
  return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__2629, G__2630, seq2628__$2);
};
cljs.core.unchecked_subtract_int.cljs$lang$maxFixedArity = 2;
cljs.core.fix = function cljs$core$fix(q) {
  if (q >= 0) {
    return Math.floor(q);
  } else {
    return Math.ceil(q);
  }
};
cljs.core.int$ = function cljs$core$int(x) {
  return x | 0;
};
cljs.core.unchecked_int = function cljs$core$unchecked_int(x) {
  return cljs.core.fix(x);
};
cljs.core.long$ = function cljs$core$long(x) {
  return cljs.core.fix(x);
};
cljs.core.unchecked_long = function cljs$core$unchecked_long(x) {
  return cljs.core.fix(x);
};
cljs.core.booleans = function cljs$core$booleans(x) {
  return x;
};
cljs.core.bytes = function cljs$core$bytes(x) {
  return x;
};
cljs.core.chars = function cljs$core$chars(x) {
  return x;
};
cljs.core.shorts = function cljs$core$shorts(x) {
  return x;
};
cljs.core.ints = function cljs$core$ints(x) {
  return x;
};
cljs.core.floats = function cljs$core$floats(x) {
  return x;
};
cljs.core.doubles = function cljs$core$doubles(x) {
  return x;
};
cljs.core.longs = function cljs$core$longs(x) {
  return x;
};
cljs.core.js_mod = function cljs$core$js_mod(n, d) {
  return n % d;
};
cljs.core.mod = function cljs$core$mod(n, d) {
  return (n % d + d) % d;
};
cljs.core.quot = function cljs$core$quot(n, d) {
  var rem = n % d;
  return cljs.core.fix((n - rem) / d);
};
cljs.core.rem = function cljs$core$rem(n, d) {
  var q = cljs.core.quot(n, d);
  return n - d * q;
};
cljs.core.bit_xor = function cljs$core$bit_xor(var_args) {
  var G__2640 = arguments.length;
  switch(G__2640) {
    case 2:
      return cljs.core.bit_xor.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var args_arr__4757__auto__ = [];
      var len__4736__auto___2642 = arguments.length;
      var i__4737__auto___2643 = 0;
      while (true) {
        if (i__4737__auto___2643 < len__4736__auto___2642) {
          args_arr__4757__auto__.push(arguments[i__4737__auto___2643]);
          var G__2644 = i__4737__auto___2643 + 1;
          i__4737__auto___2643 = G__2644;
          continue;
        } else {
        }
        break;
      }
      var argseq__4758__auto__ = new cljs.core.IndexedSeq(args_arr__4757__auto__.slice(2), 0, null);
      return cljs.core.bit_xor.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__4758__auto__);
  }
};
cljs.core.bit_xor.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x ^ y;
};
cljs.core.bit_xor.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.bit_xor, x ^ y, more);
};
cljs.core.bit_xor.cljs$lang$applyTo = function(seq2637) {
  var G__2638 = cljs.core.first(seq2637);
  var seq2637__$1 = cljs.core.next(seq2637);
  var G__2639 = cljs.core.first(seq2637__$1);
  var seq2637__$2 = cljs.core.next(seq2637__$1);
  var self__4723__auto__ = this;
  return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__2638, G__2639, seq2637__$2);
};
cljs.core.bit_xor.cljs$lang$maxFixedArity = 2;
cljs.core.bit_and = function cljs$core$bit_and(var_args) {
  var G__2649 = arguments.length;
  switch(G__2649) {
    case 2:
      return cljs.core.bit_and.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var args_arr__4757__auto__ = [];
      var len__4736__auto___2651 = arguments.length;
      var i__4737__auto___2652 = 0;
      while (true) {
        if (i__4737__auto___2652 < len__4736__auto___2651) {
          args_arr__4757__auto__.push(arguments[i__4737__auto___2652]);
          var G__2653 = i__4737__auto___2652 + 1;
          i__4737__auto___2652 = G__2653;
          continue;
        } else {
        }
        break;
      }
      var argseq__4758__auto__ = new cljs.core.IndexedSeq(args_arr__4757__auto__.slice(2), 0, null);
      return cljs.core.bit_and.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__4758__auto__);
  }
};
cljs.core.bit_and.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x & y;
};
cljs.core.bit_and.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.bit_and, x & y, more);
};
cljs.core.bit_and.cljs$lang$applyTo = function(seq2646) {
  var G__2647 = cljs.core.first(seq2646);
  var seq2646__$1 = cljs.core.next(seq2646);
  var G__2648 = cljs.core.first(seq2646__$1);
  var seq2646__$2 = cljs.core.next(seq2646__$1);
  var self__4723__auto__ = this;
  return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__2647, G__2648, seq2646__$2);
};
cljs.core.bit_and.cljs$lang$maxFixedArity = 2;
cljs.core.bit_or = function cljs$core$bit_or(var_args) {
  var G__2658 = arguments.length;
  switch(G__2658) {
    case 2:
      return cljs.core.bit_or.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var args_arr__4757__auto__ = [];
      var len__4736__auto___2660 = arguments.length;
      var i__4737__auto___2661 = 0;
      while (true) {
        if (i__4737__auto___2661 < len__4736__auto___2660) {
          args_arr__4757__auto__.push(arguments[i__4737__auto___2661]);
          var G__2662 = i__4737__auto___2661 + 1;
          i__4737__auto___2661 = G__2662;
          continue;
        } else {
        }
        break;
      }
      var argseq__4758__auto__ = new cljs.core.IndexedSeq(args_arr__4757__auto__.slice(2), 0, null);
      return cljs.core.bit_or.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__4758__auto__);
  }
};
cljs.core.bit_or.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x | y;
};
cljs.core.bit_or.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.bit_or, x | y, more);
};
cljs.core.bit_or.cljs$lang$applyTo = function(seq2655) {
  var G__2656 = cljs.core.first(seq2655);
  var seq2655__$1 = cljs.core.next(seq2655);
  var G__2657 = cljs.core.first(seq2655__$1);
  var seq2655__$2 = cljs.core.next(seq2655__$1);
  var self__4723__auto__ = this;
  return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__2656, G__2657, seq2655__$2);
};
cljs.core.bit_or.cljs$lang$maxFixedArity = 2;
cljs.core.bit_and_not = function cljs$core$bit_and_not(var_args) {
  var G__2667 = arguments.length;
  switch(G__2667) {
    case 2:
      return cljs.core.bit_and_not.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var args_arr__4757__auto__ = [];
      var len__4736__auto___2669 = arguments.length;
      var i__4737__auto___2670 = 0;
      while (true) {
        if (i__4737__auto___2670 < len__4736__auto___2669) {
          args_arr__4757__auto__.push(arguments[i__4737__auto___2670]);
          var G__2671 = i__4737__auto___2670 + 1;
          i__4737__auto___2670 = G__2671;
          continue;
        } else {
        }
        break;
      }
      var argseq__4758__auto__ = new cljs.core.IndexedSeq(args_arr__4757__auto__.slice(2), 0, null);
      return cljs.core.bit_and_not.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__4758__auto__);
  }
};
cljs.core.bit_and_not.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x & ~y;
};
cljs.core.bit_and_not.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.bit_and_not, x & ~y, more);
};
cljs.core.bit_and_not.cljs$lang$applyTo = function(seq2664) {
  var G__2665 = cljs.core.first(seq2664);
  var seq2664__$1 = cljs.core.next(seq2664);
  var G__2666 = cljs.core.first(seq2664__$1);
  var seq2664__$2 = cljs.core.next(seq2664__$1);
  var self__4723__auto__ = this;
  return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__2665, G__2666, seq2664__$2);
};
cljs.core.bit_and_not.cljs$lang$maxFixedArity = 2;
cljs.core.bit_clear = function cljs$core$bit_clear(x, n) {
  return x & ~(1 << n);
};
cljs.core.bit_flip = function cljs$core$bit_flip(x, n) {
  return x ^ 1 << n;
};
cljs.core.bit_not = function cljs$core$bit_not(x) {
  return ~x;
};
cljs.core.bit_set = function cljs$core$bit_set(x, n) {
  return x | 1 << n;
};
cljs.core.bit_test = function cljs$core$bit_test(x, n) {
  return (x & 1 << n) != 0;
};
cljs.core.bit_shift_left = function cljs$core$bit_shift_left(x, n) {
  return x << n;
};
cljs.core.bit_shift_right = function cljs$core$bit_shift_right(x, n) {
  return x >> n;
};
cljs.core.bit_shift_right_zero_fill = function cljs$core$bit_shift_right_zero_fill(x, n) {
  return x >>> n;
};
cljs.core.unsigned_bit_shift_right = function cljs$core$unsigned_bit_shift_right(x, n) {
  return x >>> n;
};
cljs.core.bit_count = function cljs$core$bit_count(v) {
  var v__$1 = v - (v >> 1 & 1431655765);
  var v__$2 = (v__$1 & 858993459) + (v__$1 >> 2 & 858993459);
  return (v__$2 + (v__$2 >> 4) & 252645135) * 16843009 >> 24;
};
cljs.core._EQ__EQ_ = function cljs$core$_EQ__EQ_(var_args) {
  var G__2676 = arguments.length;
  switch(G__2676) {
    case 1:
      return cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var args_arr__4757__auto__ = [];
      var len__4736__auto___2678 = arguments.length;
      var i__4737__auto___2679 = 0;
      while (true) {
        if (i__4737__auto___2679 < len__4736__auto___2678) {
          args_arr__4757__auto__.push(arguments[i__4737__auto___2679]);
          var G__2680 = i__4737__auto___2679 + 1;
          i__4737__auto___2679 = G__2680;
          continue;
        } else {
        }
        break;
      }
      var argseq__4758__auto__ = new cljs.core.IndexedSeq(args_arr__4757__auto__.slice(2), 0, null);
      return cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__4758__auto__);
  }
};
cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return cljs.core._equiv(x, y);
};
cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  while (true) {
    if (x === y) {
      if (cljs.core.next(more)) {
        var G__2681 = y;
        var G__2682 = cljs.core.first(more);
        var G__2683 = cljs.core.next(more);
        x = G__2681;
        y = G__2682;
        more = G__2683;
        continue;
      } else {
        return y === cljs.core.first(more);
      }
    } else {
      return false;
    }
    break;
  }
};
cljs.core._EQ__EQ_.cljs$lang$applyTo = function(seq2673) {
  var G__2674 = cljs.core.first(seq2673);
  var seq2673__$1 = cljs.core.next(seq2673);
  var G__2675 = cljs.core.first(seq2673__$1);
  var seq2673__$2 = cljs.core.next(seq2673__$1);
  var self__4723__auto__ = this;
  return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__2674, G__2675, seq2673__$2);
};
cljs.core._EQ__EQ_.cljs$lang$maxFixedArity = 2;
cljs.core.pos_QMARK_ = function cljs$core$pos_QMARK_(x) {
  return x > 0;
};
cljs.core.zero_QMARK_ = function cljs$core$zero_QMARK_(x) {
  return x === 0;
};
cljs.core.neg_QMARK_ = function cljs$core$neg_QMARK_(x) {
  return x < 0;
};
cljs.core.nthnext = function cljs$core$nthnext(coll, n) {
  var n__$1 = n;
  var xs = cljs.core.seq(coll);
  while (true) {
    if (xs && n__$1 > 0) {
      var G__2684 = n__$1 - 1;
      var G__2685 = cljs.core.next(xs);
      n__$1 = G__2684;
      xs = G__2685;
      continue;
    } else {
      return xs;
    }
    break;
  }
};
cljs.core.str = function cljs$core$str(var_args) {
  var G__2689 = arguments.length;
  switch(G__2689) {
    case 0:
      return cljs.core.str.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      var args_arr__4757__auto__ = [];
      var len__4736__auto___2691 = arguments.length;
      var i__4737__auto___2692 = 0;
      while (true) {
        if (i__4737__auto___2692 < len__4736__auto___2691) {
          args_arr__4757__auto__.push(arguments[i__4737__auto___2692]);
          var G__2693 = i__4737__auto___2692 + 1;
          i__4737__auto___2692 = G__2693;
          continue;
        } else {
        }
        break;
      }
      var argseq__4758__auto__ = new cljs.core.IndexedSeq(args_arr__4757__auto__.slice(1), 0, null);
      return cljs.core.str.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__4758__auto__);
  }
};
cljs.core.str.cljs$core$IFn$_invoke$arity$0 = function() {
  return "";
};
cljs.core.str.cljs$core$IFn$_invoke$arity$1 = function(x) {
  if (x == null) {
    return "";
  } else {
    return [x].join("");
  }
};
cljs.core.str.cljs$core$IFn$_invoke$arity$variadic = function(x, ys) {
  var sb = new goog.string.StringBuffer(cljs.core.str.cljs$core$IFn$_invoke$arity$1(x));
  var more = ys;
  while (true) {
    if (cljs.core.truth_(more)) {
      var G__2694 = sb.append(cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.first(more)));
      var G__2695 = cljs.core.next(more);
      sb = G__2694;
      more = G__2695;
      continue;
    } else {
      return sb.toString();
    }
    break;
  }
};
cljs.core.str.cljs$lang$applyTo = function(seq2687) {
  var G__2688 = cljs.core.first(seq2687);
  var seq2687__$1 = cljs.core.next(seq2687);
  var self__4723__auto__ = this;
  return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__2688, seq2687__$1);
};
cljs.core.str.cljs$lang$maxFixedArity = 1;
cljs.core.subs = function cljs$core$subs(var_args) {
  var G__2697 = arguments.length;
  switch(G__2697) {
    case 2:
      return cljs.core.subs.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.subs.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
cljs.core.subs.cljs$core$IFn$_invoke$arity$2 = function(s, start) {
  return s.substring(start);
};
cljs.core.subs.cljs$core$IFn$_invoke$arity$3 = function(s, start, end) {
  return s.substring(start, end);
};
cljs.core.subs.cljs$lang$maxFixedArity = 3;
cljs.core.equiv_sequential = function cljs$core$equiv_sequential(x, y) {
  return cljs.core.boolean$(cljs.core.sequential_QMARK_(y) ? cljs.core.counted_QMARK_(x) && cljs.core.counted_QMARK_(y) && !(cljs.core.count(x) === cljs.core.count(y)) ? false : function() {
    var xs = cljs.core.seq(x);
    var ys = cljs.core.seq(y);
    while (true) {
      if (xs == null) {
        return ys == null;
      } else {
        if (ys == null) {
          return false;
        } else {
          if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.first(xs), cljs.core.first(ys))) {
            var G__2699 = cljs.core.next(xs);
            var G__2700 = cljs.core.next(ys);
            xs = G__2699;
            ys = G__2700;
            continue;
          } else {
            return false;
          }
        }
      }
      break;
    }
  }() : null);
};
cljs.core.hash_coll = function cljs$core$hash_coll(coll) {
  if (cljs.core.seq(coll)) {
    var res = cljs.core.hash(cljs.core.first(coll));
    var s = cljs.core.next(coll);
    while (true) {
      if (s == null) {
        return res;
      } else {
        var G__2701 = cljs.core.hash_combine(res, cljs.core.hash(cljs.core.first(s)));
        var G__2702 = cljs.core.next(s);
        res = G__2701;
        s = G__2702;
        continue;
      }
      break;
    }
  } else {
    return 0;
  }
};
cljs.core.hash_imap = function cljs$core$hash_imap(m) {
  var h = 0;
  var s = cljs.core.seq(m);
  while (true) {
    if (s) {
      var e = cljs.core.first(s);
      var G__2703 = (h + (cljs.core.hash(cljs.core.key(e)) ^ cljs.core.hash(cljs.core.val(e)))) % 4503599627370496;
      var G__2704 = cljs.core.next(s);
      h = G__2703;
      s = G__2704;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.hash_iset = function cljs$core$hash_iset(s) {
  var h = 0;
  var s__$1 = cljs.core.seq(s);
  while (true) {
    if (s__$1) {
      var e = cljs.core.first(s__$1);
      var G__2705 = (h + cljs.core.hash(e)) % 4503599627370496;
      var G__2706 = cljs.core.next(s__$1);
      h = G__2705;
      s__$1 = G__2706;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.extend_object_BANG_ = function cljs$core$extend_object_BANG_(obj, fn_map) {
  var seq__2707_2723 = cljs.core.seq(fn_map);
  var chunk__2708_2724 = null;
  var count__2709_2725 = 0;
  var i__2710_2726 = 0;
  while (true) {
    if (i__2710_2726 < count__2709_2725) {
      var vec__2717_2727 = chunk__2708_2724.cljs$core$IIndexed$_nth$arity$2(null, i__2710_2726);
      var key_name_2728 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__2717_2727, 0, null);
      var f_2729 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__2717_2727, 1, null);
      var str_name_2730 = cljs.core.name(key_name_2728);
      goog.object.set(obj, str_name_2730, f_2729);
      var G__2731 = seq__2707_2723;
      var G__2732 = chunk__2708_2724;
      var G__2733 = count__2709_2725;
      var G__2734 = i__2710_2726 + 1;
      seq__2707_2723 = G__2731;
      chunk__2708_2724 = G__2732;
      count__2709_2725 = G__2733;
      i__2710_2726 = G__2734;
      continue;
    } else {
      var temp__5735__auto___2735 = cljs.core.seq(seq__2707_2723);
      if (temp__5735__auto___2735) {
        var seq__2707_2736__$1 = temp__5735__auto___2735;
        if (cljs.core.chunked_seq_QMARK_(seq__2707_2736__$1)) {
          var c__4556__auto___2737 = cljs.core.chunk_first(seq__2707_2736__$1);
          var G__2738 = cljs.core.chunk_rest(seq__2707_2736__$1);
          var G__2739 = c__4556__auto___2737;
          var G__2740 = cljs.core.count(c__4556__auto___2737);
          var G__2741 = 0;
          seq__2707_2723 = G__2738;
          chunk__2708_2724 = G__2739;
          count__2709_2725 = G__2740;
          i__2710_2726 = G__2741;
          continue;
        } else {
          var vec__2720_2742 = cljs.core.first(seq__2707_2736__$1);
          var key_name_2743 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__2720_2742, 0, null);
          var f_2744 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__2720_2742, 1, null);
          var str_name_2745 = cljs.core.name(key_name_2743);
          goog.object.set(obj, str_name_2745, f_2744);
          var G__2746 = cljs.core.next(seq__2707_2736__$1);
          var G__2747 = null;
          var G__2748 = 0;
          var G__2749 = 0;
          seq__2707_2723 = G__2746;
          chunk__2708_2724 = G__2747;
          count__2709_2725 = G__2748;
          i__2710_2726 = G__2749;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return obj;
};
cljs.core.List = function(meta, first, rest, count, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.count = count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 65937646;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.List.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.List.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.List.prototype.indexOf = function() {
  var G__2750 = null;
  var G__2750__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
  };
  var G__2750__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__2750 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__2750__1.call(this, x);
      case 2:
        return G__2750__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__2750.cljs$core$IFn$_invoke$arity$1 = G__2750__1;
  G__2750.cljs$core$IFn$_invoke$arity$2 = G__2750__2;
  return G__2750;
}();
cljs.core.List.prototype.lastIndexOf = function() {
  var G__2751 = null;
  var G__2751__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, self__.count);
  };
  var G__2751__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__2751 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__2751__1.call(this, x);
      case 2:
        return G__2751__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__2751.cljs$core$IFn$_invoke$arity$1 = G__2751__1;
  G__2751.cljs$core$IFn$_invoke$arity$2 = G__2751__2;
  return G__2751;
}();
cljs.core.List.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.List.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.List(self__.meta, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return null;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.List.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1.cljs$core$ISeq$_rest$arity$1(null);
};
cljs.core.List.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4238__auto__ = self__.__hash;
  if (!(h__4238__auto__ == null)) {
    return h__4238__auto__;
  } else {
    var h__4238__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4238__auto____$1;
    return h__4238__auto____$1;
  }
};
cljs.core.List.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.List.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.List.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.List.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  if (new_meta === self__.meta) {
    return coll__$1;
  } else {
    return new cljs.core.List(new_meta, self__.first, self__.rest, self__.count, self__.__hash);
  }
};
cljs.core.List.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, coll__$1, self__.count + 1, null);
};
cljs.core.List.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "first", "first", 996428481, null), new cljs.core.Symbol(null, "rest", "rest", 398835108, null), new cljs.core.Symbol(null, "count", "count", -514511684, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, 
  "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.List.cljs$lang$type = true;
cljs.core.List.cljs$lang$ctorStr = "cljs.core/List";
cljs.core.List.cljs$lang$ctorPrWriter = function(this__4369__auto__, writer__4370__auto__, opt__4371__auto__) {
  return cljs.core._write(writer__4370__auto__, "cljs.core/List");
};
cljs.core.__GT_List = function cljs$core$__GT_List(meta, first, rest, count, __hash) {
  return new cljs.core.List(meta, first, rest, count, __hash);
};
cljs.core.list_QMARK_ = function cljs$core$list_QMARK_(x) {
  if (!(x == null)) {
    if (x.cljs$lang$protocol_mask$partition0$ & 33554432 || cljs.core.PROTOCOL_SENTINEL === x.cljs$core$IList$) {
      return true;
    } else {
      if (!x.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IList, x);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IList, x);
  }
};
goog.object.set(cljs.core.List.prototype, cljs.core.ITER_SYMBOL, function() {
  var this__4675__auto__ = this;
  return cljs.core.es6_iterator(this__4675__auto__);
});
cljs.core.EmptyList = function(meta) {
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 65937614;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.EmptyList.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.EmptyList.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.EmptyList.prototype.indexOf = function() {
  var G__2753 = null;
  var G__2753__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
  };
  var G__2753__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__2753 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__2753__1.call(this, x);
      case 2:
        return G__2753__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__2753.cljs$core$IFn$_invoke$arity$1 = G__2753__1;
  G__2753.cljs$core$IFn$_invoke$arity$2 = G__2753__2;
  return G__2753;
}();
cljs.core.EmptyList.prototype.lastIndexOf = function() {
  var G__2754 = null;
  var G__2754__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, cljs.core.count(coll));
  };
  var G__2754__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__2754 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__2754__1.call(this, x);
      case 2:
        return G__2754__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__2754.cljs$core$IFn$_invoke$arity$1 = G__2754__1;
  G__2754.cljs$core$IFn$_invoke$arity$2 = G__2754__2;
  return G__2754;
}();
cljs.core.EmptyList.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.EmptyList.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.EmptyList(self__.meta);
};
cljs.core.EmptyList.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return 0;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  throw new Error("Can't pop empty list");
};
cljs.core.EmptyList.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.empty_ordered_hash;
};
cljs.core.EmptyList.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.list_QMARK_(other) || cljs.core.sequential_QMARK_(other)) {
    return cljs.core.seq(other) == null;
  } else {
    return false;
  }
};
cljs.core.EmptyList.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.EmptyList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  if (new_meta === self__.meta) {
    return coll__$1;
  } else {
    return new cljs.core.EmptyList(new_meta);
  }
};
cljs.core.EmptyList.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, null, 1, null);
};
cljs.core.EmptyList.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null)], null);
};
cljs.core.EmptyList.cljs$lang$type = true;
cljs.core.EmptyList.cljs$lang$ctorStr = "cljs.core/EmptyList";
cljs.core.EmptyList.cljs$lang$ctorPrWriter = function(this__4369__auto__, writer__4370__auto__, opt__4371__auto__) {
  return cljs.core._write(writer__4370__auto__, "cljs.core/EmptyList");
};
cljs.core.__GT_EmptyList = function cljs$core$__GT_EmptyList(meta) {
  return new cljs.core.EmptyList(meta);
};
cljs.core.List.EMPTY = new cljs.core.EmptyList(null);
goog.object.set(cljs.core.EmptyList.prototype, cljs.core.ITER_SYMBOL, function() {
  var this__4675__auto__ = this;
  return cljs.core.es6_iterator(this__4675__auto__);
});
cljs.core.reversible_QMARK_ = function cljs$core$reversible_QMARK_(coll) {
  if (!(coll == null)) {
    if (coll.cljs$lang$protocol_mask$partition0$ & 134217728 || cljs.core.PROTOCOL_SENTINEL === coll.cljs$core$IReversible$) {
      return true;
    } else {
      if (!coll.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IReversible, coll);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IReversible, coll);
  }
};
cljs.core.rseq = function cljs$core$rseq(rev) {
  return cljs.core._rseq(rev);
};
cljs.core.reverse = function cljs$core$reverse(coll) {
  if (cljs.core.reversible_QMARK_(coll)) {
    var or__4126__auto__ = cljs.core.rseq(coll);
    if (or__4126__auto__) {
      return or__4126__auto__;
    } else {
      return cljs.core.List.EMPTY;
    }
  } else {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj, cljs.core.List.EMPTY, coll);
  }
};
cljs.core.list = function cljs$core$list(var_args) {
  var args__4742__auto__ = [];
  var len__4736__auto___2757 = arguments.length;
  var i__4737__auto___2758 = 0;
  while (true) {
    if (i__4737__auto___2758 < len__4736__auto___2757) {
      args__4742__auto__.push(arguments[i__4737__auto___2758]);
      var G__2759 = i__4737__auto___2758 + 1;
      i__4737__auto___2758 = G__2759;
      continue;
    } else {
    }
    break;
  }
  var argseq__4743__auto__ = 0 < args__4742__auto__.length ? new cljs.core.IndexedSeq(args__4742__auto__.slice(0), 0, null) : null;
  return cljs.core.list.cljs$core$IFn$_invoke$arity$variadic(argseq__4743__auto__);
};
cljs.core.list.cljs$core$IFn$_invoke$arity$variadic = function(xs) {
  var arr = xs instanceof cljs.core.IndexedSeq && xs.i === 0 ? xs.arr : function() {
    var arr = [];
    var xs__$1 = xs;
    while (true) {
      if (!(xs__$1 == null)) {
        arr.push(cljs.core._first(xs__$1));
        var G__2760 = cljs.core._next(xs__$1);
        xs__$1 = G__2760;
        continue;
      } else {
        return arr;
      }
      break;
    }
  }();
  var i = arr.length;
  var r = cljs.core.List.EMPTY;
  while (true) {
    if (i > 0) {
      var G__2761 = i - 1;
      var G__2762 = cljs.core._conj(r, arr[i - 1]);
      i = G__2761;
      r = G__2762;
      continue;
    } else {
      return r;
    }
    break;
  }
};
cljs.core.list.cljs$lang$maxFixedArity = 0;
cljs.core.list.cljs$lang$applyTo = function(seq2756) {
  var self__4724__auto__ = this;
  return self__4724__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq2756));
};
cljs.core.Cons = function(meta, first, rest, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 65929452;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Cons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.Cons.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Cons.prototype.indexOf = function() {
  var G__2763 = null;
  var G__2763__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
  };
  var G__2763__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__2763 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__2763__1.call(this, x);
      case 2:
        return G__2763__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__2763.cljs$core$IFn$_invoke$arity$1 = G__2763__1;
  G__2763.cljs$core$IFn$_invoke$arity$2 = G__2763__2;
  return G__2763;
}();
cljs.core.Cons.prototype.lastIndexOf = function() {
  var G__2764 = null;
  var G__2764__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, cljs.core.count(coll));
  };
  var G__2764__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__2764 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__2764__1.call(this, x);
      case 2:
        return G__2764__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__2764.cljs$core$IFn$_invoke$arity$1 = G__2764__1;
  G__2764.cljs$core$IFn$_invoke$arity$2 = G__2764__2;
  return G__2764;
}();
cljs.core.Cons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Cons.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Cons(self__.meta, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return null;
  } else {
    return cljs.core.seq(self__.rest);
  }
};
cljs.core.Cons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4238__auto__ = self__.__hash;
  if (!(h__4238__auto__ == null)) {
    return h__4238__auto__;
  } else {
    var h__4238__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4238__auto____$1;
    return h__4238__auto____$1;
  }
};
cljs.core.Cons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.Cons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.Cons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.Cons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.Cons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  if (new_meta === self__.meta) {
    return coll__$1;
  } else {
    return new cljs.core.Cons(new_meta, self__.first, self__.rest, self__.__hash);
  }
};
cljs.core.Cons.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(null, o, coll__$1, null);
};
cljs.core.Cons.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "first", "first", 996428481, null), new cljs.core.Symbol(null, "rest", "rest", 398835108, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.Cons.cljs$lang$type = true;
cljs.core.Cons.cljs$lang$ctorStr = "cljs.core/Cons";
cljs.core.Cons.cljs$lang$ctorPrWriter = function(this__4369__auto__, writer__4370__auto__, opt__4371__auto__) {
  return cljs.core._write(writer__4370__auto__, "cljs.core/Cons");
};
cljs.core.__GT_Cons = function cljs$core$__GT_Cons(meta, first, rest, __hash) {
  return new cljs.core.Cons(meta, first, rest, __hash);
};
goog.object.set(cljs.core.Cons.prototype, cljs.core.ITER_SYMBOL, function() {
  var this__4675__auto__ = this;
  return cljs.core.es6_iterator(this__4675__auto__);
});
cljs.core.cons = function cljs$core$cons(x, coll) {
  if (coll == null) {
    return new cljs.core.List(null, x, null, 1, null);
  } else {
    if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === coll.cljs$core$ISeq$ ? true : false : false) {
      return new cljs.core.Cons(null, x, coll, null);
    } else {
      return new cljs.core.Cons(null, x, cljs.core.seq(coll), null);
    }
  }
};
cljs.core.hash_keyword = function cljs$core$hash_keyword(k) {
  return cljs.core.hash_symbol(k) + 2654435769 | 0;
};
cljs.core.compare_keywords = function cljs$core$compare_keywords(a, b) {
  if (a.fqn === b.fqn) {
    return 0;
  } else {
    if (cljs.core.truth_(cljs.core.not(a.ns) ? b.ns : false)) {
      return -1;
    } else {
      if (cljs.core.truth_(a.ns)) {
        if (cljs.core.not(b.ns)) {
          return 1;
        } else {
          var nsc = goog.array.defaultCompare(a.ns, b.ns);
          if (0 === nsc) {
            return goog.array.defaultCompare(a.name, b.name);
          } else {
            return nsc;
          }
        }
      } else {
        return goog.array.defaultCompare(a.name, b.name);
      }
    }
  }
};
cljs.core.Keyword = function(ns, name, fqn, _hash) {
  this.ns = ns;
  this.name = name;
  this.fqn = fqn;
  this._hash = _hash;
  this.cljs$lang$protocol_mask$partition0$ = 2153775105;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Keyword.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return [":", cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.fqn)].join("");
};
cljs.core.Keyword.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Keyword.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Keyword) {
    return self__.fqn === other.fqn;
  } else {
    return false;
  }
};
cljs.core.Keyword.prototype.call = function() {
  var G__2767 = null;
  var G__2767__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll, kw);
  };
  var G__2767__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.cljs$core$IFn$_invoke$arity$3(coll, kw, not_found);
  };
  G__2767 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__2767__2.call(this, self__, coll);
      case 3:
        return G__2767__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__2767.cljs$core$IFn$_invoke$arity$2 = G__2767__2;
  G__2767.cljs$core$IFn$_invoke$arity$3 = G__2767__3;
  return G__2767;
}();
cljs.core.Keyword.prototype.apply = function(self__, args2766) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args2766)));
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll, kw);
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.cljs$core$IFn$_invoke$arity$3(coll, kw, not_found);
};
cljs.core.Keyword.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var h__4238__auto__ = self__._hash;
  if (!(h__4238__auto__ == null)) {
    return h__4238__auto__;
  } else {
    var h__4238__auto____$1 = cljs.core.hash_keyword(this$__$1);
    self__._hash = h__4238__auto____$1;
    return h__4238__auto____$1;
  }
};
cljs.core.Keyword.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Keyword.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Keyword.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write(writer, [":", cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.fqn)].join(""));
};
cljs.core.Keyword.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "ns", "ns", 2082130287, null), new cljs.core.Symbol(null, "name", "name", -810760592, null), new cljs.core.Symbol(null, "fqn", "fqn", -1749334463, null), cljs.core.with_meta(new cljs.core.Symbol(null, "_hash", "_hash", -2130838312, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.Keyword.cljs$lang$type = true;
cljs.core.Keyword.cljs$lang$ctorStr = "cljs.core/Keyword";
cljs.core.Keyword.cljs$lang$ctorPrWriter = function(this__4369__auto__, writer__4370__auto__, opt__4371__auto__) {
  return cljs.core._write(writer__4370__auto__, "cljs.core/Keyword");
};
cljs.core.__GT_Keyword = function cljs$core$__GT_Keyword(ns, name, fqn, _hash) {
  return new cljs.core.Keyword(ns, name, fqn, _hash);
};
cljs.core.keyword_QMARK_ = function cljs$core$keyword_QMARK_(x) {
  return x instanceof cljs.core.Keyword;
};
cljs.core.keyword_identical_QMARK_ = function cljs$core$keyword_identical_QMARK_(x, y) {
  if (x === y) {
    return true;
  } else {
    if (x instanceof cljs.core.Keyword && y instanceof cljs.core.Keyword) {
      return x.fqn === y.fqn;
    } else {
      return false;
    }
  }
};
cljs.core.symbol_identical_QMARK_ = function cljs$core$symbol_identical_QMARK_(x, y) {
  if (x === y) {
    return true;
  } else {
    if (x instanceof cljs.core.Symbol && y instanceof cljs.core.Symbol) {
      return x.str === y.str;
    } else {
      return false;
    }
  }
};
cljs.core.namespace = function cljs$core$namespace(x) {
  if (!(x == null) ? x.cljs$lang$protocol_mask$partition1$ & 4096 || cljs.core.PROTOCOL_SENTINEL === x.cljs$core$INamed$ ? true : false : false) {
    return x.cljs$core$INamed$_namespace$arity$1(null);
  } else {
    throw new Error(["Doesn't support namespace: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(x)].join(""));
  }
};
cljs.core.ident_QMARK_ = function cljs$core$ident_QMARK_(x) {
  return x instanceof cljs.core.Keyword || x instanceof cljs.core.Symbol;
};
cljs.core.simple_ident_QMARK_ = function cljs$core$simple_ident_QMARK_(x) {
  return cljs.core.ident_QMARK_(x) && cljs.core.namespace(x) == null;
};
cljs.core.qualified_ident_QMARK_ = function cljs$core$qualified_ident_QMARK_(x) {
  return cljs.core.boolean$(cljs.core.ident_QMARK_(x) ? function() {
    var and__4115__auto__ = cljs.core.namespace(x);
    if (cljs.core.truth_(and__4115__auto__)) {
      return true;
    } else {
      return and__4115__auto__;
    }
  }() : false);
};
cljs.core.simple_symbol_QMARK_ = function cljs$core$simple_symbol_QMARK_(x) {
  return x instanceof cljs.core.Symbol && cljs.core.namespace(x) == null;
};
cljs.core.qualified_symbol_QMARK_ = function cljs$core$qualified_symbol_QMARK_(x) {
  return cljs.core.boolean$(x instanceof cljs.core.Symbol ? function() {
    var and__4115__auto__ = cljs.core.namespace(x);
    if (cljs.core.truth_(and__4115__auto__)) {
      return true;
    } else {
      return and__4115__auto__;
    }
  }() : false);
};
cljs.core.simple_keyword_QMARK_ = function cljs$core$simple_keyword_QMARK_(x) {
  return x instanceof cljs.core.Keyword && cljs.core.namespace(x) == null;
};
cljs.core.qualified_keyword_QMARK_ = function cljs$core$qualified_keyword_QMARK_(x) {
  return cljs.core.boolean$(x instanceof cljs.core.Keyword ? function() {
    var and__4115__auto__ = cljs.core.namespace(x);
    if (cljs.core.truth_(and__4115__auto__)) {
      return true;
    } else {
      return and__4115__auto__;
    }
  }() : false);
};
cljs.core.keyword = function cljs$core$keyword(var_args) {
  var G__2770 = arguments.length;
  switch(G__2770) {
    case 1:
      return cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.keyword.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
cljs.core.keyword.cljs$core$IFn$_invoke$arity$1 = function(name) {
  if (name instanceof cljs.core.Keyword) {
    return name;
  } else {
    if (name instanceof cljs.core.Symbol) {
      return new cljs.core.Keyword(cljs.core.namespace(name), cljs.core.name(name), name.str, null);
    } else {
      if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2("/", name)) {
        return new cljs.core.Keyword(null, name, name, null);
      } else {
        if (typeof name === "string") {
          var parts = name.split("/");
          if (parts.length === 2) {
            return new cljs.core.Keyword(parts[0], parts[1], name, null);
          } else {
            return new cljs.core.Keyword(null, parts[0], name, null);
          }
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.keyword.cljs$core$IFn$_invoke$arity$2 = function(ns, name) {
  var ns__$1 = ns instanceof cljs.core.Keyword ? cljs.core.name(ns) : ns instanceof cljs.core.Symbol ? cljs.core.name(ns) : ns;
  var name__$1 = name instanceof cljs.core.Keyword ? cljs.core.name(name) : name instanceof cljs.core.Symbol ? cljs.core.name(name) : name;
  return new cljs.core.Keyword(ns__$1, name__$1, [cljs.core.truth_(ns__$1) ? [cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns__$1), "/"].join("") : null, cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__$1)].join(""), null);
};
cljs.core.keyword.cljs$lang$maxFixedArity = 2;
cljs.core.LazySeq = function(meta, fn, s, __hash) {
  this.meta = meta;
  this.fn = fn;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
  this.cljs$lang$protocol_mask$partition1$ = 1;
};
cljs.core.LazySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.LazySeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.LazySeq.prototype.sval = function() {
  var self__ = this;
  var coll = this;
  if (self__.fn == null) {
    return self__.s;
  } else {
    self__.s = self__.fn.cljs$core$IFn$_invoke$arity$0 ? self__.fn.cljs$core$IFn$_invoke$arity$0() : self__.fn.call(null);
    self__.fn = null;
    return self__.s;
  }
};
cljs.core.LazySeq.prototype.indexOf = function() {
  var G__2772 = null;
  var G__2772__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
  };
  var G__2772__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__2772 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__2772__1.call(this, x);
      case 2:
        return G__2772__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__2772.cljs$core$IFn$_invoke$arity$1 = G__2772__1;
  G__2772.cljs$core$IFn$_invoke$arity$2 = G__2772__2;
  return G__2772;
}();
cljs.core.LazySeq.prototype.lastIndexOf = function() {
  var G__2773 = null;
  var G__2773__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, cljs.core.count(coll));
  };
  var G__2773__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__2773 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__2773__1.call(this, x);
      case 2:
        return G__2773__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__2773.cljs$core$IFn$_invoke$arity$1 = G__2773__1;
  G__2773.cljs$core$IFn$_invoke$arity$2 = G__2773__2;
  return G__2773;
}();
cljs.core.LazySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.LazySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  coll__$1.cljs$core$ISeqable$_seq$arity$1(null);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.next(self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4238__auto__ = self__.__hash;
  if (!(h__4238__auto__ == null)) {
    return h__4238__auto__;
  } else {
    var h__4238__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4238__auto____$1;
    return h__4238__auto____$1;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.LazySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.LazySeq.prototype.cljs$core$IPending$_realized_QMARK_$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.not(self__.fn);
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  coll__$1.cljs$core$ISeqable$_seq$arity$1(null);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.first(self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  coll__$1.cljs$core$ISeqable$_seq$arity$1(null);
  if (!(self__.s == null)) {
    return cljs.core.rest(self__.s);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  coll__$1.sval();
  if (self__.s == null) {
    return null;
  } else {
    var ls = self__.s;
    while (true) {
      if (ls instanceof cljs.core.LazySeq) {
        var G__2774 = ls.sval();
        ls = G__2774;
        continue;
      } else {
        self__.s = ls;
        return cljs.core.seq(self__.s);
      }
      break;
    }
  }
};
cljs.core.LazySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  if (new_meta === self__.meta) {
    return coll__$1;
  } else {
    return new cljs.core.LazySeq(new_meta, function() {
      return coll__$1.cljs$core$ISeqable$_seq$arity$1(null);
    }, null, self__.__hash);
  }
};
cljs.core.LazySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.LazySeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), cljs.core.with_meta(new cljs.core.Symbol(null, "fn", "fn", 465265323, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "s", "s", -948495851, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", 
  "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.LazySeq.cljs$lang$type = true;
cljs.core.LazySeq.cljs$lang$ctorStr = "cljs.core/LazySeq";
cljs.core.LazySeq.cljs$lang$ctorPrWriter = function(this__4369__auto__, writer__4370__auto__, opt__4371__auto__) {
  return cljs.core._write(writer__4370__auto__, "cljs.core/LazySeq");
};
cljs.core.__GT_LazySeq = function cljs$core$__GT_LazySeq(meta, fn, s, __hash) {
  return new cljs.core.LazySeq(meta, fn, s, __hash);
};
goog.object.set(cljs.core.LazySeq.prototype, cljs.core.ITER_SYMBOL, function() {
  var this__4675__auto__ = this;
  return cljs.core.es6_iterator(this__4675__auto__);
});
cljs.core.ChunkBuffer = function(buf, end) {
  this.buf = buf;
  this.end = end;
  this.cljs$lang$protocol_mask$partition0$ = 2;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.ChunkBuffer.prototype.add = function(o) {
  var self__ = this;
  var _ = this;
  self__.buf[self__.end] = o;
  return self__.end = self__.end + 1;
};
cljs.core.ChunkBuffer.prototype.chunk = function() {
  var self__ = this;
  var _ = this;
  var ret = new cljs.core.ArrayChunk(self__.buf, 0, self__.end);
  self__.buf = null;
  return ret;
};
cljs.core.ChunkBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end;
};
cljs.core.ChunkBuffer.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "buf", "buf", 1426618187, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "end", "end", 1372345569, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.ChunkBuffer.cljs$lang$type = true;
cljs.core.ChunkBuffer.cljs$lang$ctorStr = "cljs.core/ChunkBuffer";
cljs.core.ChunkBuffer.cljs$lang$ctorPrWriter = function(this__4369__auto__, writer__4370__auto__, opt__4371__auto__) {
  return cljs.core._write(writer__4370__auto__, "cljs.core/ChunkBuffer");
};
cljs.core.__GT_ChunkBuffer = function cljs$core$__GT_ChunkBuffer(buf, end) {
  return new cljs.core.ChunkBuffer(buf, end);
};
cljs.core.chunk_buffer = function cljs$core$chunk_buffer(capacity) {
  return new cljs.core.ChunkBuffer(new Array(capacity), 0);
};
cljs.core.ArrayChunk = function(arr, off, end) {
  this.arr = arr;
  this.off = off;
  this.end = end;
  this.cljs$lang$protocol_mask$partition0$ = 524306;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.ArrayChunk.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end - self__.off;
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, i) {
  var self__ = this;
  var coll__$1 = this;
  return self__.arr[self__.off + i];
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, i, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (i >= 0 && i < self__.end - self__.off) {
    return self__.arr[self__.off + i];
  } else {
    return not_found;
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$_drop_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off === self__.end) {
    throw new Error("-drop-first of empty chunk");
  } else {
    return new cljs.core.ArrayChunk(self__.arr, self__.off + 1, self__.end);
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(self__.arr, f, self__.arr[self__.off], self__.off + 1);
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(self__.arr, f, start, self__.off);
};
cljs.core.ArrayChunk.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), new cljs.core.Symbol(null, "off", "off", -2047994980, null), new cljs.core.Symbol(null, "end", "end", 1372345569, null)], null);
};
cljs.core.ArrayChunk.cljs$lang$type = true;
cljs.core.ArrayChunk.cljs$lang$ctorStr = "cljs.core/ArrayChunk";
cljs.core.ArrayChunk.cljs$lang$ctorPrWriter = function(this__4369__auto__, writer__4370__auto__, opt__4371__auto__) {
  return cljs.core._write(writer__4370__auto__, "cljs.core/ArrayChunk");
};
cljs.core.__GT_ArrayChunk = function cljs$core$__GT_ArrayChunk(arr, off, end) {
  return new cljs.core.ArrayChunk(arr, off, end);
};
cljs.core.array_chunk = function cljs$core$array_chunk(var_args) {
  var G__2776 = arguments.length;
  switch(G__2776) {
    case 1:
      return cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$1 = function(arr) {
  return new cljs.core.ArrayChunk(arr, 0, arr.length);
};
cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$2 = function(arr, off) {
  return new cljs.core.ArrayChunk(arr, off, arr.length);
};
cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$3 = function(arr, off, end) {
  return new cljs.core.ArrayChunk(arr, off, end);
};
cljs.core.array_chunk.cljs$lang$maxFixedArity = 3;
cljs.core.ChunkedCons = function(chunk, more, meta, __hash) {
  this.chunk = chunk;
  this.more = more;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31850732;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedCons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ChunkedCons.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ChunkedCons.prototype.indexOf = function() {
  var G__2778 = null;
  var G__2778__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
  };
  var G__2778__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__2778 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__2778__1.call(this, x);
      case 2:
        return G__2778__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__2778.cljs$core$IFn$_invoke$arity$1 = G__2778__1;
  G__2778.cljs$core$IFn$_invoke$arity$2 = G__2778__2;
  return G__2778;
}();
cljs.core.ChunkedCons.prototype.lastIndexOf = function() {
  var G__2779 = null;
  var G__2779__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, cljs.core.count(coll));
  };
  var G__2779__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__2779 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__2779__1.call(this, x);
      case 2:
        return G__2779__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__2779.cljs$core$IFn$_invoke$arity$1 = G__2779__1;
  G__2779.cljs$core$IFn$_invoke$arity$2 = G__2779__2;
  return G__2779;
}();
cljs.core.ChunkedCons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedCons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count(self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first(self__.chunk), self__.more, null, null);
  } else {
    if (self__.more == null) {
      return null;
    } else {
      return cljs.core._seq(self__.more);
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4238__auto__ = self__.__hash;
  if (!(h__4238__auto__ == null)) {
    return h__4238__auto__;
  } else {
    var h__4238__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4238__auto____$1;
    return h__4238__auto____$1;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.ChunkedCons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.chunk, 0);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count(self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first(self__.chunk), self__.more, null, null);
  } else {
    if (self__.more == null) {
      return cljs.core.List.EMPTY;
    } else {
      return self__.more;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.chunk;
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.more;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  if (new_meta === self__.meta) {
    return coll__$1;
  } else {
    return new cljs.core.ChunkedCons(self__.chunk, self__.more, new_meta, self__.__hash);
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$ICollection$_conj$arity$2 = function(this$, o) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.cons(o, this$__$1);
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return null;
  } else {
    return self__.more;
  }
};
cljs.core.ChunkedCons.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "chunk", "chunk", 449371907, null), new cljs.core.Symbol(null, "more", "more", -418290273, null), new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.ChunkedCons.cljs$lang$type = true;
cljs.core.ChunkedCons.cljs$lang$ctorStr = "cljs.core/ChunkedCons";
cljs.core.ChunkedCons.cljs$lang$ctorPrWriter = function(this__4369__auto__, writer__4370__auto__, opt__4371__auto__) {
  return cljs.core._write(writer__4370__auto__, "cljs.core/ChunkedCons");
};
cljs.core.__GT_ChunkedCons = function cljs$core$__GT_ChunkedCons(chunk, more, meta, __hash) {
  return new cljs.core.ChunkedCons(chunk, more, meta, __hash);
};
goog.object.set(cljs.core.ChunkedCons.prototype, cljs.core.ITER_SYMBOL, function() {
  var this__4675__auto__ = this;
  return cljs.core.es6_iterator(this__4675__auto__);
});
cljs.core.chunk_cons = function cljs$core$chunk_cons(chunk, rest) {
  if (cljs.core._count(chunk) === 0) {
    return rest;
  } else {
    return new cljs.core.ChunkedCons(chunk, rest, null, null);
  }
};
cljs.core.chunk_append = function cljs$core$chunk_append(b, x) {
  return b.add(x);
};
cljs.core.chunk = function cljs$core$chunk(b) {
  return b.chunk();
};
cljs.core.chunk_first = function cljs$core$chunk_first(s) {
  return cljs.core._chunked_first(s);
};
cljs.core.chunk_rest = function cljs$core$chunk_rest(s) {
  return cljs.core._chunked_rest(s);
};
cljs.core.chunk_next = function cljs$core$chunk_next(s) {
  if (!(s == null) ? s.cljs$lang$protocol_mask$partition1$ & 1024 || cljs.core.PROTOCOL_SENTINEL === s.cljs$core$IChunkedNext$ ? true : false : false) {
    return s.cljs$core$IChunkedNext$_chunked_next$arity$1(null);
  } else {
    return cljs.core.seq(cljs.core._chunked_rest(s));
  }
};
cljs.core.to_array = function cljs$core$to_array(coll) {
  var ary = [];
  var s = cljs.core.seq(coll);
  while (true) {
    if (!(s == null)) {
      ary.push(cljs.core.first(s));
      var G__2781 = cljs.core.next(s);
      s = G__2781;
      continue;
    } else {
      return ary;
    }
    break;
  }
};
cljs.core.to_array_2d = function cljs$core$to_array_2d(coll) {
  var ret = new Array(cljs.core.count(coll));
  var i_2782 = 0;
  var xs_2783 = cljs.core.seq(coll);
  while (true) {
    if (xs_2783 == null) {
    } else {
      ret[i_2782] = cljs.core.to_array(cljs.core.first(xs_2783));
      var G__2784 = i_2782 + 1;
      var G__2785 = cljs.core.next(xs_2783);
      i_2782 = G__2784;
      xs_2783 = G__2785;
      continue;
    }
    break;
  }
  return ret;
};
cljs.core.int_array = function cljs$core$int_array(var_args) {
  var G__2787 = arguments.length;
  switch(G__2787) {
    case 1:
      return cljs.core.int_array.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.int_array.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
cljs.core.int_array.cljs$core$IFn$_invoke$arity$1 = function(size_or_seq) {
  if (typeof size_or_seq === "number") {
    return cljs.core.int_array.cljs$core$IFn$_invoke$arity$2(size_or_seq, null);
  } else {
    return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(size_or_seq);
  }
};
cljs.core.int_array.cljs$core$IFn$_invoke$arity$2 = function(size, init_val_or_seq) {
  var a = new Array(size);
  if (cljs.core.seq_QMARK_(init_val_or_seq)) {
    var s = cljs.core.seq(init_val_or_seq);
    var i = 0;
    var s__$1 = s;
    while (true) {
      if (s__$1 && i < size) {
        a[i] = cljs.core.first(s__$1);
        var G__2789 = i + 1;
        var G__2790 = cljs.core.next(s__$1);
        i = G__2789;
        s__$1 = G__2790;
        continue;
      } else {
        return a;
      }
      break;
    }
  } else {
    var n__4613__auto___2791 = size;
    var i_2792 = 0;
    while (true) {
      if (i_2792 < n__4613__auto___2791) {
        a[i_2792] = init_val_or_seq;
        var G__2793 = i_2792 + 1;
        i_2792 = G__2793;
        continue;
      } else {
      }
      break;
    }
    return a;
  }
};
cljs.core.int_array.cljs$lang$maxFixedArity = 2;
cljs.core.long_array = function cljs$core$long_array(var_args) {
  var G__2795 = arguments.length;
  switch(G__2795) {
    case 1:
      return cljs.core.long_array.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.long_array.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
cljs.core.long_array.cljs$core$IFn$_invoke$arity$1 = function(size_or_seq) {
  if (typeof size_or_seq === "number") {
    return cljs.core.long_array.cljs$core$IFn$_invoke$arity$2(size_or_seq, null);
  } else {
    return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(size_or_seq);
  }
};
cljs.core.long_array.cljs$core$IFn$_invoke$arity$2 = function(size, init_val_or_seq) {
  var a = new Array(size);
  if (cljs.core.seq_QMARK_(init_val_or_seq)) {
    var s = cljs.core.seq(init_val_or_seq);
    var i = 0;
    var s__$1 = s;
    while (true) {
      if (s__$1 && i < size) {
        a[i] = cljs.core.first(s__$1);
        var G__2797 = i + 1;
        var G__2798 = cljs.core.next(s__$1);
        i = G__2797;
        s__$1 = G__2798;
        continue;
      } else {
        return a;
      }
      break;
    }
  } else {
    var n__4613__auto___2799 = size;
    var i_2800 = 0;
    while (true) {
      if (i_2800 < n__4613__auto___2799) {
        a[i_2800] = init_val_or_seq;
        var G__2801 = i_2800 + 1;
        i_2800 = G__2801;
        continue;
      } else {
      }
      break;
    }
    return a;
  }
};
cljs.core.long_array.cljs$lang$maxFixedArity = 2;
cljs.core.double_array = function cljs$core$double_array(var_args) {
  var G__2803 = arguments.length;
  switch(G__2803) {
    case 1:
      return cljs.core.double_array.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.double_array.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
cljs.core.double_array.cljs$core$IFn$_invoke$arity$1 = function(size_or_seq) {
  if (typeof size_or_seq === "number") {
    return cljs.core.double_array.cljs$core$IFn$_invoke$arity$2(size_or_seq, null);
  } else {
    return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(size_or_seq);
  }
};
cljs.core.double_array.cljs$core$IFn$_invoke$arity$2 = function(size, init_val_or_seq) {
  var a = new Array(size);
  if (cljs.core.seq_QMARK_(init_val_or_seq)) {
    var s = cljs.core.seq(init_val_or_seq);
    var i = 0;
    var s__$1 = s;
    while (true) {
      if (s__$1 && i < size) {
        a[i] = cljs.core.first(s__$1);
        var G__2805 = i + 1;
        var G__2806 = cljs.core.next(s__$1);
        i = G__2805;
        s__$1 = G__2806;
        continue;
      } else {
        return a;
      }
      break;
    }
  } else {
    var n__4613__auto___2807 = size;
    var i_2808 = 0;
    while (true) {
      if (i_2808 < n__4613__auto___2807) {
        a[i_2808] = init_val_or_seq;
        var G__2809 = i_2808 + 1;
        i_2808 = G__2809;
        continue;
      } else {
      }
      break;
    }
    return a;
  }
};
cljs.core.double_array.cljs$lang$maxFixedArity = 2;
cljs.core.object_array = function cljs$core$object_array(var_args) {
  var G__2811 = arguments.length;
  switch(G__2811) {
    case 1:
      return cljs.core.object_array.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.object_array.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
cljs.core.object_array.cljs$core$IFn$_invoke$arity$1 = function(size_or_seq) {
  if (typeof size_or_seq === "number") {
    return cljs.core.object_array.cljs$core$IFn$_invoke$arity$2(size_or_seq, null);
  } else {
    return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(size_or_seq);
  }
};
cljs.core.object_array.cljs$core$IFn$_invoke$arity$2 = function(size, init_val_or_seq) {
  var a = new Array(size);
  if (cljs.core.seq_QMARK_(init_val_or_seq)) {
    var s = cljs.core.seq(init_val_or_seq);
    var i = 0;
    var s__$1 = s;
    while (true) {
      if (s__$1 && i < size) {
        a[i] = cljs.core.first(s__$1);
        var G__2813 = i + 1;
        var G__2814 = cljs.core.next(s__$1);
        i = G__2813;
        s__$1 = G__2814;
        continue;
      } else {
        return a;
      }
      break;
    }
  } else {
    var n__4613__auto___2815 = size;
    var i_2816 = 0;
    while (true) {
      if (i_2816 < n__4613__auto___2815) {
        a[i_2816] = init_val_or_seq;
        var G__2817 = i_2816 + 1;
        i_2816 = G__2817;
        continue;
      } else {
      }
      break;
    }
    return a;
  }
};
cljs.core.object_array.cljs$lang$maxFixedArity = 2;
cljs.core.bounded_count = function cljs$core$bounded_count(n, coll) {
  if (cljs.core.counted_QMARK_(coll)) {
    return cljs.core.count(coll);
  } else {
    var i = 0;
    var s = cljs.core.seq(coll);
    while (true) {
      if (!(s == null) && i < n) {
        var G__2818 = i + 1;
        var G__2819 = cljs.core.next(s);
        i = G__2818;
        s = G__2819;
        continue;
      } else {
        return i;
      }
      break;
    }
  }
};
cljs.core.spread = function cljs$core$spread(arglist) {
  if (arglist == null) {
    return null;
  } else {
    var n = cljs.core.next(arglist);
    if (n == null) {
      return cljs.core.seq(cljs.core.first(arglist));
    } else {
      return cljs.core.cons(cljs.core.first(arglist), cljs.core.spread.cljs$core$IFn$_invoke$arity$1 ? cljs.core.spread.cljs$core$IFn$_invoke$arity$1(n) : cljs.core.spread.call(null, n));
    }
  }
};
cljs.core.concat = function cljs$core$concat(var_args) {
  var G__2824 = arguments.length;
  switch(G__2824) {
    case 0:
      return cljs.core.concat.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.concat.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.concat.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var args_arr__4757__auto__ = [];
      var len__4736__auto___2826 = arguments.length;
      var i__4737__auto___2827 = 0;
      while (true) {
        if (i__4737__auto___2827 < len__4736__auto___2826) {
          args_arr__4757__auto__.push(arguments[i__4737__auto___2827]);
          var G__2828 = i__4737__auto___2827 + 1;
          i__4737__auto___2827 = G__2828;
          continue;
        } else {
        }
        break;
      }
      var argseq__4758__auto__ = new cljs.core.IndexedSeq(args_arr__4757__auto__.slice(2), 0, null);
      return cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__4758__auto__);
  }
};
cljs.core.concat.cljs$core$IFn$_invoke$arity$0 = function() {
  return new cljs.core.LazySeq(null, function() {
    return null;
  }, null, null);
};
cljs.core.concat.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return new cljs.core.LazySeq(null, function() {
    return x;
  }, null, null);
};
cljs.core.concat.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return new cljs.core.LazySeq(null, function() {
    var s = cljs.core.seq(x);
    if (s) {
      if (cljs.core.chunked_seq_QMARK_(s)) {
        return cljs.core.chunk_cons(cljs.core.chunk_first(s), cljs.core.concat.cljs$core$IFn$_invoke$arity$2(cljs.core.chunk_rest(s), y));
      } else {
        return cljs.core.cons(cljs.core.first(s), cljs.core.concat.cljs$core$IFn$_invoke$arity$2(cljs.core.rest(s), y));
      }
    } else {
      return y;
    }
  }, null, null);
};
cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic = function(x, y, zs) {
  var cat = function cljs$core$cat(xys, zs__$1) {
    return new cljs.core.LazySeq(null, function() {
      var xys__$1 = cljs.core.seq(xys);
      if (xys__$1) {
        if (cljs.core.chunked_seq_QMARK_(xys__$1)) {
          return cljs.core.chunk_cons(cljs.core.chunk_first(xys__$1), cljs$core$cat(cljs.core.chunk_rest(xys__$1), zs__$1));
        } else {
          return cljs.core.cons(cljs.core.first(xys__$1), cljs$core$cat(cljs.core.rest(xys__$1), zs__$1));
        }
      } else {
        if (cljs.core.truth_(zs__$1)) {
          return cljs$core$cat(cljs.core.first(zs__$1), cljs.core.next(zs__$1));
        } else {
          return null;
        }
      }
    }, null, null);
  };
  return cat(cljs.core.concat.cljs$core$IFn$_invoke$arity$2(x, y), zs);
};
cljs.core.concat.cljs$lang$applyTo = function(seq2821) {
  var G__2822 = cljs.core.first(seq2821);
  var seq2821__$1 = cljs.core.next(seq2821);
  var G__2823 = cljs.core.first(seq2821__$1);
  var seq2821__$2 = cljs.core.next(seq2821__$1);
  var self__4723__auto__ = this;
  return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__2822, G__2823, seq2821__$2);
};
cljs.core.concat.cljs$lang$maxFixedArity = 2;
cljs.core.list_STAR_ = function cljs$core$list_STAR_(var_args) {
  var G__2835 = arguments.length;
  switch(G__2835) {
    case 1:
      return cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      var args_arr__4757__auto__ = [];
      var len__4736__auto___2837 = arguments.length;
      var i__4737__auto___2838 = 0;
      while (true) {
        if (i__4737__auto___2838 < len__4736__auto___2837) {
          args_arr__4757__auto__.push(arguments[i__4737__auto___2838]);
          var G__2839 = i__4737__auto___2838 + 1;
          i__4737__auto___2838 = G__2839;
          continue;
        } else {
        }
        break;
      }
      var argseq__4758__auto__ = new cljs.core.IndexedSeq(args_arr__4757__auto__.slice(4), 0, null);
      return cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], argseq__4758__auto__);
  }
};
cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$1 = function(args) {
  return cljs.core.seq(args);
};
cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$2 = function(a, args) {
  return cljs.core.cons(a, args);
};
cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$3 = function(a, b, args) {
  return cljs.core.cons(a, cljs.core.cons(b, args));
};
cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, args) {
  return cljs.core.cons(a, cljs.core.cons(b, cljs.core.cons(c, args)));
};
cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$variadic = function(a, b, c, d, more) {
  return cljs.core.cons(a, cljs.core.cons(b, cljs.core.cons(c, cljs.core.cons(d, cljs.core.spread(more)))));
};
cljs.core.list_STAR_.cljs$lang$applyTo = function(seq2830) {
  var G__2831 = cljs.core.first(seq2830);
  var seq2830__$1 = cljs.core.next(seq2830);
  var G__2832 = cljs.core.first(seq2830__$1);
  var seq2830__$2 = cljs.core.next(seq2830__$1);
  var G__2833 = cljs.core.first(seq2830__$2);
  var seq2830__$3 = cljs.core.next(seq2830__$2);
  var G__2834 = cljs.core.first(seq2830__$3);
  var seq2830__$4 = cljs.core.next(seq2830__$3);
  var self__4723__auto__ = this;
  return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__2831, G__2832, G__2833, G__2834, seq2830__$4);
};
cljs.core.list_STAR_.cljs$lang$maxFixedArity = 4;
cljs.core.transient$ = function cljs$core$transient(coll) {
  return cljs.core._as_transient(coll);
};
cljs.core.persistent_BANG_ = function cljs$core$persistent_BANG_(tcoll) {
  return cljs.core._persistent_BANG_(tcoll);
};
cljs.core.conj_BANG_ = function cljs$core$conj_BANG_(var_args) {
  var G__2844 = arguments.length;
  switch(G__2844) {
    case 0:
      return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var args_arr__4757__auto__ = [];
      var len__4736__auto___2846 = arguments.length;
      var i__4737__auto___2847 = 0;
      while (true) {
        if (i__4737__auto___2847 < len__4736__auto___2846) {
          args_arr__4757__auto__.push(arguments[i__4737__auto___2847]);
          var G__2848 = i__4737__auto___2847 + 1;
          i__4737__auto___2847 = G__2848;
          continue;
        } else {
        }
        break;
      }
      var argseq__4758__auto__ = new cljs.core.IndexedSeq(args_arr__4757__auto__.slice(2), 0, null);
      return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__4758__auto__);
  }
};
cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.transient$(cljs.core.PersistentVector.EMPTY);
};
cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$1 = function(tcoll) {
  return tcoll;
};
cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2 = function(tcoll, val) {
  return cljs.core._conj_BANG_(tcoll, val);
};
cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(tcoll, val, vals) {
  while (true) {
    var ntcoll = cljs.core._conj_BANG_(tcoll, val);
    if (cljs.core.truth_(vals)) {
      var G__2849 = ntcoll;
      var G__2850 = cljs.core.first(vals);
      var G__2851 = cljs.core.next(vals);
      tcoll = G__2849;
      val = G__2850;
      vals = G__2851;
      continue;
    } else {
      return ntcoll;
    }
    break;
  }
};
cljs.core.conj_BANG_.cljs$lang$applyTo = function(seq2841) {
  var G__2842 = cljs.core.first(seq2841);
  var seq2841__$1 = cljs.core.next(seq2841);
  var G__2843 = cljs.core.first(seq2841__$1);
  var seq2841__$2 = cljs.core.next(seq2841__$1);
  var self__4723__auto__ = this;
  return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__2842, G__2843, seq2841__$2);
};
cljs.core.conj_BANG_.cljs$lang$maxFixedArity = 2;
cljs.core.assoc_BANG_ = function cljs$core$assoc_BANG_(var_args) {
  var G__2857 = arguments.length;
  switch(G__2857) {
    case 3:
      return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var args_arr__4757__auto__ = [];
      var len__4736__auto___2859 = arguments.length;
      var i__4737__auto___2860 = 0;
      while (true) {
        if (i__4737__auto___2860 < len__4736__auto___2859) {
          args_arr__4757__auto__.push(arguments[i__4737__auto___2860]);
          var G__2861 = i__4737__auto___2860 + 1;
          i__4737__auto___2860 = G__2861;
          continue;
        } else {
        }
        break;
      }
      var argseq__4758__auto__ = new cljs.core.IndexedSeq(args_arr__4757__auto__.slice(3), 0, null);
      return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__4758__auto__);
  }
};
cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3 = function(tcoll, key, val) {
  return cljs.core._assoc_BANG_(tcoll, key, val);
};
cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(tcoll, key, val, kvs) {
  while (true) {
    var ntcoll = cljs.core._assoc_BANG_(tcoll, key, val);
    if (cljs.core.truth_(kvs)) {
      var G__2862 = ntcoll;
      var G__2863 = cljs.core.first(kvs);
      var G__2864 = cljs.core.second(kvs);
      var G__2865 = cljs.core.nnext(kvs);
      tcoll = G__2862;
      key = G__2863;
      val = G__2864;
      kvs = G__2865;
      continue;
    } else {
      return ntcoll;
    }
    break;
  }
};
cljs.core.assoc_BANG_.cljs$lang$applyTo = function(seq2853) {
  var G__2854 = cljs.core.first(seq2853);
  var seq2853__$1 = cljs.core.next(seq2853);
  var G__2855 = cljs.core.first(seq2853__$1);
  var seq2853__$2 = cljs.core.next(seq2853__$1);
  var G__2856 = cljs.core.first(seq2853__$2);
  var seq2853__$3 = cljs.core.next(seq2853__$2);
  var self__4723__auto__ = this;
  return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__2854, G__2855, G__2856, seq2853__$3);
};
cljs.core.assoc_BANG_.cljs$lang$maxFixedArity = 3;
cljs.core.dissoc_BANG_ = function cljs$core$dissoc_BANG_(var_args) {
  var G__2870 = arguments.length;
  switch(G__2870) {
    case 2:
      return cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var args_arr__4757__auto__ = [];
      var len__4736__auto___2872 = arguments.length;
      var i__4737__auto___2873 = 0;
      while (true) {
        if (i__4737__auto___2873 < len__4736__auto___2872) {
          args_arr__4757__auto__.push(arguments[i__4737__auto___2873]);
          var G__2874 = i__4737__auto___2873 + 1;
          i__4737__auto___2873 = G__2874;
          continue;
        } else {
        }
        break;
      }
      var argseq__4758__auto__ = new cljs.core.IndexedSeq(args_arr__4757__auto__.slice(2), 0, null);
      return cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__4758__auto__);
  }
};
cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$2 = function(tcoll, key) {
  return cljs.core._dissoc_BANG_(tcoll, key);
};
cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(tcoll, key, ks) {
  while (true) {
    var ntcoll = cljs.core._dissoc_BANG_(tcoll, key);
    if (cljs.core.truth_(ks)) {
      var G__2875 = ntcoll;
      var G__2876 = cljs.core.first(ks);
      var G__2877 = cljs.core.next(ks);
      tcoll = G__2875;
      key = G__2876;
      ks = G__2877;
      continue;
    } else {
      return ntcoll;
    }
    break;
  }
};
cljs.core.dissoc_BANG_.cljs$lang$applyTo = function(seq2867) {
  var G__2868 = cljs.core.first(seq2867);
  var seq2867__$1 = cljs.core.next(seq2867);
  var G__2869 = cljs.core.first(seq2867__$1);
  var seq2867__$2 = cljs.core.next(seq2867__$1);
  var self__4723__auto__ = this;
  return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__2868, G__2869, seq2867__$2);
};
cljs.core.dissoc_BANG_.cljs$lang$maxFixedArity = 2;
cljs.core.pop_BANG_ = function cljs$core$pop_BANG_(tcoll) {
  return cljs.core._pop_BANG_(tcoll);
};
cljs.core.disj_BANG_ = function cljs$core$disj_BANG_(var_args) {
  var G__2882 = arguments.length;
  switch(G__2882) {
    case 2:
      return cljs.core.disj_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var args_arr__4757__auto__ = [];
      var len__4736__auto___2884 = arguments.length;
      var i__4737__auto___2885 = 0;
      while (true) {
        if (i__4737__auto___2885 < len__4736__auto___2884) {
          args_arr__4757__auto__.push(arguments[i__4737__auto___2885]);
          var G__2886 = i__4737__auto___2885 + 1;
          i__4737__auto___2885 = G__2886;
          continue;
        } else {
        }
        break;
      }
      var argseq__4758__auto__ = new cljs.core.IndexedSeq(args_arr__4757__auto__.slice(2), 0, null);
      return cljs.core.disj_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__4758__auto__);
  }
};
cljs.core.disj_BANG_.cljs$core$IFn$_invoke$arity$2 = function(tcoll, val) {
  return cljs.core._disjoin_BANG_(tcoll, val);
};
cljs.core.disj_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(tcoll, val, vals) {
  while (true) {
    var ntcoll = cljs.core._disjoin_BANG_(tcoll, val);
    if (cljs.core.truth_(vals)) {
      var G__2887 = ntcoll;
      var G__2888 = cljs.core.first(vals);
      var G__2889 = cljs.core.next(vals);
      tcoll = G__2887;
      val = G__2888;
      vals = G__2889;
      continue;
    } else {
      return ntcoll;
    }
    break;
  }
};
cljs.core.disj_BANG_.cljs$lang$applyTo = function(seq2879) {
  var G__2880 = cljs.core.first(seq2879);
  var seq2879__$1 = cljs.core.next(seq2879);
  var G__2881 = cljs.core.first(seq2879__$1);
  var seq2879__$2 = cljs.core.next(seq2879__$1);
  var self__4723__auto__ = this;
  return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__2880, G__2881, seq2879__$2);
};
cljs.core.disj_BANG_.cljs$lang$maxFixedArity = 2;
cljs.core.apply_to = function cljs$core$apply_to(f, argc, args) {
  var args__$1 = cljs.core.seq(args);
  if (argc === 0) {
    return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
  } else {
    var a254 = cljs.core._first(args__$1);
    var args__$2 = cljs.core._rest(args__$1);
    if (argc === 1) {
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(a254) : f.call(null, a254);
    } else {
      var b255 = cljs.core._first(args__$2);
      var args__$3 = cljs.core._rest(args__$2);
      if (argc === 2) {
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(a254, b255) : f.call(null, a254, b255);
      } else {
        var c256 = cljs.core._first(args__$3);
        var args__$4 = cljs.core._rest(args__$3);
        if (argc === 3) {
          return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(a254, b255, c256) : f.call(null, a254, b255, c256);
        } else {
          var d257 = cljs.core._first(args__$4);
          var args__$5 = cljs.core._rest(args__$4);
          if (argc === 4) {
            return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(a254, b255, c256, d257) : f.call(null, a254, b255, c256, d257);
          } else {
            var e258 = cljs.core._first(args__$5);
            var args__$6 = cljs.core._rest(args__$5);
            if (argc === 5) {
              return f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(a254, b255, c256, d257, e258) : f.call(null, a254, b255, c256, d257, e258);
            } else {
              var f259 = cljs.core._first(args__$6);
              var args__$7 = cljs.core._rest(args__$6);
              if (argc === 6) {
                return f.cljs$core$IFn$_invoke$arity$6 ? f.cljs$core$IFn$_invoke$arity$6(a254, b255, c256, d257, e258, f259) : f.call(null, a254, b255, c256, d257, e258, f259);
              } else {
                var g260 = cljs.core._first(args__$7);
                var args__$8 = cljs.core._rest(args__$7);
                if (argc === 7) {
                  return f.cljs$core$IFn$_invoke$arity$7 ? f.cljs$core$IFn$_invoke$arity$7(a254, b255, c256, d257, e258, f259, g260) : f.call(null, a254, b255, c256, d257, e258, f259, g260);
                } else {
                  var h261 = cljs.core._first(args__$8);
                  var args__$9 = cljs.core._rest(args__$8);
                  if (argc === 8) {
                    return f.cljs$core$IFn$_invoke$arity$8 ? f.cljs$core$IFn$_invoke$arity$8(a254, b255, c256, d257, e258, f259, g260, h261) : f.call(null, a254, b255, c256, d257, e258, f259, g260, h261);
                  } else {
                    var i262 = cljs.core._first(args__$9);
                    var args__$10 = cljs.core._rest(args__$9);
                    if (argc === 9) {
                      return f.cljs$core$IFn$_invoke$arity$9 ? f.cljs$core$IFn$_invoke$arity$9(a254, b255, c256, d257, e258, f259, g260, h261, i262) : f.call(null, a254, b255, c256, d257, e258, f259, g260, h261, i262);
                    } else {
                      var j263 = cljs.core._first(args__$10);
                      var args__$11 = cljs.core._rest(args__$10);
                      if (argc === 10) {
                        return f.cljs$core$IFn$_invoke$arity$10 ? f.cljs$core$IFn$_invoke$arity$10(a254, b255, c256, d257, e258, f259, g260, h261, i262, j263) : f.call(null, a254, b255, c256, d257, e258, f259, g260, h261, i262, j263);
                      } else {
                        var k264 = cljs.core._first(args__$11);
                        var args__$12 = cljs.core._rest(args__$11);
                        if (argc === 11) {
                          return f.cljs$core$IFn$_invoke$arity$11 ? f.cljs$core$IFn$_invoke$arity$11(a254, b255, c256, d257, e258, f259, g260, h261, i262, j263, k264) : f.call(null, a254, b255, c256, d257, e258, f259, g260, h261, i262, j263, k264);
                        } else {
                          var l265 = cljs.core._first(args__$12);
                          var args__$13 = cljs.core._rest(args__$12);
                          if (argc === 12) {
                            return f.cljs$core$IFn$_invoke$arity$12 ? f.cljs$core$IFn$_invoke$arity$12(a254, b255, c256, d257, e258, f259, g260, h261, i262, j263, k264, l265) : f.call(null, a254, b255, c256, d257, e258, f259, g260, h261, i262, j263, k264, l265);
                          } else {
                            var m266 = cljs.core._first(args__$13);
                            var args__$14 = cljs.core._rest(args__$13);
                            if (argc === 13) {
                              return f.cljs$core$IFn$_invoke$arity$13 ? f.cljs$core$IFn$_invoke$arity$13(a254, b255, c256, d257, e258, f259, g260, h261, i262, j263, k264, l265, m266) : f.call(null, a254, b255, c256, d257, e258, f259, g260, h261, i262, j263, k264, l265, m266);
                            } else {
                              var n267 = cljs.core._first(args__$14);
                              var args__$15 = cljs.core._rest(args__$14);
                              if (argc === 14) {
                                return f.cljs$core$IFn$_invoke$arity$14 ? f.cljs$core$IFn$_invoke$arity$14(a254, b255, c256, d257, e258, f259, g260, h261, i262, j263, k264, l265, m266, n267) : f.call(null, a254, b255, c256, d257, e258, f259, g260, h261, i262, j263, k264, l265, m266, n267);
                              } else {
                                var o268 = cljs.core._first(args__$15);
                                var args__$16 = cljs.core._rest(args__$15);
                                if (argc === 15) {
                                  return f.cljs$core$IFn$_invoke$arity$15 ? f.cljs$core$IFn$_invoke$arity$15(a254, b255, c256, d257, e258, f259, g260, h261, i262, j263, k264, l265, m266, n267, o268) : f.call(null, a254, b255, c256, d257, e258, f259, g260, h261, i262, j263, k264, l265, m266, n267, o268);
                                } else {
                                  var p269 = cljs.core._first(args__$16);
                                  var args__$17 = cljs.core._rest(args__$16);
                                  if (argc === 16) {
                                    return f.cljs$core$IFn$_invoke$arity$16 ? f.cljs$core$IFn$_invoke$arity$16(a254, b255, c256, d257, e258, f259, g260, h261, i262, j263, k264, l265, m266, n267, o268, p269) : f.call(null, a254, b255, c256, d257, e258, f259, g260, h261, i262, j263, k264, l265, m266, n267, o268, p269);
                                  } else {
                                    var q270 = cljs.core._first(args__$17);
                                    var args__$18 = cljs.core._rest(args__$17);
                                    if (argc === 17) {
                                      return f.cljs$core$IFn$_invoke$arity$17 ? f.cljs$core$IFn$_invoke$arity$17(a254, b255, c256, d257, e258, f259, g260, h261, i262, j263, k264, l265, m266, n267, o268, p269, q270) : f.call(null, a254, b255, c256, d257, e258, f259, g260, h261, i262, j263, k264, l265, m266, n267, o268, p269, q270);
                                    } else {
                                      var r271 = cljs.core._first(args__$18);
                                      var args__$19 = cljs.core._rest(args__$18);
                                      if (argc === 18) {
                                        return f.cljs$core$IFn$_invoke$arity$18 ? f.cljs$core$IFn$_invoke$arity$18(a254, b255, c256, d257, e258, f259, g260, h261, i262, j263, k264, l265, m266, n267, o268, p269, q270, r271) : f.call(null, a254, b255, c256, d257, e258, f259, g260, h261, i262, j263, k264, l265, m266, n267, o268, p269, q270, r271);
                                      } else {
                                        var s272 = cljs.core._first(args__$19);
                                        var args__$20 = cljs.core._rest(args__$19);
                                        if (argc === 19) {
                                          return f.cljs$core$IFn$_invoke$arity$19 ? f.cljs$core$IFn$_invoke$arity$19(a254, b255, c256, d257, e258, f259, g260, h261, i262, j263, k264, l265, m266, n267, o268, p269, q270, r271, s272) : f.call(null, a254, b255, c256, d257, e258, f259, g260, h261, i262, j263, k264, l265, m266, n267, o268, p269, q270, r271, s272);
                                        } else {
                                          var t273 = cljs.core._first(args__$20);
                                          var args__$21 = cljs.core._rest(args__$20);
                                          if (argc === 20) {
                                            return f.cljs$core$IFn$_invoke$arity$20 ? f.cljs$core$IFn$_invoke$arity$20(a254, b255, c256, d257, e258, f259, g260, h261, i262, j263, k264, l265, m266, n267, o268, p269, q270, r271, s272, t273) : f.call(null, a254, b255, c256, d257, e258, f259, g260, h261, i262, j263, k264, l265, m266, n267, o268, p269, q270, r271, s272, t273);
                                          } else {
                                            throw new Error("Only up to 20 arguments supported on functions");
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.next_STAR_ = function cljs$core$next_STAR_(coll) {
  if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 128 || cljs.core.PROTOCOL_SENTINEL === coll.cljs$core$INext$ ? true : false : false) {
    return coll.cljs$core$INext$_next$arity$1(null);
  } else {
    return cljs.core.seq(cljs.core.rest(coll));
  }
};
cljs.core.apply_to_simple = function cljs$core$apply_to_simple(var_args) {
  var G__2892 = arguments.length;
  switch(G__2892) {
    case 2:
      return cljs.core.apply_to_simple.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.apply_to_simple.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.apply_to_simple.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core.apply_to_simple.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    case 6:
      return cljs.core.apply_to_simple.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
cljs.core.apply_to_simple.cljs$core$IFn$_invoke$arity$2 = function(f, args) {
  if (args == null) {
    if (f.cljs$core$IFn$_invoke$arity$0) {
      return f.cljs$core$IFn$_invoke$arity$0();
    } else {
      return f.call(f);
    }
  } else {
    return cljs.core.apply_to_simple.cljs$core$IFn$_invoke$arity$3(f, cljs.core._first(args), cljs.core.next_STAR_(args));
  }
};
cljs.core.apply_to_simple.cljs$core$IFn$_invoke$arity$3 = function(f, a0, args) {
  if (args == null) {
    if (f.cljs$core$IFn$_invoke$arity$1) {
      return f.cljs$core$IFn$_invoke$arity$1(a0);
    } else {
      return f.call(f, a0);
    }
  } else {
    return cljs.core.apply_to_simple.cljs$core$IFn$_invoke$arity$4(f, a0, cljs.core._first(args), cljs.core.next_STAR_(args));
  }
};
cljs.core.apply_to_simple.cljs$core$IFn$_invoke$arity$4 = function(f, a0, a1, args) {
  if (args == null) {
    if (f.cljs$core$IFn$_invoke$arity$2) {
      return f.cljs$core$IFn$_invoke$arity$2(a0, a1);
    } else {
      return f.call(f, a0, a1);
    }
  } else {
    return cljs.core.apply_to_simple.cljs$core$IFn$_invoke$arity$5(f, a0, a1, cljs.core._first(args), cljs.core.next_STAR_(args));
  }
};
cljs.core.apply_to_simple.cljs$core$IFn$_invoke$arity$5 = function(f, a0, a1, a2, args) {
  if (args == null) {
    if (f.cljs$core$IFn$_invoke$arity$3) {
      return f.cljs$core$IFn$_invoke$arity$3(a0, a1, a2);
    } else {
      return f.call(f, a0, a1, a2);
    }
  } else {
    return cljs.core.apply_to_simple.cljs$core$IFn$_invoke$arity$6(f, a0, a1, a2, cljs.core._first(args), cljs.core.next_STAR_(args));
  }
};
cljs.core.apply_to_simple.cljs$core$IFn$_invoke$arity$6 = function(f, a0, a1, a2, a3, args) {
  if (args == null) {
    if (f.cljs$core$IFn$_invoke$arity$4) {
      return f.cljs$core$IFn$_invoke$arity$4(a0, a1, a2, a3);
    } else {
      return f.call(f, a0, a1, a2, a3);
    }
  } else {
    var a4 = cljs.core._first(args);
    var next_4 = cljs.core.next(args);
    if (next_4 == null) {
      if (f.cljs$core$IFn$_invoke$arity$5) {
        return f.cljs$core$IFn$_invoke$arity$5(a0, a1, a2, a3, a4);
      } else {
        return f.call(f, a0, a1, a2, a3, a4);
      }
    } else {
      var a5 = cljs.core._first(next_4);
      var next_5 = cljs.core.next(next_4);
      if (next_5 == null) {
        if (f.cljs$core$IFn$_invoke$arity$6) {
          return f.cljs$core$IFn$_invoke$arity$6(a0, a1, a2, a3, a4, a5);
        } else {
          return f.call(f, a0, a1, a2, a3, a4, a5);
        }
      } else {
        var a6 = cljs.core._first(next_5);
        var next_6 = cljs.core.next(next_5);
        if (next_6 == null) {
          if (f.cljs$core$IFn$_invoke$arity$7) {
            return f.cljs$core$IFn$_invoke$arity$7(a0, a1, a2, a3, a4, a5, a6);
          } else {
            return f.call(f, a0, a1, a2, a3, a4, a5, a6);
          }
        } else {
          var a7 = cljs.core._first(next_6);
          var next_7 = cljs.core.next(next_6);
          if (next_7 == null) {
            if (f.cljs$core$IFn$_invoke$arity$8) {
              return f.cljs$core$IFn$_invoke$arity$8(a0, a1, a2, a3, a4, a5, a6, a7);
            } else {
              return f.call(f, a0, a1, a2, a3, a4, a5, a6, a7);
            }
          } else {
            var a8 = cljs.core._first(next_7);
            var next_8 = cljs.core.next(next_7);
            if (next_8 == null) {
              if (f.cljs$core$IFn$_invoke$arity$9) {
                return f.cljs$core$IFn$_invoke$arity$9(a0, a1, a2, a3, a4, a5, a6, a7, a8);
              } else {
                return f.call(f, a0, a1, a2, a3, a4, a5, a6, a7, a8);
              }
            } else {
              var a9 = cljs.core._first(next_8);
              var next_9 = cljs.core.next(next_8);
              if (next_9 == null) {
                if (f.cljs$core$IFn$_invoke$arity$10) {
                  return f.cljs$core$IFn$_invoke$arity$10(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9);
                } else {
                  return f.call(f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9);
                }
              } else {
                var a10 = cljs.core._first(next_9);
                var next_10 = cljs.core.next(next_9);
                if (next_10 == null) {
                  if (f.cljs$core$IFn$_invoke$arity$11) {
                    return f.cljs$core$IFn$_invoke$arity$11(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
                  } else {
                    return f.call(f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
                  }
                } else {
                  var a11 = cljs.core._first(next_10);
                  var next_11 = cljs.core.next(next_10);
                  if (next_11 == null) {
                    if (f.cljs$core$IFn$_invoke$arity$12) {
                      return f.cljs$core$IFn$_invoke$arity$12(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
                    } else {
                      return f.call(f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
                    }
                  } else {
                    var a12 = cljs.core._first(next_11);
                    var next_12 = cljs.core.next(next_11);
                    if (next_12 == null) {
                      if (f.cljs$core$IFn$_invoke$arity$13) {
                        return f.cljs$core$IFn$_invoke$arity$13(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                      } else {
                        return f.call(f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                      }
                    } else {
                      var a13 = cljs.core._first(next_12);
                      var next_13 = cljs.core.next(next_12);
                      if (next_13 == null) {
                        if (f.cljs$core$IFn$_invoke$arity$14) {
                          return f.cljs$core$IFn$_invoke$arity$14(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
                        } else {
                          return f.call(f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
                        }
                      } else {
                        var a14 = cljs.core._first(next_13);
                        var next_14 = cljs.core.next(next_13);
                        if (next_14 == null) {
                          if (f.cljs$core$IFn$_invoke$arity$15) {
                            return f.cljs$core$IFn$_invoke$arity$15(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
                          } else {
                            return f.call(f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
                          }
                        } else {
                          var a15 = cljs.core._first(next_14);
                          var next_15 = cljs.core.next(next_14);
                          if (next_15 == null) {
                            if (f.cljs$core$IFn$_invoke$arity$16) {
                              return f.cljs$core$IFn$_invoke$arity$16(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
                            } else {
                              return f.call(f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
                            }
                          } else {
                            var a16 = cljs.core._first(next_15);
                            var next_16 = cljs.core.next(next_15);
                            if (next_16 == null) {
                              if (f.cljs$core$IFn$_invoke$arity$17) {
                                return f.cljs$core$IFn$_invoke$arity$17(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16);
                              } else {
                                return f.call(f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16);
                              }
                            } else {
                              var a17 = cljs.core._first(next_16);
                              var next_17 = cljs.core.next(next_16);
                              if (next_17 == null) {
                                if (f.cljs$core$IFn$_invoke$arity$18) {
                                  return f.cljs$core$IFn$_invoke$arity$18(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
                                } else {
                                  return f.call(f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
                                }
                              } else {
                                var a18 = cljs.core._first(next_17);
                                var next_18 = cljs.core.next(next_17);
                                if (next_18 == null) {
                                  if (f.cljs$core$IFn$_invoke$arity$19) {
                                    return f.cljs$core$IFn$_invoke$arity$19(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
                                  } else {
                                    return f.call(f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
                                  }
                                } else {
                                  var a19 = cljs.core._first(next_18);
                                  var next_19 = cljs.core.next(next_18);
                                  if (next_19 == null) {
                                    if (f.cljs$core$IFn$_invoke$arity$20) {
                                      return f.cljs$core$IFn$_invoke$arity$20(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19);
                                    } else {
                                      return f.call(f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19);
                                    }
                                  } else {
                                    var arr__4661__auto__ = [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19];
                                    var s__4662__auto___2894 = next_19;
                                    while (true) {
                                      if (s__4662__auto___2894) {
                                        arr__4661__auto__.push(cljs.core._first(s__4662__auto___2894));
                                        var G__2895 = cljs.core.next(s__4662__auto___2894);
                                        s__4662__auto___2894 = G__2895;
                                        continue;
                                      } else {
                                      }
                                      break;
                                    }
                                    return f.apply(f, arr__4661__auto__);
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.apply_to_simple.cljs$lang$maxFixedArity = 6;
cljs.core.apply = function cljs$core$apply(var_args) {
  var G__2903 = arguments.length;
  switch(G__2903) {
    case 2:
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      var args_arr__4757__auto__ = [];
      var len__4736__auto___2905 = arguments.length;
      var i__4737__auto___2906 = 0;
      while (true) {
        if (i__4737__auto___2906 < len__4736__auto___2905) {
          args_arr__4757__auto__.push(arguments[i__4737__auto___2906]);
          var G__2907 = i__4737__auto___2906 + 1;
          i__4737__auto___2906 = G__2907;
          continue;
        } else {
        }
        break;
      }
      var argseq__4758__auto__ = new cljs.core.IndexedSeq(args_arr__4757__auto__.slice(5), 0, null);
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], argseq__4758__auto__);
  }
};
cljs.core.apply.cljs$core$IFn$_invoke$arity$2 = function(f, args) {
  if (f.cljs$lang$applyTo) {
    var fixed_arity = f.cljs$lang$maxFixedArity;
    var bc = cljs.core.bounded_count(fixed_arity + 1, args);
    if (bc <= fixed_arity) {
      return cljs.core.apply_to(f, bc, args);
    } else {
      return f.cljs$lang$applyTo(args);
    }
  } else {
    return cljs.core.apply_to_simple.cljs$core$IFn$_invoke$arity$2(f, cljs.core.seq(args));
  }
};
cljs.core.apply.cljs$core$IFn$_invoke$arity$3 = function(f, x, args) {
  if (f.cljs$lang$applyTo) {
    var arglist = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$2(x, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    var bc = cljs.core.bounded_count(fixed_arity, args) + 1;
    if (bc <= fixed_arity) {
      return cljs.core.apply_to(f, bc, arglist);
    } else {
      return f.cljs$lang$applyTo(arglist);
    }
  } else {
    return cljs.core.apply_to_simple.cljs$core$IFn$_invoke$arity$3(f, x, cljs.core.seq(args));
  }
};
cljs.core.apply.cljs$core$IFn$_invoke$arity$4 = function(f, x, y, args) {
  if (f.cljs$lang$applyTo) {
    var arglist = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$3(x, y, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    var bc = 2 + cljs.core.bounded_count(fixed_arity - 1, args);
    if (bc <= fixed_arity) {
      return cljs.core.apply_to(f, bc, arglist);
    } else {
      return f.cljs$lang$applyTo(arglist);
    }
  } else {
    return cljs.core.apply_to_simple.cljs$core$IFn$_invoke$arity$4(f, x, y, cljs.core.seq(args));
  }
};
cljs.core.apply.cljs$core$IFn$_invoke$arity$5 = function(f, x, y, z, args) {
  if (f.cljs$lang$applyTo) {
    var arglist = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(x, y, z, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    var bc = 3 + cljs.core.bounded_count(fixed_arity - 2, args);
    if (bc <= fixed_arity) {
      return cljs.core.apply_to(f, bc, arglist);
    } else {
      return f.cljs$lang$applyTo(arglist);
    }
  } else {
    return cljs.core.apply_to_simple.cljs$core$IFn$_invoke$arity$5(f, x, y, z, cljs.core.seq(args));
  }
};
cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic = function(f, a, b, c, d, args) {
  if (f.cljs$lang$applyTo) {
    var spread_args = cljs.core.spread(args);
    var arglist = cljs.core.cons(a, cljs.core.cons(b, cljs.core.cons(c, cljs.core.cons(d, spread_args))));
    var fixed_arity = f.cljs$lang$maxFixedArity;
    var bc = 4 + cljs.core.bounded_count(fixed_arity - 3, spread_args);
    if (bc <= fixed_arity) {
      return cljs.core.apply_to(f, bc, arglist);
    } else {
      return f.cljs$lang$applyTo(arglist);
    }
  } else {
    return cljs.core.apply_to_simple.cljs$core$IFn$_invoke$arity$6(f, a, b, c, d, cljs.core.spread(args));
  }
};
cljs.core.apply.cljs$lang$applyTo = function(seq2897) {
  var G__2898 = cljs.core.first(seq2897);
  var seq2897__$1 = cljs.core.next(seq2897);
  var G__2899 = cljs.core.first(seq2897__$1);
  var seq2897__$2 = cljs.core.next(seq2897__$1);
  var G__2900 = cljs.core.first(seq2897__$2);
  var seq2897__$3 = cljs.core.next(seq2897__$2);
  var G__2901 = cljs.core.first(seq2897__$3);
  var seq2897__$4 = cljs.core.next(seq2897__$3);
  var G__2902 = cljs.core.first(seq2897__$4);
  var seq2897__$5 = cljs.core.next(seq2897__$4);
  var self__4723__auto__ = this;
  return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__2898, G__2899, G__2900, G__2901, G__2902, seq2897__$5);
};
cljs.core.apply.cljs$lang$maxFixedArity = 5;
cljs.core.vary_meta = function cljs$core$vary_meta(var_args) {
  var G__2916 = arguments.length;
  switch(G__2916) {
    case 2:
      return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    case 6:
      return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    default:
      var args_arr__4757__auto__ = [];
      var len__4736__auto___2933 = arguments.length;
      var i__4737__auto___2934 = 0;
      while (true) {
        if (i__4737__auto___2934 < len__4736__auto___2933) {
          args_arr__4757__auto__.push(arguments[i__4737__auto___2934]);
          var G__2935 = i__4737__auto___2934 + 1;
          i__4737__auto___2934 = G__2935;
          continue;
        } else {
        }
        break;
      }
      var argseq__4758__auto__ = new cljs.core.IndexedSeq(args_arr__4757__auto__.slice(6), 0, null);
      return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], argseq__4758__auto__);
  }
};
cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$2 = function(obj, f) {
  return cljs.core.with_meta(obj, function() {
    var G__2917 = cljs.core.meta(obj);
    return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__2917) : f.call(null, G__2917);
  }());
};
cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$3 = function(obj, f, a) {
  return cljs.core.with_meta(obj, function() {
    var G__2918 = cljs.core.meta(obj);
    var G__2919 = a;
    return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__2918, G__2919) : f.call(null, G__2918, G__2919);
  }());
};
cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$4 = function(obj, f, a, b) {
  return cljs.core.with_meta(obj, function() {
    var G__2920 = cljs.core.meta(obj);
    var G__2921 = a;
    var G__2922 = b;
    return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__2920, G__2921, G__2922) : f.call(null, G__2920, G__2921, G__2922);
  }());
};
cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$5 = function(obj, f, a, b, c) {
  return cljs.core.with_meta(obj, function() {
    var G__2923 = cljs.core.meta(obj);
    var G__2924 = a;
    var G__2925 = b;
    var G__2926 = c;
    return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__2923, G__2924, G__2925, G__2926) : f.call(null, G__2923, G__2924, G__2925, G__2926);
  }());
};
cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$6 = function(obj, f, a, b, c, d) {
  return cljs.core.with_meta(obj, function() {
    var G__2927 = cljs.core.meta(obj);
    var G__2928 = a;
    var G__2929 = b;
    var G__2930 = c;
    var G__2931 = d;
    return f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(G__2927, G__2928, G__2929, G__2930, G__2931) : f.call(null, G__2927, G__2928, G__2929, G__2930, G__2931);
  }());
};
cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$variadic = function(obj, f, a, b, c, d, args) {
  return cljs.core.with_meta(obj, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.meta(obj), a, b, c, cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([d, args], 0)));
};
cljs.core.vary_meta.cljs$lang$applyTo = function(seq2909) {
  var G__2910 = cljs.core.first(seq2909);
  var seq2909__$1 = cljs.core.next(seq2909);
  var G__2911 = cljs.core.first(seq2909__$1);
  var seq2909__$2 = cljs.core.next(seq2909__$1);
  var G__2912 = cljs.core.first(seq2909__$2);
  var seq2909__$3 = cljs.core.next(seq2909__$2);
  var G__2913 = cljs.core.first(seq2909__$3);
  var seq2909__$4 = cljs.core.next(seq2909__$3);
  var G__2914 = cljs.core.first(seq2909__$4);
  var seq2909__$5 = cljs.core.next(seq2909__$4);
  var G__2915 = cljs.core.first(seq2909__$5);
  var seq2909__$6 = cljs.core.next(seq2909__$5);
  var self__4723__auto__ = this;
  return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__2910, G__2911, G__2912, G__2913, G__2914, G__2915, seq2909__$6);
};
cljs.core.vary_meta.cljs$lang$maxFixedArity = 6;
cljs.core.not_EQ_ = function cljs$core$not_EQ_(var_args) {
  var G__2940 = arguments.length;
  switch(G__2940) {
    case 1:
      return cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var args_arr__4757__auto__ = [];
      var len__4736__auto___2942 = arguments.length;
      var i__4737__auto___2943 = 0;
      while (true) {
        if (i__4737__auto___2943 < len__4736__auto___2942) {
          args_arr__4757__auto__.push(arguments[i__4737__auto___2943]);
          var G__2944 = i__4737__auto___2943 + 1;
          i__4737__auto___2943 = G__2944;
          continue;
        } else {
        }
        break;
      }
      var argseq__4758__auto__ = new cljs.core.IndexedSeq(args_arr__4757__auto__.slice(2), 0, null);
      return cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__4758__auto__);
  }
};
cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return false;
};
cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return !cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y);
};
cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.not(cljs.core.apply.cljs$core$IFn$_invoke$arity$4(cljs.core._EQ_, x, y, more));
};
cljs.core.not_EQ_.cljs$lang$applyTo = function(seq2937) {
  var G__2938 = cljs.core.first(seq2937);
  var seq2937__$1 = cljs.core.next(seq2937);
  var G__2939 = cljs.core.first(seq2937__$1);
  var seq2937__$2 = cljs.core.next(seq2937__$1);
  var self__4723__auto__ = this;
  return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__2938, G__2939, seq2937__$2);
};
cljs.core.not_EQ_.cljs$lang$maxFixedArity = 2;
cljs.core.not_empty = function cljs$core$not_empty(coll) {
  if (cljs.core.seq(coll)) {
    return coll;
  } else {
    return null;
  }
};
cljs.core.nil_iter = function cljs$core$nil_iter() {
  if (typeof cljs !== "undefined" && typeof cljs.core !== "undefined" && typeof cljs.core.t_cljs$core2945 !== "undefined") {
  } else {
    cljs.core.t_cljs$core2945 = function(meta2946) {
      this.meta2946 = meta2946;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.core.t_cljs$core2945.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_2947, meta2946__$1) {
      var self__ = this;
      var _2947__$1 = this;
      return new cljs.core.t_cljs$core2945(meta2946__$1);
    };
    cljs.core.t_cljs$core2945.prototype.cljs$core$IMeta$_meta$arity$1 = function(_2947) {
      var self__ = this;
      var _2947__$1 = this;
      return self__.meta2946;
    };
    cljs.core.t_cljs$core2945.prototype.hasNext = function() {
      var self__ = this;
      var _ = this;
      return false;
    };
    cljs.core.t_cljs$core2945.prototype.next = function() {
      var self__ = this;
      var _ = this;
      return new Error("No such element");
    };
    cljs.core.t_cljs$core2945.prototype.remove = function() {
      var self__ = this;
      var _ = this;
      return new Error("Unsupported operation");
    };
    cljs.core.t_cljs$core2945.getBasis = function() {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta2946", "meta2946", -921892137, null)], null);
    };
    cljs.core.t_cljs$core2945.cljs$lang$type = true;
    cljs.core.t_cljs$core2945.cljs$lang$ctorStr = "cljs.core/t_cljs$core2945";
    cljs.core.t_cljs$core2945.cljs$lang$ctorPrWriter = function(this__4369__auto__, writer__4370__auto__, opt__4371__auto__) {
      return cljs.core._write(writer__4370__auto__, "cljs.core/t_cljs$core2945");
    };
    cljs.core.__GT_t_cljs$core2945 = function cljs$core$nil_iter_$___GT_t_cljs$core2945(meta2946) {
      return new cljs.core.t_cljs$core2945(meta2946);
    };
  }
  return new cljs.core.t_cljs$core2945(cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.StringIter = function(s, i) {
  this.s = s;
  this.i = i;
};
cljs.core.StringIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.s.length;
};
cljs.core.StringIter.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.s.charAt(self__.i);
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.StringIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.StringIter.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "s", "s", -948495851, null), cljs.core.with_meta(new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.StringIter.cljs$lang$type = true;
cljs.core.StringIter.cljs$lang$ctorStr = "cljs.core/StringIter";
cljs.core.StringIter.cljs$lang$ctorPrWriter = function(this__4369__auto__, writer__4370__auto__, opt__4371__auto__) {
  return cljs.core._write(writer__4370__auto__, "cljs.core/StringIter");
};
cljs.core.__GT_StringIter = function cljs$core$__GT_StringIter(s, i) {
  return new cljs.core.StringIter(s, i);
};
cljs.core.string_iter = function cljs$core$string_iter(x) {
  return new cljs.core.StringIter(x, 0);
};
cljs.core.ArrayIter = function(arr, i) {
  this.arr = arr;
  this.i = i;
};
cljs.core.ArrayIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.arr.length;
};
cljs.core.ArrayIter.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.arr[self__.i];
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.ArrayIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.ArrayIter.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), cljs.core.with_meta(new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.ArrayIter.cljs$lang$type = true;
cljs.core.ArrayIter.cljs$lang$ctorStr = "cljs.core/ArrayIter";
cljs.core.ArrayIter.cljs$lang$ctorPrWriter = function(this__4369__auto__, writer__4370__auto__, opt__4371__auto__) {
  return cljs.core._write(writer__4370__auto__, "cljs.core/ArrayIter");
};
cljs.core.__GT_ArrayIter = function cljs$core$__GT_ArrayIter(arr, i) {
  return new cljs.core.ArrayIter(arr, i);
};
cljs.core.array_iter = function cljs$core$array_iter(x) {
  return new cljs.core.ArrayIter(x, 0);
};
cljs.core.INIT = {};
cljs.core.START = {};
cljs.core.SeqIter = function(_seq, _next) {
  this._seq = _seq;
  this._next = _next;
};
cljs.core.SeqIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  if (self__._seq === cljs.core.INIT) {
    self__._seq = cljs.core.START;
    self__._next = cljs.core.seq(self__._next);
  } else {
    if (self__._seq === self__._next) {
      self__._next = cljs.core.next(self__._seq);
    } else {
    }
  }
  return !(self__._next == null);
};
cljs.core.SeqIter.prototype.next = function() {
  var self__ = this;
  var this$ = this;
  if (!this$.hasNext()) {
    throw new Error("No such element");
  } else {
    self__._seq = self__._next;
    return cljs.core.first(self__._next);
  }
};
cljs.core.SeqIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.SeqIter.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "_seq", "_seq", -449557847, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "_next", "_next", 101877036, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.SeqIter.cljs$lang$type = true;
cljs.core.SeqIter.cljs$lang$ctorStr = "cljs.core/SeqIter";
cljs.core.SeqIter.cljs$lang$ctorPrWriter = function(this__4369__auto__, writer__4370__auto__, opt__4371__auto__) {
  return cljs.core._write(writer__4370__auto__, "cljs.core/SeqIter");
};
cljs.core.__GT_SeqIter = function cljs$core$__GT_SeqIter(_seq, _next) {
  return new cljs.core.SeqIter(_seq, _next);
};
cljs.core.seq_iter = function cljs$core$seq_iter(coll) {
  return new cljs.core.SeqIter(cljs.core.INIT, coll);
};
cljs.core.iter = function cljs$core$iter(coll) {
  if (cljs.core.iterable_QMARK_(coll)) {
    return cljs.core._iterator(coll);
  } else {
    if (coll == null) {
      return cljs.core.nil_iter();
    } else {
      if (typeof coll === "string") {
        return cljs.core.string_iter(coll);
      } else {
        if (cljs.core.array_QMARK_(coll)) {
          return cljs.core.array_iter(coll);
        } else {
          if (cljs.core.seqable_QMARK_(coll)) {
            return cljs.core.seq_iter(coll);
          } else {
            throw new Error(["Cannot create iterator from ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(coll)].join(""));
          }
        }
      }
    }
  }
};
cljs.core.Many = function(vals) {
  this.vals = vals;
};
cljs.core.Many.prototype.add = function(o) {
  var self__ = this;
  var this$ = this;
  self__.vals.push(o);
  return this$;
};
cljs.core.Many.prototype.remove = function() {
  var self__ = this;
  var this$ = this;
  return self__.vals.shift();
};
cljs.core.Many.prototype.isEmpty = function() {
  var self__ = this;
  var this$ = this;
  return self__.vals.length === 0;
};
cljs.core.Many.prototype.toString = function() {
  var self__ = this;
  var this$ = this;
  return ["Many: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.vals)].join("");
};
cljs.core.Many.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "vals", "vals", -1886377036, null)], null);
};
cljs.core.Many.cljs$lang$type = true;
cljs.core.Many.cljs$lang$ctorStr = "cljs.core/Many";
cljs.core.Many.cljs$lang$ctorPrWriter = function(this__4369__auto__, writer__4370__auto__, opt__4371__auto__) {
  return cljs.core._write(writer__4370__auto__, "cljs.core/Many");
};
cljs.core.__GT_Many = function cljs$core$__GT_Many(vals) {
  return new cljs.core.Many(vals);
};
cljs.core.NONE = {};
cljs.core.Single = function(val) {
  this.val = val;
};
cljs.core.Single.prototype.add = function(o) {
  var self__ = this;
  var this$ = this;
  if (self__.val === cljs.core.NONE) {
    self__.val = o;
    return this$;
  } else {
    return new cljs.core.Many([self__.val, o]);
  }
};
cljs.core.Single.prototype.remove = function() {
  var self__ = this;
  var this$ = this;
  if (self__.val === cljs.core.NONE) {
    throw new Error("Removing object from empty buffer");
  } else {
    var ret = self__.val;
    self__.val = cljs.core.NONE;
    return ret;
  }
};
cljs.core.Single.prototype.isEmpty = function() {
  var self__ = this;
  var this$ = this;
  return self__.val === cljs.core.NONE;
};
cljs.core.Single.prototype.toString = function() {
  var self__ = this;
  var this$ = this;
  return ["Single: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.val)].join("");
};
cljs.core.Single.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "val", "val", 1769233139, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.Single.cljs$lang$type = true;
cljs.core.Single.cljs$lang$ctorStr = "cljs.core/Single";
cljs.core.Single.cljs$lang$ctorPrWriter = function(this__4369__auto__, writer__4370__auto__, opt__4371__auto__) {
  return cljs.core._write(writer__4370__auto__, "cljs.core/Single");
};
cljs.core.__GT_Single = function cljs$core$__GT_Single(val) {
  return new cljs.core.Single(val);
};
cljs.core.Empty = function() {
};
cljs.core.Empty.prototype.add = function(o) {
  var self__ = this;
  var this$ = this;
  return new cljs.core.Single(o);
};
cljs.core.Empty.prototype.remove = function() {
  var self__ = this;
  var this$ = this;
  throw new Error("Removing object from empty buffer");
};
cljs.core.Empty.prototype.isEmpty = function() {
  var self__ = this;
  var this$ = this;
  return true;
};
cljs.core.Empty.prototype.toString = function() {
  var self__ = this;
  var this$ = this;
  return "Empty";
};
cljs.core.Empty.getBasis = function() {
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.Empty.cljs$lang$type = true;
cljs.core.Empty.cljs$lang$ctorStr = "cljs.core/Empty";
cljs.core.Empty.cljs$lang$ctorPrWriter = function(this__4369__auto__, writer__4370__auto__, opt__4371__auto__) {
  return cljs.core._write(writer__4370__auto__, "cljs.core/Empty");
};
cljs.core.__GT_Empty = function cljs$core$__GT_Empty() {
  return new cljs.core.Empty;
};
cljs.core.EMPTY = new cljs.core.Empty;
cljs.core.MultiIterator = function(iters) {
  this.iters = iters;
};
cljs.core.MultiIterator.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  var iters__$1 = cljs.core.seq(self__.iters);
  while (true) {
    if (!(iters__$1 == null)) {
      var iter = cljs.core.first(iters__$1);
      if (!iter.hasNext()) {
        return false;
      } else {
        var G__2948 = cljs.core.next(iters__$1);
        iters__$1 = G__2948;
        continue;
      }
    } else {
      return true;
    }
    break;
  }
};
cljs.core.MultiIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var nexts = [];
  var n__4613__auto___2949 = self__.iters.length;
  var i_2950 = 0;
  while (true) {
    if (i_2950 < n__4613__auto___2949) {
      nexts[i_2950] = self__.iters[i_2950].next();
      var G__2951 = i_2950 + 1;
      i_2950 = G__2951;
      continue;
    } else {
    }
    break;
  }
  return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(nexts, 0);
};
cljs.core.MultiIterator.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "iters", "iters", 719353031, null)], null);
};
cljs.core.MultiIterator.cljs$lang$type = true;
cljs.core.MultiIterator.cljs$lang$ctorStr = "cljs.core/MultiIterator";
cljs.core.MultiIterator.cljs$lang$ctorPrWriter = function(this__4369__auto__, writer__4370__auto__, opt__4371__auto__) {
  return cljs.core._write(writer__4370__auto__, "cljs.core/MultiIterator");
};
cljs.core.__GT_MultiIterator = function cljs$core$__GT_MultiIterator(iters) {
  return new cljs.core.MultiIterator(iters);
};
cljs.core.chunkIteratorSeq = function cljs$core$chunkIteratorSeq(iter) {
  return new cljs.core.LazySeq(null, function() {
    if (iter.hasNext()) {
      var arr = [];
      var n = 0;
      while (true) {
        if (cljs.core.truth_(function() {
          var and__4115__auto__ = iter.hasNext();
          if (cljs.core.truth_(and__4115__auto__)) {
            return n < 32;
          } else {
            return and__4115__auto__;
          }
        }())) {
          arr[n] = iter.next();
          var G__2952 = n + 1;
          n = G__2952;
          continue;
        } else {
          return cljs.core.chunk_cons(cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$3(arr, 0, n), cljs.core.chunkIteratorSeq.cljs$core$IFn$_invoke$arity$1 ? cljs.core.chunkIteratorSeq.cljs$core$IFn$_invoke$arity$1(iter) : cljs.core.chunkIteratorSeq.call(null, iter));
        }
        break;
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.TransformerIterator = function(buffer, _next, completed, xf, sourceIter, multi) {
  this.buffer = buffer;
  this._next = _next;
  this.completed = completed;
  this.xf = xf;
  this.sourceIter = sourceIter;
  this.multi = multi;
};
cljs.core.TransformerIterator.prototype.step = function() {
  var self__ = this;
  var this$ = this;
  if (!(self__._next === cljs.core.NONE)) {
    return true;
  } else {
    while (true) {
      if (self__._next === cljs.core.NONE) {
        if (self__.buffer.isEmpty()) {
          if (self__.completed) {
            return false;
          } else {
            if (self__.sourceIter.hasNext()) {
              var iter = self__.multi ? cljs.core.apply.cljs$core$IFn$_invoke$arity$2(self__.xf, cljs.core.cons(null, self__.sourceIter.next())) : function() {
                var G__2953 = null;
                var G__2954 = self__.sourceIter.next();
                return self__.xf.cljs$core$IFn$_invoke$arity$2 ? self__.xf.cljs$core$IFn$_invoke$arity$2(G__2953, G__2954) : self__.xf.call(null, G__2953, G__2954);
              }();
              if (cljs.core.reduced_QMARK_(iter)) {
                self__.xf.cljs$core$IFn$_invoke$arity$1 ? self__.xf.cljs$core$IFn$_invoke$arity$1(null) : self__.xf.call(null, null);
                self__.completed = true;
              } else {
              }
              continue;
            } else {
              self__.xf.cljs$core$IFn$_invoke$arity$1 ? self__.xf.cljs$core$IFn$_invoke$arity$1(null) : self__.xf.call(null, null);
              self__.completed = true;
              continue;
            }
          }
        } else {
          self__._next = self__.buffer.remove();
          continue;
        }
      } else {
        return true;
      }
      break;
    }
  }
};
cljs.core.TransformerIterator.prototype.hasNext = function() {
  var self__ = this;
  var this$ = this;
  return this$.step();
};
cljs.core.TransformerIterator.prototype.next = function() {
  var self__ = this;
  var this$ = this;
  if (this$.hasNext()) {
    var ret = self__._next;
    self__._next = cljs.core.NONE;
    return ret;
  } else {
    throw new Error("No such element");
  }
};
cljs.core.TransformerIterator.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.TransformerIterator.getBasis = function() {
  return new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "buffer", "buffer", -2037140571, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "_next", "_next", 101877036, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), 
  cljs.core.with_meta(new cljs.core.Symbol(null, "completed", "completed", 1154475024, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "xf", "xf", 2042434515, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), new cljs.core.Symbol(null, "sourceIter", "sourceIter", 1068220306, null), new cljs.core.Symbol(null, 
  "multi", "multi", 1450238522, null)], null);
};
cljs.core.TransformerIterator.cljs$lang$type = true;
cljs.core.TransformerIterator.cljs$lang$ctorStr = "cljs.core/TransformerIterator";
cljs.core.TransformerIterator.cljs$lang$ctorPrWriter = function(this__4369__auto__, writer__4370__auto__, opt__4371__auto__) {
  return cljs.core._write(writer__4370__auto__, "cljs.core/TransformerIterator");
};
cljs.core.__GT_TransformerIterator = function cljs$core$__GT_TransformerIterator(buffer, _next, completed, xf, sourceIter, multi) {
  return new cljs.core.TransformerIterator(buffer, _next, completed, xf, sourceIter, multi);
};
goog.object.set(cljs.core.TransformerIterator.prototype, cljs.core.ITER_SYMBOL, function() {
  var this__4675__auto__ = this;
  return cljs.core.es6_iterator(this__4675__auto__);
});
cljs.core.transformer_iterator = function cljs$core$transformer_iterator(xform, sourceIter, multi) {
  var iterator = new cljs.core.TransformerIterator(cljs.core.EMPTY, cljs.core.NONE, false, null, sourceIter, multi);
  iterator.xf = function() {
    var G__2955 = function() {
      var G__2956 = null;
      var G__2956__0 = function() {
        return null;
      };
      var G__2956__1 = function(acc) {
        return acc;
      };
      var G__2956__2 = function(acc, o) {
        iterator.buffer = iterator.buffer.add(o);
        return acc;
      };
      G__2956 = function(acc, o) {
        switch(arguments.length) {
          case 0:
            return G__2956__0.call(this);
          case 1:
            return G__2956__1.call(this, acc);
          case 2:
            return G__2956__2.call(this, acc, o);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__2956.cljs$core$IFn$_invoke$arity$0 = G__2956__0;
      G__2956.cljs$core$IFn$_invoke$arity$1 = G__2956__1;
      G__2956.cljs$core$IFn$_invoke$arity$2 = G__2956__2;
      return G__2956;
    }();
    return xform.cljs$core$IFn$_invoke$arity$1 ? xform.cljs$core$IFn$_invoke$arity$1(G__2955) : xform.call(null, G__2955);
  }();
  return iterator;
};
cljs.core.TransformerIterator.create = function(xform, source) {
  return cljs.core.transformer_iterator(xform, source, false);
};
cljs.core.TransformerIterator.createMulti = function(xform, sources) {
  return cljs.core.transformer_iterator(xform, new cljs.core.MultiIterator(cljs.core.to_array(sources)), true);
};
cljs.core.sequence = function cljs$core$sequence(var_args) {
  var G__2961 = arguments.length;
  switch(G__2961) {
    case 1:
      return cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.sequence.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var args_arr__4757__auto__ = [];
      var len__4736__auto___2963 = arguments.length;
      var i__4737__auto___2964 = 0;
      while (true) {
        if (i__4737__auto___2964 < len__4736__auto___2963) {
          args_arr__4757__auto__.push(arguments[i__4737__auto___2964]);
          var G__2965 = i__4737__auto___2964 + 1;
          i__4737__auto___2964 = G__2965;
          continue;
        } else {
        }
        break;
      }
      var argseq__4758__auto__ = new cljs.core.IndexedSeq(args_arr__4757__auto__.slice(2), 0, null);
      return cljs.core.sequence.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__4758__auto__);
  }
};
cljs.core.sequence.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  if (cljs.core.seq_QMARK_(coll)) {
    return coll;
  } else {
    var or__4126__auto__ = cljs.core.seq(coll);
    if (or__4126__auto__) {
      return or__4126__auto__;
    } else {
      return cljs.core.List.EMPTY;
    }
  }
};
cljs.core.sequence.cljs$core$IFn$_invoke$arity$2 = function(xform, coll) {
  var or__4126__auto__ = cljs.core.chunkIteratorSeq(cljs.core.TransformerIterator.create(xform, cljs.core.iter(coll)));
  if (cljs.core.truth_(or__4126__auto__)) {
    return or__4126__auto__;
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.sequence.cljs$core$IFn$_invoke$arity$variadic = function(xform, coll, colls) {
  var or__4126__auto__ = cljs.core.chunkIteratorSeq(cljs.core.TransformerIterator.createMulti(xform, cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.iter, cljs.core.cons(coll, colls))));
  if (cljs.core.truth_(or__4126__auto__)) {
    return or__4126__auto__;
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.sequence.cljs$lang$applyTo = function(seq2958) {
  var G__2959 = cljs.core.first(seq2958);
  var seq2958__$1 = cljs.core.next(seq2958);
  var G__2960 = cljs.core.first(seq2958__$1);
  var seq2958__$2 = cljs.core.next(seq2958__$1);
  var self__4723__auto__ = this;
  return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__2959, G__2960, seq2958__$2);
};
cljs.core.sequence.cljs$lang$maxFixedArity = 2;
cljs.core.every_QMARK_ = function cljs$core$every_QMARK_(pred, coll) {
  while (true) {
    if (cljs.core.seq(coll) == null) {
      return true;
    } else {
      if (cljs.core.truth_(function() {
        var G__2966 = cljs.core.first(coll);
        return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__2966) : pred.call(null, G__2966);
      }())) {
        var G__2967 = pred;
        var G__2968 = cljs.core.next(coll);
        pred = G__2967;
        coll = G__2968;
        continue;
      } else {
        return false;
      }
    }
    break;
  }
};
cljs.core.not_every_QMARK_ = function cljs$core$not_every_QMARK_(pred, coll) {
  return !cljs.core.every_QMARK_(pred, coll);
};
cljs.core.some = function cljs$core$some(pred, coll) {
  while (true) {
    var temp__5735__auto__ = cljs.core.seq(coll);
    if (temp__5735__auto__) {
      var s = temp__5735__auto__;
      var or__4126__auto__ = function() {
        var G__2970 = cljs.core.first(s);
        return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__2970) : pred.call(null, G__2970);
      }();
      if (cljs.core.truth_(or__4126__auto__)) {
        return or__4126__auto__;
      } else {
        var G__2971 = pred;
        var G__2972 = cljs.core.next(s);
        pred = G__2971;
        coll = G__2972;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.not_any_QMARK_ = function cljs$core$not_any_QMARK_(pred, coll) {
  return cljs.core.not(cljs.core.some(pred, coll));
};
cljs.core.even_QMARK_ = function cljs$core$even_QMARK_(n) {
  if (cljs.core.integer_QMARK_(n)) {
    return (n & 1) === 0;
  } else {
    throw new Error(["Argument must be an integer: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(n)].join(""));
  }
};
cljs.core.odd_QMARK_ = function cljs$core$odd_QMARK_(n) {
  return !cljs.core.even_QMARK_(n);
};
cljs.core.complement = function cljs$core$complement(f) {
  return function() {
    var G__2973 = null;
    var G__2973__0 = function() {
      return cljs.core.not(f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null));
    };
    var G__2973__1 = function(x) {
      return cljs.core.not(f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(x) : f.call(null, x));
    };
    var G__2973__2 = function(x, y) {
      return cljs.core.not(f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(x, y) : f.call(null, x, y));
    };
    var G__2973__3 = function() {
      var G__2974__delegate = function(x, y, zs) {
        return cljs.core.not(cljs.core.apply.cljs$core$IFn$_invoke$arity$4(f, x, y, zs));
      };
      var G__2974 = function(x, y, var_args) {
        var zs = null;
        if (arguments.length > 2) {
          var G__2975__i = 0, G__2975__a = new Array(arguments.length - 2);
          while (G__2975__i < G__2975__a.length) {
            G__2975__a[G__2975__i] = arguments[G__2975__i + 2];
            ++G__2975__i;
          }
          zs = new cljs.core.IndexedSeq(G__2975__a, 0, null);
        }
        return G__2974__delegate.call(this, x, y, zs);
      };
      G__2974.cljs$lang$maxFixedArity = 2;
      G__2974.cljs$lang$applyTo = function(arglist__2976) {
        var x = cljs.core.first(arglist__2976);
        arglist__2976 = cljs.core.next(arglist__2976);
        var y = cljs.core.first(arglist__2976);
        var zs = cljs.core.rest(arglist__2976);
        return G__2974__delegate(x, y, zs);
      };
      G__2974.cljs$core$IFn$_invoke$arity$variadic = G__2974__delegate;
      return G__2974;
    }();
    G__2973 = function(x, y, var_args) {
      var zs = var_args;
      switch(arguments.length) {
        case 0:
          return G__2973__0.call(this);
        case 1:
          return G__2973__1.call(this, x);
        case 2:
          return G__2973__2.call(this, x, y);
        default:
          var G__2977 = null;
          if (arguments.length > 2) {
            var G__2978__i = 0, G__2978__a = new Array(arguments.length - 2);
            while (G__2978__i < G__2978__a.length) {
              G__2978__a[G__2978__i] = arguments[G__2978__i + 2];
              ++G__2978__i;
            }
            G__2977 = new cljs.core.IndexedSeq(G__2978__a, 0, null);
          }
          return G__2973__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__2977);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__2973.cljs$lang$maxFixedArity = 2;
    G__2973.cljs$lang$applyTo = G__2973__3.cljs$lang$applyTo;
    G__2973.cljs$core$IFn$_invoke$arity$0 = G__2973__0;
    G__2973.cljs$core$IFn$_invoke$arity$1 = G__2973__1;
    G__2973.cljs$core$IFn$_invoke$arity$2 = G__2973__2;
    G__2973.cljs$core$IFn$_invoke$arity$variadic = G__2973__3.cljs$core$IFn$_invoke$arity$variadic;
    return G__2973;
  }();
};
cljs.core.constantly = function cljs$core$constantly(x) {
  return function() {
    var G__2979__delegate = function(args) {
      return x;
    };
    var G__2979 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        var G__2980__i = 0, G__2980__a = new Array(arguments.length - 0);
        while (G__2980__i < G__2980__a.length) {
          G__2980__a[G__2980__i] = arguments[G__2980__i + 0];
          ++G__2980__i;
        }
        args = new cljs.core.IndexedSeq(G__2980__a, 0, null);
      }
      return G__2979__delegate.call(this, args);
    };
    G__2979.cljs$lang$maxFixedArity = 0;
    G__2979.cljs$lang$applyTo = function(arglist__2981) {
      var args = cljs.core.seq(arglist__2981);
      return G__2979__delegate(args);
    };
    G__2979.cljs$core$IFn$_invoke$arity$variadic = G__2979__delegate;
    return G__2979;
  }();
};
cljs.core.comp = function cljs$core$comp(var_args) {
  var G__2987 = arguments.length;
  switch(G__2987) {
    case 0:
      return cljs.core.comp.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.comp.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.comp.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.comp.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var args_arr__4757__auto__ = [];
      var len__4736__auto___3005 = arguments.length;
      var i__4737__auto___3006 = 0;
      while (true) {
        if (i__4737__auto___3006 < len__4736__auto___3005) {
          args_arr__4757__auto__.push(arguments[i__4737__auto___3006]);
          var G__3007 = i__4737__auto___3006 + 1;
          i__4737__auto___3006 = G__3007;
          continue;
        } else {
        }
        break;
      }
      var argseq__4758__auto__ = new cljs.core.IndexedSeq(args_arr__4757__auto__.slice(3), 0, null);
      return cljs.core.comp.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__4758__auto__);
  }
};
cljs.core.comp.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.identity;
};
cljs.core.comp.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return f;
};
cljs.core.comp.cljs$core$IFn$_invoke$arity$2 = function(f, g) {
  return function() {
    var G__3008 = null;
    var G__3008__0 = function() {
      var G__2988 = g.cljs$core$IFn$_invoke$arity$0 ? g.cljs$core$IFn$_invoke$arity$0() : g.call(null);
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__2988) : f.call(null, G__2988);
    };
    var G__3008__1 = function(x) {
      var G__2989 = g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(x) : g.call(null, x);
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__2989) : f.call(null, G__2989);
    };
    var G__3008__2 = function(x, y) {
      var G__2990 = g.cljs$core$IFn$_invoke$arity$2 ? g.cljs$core$IFn$_invoke$arity$2(x, y) : g.call(null, x, y);
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__2990) : f.call(null, G__2990);
    };
    var G__3008__3 = function(x, y, z) {
      var G__2991 = g.cljs$core$IFn$_invoke$arity$3 ? g.cljs$core$IFn$_invoke$arity$3(x, y, z) : g.call(null, x, y, z);
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__2991) : f.call(null, G__2991);
    };
    var G__3008__4 = function() {
      var G__3009__delegate = function(x, y, z, args) {
        var G__2992 = cljs.core.apply.cljs$core$IFn$_invoke$arity$5(g, x, y, z, args);
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__2992) : f.call(null, G__2992);
      };
      var G__3009 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__3010__i = 0, G__3010__a = new Array(arguments.length - 3);
          while (G__3010__i < G__3010__a.length) {
            G__3010__a[G__3010__i] = arguments[G__3010__i + 3];
            ++G__3010__i;
          }
          args = new cljs.core.IndexedSeq(G__3010__a, 0, null);
        }
        return G__3009__delegate.call(this, x, y, z, args);
      };
      G__3009.cljs$lang$maxFixedArity = 3;
      G__3009.cljs$lang$applyTo = function(arglist__3011) {
        var x = cljs.core.first(arglist__3011);
        arglist__3011 = cljs.core.next(arglist__3011);
        var y = cljs.core.first(arglist__3011);
        arglist__3011 = cljs.core.next(arglist__3011);
        var z = cljs.core.first(arglist__3011);
        var args = cljs.core.rest(arglist__3011);
        return G__3009__delegate(x, y, z, args);
      };
      G__3009.cljs$core$IFn$_invoke$arity$variadic = G__3009__delegate;
      return G__3009;
    }();
    G__3008 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__3008__0.call(this);
        case 1:
          return G__3008__1.call(this, x);
        case 2:
          return G__3008__2.call(this, x, y);
        case 3:
          return G__3008__3.call(this, x, y, z);
        default:
          var G__3012 = null;
          if (arguments.length > 3) {
            var G__3013__i = 0, G__3013__a = new Array(arguments.length - 3);
            while (G__3013__i < G__3013__a.length) {
              G__3013__a[G__3013__i] = arguments[G__3013__i + 3];
              ++G__3013__i;
            }
            G__3012 = new cljs.core.IndexedSeq(G__3013__a, 0, null);
          }
          return G__3008__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__3012);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__3008.cljs$lang$maxFixedArity = 3;
    G__3008.cljs$lang$applyTo = G__3008__4.cljs$lang$applyTo;
    G__3008.cljs$core$IFn$_invoke$arity$0 = G__3008__0;
    G__3008.cljs$core$IFn$_invoke$arity$1 = G__3008__1;
    G__3008.cljs$core$IFn$_invoke$arity$2 = G__3008__2;
    G__3008.cljs$core$IFn$_invoke$arity$3 = G__3008__3;
    G__3008.cljs$core$IFn$_invoke$arity$variadic = G__3008__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__3008;
  }();
};
cljs.core.comp.cljs$core$IFn$_invoke$arity$3 = function(f, g, h) {
  return function() {
    var G__3014 = null;
    var G__3014__0 = function() {
      var G__2993 = function() {
        var G__2994 = h.cljs$core$IFn$_invoke$arity$0 ? h.cljs$core$IFn$_invoke$arity$0() : h.call(null);
        return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__2994) : g.call(null, G__2994);
      }();
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__2993) : f.call(null, G__2993);
    };
    var G__3014__1 = function(x) {
      var G__2995 = function() {
        var G__2996 = h.cljs$core$IFn$_invoke$arity$1 ? h.cljs$core$IFn$_invoke$arity$1(x) : h.call(null, x);
        return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__2996) : g.call(null, G__2996);
      }();
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__2995) : f.call(null, G__2995);
    };
    var G__3014__2 = function(x, y) {
      var G__2997 = function() {
        var G__2998 = h.cljs$core$IFn$_invoke$arity$2 ? h.cljs$core$IFn$_invoke$arity$2(x, y) : h.call(null, x, y);
        return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__2998) : g.call(null, G__2998);
      }();
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__2997) : f.call(null, G__2997);
    };
    var G__3014__3 = function(x, y, z) {
      var G__2999 = function() {
        var G__3000 = h.cljs$core$IFn$_invoke$arity$3 ? h.cljs$core$IFn$_invoke$arity$3(x, y, z) : h.call(null, x, y, z);
        return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__3000) : g.call(null, G__3000);
      }();
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__2999) : f.call(null, G__2999);
    };
    var G__3014__4 = function() {
      var G__3015__delegate = function(x, y, z, args) {
        var G__3001 = function() {
          var G__3002 = cljs.core.apply.cljs$core$IFn$_invoke$arity$5(h, x, y, z, args);
          return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__3002) : g.call(null, G__3002);
        }();
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__3001) : f.call(null, G__3001);
      };
      var G__3015 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__3016__i = 0, G__3016__a = new Array(arguments.length - 3);
          while (G__3016__i < G__3016__a.length) {
            G__3016__a[G__3016__i] = arguments[G__3016__i + 3];
            ++G__3016__i;
          }
          args = new cljs.core.IndexedSeq(G__3016__a, 0, null);
        }
        return G__3015__delegate.call(this, x, y, z, args);
      };
      G__3015.cljs$lang$maxFixedArity = 3;
      G__3015.cljs$lang$applyTo = function(arglist__3017) {
        var x = cljs.core.first(arglist__3017);
        arglist__3017 = cljs.core.next(arglist__3017);
        var y = cljs.core.first(arglist__3017);
        arglist__3017 = cljs.core.next(arglist__3017);
        var z = cljs.core.first(arglist__3017);
        var args = cljs.core.rest(arglist__3017);
        return G__3015__delegate(x, y, z, args);
      };
      G__3015.cljs$core$IFn$_invoke$arity$variadic = G__3015__delegate;
      return G__3015;
    }();
    G__3014 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__3014__0.call(this);
        case 1:
          return G__3014__1.call(this, x);
        case 2:
          return G__3014__2.call(this, x, y);
        case 3:
          return G__3014__3.call(this, x, y, z);
        default:
          var G__3018 = null;
          if (arguments.length > 3) {
            var G__3019__i = 0, G__3019__a = new Array(arguments.length - 3);
            while (G__3019__i < G__3019__a.length) {
              G__3019__a[G__3019__i] = arguments[G__3019__i + 3];
              ++G__3019__i;
            }
            G__3018 = new cljs.core.IndexedSeq(G__3019__a, 0, null);
          }
          return G__3014__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__3018);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__3014.cljs$lang$maxFixedArity = 3;
    G__3014.cljs$lang$applyTo = G__3014__4.cljs$lang$applyTo;
    G__3014.cljs$core$IFn$_invoke$arity$0 = G__3014__0;
    G__3014.cljs$core$IFn$_invoke$arity$1 = G__3014__1;
    G__3014.cljs$core$IFn$_invoke$arity$2 = G__3014__2;
    G__3014.cljs$core$IFn$_invoke$arity$3 = G__3014__3;
    G__3014.cljs$core$IFn$_invoke$arity$variadic = G__3014__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__3014;
  }();
};
cljs.core.comp.cljs$core$IFn$_invoke$arity$variadic = function(f1, f2, f3, fs) {
  var fs__$1 = cljs.core.reverse(cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(f1, f2, f3, fs));
  return function() {
    var G__3020__delegate = function(args) {
      var ret = cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.first(fs__$1), args);
      var fs__$2 = cljs.core.next(fs__$1);
      while (true) {
        if (fs__$2) {
          var G__3021 = function() {
            var fexpr__3003 = cljs.core.first(fs__$2);
            return fexpr__3003.cljs$core$IFn$_invoke$arity$1 ? fexpr__3003.cljs$core$IFn$_invoke$arity$1(ret) : fexpr__3003.call(null, ret);
          }();
          var G__3022 = cljs.core.next(fs__$2);
          ret = G__3021;
          fs__$2 = G__3022;
          continue;
        } else {
          return ret;
        }
        break;
      }
    };
    var G__3020 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        var G__3023__i = 0, G__3023__a = new Array(arguments.length - 0);
        while (G__3023__i < G__3023__a.length) {
          G__3023__a[G__3023__i] = arguments[G__3023__i + 0];
          ++G__3023__i;
        }
        args = new cljs.core.IndexedSeq(G__3023__a, 0, null);
      }
      return G__3020__delegate.call(this, args);
    };
    G__3020.cljs$lang$maxFixedArity = 0;
    G__3020.cljs$lang$applyTo = function(arglist__3024) {
      var args = cljs.core.seq(arglist__3024);
      return G__3020__delegate(args);
    };
    G__3020.cljs$core$IFn$_invoke$arity$variadic = G__3020__delegate;
    return G__3020;
  }();
};
cljs.core.comp.cljs$lang$applyTo = function(seq2983) {
  var G__2984 = cljs.core.first(seq2983);
  var seq2983__$1 = cljs.core.next(seq2983);
  var G__2985 = cljs.core.first(seq2983__$1);
  var seq2983__$2 = cljs.core.next(seq2983__$1);
  var G__2986 = cljs.core.first(seq2983__$2);
  var seq2983__$3 = cljs.core.next(seq2983__$2);
  var self__4723__auto__ = this;
  return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__2984, G__2985, G__2986, seq2983__$3);
};
cljs.core.comp.cljs$lang$maxFixedArity = 3;
cljs.core.partial = function cljs$core$partial(var_args) {
  var G__3031 = arguments.length;
  switch(G__3031) {
    case 1:
      return cljs.core.partial.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.partial.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.partial.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.partial.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      var args_arr__4757__auto__ = [];
      var len__4736__auto___3033 = arguments.length;
      var i__4737__auto___3034 = 0;
      while (true) {
        if (i__4737__auto___3034 < len__4736__auto___3033) {
          args_arr__4757__auto__.push(arguments[i__4737__auto___3034]);
          var G__3035 = i__4737__auto___3034 + 1;
          i__4737__auto___3034 = G__3035;
          continue;
        } else {
        }
        break;
      }
      var argseq__4758__auto__ = new cljs.core.IndexedSeq(args_arr__4757__auto__.slice(4), 0, null);
      return cljs.core.partial.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], argseq__4758__auto__);
  }
};
cljs.core.partial.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return f;
};
cljs.core.partial.cljs$core$IFn$_invoke$arity$2 = function(f, arg1) {
  return function() {
    var G__3036 = null;
    var G__3036__0 = function() {
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(arg1) : f.call(null, arg1);
    };
    var G__3036__1 = function(x) {
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(arg1, x) : f.call(null, arg1, x);
    };
    var G__3036__2 = function(x, y) {
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(arg1, x, y) : f.call(null, arg1, x, y);
    };
    var G__3036__3 = function(x, y, z) {
      return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(arg1, x, y, z) : f.call(null, arg1, x, y, z);
    };
    var G__3036__4 = function() {
      var G__3037__delegate = function(x, y, z, args) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, arg1, x, y, z, cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([args], 0));
      };
      var G__3037 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__3038__i = 0, G__3038__a = new Array(arguments.length - 3);
          while (G__3038__i < G__3038__a.length) {
            G__3038__a[G__3038__i] = arguments[G__3038__i + 3];
            ++G__3038__i;
          }
          args = new cljs.core.IndexedSeq(G__3038__a, 0, null);
        }
        return G__3037__delegate.call(this, x, y, z, args);
      };
      G__3037.cljs$lang$maxFixedArity = 3;
      G__3037.cljs$lang$applyTo = function(arglist__3039) {
        var x = cljs.core.first(arglist__3039);
        arglist__3039 = cljs.core.next(arglist__3039);
        var y = cljs.core.first(arglist__3039);
        arglist__3039 = cljs.core.next(arglist__3039);
        var z = cljs.core.first(arglist__3039);
        var args = cljs.core.rest(arglist__3039);
        return G__3037__delegate(x, y, z, args);
      };
      G__3037.cljs$core$IFn$_invoke$arity$variadic = G__3037__delegate;
      return G__3037;
    }();
    G__3036 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__3036__0.call(this);
        case 1:
          return G__3036__1.call(this, x);
        case 2:
          return G__3036__2.call(this, x, y);
        case 3:
          return G__3036__3.call(this, x, y, z);
        default:
          var G__3040 = null;
          if (arguments.length > 3) {
            var G__3041__i = 0, G__3041__a = new Array(arguments.length - 3);
            while (G__3041__i < G__3041__a.length) {
              G__3041__a[G__3041__i] = arguments[G__3041__i + 3];
              ++G__3041__i;
            }
            G__3040 = new cljs.core.IndexedSeq(G__3041__a, 0, null);
          }
          return G__3036__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__3040);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__3036.cljs$lang$maxFixedArity = 3;
    G__3036.cljs$lang$applyTo = G__3036__4.cljs$lang$applyTo;
    G__3036.cljs$core$IFn$_invoke$arity$0 = G__3036__0;
    G__3036.cljs$core$IFn$_invoke$arity$1 = G__3036__1;
    G__3036.cljs$core$IFn$_invoke$arity$2 = G__3036__2;
    G__3036.cljs$core$IFn$_invoke$arity$3 = G__3036__3;
    G__3036.cljs$core$IFn$_invoke$arity$variadic = G__3036__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__3036;
  }();
};
cljs.core.partial.cljs$core$IFn$_invoke$arity$3 = function(f, arg1, arg2) {
  return function() {
    var G__3042 = null;
    var G__3042__0 = function() {
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(arg1, arg2) : f.call(null, arg1, arg2);
    };
    var G__3042__1 = function(x) {
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(arg1, arg2, x) : f.call(null, arg1, arg2, x);
    };
    var G__3042__2 = function(x, y) {
      return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(arg1, arg2, x, y) : f.call(null, arg1, arg2, x, y);
    };
    var G__3042__3 = function(x, y, z) {
      return f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(arg1, arg2, x, y, z) : f.call(null, arg1, arg2, x, y, z);
    };
    var G__3042__4 = function() {
      var G__3043__delegate = function(x, y, z, args) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, arg1, arg2, x, y, cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([z, args], 0));
      };
      var G__3043 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__3044__i = 0, G__3044__a = new Array(arguments.length - 3);
          while (G__3044__i < G__3044__a.length) {
            G__3044__a[G__3044__i] = arguments[G__3044__i + 3];
            ++G__3044__i;
          }
          args = new cljs.core.IndexedSeq(G__3044__a, 0, null);
        }
        return G__3043__delegate.call(this, x, y, z, args);
      };
      G__3043.cljs$lang$maxFixedArity = 3;
      G__3043.cljs$lang$applyTo = function(arglist__3045) {
        var x = cljs.core.first(arglist__3045);
        arglist__3045 = cljs.core.next(arglist__3045);
        var y = cljs.core.first(arglist__3045);
        arglist__3045 = cljs.core.next(arglist__3045);
        var z = cljs.core.first(arglist__3045);
        var args = cljs.core.rest(arglist__3045);
        return G__3043__delegate(x, y, z, args);
      };
      G__3043.cljs$core$IFn$_invoke$arity$variadic = G__3043__delegate;
      return G__3043;
    }();
    G__3042 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__3042__0.call(this);
        case 1:
          return G__3042__1.call(this, x);
        case 2:
          return G__3042__2.call(this, x, y);
        case 3:
          return G__3042__3.call(this, x, y, z);
        default:
          var G__3046 = null;
          if (arguments.length > 3) {
            var G__3047__i = 0, G__3047__a = new Array(arguments.length - 3);
            while (G__3047__i < G__3047__a.length) {
              G__3047__a[G__3047__i] = arguments[G__3047__i + 3];
              ++G__3047__i;
            }
            G__3046 = new cljs.core.IndexedSeq(G__3047__a, 0, null);
          }
          return G__3042__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__3046);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__3042.cljs$lang$maxFixedArity = 3;
    G__3042.cljs$lang$applyTo = G__3042__4.cljs$lang$applyTo;
    G__3042.cljs$core$IFn$_invoke$arity$0 = G__3042__0;
    G__3042.cljs$core$IFn$_invoke$arity$1 = G__3042__1;
    G__3042.cljs$core$IFn$_invoke$arity$2 = G__3042__2;
    G__3042.cljs$core$IFn$_invoke$arity$3 = G__3042__3;
    G__3042.cljs$core$IFn$_invoke$arity$variadic = G__3042__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__3042;
  }();
};
cljs.core.partial.cljs$core$IFn$_invoke$arity$4 = function(f, arg1, arg2, arg3) {
  return function() {
    var G__3048 = null;
    var G__3048__0 = function() {
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(arg1, arg2, arg3) : f.call(null, arg1, arg2, arg3);
    };
    var G__3048__1 = function(x) {
      return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(arg1, arg2, arg3, x) : f.call(null, arg1, arg2, arg3, x);
    };
    var G__3048__2 = function(x, y) {
      return f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(arg1, arg2, arg3, x, y) : f.call(null, arg1, arg2, arg3, x, y);
    };
    var G__3048__3 = function(x, y, z) {
      return f.cljs$core$IFn$_invoke$arity$6 ? f.cljs$core$IFn$_invoke$arity$6(arg1, arg2, arg3, x, y, z) : f.call(null, arg1, arg2, arg3, x, y, z);
    };
    var G__3048__4 = function() {
      var G__3049__delegate = function(x, y, z, args) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, arg1, arg2, arg3, x, cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([y, z, args], 0));
      };
      var G__3049 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__3050__i = 0, G__3050__a = new Array(arguments.length - 3);
          while (G__3050__i < G__3050__a.length) {
            G__3050__a[G__3050__i] = arguments[G__3050__i + 3];
            ++G__3050__i;
          }
          args = new cljs.core.IndexedSeq(G__3050__a, 0, null);
        }
        return G__3049__delegate.call(this, x, y, z, args);
      };
      G__3049.cljs$lang$maxFixedArity = 3;
      G__3049.cljs$lang$applyTo = function(arglist__3051) {
        var x = cljs.core.first(arglist__3051);
        arglist__3051 = cljs.core.next(arglist__3051);
        var y = cljs.core.first(arglist__3051);
        arglist__3051 = cljs.core.next(arglist__3051);
        var z = cljs.core.first(arglist__3051);
        var args = cljs.core.rest(arglist__3051);
        return G__3049__delegate(x, y, z, args);
      };
      G__3049.cljs$core$IFn$_invoke$arity$variadic = G__3049__delegate;
      return G__3049;
    }();
    G__3048 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__3048__0.call(this);
        case 1:
          return G__3048__1.call(this, x);
        case 2:
          return G__3048__2.call(this, x, y);
        case 3:
          return G__3048__3.call(this, x, y, z);
        default:
          var G__3052 = null;
          if (arguments.length > 3) {
            var G__3053__i = 0, G__3053__a = new Array(arguments.length - 3);
            while (G__3053__i < G__3053__a.length) {
              G__3053__a[G__3053__i] = arguments[G__3053__i + 3];
              ++G__3053__i;
            }
            G__3052 = new cljs.core.IndexedSeq(G__3053__a, 0, null);
          }
          return G__3048__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__3052);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__3048.cljs$lang$maxFixedArity = 3;
    G__3048.cljs$lang$applyTo = G__3048__4.cljs$lang$applyTo;
    G__3048.cljs$core$IFn$_invoke$arity$0 = G__3048__0;
    G__3048.cljs$core$IFn$_invoke$arity$1 = G__3048__1;
    G__3048.cljs$core$IFn$_invoke$arity$2 = G__3048__2;
    G__3048.cljs$core$IFn$_invoke$arity$3 = G__3048__3;
    G__3048.cljs$core$IFn$_invoke$arity$variadic = G__3048__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__3048;
  }();
};
cljs.core.partial.cljs$core$IFn$_invoke$arity$variadic = function(f, arg1, arg2, arg3, more) {
  return function() {
    var G__3054__delegate = function(args) {
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, arg1, arg2, arg3, cljs.core.concat.cljs$core$IFn$_invoke$arity$2(more, args));
    };
    var G__3054 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        var G__3055__i = 0, G__3055__a = new Array(arguments.length - 0);
        while (G__3055__i < G__3055__a.length) {
          G__3055__a[G__3055__i] = arguments[G__3055__i + 0];
          ++G__3055__i;
        }
        args = new cljs.core.IndexedSeq(G__3055__a, 0, null);
      }
      return G__3054__delegate.call(this, args);
    };
    G__3054.cljs$lang$maxFixedArity = 0;
    G__3054.cljs$lang$applyTo = function(arglist__3056) {
      var args = cljs.core.seq(arglist__3056);
      return G__3054__delegate(args);
    };
    G__3054.cljs$core$IFn$_invoke$arity$variadic = G__3054__delegate;
    return G__3054;
  }();
};
cljs.core.partial.cljs$lang$applyTo = function(seq3026) {
  var G__3027 = cljs.core.first(seq3026);
  var seq3026__$1 = cljs.core.next(seq3026);
  var G__3028 = cljs.core.first(seq3026__$1);
  var seq3026__$2 = cljs.core.next(seq3026__$1);
  var G__3029 = cljs.core.first(seq3026__$2);
  var seq3026__$3 = cljs.core.next(seq3026__$2);
  var G__3030 = cljs.core.first(seq3026__$3);
  var seq3026__$4 = cljs.core.next(seq3026__$3);
  var self__4723__auto__ = this;
  return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__3027, G__3028, G__3029, G__3030, seq3026__$4);
};
cljs.core.partial.cljs$lang$maxFixedArity = 4;
cljs.core.fnil = function cljs$core$fnil(var_args) {
  var G__3058 = arguments.length;
  switch(G__3058) {
    case 2:
      return cljs.core.fnil.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.fnil.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.fnil.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
cljs.core.fnil.cljs$core$IFn$_invoke$arity$2 = function(f, x) {
  return function() {
    var G__3076 = null;
    var G__3076__1 = function(a) {
      var G__3059 = a == null ? x : a;
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__3059) : f.call(null, G__3059);
    };
    var G__3076__2 = function(a, b) {
      var G__3060 = a == null ? x : a;
      var G__3061 = b;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__3060, G__3061) : f.call(null, G__3060, G__3061);
    };
    var G__3076__3 = function(a, b, c) {
      var G__3062 = a == null ? x : a;
      var G__3063 = b;
      var G__3064 = c;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__3062, G__3063, G__3064) : f.call(null, G__3062, G__3063, G__3064);
    };
    var G__3076__4 = function() {
      var G__3077__delegate = function(a, b, c, ds) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, a == null ? x : a, b, c, ds);
      };
      var G__3077 = function(a, b, c, var_args) {
        var ds = null;
        if (arguments.length > 3) {
          var G__3078__i = 0, G__3078__a = new Array(arguments.length - 3);
          while (G__3078__i < G__3078__a.length) {
            G__3078__a[G__3078__i] = arguments[G__3078__i + 3];
            ++G__3078__i;
          }
          ds = new cljs.core.IndexedSeq(G__3078__a, 0, null);
        }
        return G__3077__delegate.call(this, a, b, c, ds);
      };
      G__3077.cljs$lang$maxFixedArity = 3;
      G__3077.cljs$lang$applyTo = function(arglist__3079) {
        var a = cljs.core.first(arglist__3079);
        arglist__3079 = cljs.core.next(arglist__3079);
        var b = cljs.core.first(arglist__3079);
        arglist__3079 = cljs.core.next(arglist__3079);
        var c = cljs.core.first(arglist__3079);
        var ds = cljs.core.rest(arglist__3079);
        return G__3077__delegate(a, b, c, ds);
      };
      G__3077.cljs$core$IFn$_invoke$arity$variadic = G__3077__delegate;
      return G__3077;
    }();
    G__3076 = function(a, b, c, var_args) {
      var ds = var_args;
      switch(arguments.length) {
        case 1:
          return G__3076__1.call(this, a);
        case 2:
          return G__3076__2.call(this, a, b);
        case 3:
          return G__3076__3.call(this, a, b, c);
        default:
          var G__3080 = null;
          if (arguments.length > 3) {
            var G__3081__i = 0, G__3081__a = new Array(arguments.length - 3);
            while (G__3081__i < G__3081__a.length) {
              G__3081__a[G__3081__i] = arguments[G__3081__i + 3];
              ++G__3081__i;
            }
            G__3080 = new cljs.core.IndexedSeq(G__3081__a, 0, null);
          }
          return G__3076__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, G__3080);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__3076.cljs$lang$maxFixedArity = 3;
    G__3076.cljs$lang$applyTo = G__3076__4.cljs$lang$applyTo;
    G__3076.cljs$core$IFn$_invoke$arity$1 = G__3076__1;
    G__3076.cljs$core$IFn$_invoke$arity$2 = G__3076__2;
    G__3076.cljs$core$IFn$_invoke$arity$3 = G__3076__3;
    G__3076.cljs$core$IFn$_invoke$arity$variadic = G__3076__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__3076;
  }();
};
cljs.core.fnil.cljs$core$IFn$_invoke$arity$3 = function(f, x, y) {
  return function() {
    var G__3082 = null;
    var G__3082__2 = function(a, b) {
      var G__3065 = a == null ? x : a;
      var G__3066 = b == null ? y : b;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__3065, G__3066) : f.call(null, G__3065, G__3066);
    };
    var G__3082__3 = function(a, b, c) {
      var G__3067 = a == null ? x : a;
      var G__3068 = b == null ? y : b;
      var G__3069 = c;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__3067, G__3068, G__3069) : f.call(null, G__3067, G__3068, G__3069);
    };
    var G__3082__4 = function() {
      var G__3083__delegate = function(a, b, c, ds) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, a == null ? x : a, b == null ? y : b, c, ds);
      };
      var G__3083 = function(a, b, c, var_args) {
        var ds = null;
        if (arguments.length > 3) {
          var G__3084__i = 0, G__3084__a = new Array(arguments.length - 3);
          while (G__3084__i < G__3084__a.length) {
            G__3084__a[G__3084__i] = arguments[G__3084__i + 3];
            ++G__3084__i;
          }
          ds = new cljs.core.IndexedSeq(G__3084__a, 0, null);
        }
        return G__3083__delegate.call(this, a, b, c, ds);
      };
      G__3083.cljs$lang$maxFixedArity = 3;
      G__3083.cljs$lang$applyTo = function(arglist__3085) {
        var a = cljs.core.first(arglist__3085);
        arglist__3085 = cljs.core.next(arglist__3085);
        var b = cljs.core.first(arglist__3085);
        arglist__3085 = cljs.core.next(arglist__3085);
        var c = cljs.core.first(arglist__3085);
        var ds = cljs.core.rest(arglist__3085);
        return G__3083__delegate(a, b, c, ds);
      };
      G__3083.cljs$core$IFn$_invoke$arity$variadic = G__3083__delegate;
      return G__3083;
    }();
    G__3082 = function(a, b, c, var_args) {
      var ds = var_args;
      switch(arguments.length) {
        case 2:
          return G__3082__2.call(this, a, b);
        case 3:
          return G__3082__3.call(this, a, b, c);
        default:
          var G__3086 = null;
          if (arguments.length > 3) {
            var G__3087__i = 0, G__3087__a = new Array(arguments.length - 3);
            while (G__3087__i < G__3087__a.length) {
              G__3087__a[G__3087__i] = arguments[G__3087__i + 3];
              ++G__3087__i;
            }
            G__3086 = new cljs.core.IndexedSeq(G__3087__a, 0, null);
          }
          return G__3082__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, G__3086);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__3082.cljs$lang$maxFixedArity = 3;
    G__3082.cljs$lang$applyTo = G__3082__4.cljs$lang$applyTo;
    G__3082.cljs$core$IFn$_invoke$arity$2 = G__3082__2;
    G__3082.cljs$core$IFn$_invoke$arity$3 = G__3082__3;
    G__3082.cljs$core$IFn$_invoke$arity$variadic = G__3082__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__3082;
  }();
};
cljs.core.fnil.cljs$core$IFn$_invoke$arity$4 = function(f, x, y, z) {
  return function() {
    var G__3088 = null;
    var G__3088__2 = function(a, b) {
      var G__3070 = a == null ? x : a;
      var G__3071 = b == null ? y : b;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__3070, G__3071) : f.call(null, G__3070, G__3071);
    };
    var G__3088__3 = function(a, b, c) {
      var G__3072 = a == null ? x : a;
      var G__3073 = b == null ? y : b;
      var G__3074 = c == null ? z : c;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__3072, G__3073, G__3074) : f.call(null, G__3072, G__3073, G__3074);
    };
    var G__3088__4 = function() {
      var G__3089__delegate = function(a, b, c, ds) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, a == null ? x : a, b == null ? y : b, c == null ? z : c, ds);
      };
      var G__3089 = function(a, b, c, var_args) {
        var ds = null;
        if (arguments.length > 3) {
          var G__3090__i = 0, G__3090__a = new Array(arguments.length - 3);
          while (G__3090__i < G__3090__a.length) {
            G__3090__a[G__3090__i] = arguments[G__3090__i + 3];
            ++G__3090__i;
          }
          ds = new cljs.core.IndexedSeq(G__3090__a, 0, null);
        }
        return G__3089__delegate.call(this, a, b, c, ds);
      };
      G__3089.cljs$lang$maxFixedArity = 3;
      G__3089.cljs$lang$applyTo = function(arglist__3091) {
        var a = cljs.core.first(arglist__3091);
        arglist__3091 = cljs.core.next(arglist__3091);
        var b = cljs.core.first(arglist__3091);
        arglist__3091 = cljs.core.next(arglist__3091);
        var c = cljs.core.first(arglist__3091);
        var ds = cljs.core.rest(arglist__3091);
        return G__3089__delegate(a, b, c, ds);
      };
      G__3089.cljs$core$IFn$_invoke$arity$variadic = G__3089__delegate;
      return G__3089;
    }();
    G__3088 = function(a, b, c, var_args) {
      var ds = var_args;
      switch(arguments.length) {
        case 2:
          return G__3088__2.call(this, a, b);
        case 3:
          return G__3088__3.call(this, a, b, c);
        default:
          var G__3092 = null;
          if (arguments.length > 3) {
            var G__3093__i = 0, G__3093__a = new Array(arguments.length - 3);
            while (G__3093__i < G__3093__a.length) {
              G__3093__a[G__3093__i] = arguments[G__3093__i + 3];
              ++G__3093__i;
            }
            G__3092 = new cljs.core.IndexedSeq(G__3093__a, 0, null);
          }
          return G__3088__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, G__3092);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__3088.cljs$lang$maxFixedArity = 3;
    G__3088.cljs$lang$applyTo = G__3088__4.cljs$lang$applyTo;
    G__3088.cljs$core$IFn$_invoke$arity$2 = G__3088__2;
    G__3088.cljs$core$IFn$_invoke$arity$3 = G__3088__3;
    G__3088.cljs$core$IFn$_invoke$arity$variadic = G__3088__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__3088;
  }();
};
cljs.core.fnil.cljs$lang$maxFixedArity = 4;
cljs.core.map_indexed = function cljs$core$map_indexed(var_args) {
  var G__3095 = arguments.length;
  switch(G__3095) {
    case 1:
      return cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return function(rf) {
    var i = cljs.core.volatile_BANG_(-1);
    return function() {
      var G__3109 = null;
      var G__3109__0 = function() {
        return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
      };
      var G__3109__1 = function(result) {
        return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
      };
      var G__3109__2 = function(result, input) {
        var G__3096 = result;
        var G__3097 = function() {
          var G__3098 = i.cljs$core$IVolatile$_vreset_BANG_$arity$2(null, i.cljs$core$IDeref$_deref$arity$1(null) + 1);
          var G__3099 = input;
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__3098, G__3099) : f.call(null, G__3098, G__3099);
        }();
        return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__3096, G__3097) : rf.call(null, G__3096, G__3097);
      };
      G__3109 = function(result, input) {
        switch(arguments.length) {
          case 0:
            return G__3109__0.call(this);
          case 1:
            return G__3109__1.call(this, result);
          case 2:
            return G__3109__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__3109.cljs$core$IFn$_invoke$arity$0 = G__3109__0;
      G__3109.cljs$core$IFn$_invoke$arity$1 = G__3109__1;
      G__3109.cljs$core$IFn$_invoke$arity$2 = G__3109__2;
      return G__3109;
    }();
  };
};
cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  var mapi = function cljs$core$mapi(idx, coll__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__5735__auto__ = cljs.core.seq(coll__$1);
      if (temp__5735__auto__) {
        var s = temp__5735__auto__;
        if (cljs.core.chunked_seq_QMARK_(s)) {
          var c = cljs.core.chunk_first(s);
          var size = cljs.core.count(c);
          var b = cljs.core.chunk_buffer(size);
          var n__4613__auto___3110 = size;
          var i_3111 = 0;
          while (true) {
            if (i_3111 < n__4613__auto___3110) {
              cljs.core.chunk_append(b, function() {
                var G__3104 = idx + i_3111;
                var G__3105 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_3111);
                return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__3104, G__3105) : f.call(null, G__3104, G__3105);
              }());
              var G__3112 = i_3111 + 1;
              i_3111 = G__3112;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons(cljs.core.chunk(b), cljs$core$mapi(idx + size, cljs.core.chunk_rest(s)));
        } else {
          return cljs.core.cons(function() {
            var G__3106 = idx;
            var G__3107 = cljs.core.first(s);
            return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__3106, G__3107) : f.call(null, G__3106, G__3107);
          }(), cljs$core$mapi(idx + 1, cljs.core.rest(s)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  return mapi(0, coll);
};
cljs.core.map_indexed.cljs$lang$maxFixedArity = 2;
cljs.core.keep = function cljs$core$keep(var_args) {
  var G__3114 = arguments.length;
  switch(G__3114) {
    case 1:
      return cljs.core.keep.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.keep.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
cljs.core.keep.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return function(rf) {
    return function() {
      var G__3118 = null;
      var G__3118__0 = function() {
        return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
      };
      var G__3118__1 = function(result) {
        return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
      };
      var G__3118__2 = function(result, input) {
        var v = f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(input) : f.call(null, input);
        if (v == null) {
          return result;
        } else {
          return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, v) : rf.call(null, result, v);
        }
      };
      G__3118 = function(result, input) {
        switch(arguments.length) {
          case 0:
            return G__3118__0.call(this);
          case 1:
            return G__3118__1.call(this, result);
          case 2:
            return G__3118__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__3118.cljs$core$IFn$_invoke$arity$0 = G__3118__0;
      G__3118.cljs$core$IFn$_invoke$arity$1 = G__3118__1;
      G__3118.cljs$core$IFn$_invoke$arity$2 = G__3118__2;
      return G__3118;
    }();
  };
};
cljs.core.keep.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__5735__auto__ = cljs.core.seq(coll);
    if (temp__5735__auto__) {
      var s = temp__5735__auto__;
      if (cljs.core.chunked_seq_QMARK_(s)) {
        var c = cljs.core.chunk_first(s);
        var size = cljs.core.count(c);
        var b = cljs.core.chunk_buffer(size);
        var n__4613__auto___3119 = size;
        var i_3120 = 0;
        while (true) {
          if (i_3120 < n__4613__auto___3119) {
            var x_3121 = function() {
              var G__3115 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_3120);
              return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__3115) : f.call(null, G__3115);
            }();
            if (x_3121 == null) {
            } else {
              cljs.core.chunk_append(b, x_3121);
            }
            var G__3122 = i_3120 + 1;
            i_3120 = G__3122;
            continue;
          } else {
          }
          break;
        }
        return cljs.core.chunk_cons(cljs.core.chunk(b), cljs.core.keep.cljs$core$IFn$_invoke$arity$2(f, cljs.core.chunk_rest(s)));
      } else {
        var x = function() {
          var G__3116 = cljs.core.first(s);
          return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__3116) : f.call(null, G__3116);
        }();
        if (x == null) {
          return cljs.core.keep.cljs$core$IFn$_invoke$arity$2(f, cljs.core.rest(s));
        } else {
          return cljs.core.cons(x, cljs.core.keep.cljs$core$IFn$_invoke$arity$2(f, cljs.core.rest(s)));
        }
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.keep.cljs$lang$maxFixedArity = 2;
cljs.core.Atom = function(state, meta, validator, watches) {
  this.state = state;
  this.meta = meta;
  this.validator = validator;
  this.watches = watches;
  this.cljs$lang$protocol_mask$partition1$ = 16386;
  this.cljs$lang$protocol_mask$partition0$ = 6455296;
};
cljs.core.Atom.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Atom.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return o__$1 === other;
};
cljs.core.Atom.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.state;
};
cljs.core.Atom.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_notify_watches$arity$3 = function(this$, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  var seq__3123 = cljs.core.seq(self__.watches);
  var chunk__3124 = null;
  var count__3125 = 0;
  var i__3126 = 0;
  while (true) {
    if (i__3126 < count__3125) {
      var vec__3133 = chunk__3124.cljs$core$IIndexed$_nth$arity$2(null, i__3126);
      var key = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__3133, 0, null);
      var f = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__3133, 1, null);
      f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(key, this$__$1, oldval, newval) : f.call(null, key, this$__$1, oldval, newval);
      var G__3139 = seq__3123;
      var G__3140 = chunk__3124;
      var G__3141 = count__3125;
      var G__3142 = i__3126 + 1;
      seq__3123 = G__3139;
      chunk__3124 = G__3140;
      count__3125 = G__3141;
      i__3126 = G__3142;
      continue;
    } else {
      var temp__5735__auto__ = cljs.core.seq(seq__3123);
      if (temp__5735__auto__) {
        var seq__3123__$1 = temp__5735__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__3123__$1)) {
          var c__4556__auto__ = cljs.core.chunk_first(seq__3123__$1);
          var G__3143 = cljs.core.chunk_rest(seq__3123__$1);
          var G__3144 = c__4556__auto__;
          var G__3145 = cljs.core.count(c__4556__auto__);
          var G__3146 = 0;
          seq__3123 = G__3143;
          chunk__3124 = G__3144;
          count__3125 = G__3145;
          i__3126 = G__3146;
          continue;
        } else {
          var vec__3136 = cljs.core.first(seq__3123__$1);
          var key = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__3136, 0, null);
          var f = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__3136, 1, null);
          f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(key, this$__$1, oldval, newval) : f.call(null, key, this$__$1, oldval, newval);
          var G__3147 = cljs.core.next(seq__3123__$1);
          var G__3148 = null;
          var G__3149 = 0;
          var G__3150 = 0;
          seq__3123 = G__3147;
          chunk__3124 = G__3148;
          count__3125 = G__3149;
          i__3126 = G__3150;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_add_watch$arity$3 = function(this$, key, f) {
  var self__ = this;
  var this$__$1 = this;
  this$__$1.watches = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.watches, key, f);
  return this$__$1;
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_remove_watch$arity$2 = function(this$, key) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1.watches = cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(self__.watches, key);
};
cljs.core.Atom.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1);
};
cljs.core.Atom.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "state", "state", -348086572, null), new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "validator", "validator", -325659154, null), new cljs.core.Symbol(null, "watches", "watches", 1367433992, null)], null);
};
cljs.core.Atom.cljs$lang$type = true;
cljs.core.Atom.cljs$lang$ctorStr = "cljs.core/Atom";
cljs.core.Atom.cljs$lang$ctorPrWriter = function(this__4369__auto__, writer__4370__auto__, opt__4371__auto__) {
  return cljs.core._write(writer__4370__auto__, "cljs.core/Atom");
};
cljs.core.__GT_Atom = function cljs$core$__GT_Atom(state, meta, validator, watches) {
  return new cljs.core.Atom(state, meta, validator, watches);
};
cljs.core.atom = function cljs$core$atom(var_args) {
  var G__3154 = arguments.length;
  switch(G__3154) {
    case 1:
      return cljs.core.atom.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      var args_arr__4757__auto__ = [];
      var len__4736__auto___3159 = arguments.length;
      var i__4737__auto___3160 = 0;
      while (true) {
        if (i__4737__auto___3160 < len__4736__auto___3159) {
          args_arr__4757__auto__.push(arguments[i__4737__auto___3160]);
          var G__3161 = i__4737__auto___3160 + 1;
          i__4737__auto___3160 = G__3161;
          continue;
        } else {
        }
        break;
      }
      var argseq__4758__auto__ = new cljs.core.IndexedSeq(args_arr__4757__auto__.slice(1), 0, null);
      return cljs.core.atom.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__4758__auto__);
  }
};
cljs.core.atom.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return new cljs.core.Atom(x, null, null, null);
};
cljs.core.atom.cljs$core$IFn$_invoke$arity$variadic = function(x, p__3155) {
  var map__3156 = p__3155;
  var map__3156__$1 = (!(map__3156 == null) ? map__3156.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === map__3156.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map, map__3156) : map__3156;
  var meta = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__3156__$1, new cljs.core.Keyword(null, "meta", "meta", 1499536964));
  var validator = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__3156__$1, new cljs.core.Keyword(null, "validator", "validator", -1966190681));
  return new cljs.core.Atom(x, meta, validator, null);
};
cljs.core.atom.cljs$lang$applyTo = function(seq3152) {
  var G__3153 = cljs.core.first(seq3152);
  var seq3152__$1 = cljs.core.next(seq3152);
  var self__4723__auto__ = this;
  return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__3153, seq3152__$1);
};
cljs.core.atom.cljs$lang$maxFixedArity = 1;
cljs.core.reset_BANG_ = function cljs$core$reset_BANG_(a, new_value) {
  if (a instanceof cljs.core.Atom) {
    var validate = a.validator;
    if (validate == null) {
    } else {
      if (cljs.core.truth_(validate.cljs$core$IFn$_invoke$arity$1 ? validate.cljs$core$IFn$_invoke$arity$1(new_value) : validate.call(null, new_value))) {
      } else {
        throw new Error("Validator rejected reference state");
      }
    }
    var old_value = a.state;
    a.state = new_value;
    if (a.watches == null) {
    } else {
      a.cljs$core$IWatchable$_notify_watches$arity$3(null, old_value, new_value);
    }
    return new_value;
  } else {
    return cljs.core._reset_BANG_(a, new_value);
  }
};
cljs.core.reset_vals_BANG_ = function cljs$core$reset_vals_BANG_(a, new_value) {
  var validate = a.validator;
  if (validate == null) {
  } else {
    if (cljs.core.truth_(validate.cljs$core$IFn$_invoke$arity$1 ? validate.cljs$core$IFn$_invoke$arity$1(new_value) : validate.call(null, new_value))) {
    } else {
      throw new Error("Validator rejected reference state");
    }
  }
  var old_value = a.state;
  a.state = new_value;
  if (a.watches == null) {
  } else {
    cljs.core._notify_watches(a, old_value, new_value);
  }
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [old_value, new_value], null);
};
cljs.core.swap_BANG_ = function cljs$core$swap_BANG_(var_args) {
  var G__3168 = arguments.length;
  switch(G__3168) {
    case 2:
      return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      var args_arr__4757__auto__ = [];
      var len__4736__auto___3176 = arguments.length;
      var i__4737__auto___3177 = 0;
      while (true) {
        if (i__4737__auto___3177 < len__4736__auto___3176) {
          args_arr__4757__auto__.push(arguments[i__4737__auto___3177]);
          var G__3178 = i__4737__auto___3177 + 1;
          i__4737__auto___3177 = G__3178;
          continue;
        } else {
        }
        break;
      }
      var argseq__4758__auto__ = new cljs.core.IndexedSeq(args_arr__4757__auto__.slice(4), 0, null);
      return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], argseq__4758__auto__);
  }
};
cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2 = function(a, f) {
  if (a instanceof cljs.core.Atom) {
    return cljs.core.reset_BANG_(a, function() {
      var G__3169 = a.state;
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__3169) : f.call(null, G__3169);
    }());
  } else {
    return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$2(a, f);
  }
};
cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3 = function(a, f, x) {
  if (a instanceof cljs.core.Atom) {
    return cljs.core.reset_BANG_(a, function() {
      var G__3170 = a.state;
      var G__3171 = x;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__3170, G__3171) : f.call(null, G__3170, G__3171);
    }());
  } else {
    return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$3(a, f, x);
  }
};
cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4 = function(a, f, x, y) {
  if (a instanceof cljs.core.Atom) {
    return cljs.core.reset_BANG_(a, function() {
      var G__3172 = a.state;
      var G__3173 = x;
      var G__3174 = y;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__3172, G__3173, G__3174) : f.call(null, G__3172, G__3173, G__3174);
    }());
  } else {
    return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$4(a, f, x, y);
  }
};
cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(a, f, x, y, more) {
  if (a instanceof cljs.core.Atom) {
    return cljs.core.reset_BANG_(a, cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, a.state, x, y, more));
  } else {
    return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$5(a, f, x, y, more);
  }
};
cljs.core.swap_BANG_.cljs$lang$applyTo = function(seq3163) {
  var G__3164 = cljs.core.first(seq3163);
  var seq3163__$1 = cljs.core.next(seq3163);
  var G__3165 = cljs.core.first(seq3163__$1);
  var seq3163__$2 = cljs.core.next(seq3163__$1);
  var G__3166 = cljs.core.first(seq3163__$2);
  var seq3163__$3 = cljs.core.next(seq3163__$2);
  var G__3167 = cljs.core.first(seq3163__$3);
  var seq3163__$4 = cljs.core.next(seq3163__$3);
  var self__4723__auto__ = this;
  return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__3164, G__3165, G__3166, G__3167, seq3163__$4);
};
cljs.core.swap_BANG_.cljs$lang$maxFixedArity = 4;
cljs.core.swap_vals_BANG_ = function cljs$core$swap_vals_BANG_(var_args) {
  var G__3185 = arguments.length;
  switch(G__3185) {
    case 2:
      return cljs.core.swap_vals_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.swap_vals_BANG_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.swap_vals_BANG_.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      var args_arr__4757__auto__ = [];
      var len__4736__auto___3193 = arguments.length;
      var i__4737__auto___3194 = 0;
      while (true) {
        if (i__4737__auto___3194 < len__4736__auto___3193) {
          args_arr__4757__auto__.push(arguments[i__4737__auto___3194]);
          var G__3195 = i__4737__auto___3194 + 1;
          i__4737__auto___3194 = G__3195;
          continue;
        } else {
        }
        break;
      }
      var argseq__4758__auto__ = new cljs.core.IndexedSeq(args_arr__4757__auto__.slice(4), 0, null);
      return cljs.core.swap_vals_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], argseq__4758__auto__);
  }
};
cljs.core.swap_vals_BANG_.cljs$core$IFn$_invoke$arity$2 = function(a, f) {
  return cljs.core.reset_vals_BANG_(a, function() {
    var G__3186 = a.state;
    return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__3186) : f.call(null, G__3186);
  }());
};
cljs.core.swap_vals_BANG_.cljs$core$IFn$_invoke$arity$3 = function(a, f, x) {
  return cljs.core.reset_vals_BANG_(a, function() {
    var G__3187 = a.state;
    var G__3188 = x;
    return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__3187, G__3188) : f.call(null, G__3187, G__3188);
  }());
};
cljs.core.swap_vals_BANG_.cljs$core$IFn$_invoke$arity$4 = function(a, f, x, y) {
  return cljs.core.reset_vals_BANG_(a, function() {
    var G__3189 = a.state;
    var G__3190 = x;
    var G__3191 = y;
    return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__3189, G__3190, G__3191) : f.call(null, G__3189, G__3190, G__3191);
  }());
};
cljs.core.swap_vals_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(a, f, x, y, more) {
  return cljs.core.reset_vals_BANG_(a, cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, a.state, x, y, more));
};
cljs.core.swap_vals_BANG_.cljs$lang$applyTo = function(seq3180) {
  var G__3181 = cljs.core.first(seq3180);
  var seq3180__$1 = cljs.core.next(seq3180);
  var G__3182 = cljs.core.first(seq3180__$1);
  var seq3180__$2 = cljs.core.next(seq3180__$1);
  var G__3183 = cljs.core.first(seq3180__$2);
  var seq3180__$3 = cljs.core.next(seq3180__$2);
  var G__3184 = cljs.core.first(seq3180__$3);
  var seq3180__$4 = cljs.core.next(seq3180__$3);
  var self__4723__auto__ = this;
  return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__3181, G__3182, G__3183, G__3184, seq3180__$4);
};
cljs.core.swap_vals_BANG_.cljs$lang$maxFixedArity = 4;
cljs.core.compare_and_set_BANG_ = function cljs$core$compare_and_set_BANG_(a, oldval, newval) {
  if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(a.cljs$core$IDeref$_deref$arity$1(null), oldval)) {
    cljs.core.reset_BANG_(a, newval);
    return true;
  } else {
    return false;
  }
};
cljs.core.set_validator_BANG_ = function cljs$core$set_validator_BANG_(iref, val) {
  if (!(val == null) && cljs.core.not(function() {
    var G__3197 = cljs.core._deref(iref);
    return val.cljs$core$IFn$_invoke$arity$1 ? val.cljs$core$IFn$_invoke$arity$1(G__3197) : val.call(null, G__3197);
  }())) {
    throw new Error("Validator rejected reference state");
  } else {
  }
  return iref.validator = val;
};
cljs.core.get_validator = function cljs$core$get_validator(iref) {
  return iref.validator;
};
cljs.core.Volatile = function(state) {
  this.state = state;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.Volatile.prototype.cljs$core$IVolatile$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.Volatile.prototype.cljs$core$IVolatile$_vreset_BANG_$arity$2 = function(_, new_state) {
  var self__ = this;
  var ___$1 = this;
  return self__.state = new_state;
};
cljs.core.Volatile.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.state;
};
cljs.core.Volatile.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "state", "state", -348086572, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.Volatile.cljs$lang$type = true;
cljs.core.Volatile.cljs$lang$ctorStr = "cljs.core/Volatile";
cljs.core.Volatile.cljs$lang$ctorPrWriter = function(this__4369__auto__, writer__4370__auto__, opt__4371__auto__) {
  return cljs.core._write(writer__4370__auto__, "cljs.core/Volatile");
};
cljs.core.__GT_Volatile = function cljs$core$__GT_Volatile(state) {
  return new cljs.core.Volatile(state);
};
cljs.core.volatile_BANG_ = function cljs$core$volatile_BANG_(val) {
  return new cljs.core.Volatile(val);
};
cljs.core.volatile_QMARK_ = function cljs$core$volatile_QMARK_(x) {
  return x instanceof cljs.core.Volatile;
};
cljs.core.vreset_BANG_ = function cljs$core$vreset_BANG_(vol, newval) {
  return cljs.core._vreset_BANG_(vol, newval);
};
cljs.core.keep_indexed = function cljs$core$keep_indexed(var_args) {
  var G__3199 = arguments.length;
  switch(G__3199) {
    case 1:
      return cljs.core.keep_indexed.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.keep_indexed.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
cljs.core.keep_indexed.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return function(rf) {
    var ia = cljs.core.volatile_BANG_(-1);
    return function() {
      var G__3209 = null;
      var G__3209__0 = function() {
        return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
      };
      var G__3209__1 = function(result) {
        return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
      };
      var G__3209__2 = function(result, input) {
        var i = ia.cljs$core$IVolatile$_vreset_BANG_$arity$2(null, ia.cljs$core$IDeref$_deref$arity$1(null) + 1);
        var v = f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(i, input) : f.call(null, i, input);
        if (v == null) {
          return result;
        } else {
          return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, v) : rf.call(null, result, v);
        }
      };
      G__3209 = function(result, input) {
        switch(arguments.length) {
          case 0:
            return G__3209__0.call(this);
          case 1:
            return G__3209__1.call(this, result);
          case 2:
            return G__3209__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__3209.cljs$core$IFn$_invoke$arity$0 = G__3209__0;
      G__3209.cljs$core$IFn$_invoke$arity$1 = G__3209__1;
      G__3209.cljs$core$IFn$_invoke$arity$2 = G__3209__2;
      return G__3209;
    }();
  };
};
cljs.core.keep_indexed.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  var keepi = function cljs$core$keepi(idx, coll__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__5735__auto__ = cljs.core.seq(coll__$1);
      if (temp__5735__auto__) {
        var s = temp__5735__auto__;
        if (cljs.core.chunked_seq_QMARK_(s)) {
          var c = cljs.core.chunk_first(s);
          var size = cljs.core.count(c);
          var b = cljs.core.chunk_buffer(size);
          var n__4613__auto___3210 = size;
          var i_3211 = 0;
          while (true) {
            if (i_3211 < n__4613__auto___3210) {
              var x_3212 = function() {
                var G__3204 = idx + i_3211;
                var G__3205 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_3211);
                return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__3204, G__3205) : f.call(null, G__3204, G__3205);
              }();
              if (x_3212 == null) {
              } else {
                cljs.core.chunk_append(b, x_3212);
              }
              var G__3213 = i_3211 + 1;
              i_3211 = G__3213;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons(cljs.core.chunk(b), cljs$core$keepi(idx + size, cljs.core.chunk_rest(s)));
        } else {
          var x = function() {
            var G__3206 = idx;
            var G__3207 = cljs.core.first(s);
            return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__3206, G__3207) : f.call(null, G__3206, G__3207);
          }();
          if (x == null) {
            return cljs$core$keepi(idx + 1, cljs.core.rest(s));
          } else {
            return cljs.core.cons(x, cljs$core$keepi(idx + 1, cljs.core.rest(s)));
          }
        }
      } else {
        return null;
      }
    }, null, null);
  };
  return keepi(0, coll);
};
cljs.core.keep_indexed.cljs$lang$maxFixedArity = 2;
cljs.core.every_pred = function cljs$core$every_pred(var_args) {
  var G__3225 = arguments.length;
  switch(G__3225) {
    case 1:
      return cljs.core.every_pred.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.every_pred.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.every_pred.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var args_arr__4757__auto__ = [];
      var len__4736__auto___3227 = arguments.length;
      var i__4737__auto___3228 = 0;
      while (true) {
        if (i__4737__auto___3228 < len__4736__auto___3227) {
          args_arr__4757__auto__.push(arguments[i__4737__auto___3228]);
          var G__3229 = i__4737__auto___3228 + 1;
          i__4737__auto___3228 = G__3229;
          continue;
        } else {
        }
        break;
      }
      var argseq__4758__auto__ = new cljs.core.IndexedSeq(args_arr__4757__auto__.slice(3), 0, null);
      return cljs.core.every_pred.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__4758__auto__);
  }
};
cljs.core.every_pred.cljs$core$IFn$_invoke$arity$1 = function(p) {
  return function() {
    var cljs$core$ep1 = null;
    var cljs$core$ep1__0 = function() {
      return true;
    };
    var cljs$core$ep1__1 = function(x) {
      return cljs.core.boolean$(p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(x) : p.call(null, x));
    };
    var cljs$core$ep1__2 = function(x, y) {
      return cljs.core.boolean$(function() {
        var and__4115__auto__ = p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(x) : p.call(null, x);
        if (cljs.core.truth_(and__4115__auto__)) {
          return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(y) : p.call(null, y);
        } else {
          return and__4115__auto__;
        }
      }());
    };
    var cljs$core$ep1__3 = function(x, y, z) {
      return cljs.core.boolean$(function() {
        var and__4115__auto__ = p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(x) : p.call(null, x);
        if (cljs.core.truth_(and__4115__auto__)) {
          var and__4115__auto____$1 = p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(y) : p.call(null, y);
          if (cljs.core.truth_(and__4115__auto____$1)) {
            return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(z) : p.call(null, z);
          } else {
            return and__4115__auto____$1;
          }
        } else {
          return and__4115__auto__;
        }
      }());
    };
    var cljs$core$ep1__4 = function() {
      var G__3230__delegate = function(x, y, z, args) {
        return cljs.core.boolean$(function() {
          var and__4115__auto__ = cljs$core$ep1.cljs$core$IFn$_invoke$arity$3(x, y, z);
          if (cljs.core.truth_(and__4115__auto__)) {
            return cljs.core.every_QMARK_(p, args);
          } else {
            return and__4115__auto__;
          }
        }());
      };
      var G__3230 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__3231__i = 0, G__3231__a = new Array(arguments.length - 3);
          while (G__3231__i < G__3231__a.length) {
            G__3231__a[G__3231__i] = arguments[G__3231__i + 3];
            ++G__3231__i;
          }
          args = new cljs.core.IndexedSeq(G__3231__a, 0, null);
        }
        return G__3230__delegate.call(this, x, y, z, args);
      };
      G__3230.cljs$lang$maxFixedArity = 3;
      G__3230.cljs$lang$applyTo = function(arglist__3232) {
        var x = cljs.core.first(arglist__3232);
        arglist__3232 = cljs.core.next(arglist__3232);
        var y = cljs.core.first(arglist__3232);
        arglist__3232 = cljs.core.next(arglist__3232);
        var z = cljs.core.first(arglist__3232);
        var args = cljs.core.rest(arglist__3232);
        return G__3230__delegate(x, y, z, args);
      };
      G__3230.cljs$core$IFn$_invoke$arity$variadic = G__3230__delegate;
      return G__3230;
    }();
    cljs$core$ep1 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return cljs$core$ep1__0.call(this);
        case 1:
          return cljs$core$ep1__1.call(this, x);
        case 2:
          return cljs$core$ep1__2.call(this, x, y);
        case 3:
          return cljs$core$ep1__3.call(this, x, y, z);
        default:
          var G__3233 = null;
          if (arguments.length > 3) {
            var G__3234__i = 0, G__3234__a = new Array(arguments.length - 3);
            while (G__3234__i < G__3234__a.length) {
              G__3234__a[G__3234__i] = arguments[G__3234__i + 3];
              ++G__3234__i;
            }
            G__3233 = new cljs.core.IndexedSeq(G__3234__a, 0, null);
          }
          return cljs$core$ep1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__3233);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$ep1.cljs$lang$maxFixedArity = 3;
    cljs$core$ep1.cljs$lang$applyTo = cljs$core$ep1__4.cljs$lang$applyTo;
    cljs$core$ep1.cljs$core$IFn$_invoke$arity$0 = cljs$core$ep1__0;
    cljs$core$ep1.cljs$core$IFn$_invoke$arity$1 = cljs$core$ep1__1;
    cljs$core$ep1.cljs$core$IFn$_invoke$arity$2 = cljs$core$ep1__2;
    cljs$core$ep1.cljs$core$IFn$_invoke$arity$3 = cljs$core$ep1__3;
    cljs$core$ep1.cljs$core$IFn$_invoke$arity$variadic = cljs$core$ep1__4.cljs$core$IFn$_invoke$arity$variadic;
    return cljs$core$ep1;
  }();
};
cljs.core.every_pred.cljs$core$IFn$_invoke$arity$2 = function(p1, p2) {
  return function() {
    var cljs$core$ep2 = null;
    var cljs$core$ep2__0 = function() {
      return true;
    };
    var cljs$core$ep2__1 = function(x) {
      return cljs.core.boolean$(function() {
        var and__4115__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
        if (cljs.core.truth_(and__4115__auto__)) {
          return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
        } else {
          return and__4115__auto__;
        }
      }());
    };
    var cljs$core$ep2__2 = function(x, y) {
      return cljs.core.boolean$(function() {
        var and__4115__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
        if (cljs.core.truth_(and__4115__auto__)) {
          var and__4115__auto____$1 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(y) : p1.call(null, y);
          if (cljs.core.truth_(and__4115__auto____$1)) {
            var and__4115__auto____$2 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
            if (cljs.core.truth_(and__4115__auto____$2)) {
              return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(y) : p2.call(null, y);
            } else {
              return and__4115__auto____$2;
            }
          } else {
            return and__4115__auto____$1;
          }
        } else {
          return and__4115__auto__;
        }
      }());
    };
    var cljs$core$ep2__3 = function(x, y, z) {
      return cljs.core.boolean$(function() {
        var and__4115__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
        if (cljs.core.truth_(and__4115__auto__)) {
          var and__4115__auto____$1 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(y) : p1.call(null, y);
          if (cljs.core.truth_(and__4115__auto____$1)) {
            var and__4115__auto____$2 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(z) : p1.call(null, z);
            if (cljs.core.truth_(and__4115__auto____$2)) {
              var and__4115__auto____$3 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
              if (cljs.core.truth_(and__4115__auto____$3)) {
                var and__4115__auto____$4 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(y) : p2.call(null, y);
                if (cljs.core.truth_(and__4115__auto____$4)) {
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(z) : p2.call(null, z);
                } else {
                  return and__4115__auto____$4;
                }
              } else {
                return and__4115__auto____$3;
              }
            } else {
              return and__4115__auto____$2;
            }
          } else {
            return and__4115__auto____$1;
          }
        } else {
          return and__4115__auto__;
        }
      }());
    };
    var cljs$core$ep2__4 = function() {
      var G__3235__delegate = function(x, y, z, args) {
        return cljs.core.boolean$(function() {
          var and__4115__auto__ = cljs$core$ep2.cljs$core$IFn$_invoke$arity$3(x, y, z);
          if (cljs.core.truth_(and__4115__auto__)) {
            return cljs.core.every_QMARK_(function(p1__3214_SHARP_) {
              var and__4115__auto____$1 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(p1__3214_SHARP_) : p1.call(null, p1__3214_SHARP_);
              if (cljs.core.truth_(and__4115__auto____$1)) {
                return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(p1__3214_SHARP_) : p2.call(null, p1__3214_SHARP_);
              } else {
                return and__4115__auto____$1;
              }
            }, args);
          } else {
            return and__4115__auto__;
          }
        }());
      };
      var G__3235 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__3236__i = 0, G__3236__a = new Array(arguments.length - 3);
          while (G__3236__i < G__3236__a.length) {
            G__3236__a[G__3236__i] = arguments[G__3236__i + 3];
            ++G__3236__i;
          }
          args = new cljs.core.IndexedSeq(G__3236__a, 0, null);
        }
        return G__3235__delegate.call(this, x, y, z, args);
      };
      G__3235.cljs$lang$maxFixedArity = 3;
      G__3235.cljs$lang$applyTo = function(arglist__3237) {
        var x = cljs.core.first(arglist__3237);
        arglist__3237 = cljs.core.next(arglist__3237);
        var y = cljs.core.first(arglist__3237);
        arglist__3237 = cljs.core.next(arglist__3237);
        var z = cljs.core.first(arglist__3237);
        var args = cljs.core.rest(arglist__3237);
        return G__3235__delegate(x, y, z, args);
      };
      G__3235.cljs$core$IFn$_invoke$arity$variadic = G__3235__delegate;
      return G__3235;
    }();
    cljs$core$ep2 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return cljs$core$ep2__0.call(this);
        case 1:
          return cljs$core$ep2__1.call(this, x);
        case 2:
          return cljs$core$ep2__2.call(this, x, y);
        case 3:
          return cljs$core$ep2__3.call(this, x, y, z);
        default:
          var G__3238 = null;
          if (arguments.length > 3) {
            var G__3239__i = 0, G__3239__a = new Array(arguments.length - 3);
            while (G__3239__i < G__3239__a.length) {
              G__3239__a[G__3239__i] = arguments[G__3239__i + 3];
              ++G__3239__i;
            }
            G__3238 = new cljs.core.IndexedSeq(G__3239__a, 0, null);
          }
          return cljs$core$ep2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__3238);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$ep2.cljs$lang$maxFixedArity = 3;
    cljs$core$ep2.cljs$lang$applyTo = cljs$core$ep2__4.cljs$lang$applyTo;
    cljs$core$ep2.cljs$core$IFn$_invoke$arity$0 = cljs$core$ep2__0;
    cljs$core$ep2.cljs$core$IFn$_invoke$arity$1 = cljs$core$ep2__1;
    cljs$core$ep2.cljs$core$IFn$_invoke$arity$2 = cljs$core$ep2__2;
    cljs$core$ep2.cljs$core$IFn$_invoke$arity$3 = cljs$core$ep2__3;
    cljs$core$ep2.cljs$core$IFn$_invoke$arity$variadic = cljs$core$ep2__4.cljs$core$IFn$_invoke$arity$variadic;
    return cljs$core$ep2;
  }();
};
cljs.core.every_pred.cljs$core$IFn$_invoke$arity$3 = function(p1, p2, p3) {
  return function() {
    var cljs$core$ep3 = null;
    var cljs$core$ep3__0 = function() {
      return true;
    };
    var cljs$core$ep3__1 = function(x) {
      return cljs.core.boolean$(function() {
        var and__4115__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
        if (cljs.core.truth_(and__4115__auto__)) {
          var and__4115__auto____$1 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
          if (cljs.core.truth_(and__4115__auto____$1)) {
            return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(x) : p3.call(null, x);
          } else {
            return and__4115__auto____$1;
          }
        } else {
          return and__4115__auto__;
        }
      }());
    };
    var cljs$core$ep3__2 = function(x, y) {
      return cljs.core.boolean$(function() {
        var and__4115__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
        if (cljs.core.truth_(and__4115__auto__)) {
          var and__4115__auto____$1 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
          if (cljs.core.truth_(and__4115__auto____$1)) {
            var and__4115__auto____$2 = p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(x) : p3.call(null, x);
            if (cljs.core.truth_(and__4115__auto____$2)) {
              var and__4115__auto____$3 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(y) : p1.call(null, y);
              if (cljs.core.truth_(and__4115__auto____$3)) {
                var and__4115__auto____$4 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(y) : p2.call(null, y);
                if (cljs.core.truth_(and__4115__auto____$4)) {
                  return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(y) : p3.call(null, y);
                } else {
                  return and__4115__auto____$4;
                }
              } else {
                return and__4115__auto____$3;
              }
            } else {
              return and__4115__auto____$2;
            }
          } else {
            return and__4115__auto____$1;
          }
        } else {
          return and__4115__auto__;
        }
      }());
    };
    var cljs$core$ep3__3 = function(x, y, z) {
      return cljs.core.boolean$(function() {
        var and__4115__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
        if (cljs.core.truth_(and__4115__auto__)) {
          var and__4115__auto____$1 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
          if (cljs.core.truth_(and__4115__auto____$1)) {
            var and__4115__auto____$2 = p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(x) : p3.call(null, x);
            if (cljs.core.truth_(and__4115__auto____$2)) {
              var and__4115__auto____$3 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(y) : p1.call(null, y);
              if (cljs.core.truth_(and__4115__auto____$3)) {
                var and__4115__auto____$4 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(y) : p2.call(null, y);
                if (cljs.core.truth_(and__4115__auto____$4)) {
                  var and__4115__auto____$5 = p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(y) : p3.call(null, y);
                  if (cljs.core.truth_(and__4115__auto____$5)) {
                    var and__4115__auto____$6 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(z) : p1.call(null, z);
                    if (cljs.core.truth_(and__4115__auto____$6)) {
                      var and__4115__auto____$7 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(z) : p2.call(null, z);
                      if (cljs.core.truth_(and__4115__auto____$7)) {
                        return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(z) : p3.call(null, z);
                      } else {
                        return and__4115__auto____$7;
                      }
                    } else {
                      return and__4115__auto____$6;
                    }
                  } else {
                    return and__4115__auto____$5;
                  }
                } else {
                  return and__4115__auto____$4;
                }
              } else {
                return and__4115__auto____$3;
              }
            } else {
              return and__4115__auto____$2;
            }
          } else {
            return and__4115__auto____$1;
          }
        } else {
          return and__4115__auto__;
        }
      }());
    };
    var cljs$core$ep3__4 = function() {
      var G__3240__delegate = function(x, y, z, args) {
        return cljs.core.boolean$(function() {
          var and__4115__auto__ = cljs$core$ep3.cljs$core$IFn$_invoke$arity$3(x, y, z);
          if (cljs.core.truth_(and__4115__auto__)) {
            return cljs.core.every_QMARK_(function(p1__3215_SHARP_) {
              var and__4115__auto____$1 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(p1__3215_SHARP_) : p1.call(null, p1__3215_SHARP_);
              if (cljs.core.truth_(and__4115__auto____$1)) {
                var and__4115__auto____$2 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(p1__3215_SHARP_) : p2.call(null, p1__3215_SHARP_);
                if (cljs.core.truth_(and__4115__auto____$2)) {
                  return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(p1__3215_SHARP_) : p3.call(null, p1__3215_SHARP_);
                } else {
                  return and__4115__auto____$2;
                }
              } else {
                return and__4115__auto____$1;
              }
            }, args);
          } else {
            return and__4115__auto__;
          }
        }());
      };
      var G__3240 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__3241__i = 0, G__3241__a = new Array(arguments.length - 3);
          while (G__3241__i < G__3241__a.length) {
            G__3241__a[G__3241__i] = arguments[G__3241__i + 3];
            ++G__3241__i;
          }
          args = new cljs.core.IndexedSeq(G__3241__a, 0, null);
        }
        return G__3240__delegate.call(this, x, y, z, args);
      };
      G__3240.cljs$lang$maxFixedArity = 3;
      G__3240.cljs$lang$applyTo = function(arglist__3242) {
        var x = cljs.core.first(arglist__3242);
        arglist__3242 = cljs.core.next(arglist__3242);
        var y = cljs.core.first(arglist__3242);
        arglist__3242 = cljs.core.next(arglist__3242);
        var z = cljs.core.first(arglist__3242);
        var args = cljs.core.rest(arglist__3242);
        return G__3240__delegate(x, y, z, args);
      };
      G__3240.cljs$core$IFn$_invoke$arity$variadic = G__3240__delegate;
      return G__3240;
    }();
    cljs$core$ep3 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return cljs$core$ep3__0.call(this);
        case 1:
          return cljs$core$ep3__1.call(this, x);
        case 2:
          return cljs$core$ep3__2.call(this, x, y);
        case 3:
          return cljs$core$ep3__3.call(this, x, y, z);
        default:
          var G__3243 = null;
          if (arguments.length > 3) {
            var G__3244__i = 0, G__3244__a = new Array(arguments.length - 3);
            while (G__3244__i < G__3244__a.length) {
              G__3244__a[G__3244__i] = arguments[G__3244__i + 3];
              ++G__3244__i;
            }
            G__3243 = new cljs.core.IndexedSeq(G__3244__a, 0, null);
          }
          return cljs$core$ep3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__3243);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$ep3.cljs$lang$maxFixedArity = 3;
    cljs$core$ep3.cljs$lang$applyTo = cljs$core$ep3__4.cljs$lang$applyTo;
    cljs$core$ep3.cljs$core$IFn$_invoke$arity$0 = cljs$core$ep3__0;
    cljs$core$ep3.cljs$core$IFn$_invoke$arity$1 = cljs$core$ep3__1;
    cljs$core$ep3.cljs$core$IFn$_invoke$arity$2 = cljs$core$ep3__2;
    cljs$core$ep3.cljs$core$IFn$_invoke$arity$3 = cljs$core$ep3__3;
    cljs$core$ep3.cljs$core$IFn$_invoke$arity$variadic = cljs$core$ep3__4.cljs$core$IFn$_invoke$arity$variadic;
    return cljs$core$ep3;
  }();
};
cljs.core.every_pred.cljs$core$IFn$_invoke$arity$variadic = function(p1, p2, p3, ps) {
  var ps__$1 = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(p1, p2, p3, ps);
  return function() {
    var cljs$core$epn = null;
    var cljs$core$epn__0 = function() {
      return true;
    };
    var cljs$core$epn__1 = function(x) {
      return cljs.core.every_QMARK_(function(p1__3216_SHARP_) {
        return p1__3216_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__3216_SHARP_.cljs$core$IFn$_invoke$arity$1(x) : p1__3216_SHARP_.call(null, x);
      }, ps__$1);
    };
    var cljs$core$epn__2 = function(x, y) {
      return cljs.core.every_QMARK_(function(p1__3217_SHARP_) {
        var and__4115__auto__ = p1__3217_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__3217_SHARP_.cljs$core$IFn$_invoke$arity$1(x) : p1__3217_SHARP_.call(null, x);
        if (cljs.core.truth_(and__4115__auto__)) {
          return p1__3217_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__3217_SHARP_.cljs$core$IFn$_invoke$arity$1(y) : p1__3217_SHARP_.call(null, y);
        } else {
          return and__4115__auto__;
        }
      }, ps__$1);
    };
    var cljs$core$epn__3 = function(x, y, z) {
      return cljs.core.every_QMARK_(function(p1__3218_SHARP_) {
        var and__4115__auto__ = p1__3218_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__3218_SHARP_.cljs$core$IFn$_invoke$arity$1(x) : p1__3218_SHARP_.call(null, x);
        if (cljs.core.truth_(and__4115__auto__)) {
          var and__4115__auto____$1 = p1__3218_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__3218_SHARP_.cljs$core$IFn$_invoke$arity$1(y) : p1__3218_SHARP_.call(null, y);
          if (cljs.core.truth_(and__4115__auto____$1)) {
            return p1__3218_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__3218_SHARP_.cljs$core$IFn$_invoke$arity$1(z) : p1__3218_SHARP_.call(null, z);
          } else {
            return and__4115__auto____$1;
          }
        } else {
          return and__4115__auto__;
        }
      }, ps__$1);
    };
    var cljs$core$epn__4 = function() {
      var G__3245__delegate = function(x, y, z, args) {
        return cljs.core.boolean$(function() {
          var and__4115__auto__ = cljs$core$epn.cljs$core$IFn$_invoke$arity$3(x, y, z);
          if (cljs.core.truth_(and__4115__auto__)) {
            return cljs.core.every_QMARK_(function(p1__3219_SHARP_) {
              return cljs.core.every_QMARK_(p1__3219_SHARP_, args);
            }, ps__$1);
          } else {
            return and__4115__auto__;
          }
        }());
      };
      var G__3245 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__3246__i = 0, G__3246__a = new Array(arguments.length - 3);
          while (G__3246__i < G__3246__a.length) {
            G__3246__a[G__3246__i] = arguments[G__3246__i + 3];
            ++G__3246__i;
          }
          args = new cljs.core.IndexedSeq(G__3246__a, 0, null);
        }
        return G__3245__delegate.call(this, x, y, z, args);
      };
      G__3245.cljs$lang$maxFixedArity = 3;
      G__3245.cljs$lang$applyTo = function(arglist__3247) {
        var x = cljs.core.first(arglist__3247);
        arglist__3247 = cljs.core.next(arglist__3247);
        var y = cljs.core.first(arglist__3247);
        arglist__3247 = cljs.core.next(arglist__3247);
        var z = cljs.core.first(arglist__3247);
        var args = cljs.core.rest(arglist__3247);
        return G__3245__delegate(x, y, z, args);
      };
      G__3245.cljs$core$IFn$_invoke$arity$variadic = G__3245__delegate;
      return G__3245;
    }();
    cljs$core$epn = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return cljs$core$epn__0.call(this);
        case 1:
          return cljs$core$epn__1.call(this, x);
        case 2:
          return cljs$core$epn__2.call(this, x, y);
        case 3:
          return cljs$core$epn__3.call(this, x, y, z);
        default:
          var G__3248 = null;
          if (arguments.length > 3) {
            var G__3249__i = 0, G__3249__a = new Array(arguments.length - 3);
            while (G__3249__i < G__3249__a.length) {
              G__3249__a[G__3249__i] = arguments[G__3249__i + 3];
              ++G__3249__i;
            }
            G__3248 = new cljs.core.IndexedSeq(G__3249__a, 0, null);
          }
          return cljs$core$epn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__3248);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$epn.cljs$lang$maxFixedArity = 3;
    cljs$core$epn.cljs$lang$applyTo = cljs$core$epn__4.cljs$lang$applyTo;
    cljs$core$epn.cljs$core$IFn$_invoke$arity$0 = cljs$core$epn__0;
    cljs$core$epn.cljs$core$IFn$_invoke$arity$1 = cljs$core$epn__1;
    cljs$core$epn.cljs$core$IFn$_invoke$arity$2 = cljs$core$epn__2;
    cljs$core$epn.cljs$core$IFn$_invoke$arity$3 = cljs$core$epn__3;
    cljs$core$epn.cljs$core$IFn$_invoke$arity$variadic = cljs$core$epn__4.cljs$core$IFn$_invoke$arity$variadic;
    return cljs$core$epn;
  }();
};
cljs.core.every_pred.cljs$lang$applyTo = function(seq3221) {
  var G__3222 = cljs.core.first(seq3221);
  var seq3221__$1 = cljs.core.next(seq3221);
  var G__3223 = cljs.core.first(seq3221__$1);
  var seq3221__$2 = cljs.core.next(seq3221__$1);
  var G__3224 = cljs.core.first(seq3221__$2);
  var seq3221__$3 = cljs.core.next(seq3221__$2);
  var self__4723__auto__ = this;
  return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__3222, G__3223, G__3224, seq3221__$3);
};
cljs.core.every_pred.cljs$lang$maxFixedArity = 3;
cljs.core.some_fn = function cljs$core$some_fn(var_args) {
  var G__3261 = arguments.length;
  switch(G__3261) {
    case 1:
      return cljs.core.some_fn.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.some_fn.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.some_fn.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var args_arr__4757__auto__ = [];
      var len__4736__auto___3263 = arguments.length;
      var i__4737__auto___3264 = 0;
      while (true) {
        if (i__4737__auto___3264 < len__4736__auto___3263) {
          args_arr__4757__auto__.push(arguments[i__4737__auto___3264]);
          var G__3265 = i__4737__auto___3264 + 1;
          i__4737__auto___3264 = G__3265;
          continue;
        } else {
        }
        break;
      }
      var argseq__4758__auto__ = new cljs.core.IndexedSeq(args_arr__4757__auto__.slice(3), 0, null);
      return cljs.core.some_fn.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__4758__auto__);
  }
};
cljs.core.some_fn.cljs$core$IFn$_invoke$arity$1 = function(p) {
  return function() {
    var cljs$core$sp1 = null;
    var cljs$core$sp1__0 = function() {
      return null;
    };
    var cljs$core$sp1__1 = function(x) {
      return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(x) : p.call(null, x);
    };
    var cljs$core$sp1__2 = function(x, y) {
      var or__4126__auto__ = p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(x) : p.call(null, x);
      if (cljs.core.truth_(or__4126__auto__)) {
        return or__4126__auto__;
      } else {
        return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(y) : p.call(null, y);
      }
    };
    var cljs$core$sp1__3 = function(x, y, z) {
      var or__4126__auto__ = p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(x) : p.call(null, x);
      if (cljs.core.truth_(or__4126__auto__)) {
        return or__4126__auto__;
      } else {
        var or__4126__auto____$1 = p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(y) : p.call(null, y);
        if (cljs.core.truth_(or__4126__auto____$1)) {
          return or__4126__auto____$1;
        } else {
          return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(z) : p.call(null, z);
        }
      }
    };
    var cljs$core$sp1__4 = function() {
      var G__3266__delegate = function(x, y, z, args) {
        var or__4126__auto__ = cljs$core$sp1.cljs$core$IFn$_invoke$arity$3(x, y, z);
        if (cljs.core.truth_(or__4126__auto__)) {
          return or__4126__auto__;
        } else {
          return cljs.core.some(p, args);
        }
      };
      var G__3266 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__3267__i = 0, G__3267__a = new Array(arguments.length - 3);
          while (G__3267__i < G__3267__a.length) {
            G__3267__a[G__3267__i] = arguments[G__3267__i + 3];
            ++G__3267__i;
          }
          args = new cljs.core.IndexedSeq(G__3267__a, 0, null);
        }
        return G__3266__delegate.call(this, x, y, z, args);
      };
      G__3266.cljs$lang$maxFixedArity = 3;
      G__3266.cljs$lang$applyTo = function(arglist__3268) {
        var x = cljs.core.first(arglist__3268);
        arglist__3268 = cljs.core.next(arglist__3268);
        var y = cljs.core.first(arglist__3268);
        arglist__3268 = cljs.core.next(arglist__3268);
        var z = cljs.core.first(arglist__3268);
        var args = cljs.core.rest(arglist__3268);
        return G__3266__delegate(x, y, z, args);
      };
      G__3266.cljs$core$IFn$_invoke$arity$variadic = G__3266__delegate;
      return G__3266;
    }();
    cljs$core$sp1 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return cljs$core$sp1__0.call(this);
        case 1:
          return cljs$core$sp1__1.call(this, x);
        case 2:
          return cljs$core$sp1__2.call(this, x, y);
        case 3:
          return cljs$core$sp1__3.call(this, x, y, z);
        default:
          var G__3269 = null;
          if (arguments.length > 3) {
            var G__3270__i = 0, G__3270__a = new Array(arguments.length - 3);
            while (G__3270__i < G__3270__a.length) {
              G__3270__a[G__3270__i] = arguments[G__3270__i + 3];
              ++G__3270__i;
            }
            G__3269 = new cljs.core.IndexedSeq(G__3270__a, 0, null);
          }
          return cljs$core$sp1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__3269);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$sp1.cljs$lang$maxFixedArity = 3;
    cljs$core$sp1.cljs$lang$applyTo = cljs$core$sp1__4.cljs$lang$applyTo;
    cljs$core$sp1.cljs$core$IFn$_invoke$arity$0 = cljs$core$sp1__0;
    cljs$core$sp1.cljs$core$IFn$_invoke$arity$1 = cljs$core$sp1__1;
    cljs$core$sp1.cljs$core$IFn$_invoke$arity$2 = cljs$core$sp1__2;
    cljs$core$sp1.cljs$core$IFn$_invoke$arity$3 = cljs$core$sp1__3;
    cljs$core$sp1.cljs$core$IFn$_invoke$arity$variadic = cljs$core$sp1__4.cljs$core$IFn$_invoke$arity$variadic;
    return cljs$core$sp1;
  }();
};
cljs.core.some_fn.cljs$core$IFn$_invoke$arity$2 = function(p1, p2) {
  return function() {
    var cljs$core$sp2 = null;
    var cljs$core$sp2__0 = function() {
      return null;
    };
    var cljs$core$sp2__1 = function(x) {
      var or__4126__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
      if (cljs.core.truth_(or__4126__auto__)) {
        return or__4126__auto__;
      } else {
        return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
      }
    };
    var cljs$core$sp2__2 = function(x, y) {
      var or__4126__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
      if (cljs.core.truth_(or__4126__auto__)) {
        return or__4126__auto__;
      } else {
        var or__4126__auto____$1 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(y) : p1.call(null, y);
        if (cljs.core.truth_(or__4126__auto____$1)) {
          return or__4126__auto____$1;
        } else {
          var or__4126__auto____$2 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
          if (cljs.core.truth_(or__4126__auto____$2)) {
            return or__4126__auto____$2;
          } else {
            return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(y) : p2.call(null, y);
          }
        }
      }
    };
    var cljs$core$sp2__3 = function(x, y, z) {
      var or__4126__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
      if (cljs.core.truth_(or__4126__auto__)) {
        return or__4126__auto__;
      } else {
        var or__4126__auto____$1 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(y) : p1.call(null, y);
        if (cljs.core.truth_(or__4126__auto____$1)) {
          return or__4126__auto____$1;
        } else {
          var or__4126__auto____$2 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(z) : p1.call(null, z);
          if (cljs.core.truth_(or__4126__auto____$2)) {
            return or__4126__auto____$2;
          } else {
            var or__4126__auto____$3 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
            if (cljs.core.truth_(or__4126__auto____$3)) {
              return or__4126__auto____$3;
            } else {
              var or__4126__auto____$4 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(y) : p2.call(null, y);
              if (cljs.core.truth_(or__4126__auto____$4)) {
                return or__4126__auto____$4;
              } else {
                return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(z) : p2.call(null, z);
              }
            }
          }
        }
      }
    };
    var cljs$core$sp2__4 = function() {
      var G__3271__delegate = function(x, y, z, args) {
        var or__4126__auto__ = cljs$core$sp2.cljs$core$IFn$_invoke$arity$3(x, y, z);
        if (cljs.core.truth_(or__4126__auto__)) {
          return or__4126__auto__;
        } else {
          return cljs.core.some(function(p1__3250_SHARP_) {
            var or__4126__auto____$1 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(p1__3250_SHARP_) : p1.call(null, p1__3250_SHARP_);
            if (cljs.core.truth_(or__4126__auto____$1)) {
              return or__4126__auto____$1;
            } else {
              return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(p1__3250_SHARP_) : p2.call(null, p1__3250_SHARP_);
            }
          }, args);
        }
      };
      var G__3271 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__3272__i = 0, G__3272__a = new Array(arguments.length - 3);
          while (G__3272__i < G__3272__a.length) {
            G__3272__a[G__3272__i] = arguments[G__3272__i + 3];
            ++G__3272__i;
          }
          args = new cljs.core.IndexedSeq(G__3272__a, 0, null);
        }
        return G__3271__delegate.call(this, x, y, z, args);
      };
      G__3271.cljs$lang$maxFixedArity = 3;
      G__3271.cljs$lang$applyTo = function(arglist__3273) {
        var x = cljs.core.first(arglist__3273);
        arglist__3273 = cljs.core.next(arglist__3273);
        var y = cljs.core.first(arglist__3273);
        arglist__3273 = cljs.core.next(arglist__3273);
        var z = cljs.core.first(arglist__3273);
        var args = cljs.core.rest(arglist__3273);
        return G__3271__delegate(x, y, z, args);
      };
      G__3271.cljs$core$IFn$_invoke$arity$variadic = G__3271__delegate;
      return G__3271;
    }();
    cljs$core$sp2 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return cljs$core$sp2__0.call(this);
        case 1:
          return cljs$core$sp2__1.call(this, x);
        case 2:
          return cljs$core$sp2__2.call(this, x, y);
        case 3:
          return cljs$core$sp2__3.call(this, x, y, z);
        default:
          var G__3274 = null;
          if (arguments.length > 3) {
            var G__3275__i = 0, G__3275__a = new Array(arguments.length - 3);
            while (G__3275__i < G__3275__a.length) {
              G__3275__a[G__3275__i] = arguments[G__3275__i + 3];
              ++G__3275__i;
            }
            G__3274 = new cljs.core.IndexedSeq(G__3275__a, 0, null);
          }
          return cljs$core$sp2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__3274);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$sp2.cljs$lang$maxFixedArity = 3;
    cljs$core$sp2.cljs$lang$applyTo = cljs$core$sp2__4.cljs$lang$applyTo;
    cljs$core$sp2.cljs$core$IFn$_invoke$arity$0 = cljs$core$sp2__0;
    cljs$core$sp2.cljs$core$IFn$_invoke$arity$1 = cljs$core$sp2__1;
    cljs$core$sp2.cljs$core$IFn$_invoke$arity$2 = cljs$core$sp2__2;
    cljs$core$sp2.cljs$core$IFn$_invoke$arity$3 = cljs$core$sp2__3;
    cljs$core$sp2.cljs$core$IFn$_invoke$arity$variadic = cljs$core$sp2__4.cljs$core$IFn$_invoke$arity$variadic;
    return cljs$core$sp2;
  }();
};
cljs.core.some_fn.cljs$core$IFn$_invoke$arity$3 = function(p1, p2, p3) {
  return function() {
    var cljs$core$sp3 = null;
    var cljs$core$sp3__0 = function() {
      return null;
    };
    var cljs$core$sp3__1 = function(x) {
      var or__4126__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
      if (cljs.core.truth_(or__4126__auto__)) {
        return or__4126__auto__;
      } else {
        var or__4126__auto____$1 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
        if (cljs.core.truth_(or__4126__auto____$1)) {
          return or__4126__auto____$1;
        } else {
          return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(x) : p3.call(null, x);
        }
      }
    };
    var cljs$core$sp3__2 = function(x, y) {
      var or__4126__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
      if (cljs.core.truth_(or__4126__auto__)) {
        return or__4126__auto__;
      } else {
        var or__4126__auto____$1 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
        if (cljs.core.truth_(or__4126__auto____$1)) {
          return or__4126__auto____$1;
        } else {
          var or__4126__auto____$2 = p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(x) : p3.call(null, x);
          if (cljs.core.truth_(or__4126__auto____$2)) {
            return or__4126__auto____$2;
          } else {
            var or__4126__auto____$3 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(y) : p1.call(null, y);
            if (cljs.core.truth_(or__4126__auto____$3)) {
              return or__4126__auto____$3;
            } else {
              var or__4126__auto____$4 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(y) : p2.call(null, y);
              if (cljs.core.truth_(or__4126__auto____$4)) {
                return or__4126__auto____$4;
              } else {
                return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(y) : p3.call(null, y);
              }
            }
          }
        }
      }
    };
    var cljs$core$sp3__3 = function(x, y, z) {
      var or__4126__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
      if (cljs.core.truth_(or__4126__auto__)) {
        return or__4126__auto__;
      } else {
        var or__4126__auto____$1 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
        if (cljs.core.truth_(or__4126__auto____$1)) {
          return or__4126__auto____$1;
        } else {
          var or__4126__auto____$2 = p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(x) : p3.call(null, x);
          if (cljs.core.truth_(or__4126__auto____$2)) {
            return or__4126__auto____$2;
          } else {
            var or__4126__auto____$3 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(y) : p1.call(null, y);
            if (cljs.core.truth_(or__4126__auto____$3)) {
              return or__4126__auto____$3;
            } else {
              var or__4126__auto____$4 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(y) : p2.call(null, y);
              if (cljs.core.truth_(or__4126__auto____$4)) {
                return or__4126__auto____$4;
              } else {
                var or__4126__auto____$5 = p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(y) : p3.call(null, y);
                if (cljs.core.truth_(or__4126__auto____$5)) {
                  return or__4126__auto____$5;
                } else {
                  var or__4126__auto____$6 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(z) : p1.call(null, z);
                  if (cljs.core.truth_(or__4126__auto____$6)) {
                    return or__4126__auto____$6;
                  } else {
                    var or__4126__auto____$7 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(z) : p2.call(null, z);
                    if (cljs.core.truth_(or__4126__auto____$7)) {
                      return or__4126__auto____$7;
                    } else {
                      return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(z) : p3.call(null, z);
                    }
                  }
                }
              }
            }
          }
        }
      }
    };
    var cljs$core$sp3__4 = function() {
      var G__3276__delegate = function(x, y, z, args) {
        var or__4126__auto__ = cljs$core$sp3.cljs$core$IFn$_invoke$arity$3(x, y, z);
        if (cljs.core.truth_(or__4126__auto__)) {
          return or__4126__auto__;
        } else {
          return cljs.core.some(function(p1__3251_SHARP_) {
            var or__4126__auto____$1 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(p1__3251_SHARP_) : p1.call(null, p1__3251_SHARP_);
            if (cljs.core.truth_(or__4126__auto____$1)) {
              return or__4126__auto____$1;
            } else {
              var or__4126__auto____$2 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(p1__3251_SHARP_) : p2.call(null, p1__3251_SHARP_);
              if (cljs.core.truth_(or__4126__auto____$2)) {
                return or__4126__auto____$2;
              } else {
                return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(p1__3251_SHARP_) : p3.call(null, p1__3251_SHARP_);
              }
            }
          }, args);
        }
      };
      var G__3276 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__3277__i = 0, G__3277__a = new Array(arguments.length - 3);
          while (G__3277__i < G__3277__a.length) {
            G__3277__a[G__3277__i] = arguments[G__3277__i + 3];
            ++G__3277__i;
          }
          args = new cljs.core.IndexedSeq(G__3277__a, 0, null);
        }
        return G__3276__delegate.call(this, x, y, z, args);
      };
      G__3276.cljs$lang$maxFixedArity = 3;
      G__3276.cljs$lang$applyTo = function(arglist__3278) {
        var x = cljs.core.first(arglist__3278);
        arglist__3278 = cljs.core.next(arglist__3278);
        var y = cljs.core.first(arglist__3278);
        arglist__3278 = cljs.core.next(arglist__3278);
        var z = cljs.core.first(arglist__3278);
        var args = cljs.core.rest(arglist__3278);
        return G__3276__delegate(x, y, z, args);
      };
      G__3276.cljs$core$IFn$_invoke$arity$variadic = G__3276__delegate;
      return G__3276;
    }();
    cljs$core$sp3 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return cljs$core$sp3__0.call(this);
        case 1:
          return cljs$core$sp3__1.call(this, x);
        case 2:
          return cljs$core$sp3__2.call(this, x, y);
        case 3:
          return cljs$core$sp3__3.call(this, x, y, z);
        default:
          var G__3279 = null;
          if (arguments.length > 3) {
            var G__3280__i = 0, G__3280__a = new Array(arguments.length - 3);
            while (G__3280__i < G__3280__a.length) {
              G__3280__a[G__3280__i] = arguments[G__3280__i + 3];
              ++G__3280__i;
            }
            G__3279 = new cljs.core.IndexedSeq(G__3280__a, 0, null);
          }
          return cljs$core$sp3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__3279);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$sp3.cljs$lang$maxFixedArity = 3;
    cljs$core$sp3.cljs$lang$applyTo = cljs$core$sp3__4.cljs$lang$applyTo;
    cljs$core$sp3.cljs$core$IFn$_invoke$arity$0 = cljs$core$sp3__0;
    cljs$core$sp3.cljs$core$IFn$_invoke$arity$1 = cljs$core$sp3__1;
    cljs$core$sp3.cljs$core$IFn$_invoke$arity$2 = cljs$core$sp3__2;
    cljs$core$sp3.cljs$core$IFn$_invoke$arity$3 = cljs$core$sp3__3;
    cljs$core$sp3.cljs$core$IFn$_invoke$arity$variadic = cljs$core$sp3__4.cljs$core$IFn$_invoke$arity$variadic;
    return cljs$core$sp3;
  }();
};
cljs.core.some_fn.cljs$core$IFn$_invoke$arity$variadic = function(p1, p2, p3, ps) {
  var ps__$1 = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(p1, p2, p3, ps);
  return function() {
    var cljs$core$spn = null;
    var cljs$core$spn__0 = function() {
      return null;
    };
    var cljs$core$spn__1 = function(x) {
      return cljs.core.some(function(p1__3252_SHARP_) {
        return p1__3252_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__3252_SHARP_.cljs$core$IFn$_invoke$arity$1(x) : p1__3252_SHARP_.call(null, x);
      }, ps__$1);
    };
    var cljs$core$spn__2 = function(x, y) {
      return cljs.core.some(function(p1__3253_SHARP_) {
        var or__4126__auto__ = p1__3253_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__3253_SHARP_.cljs$core$IFn$_invoke$arity$1(x) : p1__3253_SHARP_.call(null, x);
        if (cljs.core.truth_(or__4126__auto__)) {
          return or__4126__auto__;
        } else {
          return p1__3253_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__3253_SHARP_.cljs$core$IFn$_invoke$arity$1(y) : p1__3253_SHARP_.call(null, y);
        }
      }, ps__$1);
    };
    var cljs$core$spn__3 = function(x, y, z) {
      return cljs.core.some(function(p1__3254_SHARP_) {
        var or__4126__auto__ = p1__3254_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__3254_SHARP_.cljs$core$IFn$_invoke$arity$1(x) : p1__3254_SHARP_.call(null, x);
        if (cljs.core.truth_(or__4126__auto__)) {
          return or__4126__auto__;
        } else {
          var or__4126__auto____$1 = p1__3254_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__3254_SHARP_.cljs$core$IFn$_invoke$arity$1(y) : p1__3254_SHARP_.call(null, y);
          if (cljs.core.truth_(or__4126__auto____$1)) {
            return or__4126__auto____$1;
          } else {
            return p1__3254_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__3254_SHARP_.cljs$core$IFn$_invoke$arity$1(z) : p1__3254_SHARP_.call(null, z);
          }
        }
      }, ps__$1);
    };
    var cljs$core$spn__4 = function() {
      var G__3281__delegate = function(x, y, z, args) {
        var or__4126__auto__ = cljs$core$spn.cljs$core$IFn$_invoke$arity$3(x, y, z);
        if (cljs.core.truth_(or__4126__auto__)) {
          return or__4126__auto__;
        } else {
          return cljs.core.some(function(p1__3255_SHARP_) {
            return cljs.core.some(p1__3255_SHARP_, args);
          }, ps__$1);
        }
      };
      var G__3281 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__3282__i = 0, G__3282__a = new Array(arguments.length - 3);
          while (G__3282__i < G__3282__a.length) {
            G__3282__a[G__3282__i] = arguments[G__3282__i + 3];
            ++G__3282__i;
          }
          args = new cljs.core.IndexedSeq(G__3282__a, 0, null);
        }
        return G__3281__delegate.call(this, x, y, z, args);
      };
      G__3281.cljs$lang$maxFixedArity = 3;
      G__3281.cljs$lang$applyTo = function(arglist__3283) {
        var x = cljs.core.first(arglist__3283);
        arglist__3283 = cljs.core.next(arglist__3283);
        var y = cljs.core.first(arglist__3283);
        arglist__3283 = cljs.core.next(arglist__3283);
        var z = cljs.core.first(arglist__3283);
        var args = cljs.core.rest(arglist__3283);
        return G__3281__delegate(x, y, z, args);
      };
      G__3281.cljs$core$IFn$_invoke$arity$variadic = G__3281__delegate;
      return G__3281;
    }();
    cljs$core$spn = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return cljs$core$spn__0.call(this);
        case 1:
          return cljs$core$spn__1.call(this, x);
        case 2:
          return cljs$core$spn__2.call(this, x, y);
        case 3:
          return cljs$core$spn__3.call(this, x, y, z);
        default:
          var G__3284 = null;
          if (arguments.length > 3) {
            var G__3285__i = 0, G__3285__a = new Array(arguments.length - 3);
            while (G__3285__i < G__3285__a.length) {
              G__3285__a[G__3285__i] = arguments[G__3285__i + 3];
              ++G__3285__i;
            }
            G__3284 = new cljs.core.IndexedSeq(G__3285__a, 0, null);
          }
          return cljs$core$spn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__3284);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$spn.cljs$lang$maxFixedArity = 3;
    cljs$core$spn.cljs$lang$applyTo = cljs$core$spn__4.cljs$lang$applyTo;
    cljs$core$spn.cljs$core$IFn$_invoke$arity$0 = cljs$core$spn__0;
    cljs$core$spn.cljs$core$IFn$_invoke$arity$1 = cljs$core$spn__1;
    cljs$core$spn.cljs$core$IFn$_invoke$arity$2 = cljs$core$spn__2;
    cljs$core$spn.cljs$core$IFn$_invoke$arity$3 = cljs$core$spn__3;
    cljs$core$spn.cljs$core$IFn$_invoke$arity$variadic = cljs$core$spn__4.cljs$core$IFn$_invoke$arity$variadic;
    return cljs$core$spn;
  }();
};
cljs.core.some_fn.cljs$lang$applyTo = function(seq3257) {
  var G__3258 = cljs.core.first(seq3257);
  var seq3257__$1 = cljs.core.next(seq3257);
  var G__3259 = cljs.core.first(seq3257__$1);
  var seq3257__$2 = cljs.core.next(seq3257__$1);
  var G__3260 = cljs.core.first(seq3257__$2);
  var seq3257__$3 = cljs.core.next(seq3257__$2);
  var self__4723__auto__ = this;
  return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__3258, G__3259, G__3260, seq3257__$3);
};
cljs.core.some_fn.cljs$lang$maxFixedArity = 3;
cljs.core.map = function cljs$core$map(var_args) {
  var G__3293 = arguments.length;
  switch(G__3293) {
    case 1:
      return cljs.core.map.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.map.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.map.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.map.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      var args_arr__4757__auto__ = [];
      var len__4736__auto___3306 = arguments.length;
      var i__4737__auto___3307 = 0;
      while (true) {
        if (i__4737__auto___3307 < len__4736__auto___3306) {
          args_arr__4757__auto__.push(arguments[i__4737__auto___3307]);
          var G__3308 = i__4737__auto___3307 + 1;
          i__4737__auto___3307 = G__3308;
          continue;
        } else {
        }
        break;
      }
      var argseq__4758__auto__ = new cljs.core.IndexedSeq(args_arr__4757__auto__.slice(4), 0, null);
      return cljs.core.map.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], argseq__4758__auto__);
  }
};
cljs.core.map.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return function(rf) {
    return function() {
      var G__3309 = null;
      var G__3309__0 = function() {
        return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
      };
      var G__3309__1 = function(result) {
        return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
      };
      var G__3309__2 = function(result, input) {
        var G__3294 = result;
        var G__3295 = f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(input) : f.call(null, input);
        return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__3294, G__3295) : rf.call(null, G__3294, G__3295);
      };
      var G__3309__3 = function() {
        var G__3310__delegate = function(result, input, inputs) {
          var G__3296 = result;
          var G__3297 = cljs.core.apply.cljs$core$IFn$_invoke$arity$3(f, input, inputs);
          return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__3296, G__3297) : rf.call(null, G__3296, G__3297);
        };
        var G__3310 = function(result, input, var_args) {
          var inputs = null;
          if (arguments.length > 2) {
            var G__3311__i = 0, G__3311__a = new Array(arguments.length - 2);
            while (G__3311__i < G__3311__a.length) {
              G__3311__a[G__3311__i] = arguments[G__3311__i + 2];
              ++G__3311__i;
            }
            inputs = new cljs.core.IndexedSeq(G__3311__a, 0, null);
          }
          return G__3310__delegate.call(this, result, input, inputs);
        };
        G__3310.cljs$lang$maxFixedArity = 2;
        G__3310.cljs$lang$applyTo = function(arglist__3312) {
          var result = cljs.core.first(arglist__3312);
          arglist__3312 = cljs.core.next(arglist__3312);
          var input = cljs.core.first(arglist__3312);
          var inputs = cljs.core.rest(arglist__3312);
          return G__3310__delegate(result, input, inputs);
        };
        G__3310.cljs$core$IFn$_invoke$arity$variadic = G__3310__delegate;
        return G__3310;
      }();
      G__3309 = function(result, input, var_args) {
        var inputs = var_args;
        switch(arguments.length) {
          case 0:
            return G__3309__0.call(this);
          case 1:
            return G__3309__1.call(this, result);
          case 2:
            return G__3309__2.call(this, result, input);
          default:
            var G__3313 = null;
            if (arguments.length > 2) {
              var G__3314__i = 0, G__3314__a = new Array(arguments.length - 2);
              while (G__3314__i < G__3314__a.length) {
                G__3314__a[G__3314__i] = arguments[G__3314__i + 2];
                ++G__3314__i;
              }
              G__3313 = new cljs.core.IndexedSeq(G__3314__a, 0, null);
            }
            return G__3309__3.cljs$core$IFn$_invoke$arity$variadic(result, input, G__3313);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__3309.cljs$lang$maxFixedArity = 2;
      G__3309.cljs$lang$applyTo = G__3309__3.cljs$lang$applyTo;
      G__3309.cljs$core$IFn$_invoke$arity$0 = G__3309__0;
      G__3309.cljs$core$IFn$_invoke$arity$1 = G__3309__1;
      G__3309.cljs$core$IFn$_invoke$arity$2 = G__3309__2;
      G__3309.cljs$core$IFn$_invoke$arity$variadic = G__3309__3.cljs$core$IFn$_invoke$arity$variadic;
      return G__3309;
    }();
  };
};
cljs.core.map.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__5735__auto__ = cljs.core.seq(coll);
    if (temp__5735__auto__) {
      var s = temp__5735__auto__;
      if (cljs.core.chunked_seq_QMARK_(s)) {
        var c = cljs.core.chunk_first(s);
        var size = cljs.core.count(c);
        var b = cljs.core.chunk_buffer(size);
        var n__4613__auto___3315 = size;
        var i_3316 = 0;
        while (true) {
          if (i_3316 < n__4613__auto___3315) {
            cljs.core.chunk_append(b, function() {
              var G__3298 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_3316);
              return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__3298) : f.call(null, G__3298);
            }());
            var G__3317 = i_3316 + 1;
            i_3316 = G__3317;
            continue;
          } else {
          }
          break;
        }
        return cljs.core.chunk_cons(cljs.core.chunk(b), cljs.core.map.cljs$core$IFn$_invoke$arity$2(f, cljs.core.chunk_rest(s)));
      } else {
        return cljs.core.cons(function() {
          var G__3299 = cljs.core.first(s);
          return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__3299) : f.call(null, G__3299);
        }(), cljs.core.map.cljs$core$IFn$_invoke$arity$2(f, cljs.core.rest(s)));
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.map.cljs$core$IFn$_invoke$arity$3 = function(f, c1, c2) {
  return new cljs.core.LazySeq(null, function() {
    var s1 = cljs.core.seq(c1);
    var s2 = cljs.core.seq(c2);
    if (s1 && s2) {
      return cljs.core.cons(function() {
        var G__3300 = cljs.core.first(s1);
        var G__3301 = cljs.core.first(s2);
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__3300, G__3301) : f.call(null, G__3300, G__3301);
      }(), cljs.core.map.cljs$core$IFn$_invoke$arity$3(f, cljs.core.rest(s1), cljs.core.rest(s2)));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.map.cljs$core$IFn$_invoke$arity$4 = function(f, c1, c2, c3) {
  return new cljs.core.LazySeq(null, function() {
    var s1 = cljs.core.seq(c1);
    var s2 = cljs.core.seq(c2);
    var s3 = cljs.core.seq(c3);
    if (s1 && s2 && s3) {
      return cljs.core.cons(function() {
        var G__3302 = cljs.core.first(s1);
        var G__3303 = cljs.core.first(s2);
        var G__3304 = cljs.core.first(s3);
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__3302, G__3303, G__3304) : f.call(null, G__3302, G__3303, G__3304);
      }(), cljs.core.map.cljs$core$IFn$_invoke$arity$4(f, cljs.core.rest(s1), cljs.core.rest(s2), cljs.core.rest(s3)));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.map.cljs$core$IFn$_invoke$arity$variadic = function(f, c1, c2, c3, colls) {
  var step = function cljs$core$step(cs) {
    return new cljs.core.LazySeq(null, function() {
      var ss = cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.seq, cs);
      if (cljs.core.every_QMARK_(cljs.core.identity, ss)) {
        return cljs.core.cons(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.first, ss), cljs$core$step(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.rest, ss)));
      } else {
        return null;
      }
    }, null, null);
  };
  return cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(p1__3286_SHARP_) {
    return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(f, p1__3286_SHARP_);
  }, step(cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(colls, c3, cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([c2, c1], 0))));
};
cljs.core.map.cljs$lang$applyTo = function(seq3288) {
  var G__3289 = cljs.core.first(seq3288);
  var seq3288__$1 = cljs.core.next(seq3288);
  var G__3290 = cljs.core.first(seq3288__$1);
  var seq3288__$2 = cljs.core.next(seq3288__$1);
  var G__3291 = cljs.core.first(seq3288__$2);
  var seq3288__$3 = cljs.core.next(seq3288__$2);
  var G__3292 = cljs.core.first(seq3288__$3);
  var seq3288__$4 = cljs.core.next(seq3288__$3);
  var self__4723__auto__ = this;
  return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__3289, G__3290, G__3291, G__3292, seq3288__$4);
};
cljs.core.map.cljs$lang$maxFixedArity = 4;
cljs.core.take = function cljs$core$take(var_args) {
  var G__3319 = arguments.length;
  switch(G__3319) {
    case 1:
      return cljs.core.take.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.take.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
cljs.core.take.cljs$core$IFn$_invoke$arity$1 = function(n) {
  if (typeof n === "number") {
  } else {
    throw new Error("Assert failed: (number? n)");
  }
  return function(rf) {
    var na = cljs.core.volatile_BANG_(n);
    return function() {
      var G__3321 = null;
      var G__3321__0 = function() {
        return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
      };
      var G__3321__1 = function(result) {
        return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
      };
      var G__3321__2 = function(result, input) {
        var n__$1 = cljs.core.deref(na);
        var nn = na.cljs$core$IVolatile$_vreset_BANG_$arity$2(null, na.cljs$core$IDeref$_deref$arity$1(null) - 1);
        var result__$1 = n__$1 > 0 ? rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, input) : rf.call(null, result, input) : result;
        if (!(nn > 0)) {
          return cljs.core.ensure_reduced(result__$1);
        } else {
          return result__$1;
        }
      };
      G__3321 = function(result, input) {
        switch(arguments.length) {
          case 0:
            return G__3321__0.call(this);
          case 1:
            return G__3321__1.call(this, result);
          case 2:
            return G__3321__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__3321.cljs$core$IFn$_invoke$arity$0 = G__3321__0;
      G__3321.cljs$core$IFn$_invoke$arity$1 = G__3321__1;
      G__3321.cljs$core$IFn$_invoke$arity$2 = G__3321__2;
      return G__3321;
    }();
  };
};
cljs.core.take.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  if (typeof n === "number") {
  } else {
    throw new Error("Assert failed: (number? n)");
  }
  return new cljs.core.LazySeq(null, function() {
    if (n > 0) {
      var temp__5735__auto__ = cljs.core.seq(coll);
      if (temp__5735__auto__) {
        var s = temp__5735__auto__;
        return cljs.core.cons(cljs.core.first(s), cljs.core.take.cljs$core$IFn$_invoke$arity$2(n - 1, cljs.core.rest(s)));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.take.cljs$lang$maxFixedArity = 2;
cljs.core.drop = function cljs$core$drop(var_args) {
  var G__3323 = arguments.length;
  switch(G__3323) {
    case 1:
      return cljs.core.drop.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.drop.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
cljs.core.drop.cljs$core$IFn$_invoke$arity$1 = function(n) {
  if (typeof n === "number") {
  } else {
    throw new Error("Assert failed: (number? n)");
  }
  return function(rf) {
    var na = cljs.core.volatile_BANG_(n);
    return function() {
      var G__3325 = null;
      var G__3325__0 = function() {
        return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
      };
      var G__3325__1 = function(result) {
        return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
      };
      var G__3325__2 = function(result, input) {
        var n__$1 = cljs.core.deref(na);
        na.cljs$core$IVolatile$_vreset_BANG_$arity$2(null, na.cljs$core$IDeref$_deref$arity$1(null) - 1);
        if (n__$1 > 0) {
          return result;
        } else {
          return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, input) : rf.call(null, result, input);
        }
      };
      G__3325 = function(result, input) {
        switch(arguments.length) {
          case 0:
            return G__3325__0.call(this);
          case 1:
            return G__3325__1.call(this, result);
          case 2:
            return G__3325__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__3325.cljs$core$IFn$_invoke$arity$0 = G__3325__0;
      G__3325.cljs$core$IFn$_invoke$arity$1 = G__3325__1;
      G__3325.cljs$core$IFn$_invoke$arity$2 = G__3325__2;
      return G__3325;
    }();
  };
};
cljs.core.drop.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  if (typeof n === "number") {
  } else {
    throw new Error("Assert failed: (number? n)");
  }
  var step = function(n__$1, coll__$1) {
    while (true) {
      var s = cljs.core.seq(coll__$1);
      if (n__$1 > 0 && s) {
        var G__3326 = n__$1 - 1;
        var G__3327 = cljs.core.rest(s);
        n__$1 = G__3326;
        coll__$1 = G__3327;
        continue;
      } else {
        return s;
      }
      break;
    }
  };
  return new cljs.core.LazySeq(null, function() {
    return step(n, coll);
  }, null, null);
};
cljs.core.drop.cljs$lang$maxFixedArity = 2;
cljs.core.drop_last = function cljs$core$drop_last(var_args) {
  var G__3329 = arguments.length;
  switch(G__3329) {
    case 1:
      return cljs.core.drop_last.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.drop_last.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
cljs.core.drop_last.cljs$core$IFn$_invoke$arity$1 = function(s) {
  return cljs.core.drop_last.cljs$core$IFn$_invoke$arity$2(1, s);
};
cljs.core.drop_last.cljs$core$IFn$_invoke$arity$2 = function(n, s) {
  return cljs.core.map.cljs$core$IFn$_invoke$arity$3(function(x, _) {
    return x;
  }, s, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(n, s));
};
cljs.core.drop_last.cljs$lang$maxFixedArity = 2;
cljs.core.take_last = function cljs$core$take_last(n, coll) {
  var s = cljs.core.seq(coll);
  var lead = cljs.core.seq(cljs.core.drop.cljs$core$IFn$_invoke$arity$2(n, coll));
  while (true) {
    if (lead) {
      var G__3331 = cljs.core.next(s);
      var G__3332 = cljs.core.next(lead);
      s = G__3331;
      lead = G__3332;
      continue;
    } else {
      return s;
    }
    break;
  }
};
cljs.core.drop_while = function cljs$core$drop_while(var_args) {
  var G__3334 = arguments.length;
  switch(G__3334) {
    case 1:
      return cljs.core.drop_while.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
cljs.core.drop_while.cljs$core$IFn$_invoke$arity$1 = function(pred) {
  return function(rf) {
    var da = cljs.core.volatile_BANG_(true);
    return function() {
      var G__3338 = null;
      var G__3338__0 = function() {
        return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
      };
      var G__3338__1 = function(result) {
        return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
      };
      var G__3338__2 = function(result, input) {
        var drop_QMARK_ = cljs.core.deref(da);
        if (cljs.core.truth_(function() {
          var and__4115__auto__ = drop_QMARK_;
          if (cljs.core.truth_(and__4115__auto__)) {
            return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(input) : pred.call(null, input);
          } else {
            return and__4115__auto__;
          }
        }())) {
          return result;
        } else {
          cljs.core.vreset_BANG_(da, null);
          return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, input) : rf.call(null, result, input);
        }
      };
      G__3338 = function(result, input) {
        switch(arguments.length) {
          case 0:
            return G__3338__0.call(this);
          case 1:
            return G__3338__1.call(this, result);
          case 2:
            return G__3338__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__3338.cljs$core$IFn$_invoke$arity$0 = G__3338__0;
      G__3338.cljs$core$IFn$_invoke$arity$1 = G__3338__1;
      G__3338.cljs$core$IFn$_invoke$arity$2 = G__3338__2;
      return G__3338;
    }();
  };
};
cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2 = function(pred, coll) {
  var step = function(pred__$1, coll__$1) {
    while (true) {
      var s = cljs.core.seq(coll__$1);
      if (cljs.core.truth_(function() {
        var and__4115__auto__ = s;
        if (and__4115__auto__) {
          var G__3336 = cljs.core.first(s);
          return pred__$1.cljs$core$IFn$_invoke$arity$1 ? pred__$1.cljs$core$IFn$_invoke$arity$1(G__3336) : pred__$1.call(null, G__3336);
        } else {
          return and__4115__auto__;
        }
      }())) {
        var G__3339 = pred__$1;
        var G__3340 = cljs.core.rest(s);
        pred__$1 = G__3339;
        coll__$1 = G__3340;
        continue;
      } else {
        return s;
      }
      break;
    }
  };
  return new cljs.core.LazySeq(null, function() {
    return step(pred, coll);
  }, null, null);
};
cljs.core.drop_while.cljs$lang$maxFixedArity = 2;
cljs.core.Cycle = function(meta, all, prev, current, _next) {
  this.meta = meta;
  this.all = all;
  this.prev = prev;
  this.current = current;
  this._next = _next;
  this.cljs$lang$protocol_mask$partition0$ = 26083532;
  this.cljs$lang$protocol_mask$partition1$ = 1;
};
cljs.core.Cycle.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.Cycle.prototype.currentval = function() {
  var self__ = this;
  var coll = this;
  if (self__.current) {
  } else {
    var temp__5733__auto___3347 = cljs.core.next(self__.prev);
    if (temp__5733__auto___3347) {
      var c_3348 = temp__5733__auto___3347;
      self__.current = c_3348;
    } else {
      self__.current = self__.all;
    }
  }
  return self__.current;
};
cljs.core.Cycle.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Cycle.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1.cljs$core$ISeq$_rest$arity$1(null);
};
cljs.core.Cycle.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.Cycle.prototype.cljs$core$IPending$_realized_QMARK_$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return !(self__.current == null);
};
cljs.core.Cycle.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  var s = coll__$1.currentval();
  var ret = cljs.core.first(s);
  while (true) {
    var s__$1 = function() {
      var or__4126__auto__ = cljs.core.next(s);
      if (or__4126__auto__) {
        return or__4126__auto__;
      } else {
        return self__.all;
      }
    }();
    var ret__$1 = function() {
      var G__3343 = ret;
      var G__3344 = cljs.core.first(s__$1);
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__3343, G__3344) : f.call(null, G__3343, G__3344);
    }();
    if (cljs.core.reduced_QMARK_(ret__$1)) {
      return cljs.core.deref(ret__$1);
    } else {
      var G__3349 = s__$1;
      var G__3350 = ret__$1;
      s = G__3349;
      ret = G__3350;
      continue;
    }
    break;
  }
};
cljs.core.Cycle.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  var s = coll__$1.currentval();
  var ret = start;
  while (true) {
    var ret__$1 = function() {
      var G__3345 = ret;
      var G__3346 = cljs.core.first(s);
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__3345, G__3346) : f.call(null, G__3345, G__3346);
    }();
    if (cljs.core.reduced_QMARK_(ret__$1)) {
      return cljs.core.deref(ret__$1);
    } else {
      var G__3351 = function() {
        var or__4126__auto__ = cljs.core.next(s);
        if (or__4126__auto__) {
          return or__4126__auto__;
        } else {
          return self__.all;
        }
      }();
      var G__3352 = ret__$1;
      s = G__3351;
      ret = G__3352;
      continue;
    }
    break;
  }
};
cljs.core.Cycle.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first(coll__$1.currentval());
};
cljs.core.Cycle.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__._next == null) {
    self__._next = new cljs.core.Cycle(null, self__.all, coll__$1.currentval(), null, null);
  } else {
  }
  return self__._next;
};
cljs.core.Cycle.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.Cycle.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  if (new_meta === self__.meta) {
    return coll__$1;
  } else {
    return new cljs.core.Cycle(new_meta, self__.all, self__.prev, self__.current, self__._next);
  }
};
cljs.core.Cycle.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.Cycle.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "all", "all", -1762306027, null), new cljs.core.Symbol(null, "prev", "prev", 43462301, null), cljs.core.with_meta(new cljs.core.Symbol(null, "current", "current", 552492924, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, 
  "_next", "_next", 101877036, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.Cycle.cljs$lang$type = true;
cljs.core.Cycle.cljs$lang$ctorStr = "cljs.core/Cycle";
cljs.core.Cycle.cljs$lang$ctorPrWriter = function(this__4369__auto__, writer__4370__auto__, opt__4371__auto__) {
  return cljs.core._write(writer__4370__auto__, "cljs.core/Cycle");
};
cljs.core.__GT_Cycle = function cljs$core$__GT_Cycle(meta, all, prev, current, _next) {
  return new cljs.core.Cycle(meta, all, prev, current, _next);
};
cljs.core.cycle = function cljs$core$cycle(coll) {
  var temp__5733__auto__ = cljs.core.seq(coll);
  if (temp__5733__auto__) {
    var vals = temp__5733__auto__;
    return new cljs.core.Cycle(null, vals, null, vals, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.split_at = function cljs$core$split_at(n, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, coll), cljs.core.drop.cljs$core$IFn$_invoke$arity$2(n, coll)], null);
};
cljs.core.Repeat = function(meta, count, val, next, __hash) {
  this.meta = meta;
  this.count = count;
  this.val = val;
  this.next = next;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
  this.cljs$lang$protocol_mask$partition1$ = 1;
};
cljs.core.Repeat.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.Repeat.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Repeat.prototype.indexOf = function() {
  var G__3353 = null;
  var G__3353__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
  };
  var G__3353__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__3353 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__3353__1.call(this, x);
      case 2:
        return G__3353__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__3353.cljs$core$IFn$_invoke$arity$1 = G__3353__1;
  G__3353.cljs$core$IFn$_invoke$arity$2 = G__3353__2;
  return G__3353;
}();
cljs.core.Repeat.prototype.lastIndexOf = function() {
  var G__3354 = null;
  var G__3354__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, self__.count);
  };
  var G__3354__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__3354 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__3354__1.call(this, x);
      case 2:
        return G__3354__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__3354.cljs$core$IFn$_invoke$arity$1 = G__3354__1;
  G__3354.cljs$core$IFn$_invoke$arity$2 = G__3354__2;
  return G__3354;
}();
cljs.core.Repeat.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Repeat.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.next == null) {
    if (self__.count > 1) {
      self__.next = new cljs.core.Repeat(null, self__.count - 1, self__.val, null, null);
      return self__.next;
    } else {
      if (-1 === self__.count) {
        return coll__$1;
      } else {
        return null;
      }
    }
  } else {
    return self__.next;
  }
};
cljs.core.Repeat.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4238__auto__ = self__.__hash;
  if (!(h__4238__auto__ == null)) {
    return h__4238__auto__;
  } else {
    var h__4238__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4238__auto____$1;
    return h__4238__auto____$1;
  }
};
cljs.core.Repeat.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.Repeat.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.Repeat.prototype.cljs$core$IPending$_realized_QMARK_$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return false;
};
cljs.core.Repeat.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === -1) {
    var ret = f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(self__.val, self__.val) : f.call(null, self__.val, self__.val);
    while (true) {
      if (cljs.core.reduced_QMARK_(ret)) {
        return cljs.core.deref(ret);
      } else {
        var G__3355 = f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(ret, self__.val) : f.call(null, ret, self__.val);
        ret = G__3355;
        continue;
      }
      break;
    }
  } else {
    var i = 1;
    var ret = self__.val;
    while (true) {
      if (i < self__.count) {
        var ret__$1 = f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(ret, self__.val) : f.call(null, ret, self__.val);
        if (cljs.core.reduced_QMARK_(ret__$1)) {
          return cljs.core.deref(ret__$1);
        } else {
          var G__3356 = i + 1;
          var G__3357 = ret__$1;
          i = G__3356;
          ret = G__3357;
          continue;
        }
      } else {
        return ret;
      }
      break;
    }
  }
};
cljs.core.Repeat.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === -1) {
    var ret = f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(start, self__.val) : f.call(null, start, self__.val);
    while (true) {
      if (cljs.core.reduced_QMARK_(ret)) {
        return cljs.core.deref(ret);
      } else {
        var G__3358 = f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(ret, self__.val) : f.call(null, ret, self__.val);
        ret = G__3358;
        continue;
      }
      break;
    }
  } else {
    var i = 0;
    var ret = start;
    while (true) {
      if (i < self__.count) {
        var ret__$1 = f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(ret, self__.val) : f.call(null, ret, self__.val);
        if (cljs.core.reduced_QMARK_(ret__$1)) {
          return cljs.core.deref(ret__$1);
        } else {
          var G__3359 = i + 1;
          var G__3360 = ret__$1;
          i = G__3359;
          ret = G__3360;
          continue;
        }
      } else {
        return ret;
      }
      break;
    }
  }
};
cljs.core.Repeat.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.val;
};
cljs.core.Repeat.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.next == null) {
    if (self__.count > 1) {
      self__.next = new cljs.core.Repeat(null, self__.count - 1, self__.val, null, null);
      return self__.next;
    } else {
      if (-1 === self__.count) {
        return coll__$1;
      } else {
        return cljs.core.List.EMPTY;
      }
    }
  } else {
    return self__.next;
  }
};
cljs.core.Repeat.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.Repeat.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  if (new_meta === self__.meta) {
    return coll__$1;
  } else {
    return new cljs.core.Repeat(new_meta, self__.count, self__.val, self__.next, null);
  }
};
cljs.core.Repeat.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.Repeat.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "count", "count", -514511684, null), new cljs.core.Symbol(null, "val", "val", 1769233139, null), cljs.core.with_meta(new cljs.core.Symbol(null, "next", "next", 1522830042, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, 
  "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.Repeat.cljs$lang$type = true;
cljs.core.Repeat.cljs$lang$ctorStr = "cljs.core/Repeat";
cljs.core.Repeat.cljs$lang$ctorPrWriter = function(this__4369__auto__, writer__4370__auto__, opt__4371__auto__) {
  return cljs.core._write(writer__4370__auto__, "cljs.core/Repeat");
};
cljs.core.__GT_Repeat = function cljs$core$__GT_Repeat(meta, count, val, next, __hash) {
  return new cljs.core.Repeat(meta, count, val, next, __hash);
};
cljs.core.repeat = function cljs$core$repeat(var_args) {
  var G__3362 = arguments.length;
  switch(G__3362) {
    case 1:
      return cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.repeat.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
cljs.core.repeat.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return new cljs.core.Repeat(null, -1, x, null, null);
};
cljs.core.repeat.cljs$core$IFn$_invoke$arity$2 = function(n, x) {
  if (n > 0) {
    return new cljs.core.Repeat(null, n, x, null, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.repeat.cljs$lang$maxFixedArity = 2;
cljs.core.replicate = function cljs$core$replicate(n, x) {
  return cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(x));
};
cljs.core.repeatedly = function cljs$core$repeatedly(var_args) {
  var G__3365 = arguments.length;
  switch(G__3365) {
    case 1:
      return cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return new cljs.core.LazySeq(null, function() {
    return cljs.core.cons(f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null), cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$1(f));
  }, null, null);
};
cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$2 = function(n, f) {
  return cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$1(f));
};
cljs.core.repeatedly.cljs$lang$maxFixedArity = 2;
cljs.core.UNREALIZED_SEED = {};
cljs.core.Iterate = function(meta, f, prev_seed, seed, next) {
  this.meta = meta;
  this.f = f;
  this.prev_seed = prev_seed;
  this.seed = seed;
  this.next = next;
  this.cljs$lang$protocol_mask$partition0$ = 26083532;
  this.cljs$lang$protocol_mask$partition1$ = 1;
};
cljs.core.Iterate.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.Iterate.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Iterate.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1.cljs$core$ISeq$_rest$arity$1(null);
};
cljs.core.Iterate.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.Iterate.prototype.cljs$core$IPending$_realized_QMARK_$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return !(self__.seed === cljs.core.UNREALIZED_SEED);
};
cljs.core.Iterate.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, rf) {
  var self__ = this;
  var coll__$1 = this;
  var first = coll__$1.cljs$core$ISeq$_first$arity$1(null);
  var v = self__.f.cljs$core$IFn$_invoke$arity$1 ? self__.f.cljs$core$IFn$_invoke$arity$1(first) : self__.f.call(null, first);
  var ret = rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(first, v) : rf.call(null, first, v);
  var v__$1 = v;
  while (true) {
    if (cljs.core.reduced_QMARK_(ret)) {
      return cljs.core.deref(ret);
    } else {
      var v__$2 = self__.f.cljs$core$IFn$_invoke$arity$1 ? self__.f.cljs$core$IFn$_invoke$arity$1(v__$1) : self__.f.call(null, v__$1);
      var G__3367 = rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(ret, v__$2) : rf.call(null, ret, v__$2);
      var G__3368 = v__$2;
      ret = G__3367;
      v__$1 = G__3368;
      continue;
    }
    break;
  }
};
cljs.core.Iterate.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, rf, start) {
  var self__ = this;
  var coll__$1 = this;
  var v = coll__$1.cljs$core$ISeq$_first$arity$1(null);
  var ret = rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(start, v) : rf.call(null, start, v);
  var v__$1 = v;
  while (true) {
    if (cljs.core.reduced_QMARK_(ret)) {
      return cljs.core.deref(ret);
    } else {
      var v__$2 = self__.f.cljs$core$IFn$_invoke$arity$1 ? self__.f.cljs$core$IFn$_invoke$arity$1(v__$1) : self__.f.call(null, v__$1);
      var G__3369 = rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(ret, v__$2) : rf.call(null, ret, v__$2);
      var G__3370 = v__$2;
      ret = G__3369;
      v__$1 = G__3370;
      continue;
    }
    break;
  }
};
cljs.core.Iterate.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.UNREALIZED_SEED === self__.seed) {
    self__.seed = self__.f.cljs$core$IFn$_invoke$arity$1 ? self__.f.cljs$core$IFn$_invoke$arity$1(self__.prev_seed) : self__.f.call(null, self__.prev_seed);
  } else {
  }
  return self__.seed;
};
cljs.core.Iterate.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.next == null) {
    self__.next = new cljs.core.Iterate(null, self__.f, coll__$1.cljs$core$ISeq$_first$arity$1(null), cljs.core.UNREALIZED_SEED, null);
  } else {
  }
  return self__.next;
};
cljs.core.Iterate.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.Iterate.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  if (new_meta === self__.meta) {
    return coll__$1;
  } else {
    return new cljs.core.Iterate(new_meta, self__.f, self__.prev_seed, self__.seed, self__.next);
  }
};
cljs.core.Iterate.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.Iterate.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "f", "f", 43394975, null), new cljs.core.Symbol(null, "prev-seed", "prev-seed", 2126381367, null), cljs.core.with_meta(new cljs.core.Symbol(null, "seed", "seed", 1709144854, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, 
  "next", "next", 1522830042, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.Iterate.cljs$lang$type = true;
cljs.core.Iterate.cljs$lang$ctorStr = "cljs.core/Iterate";
cljs.core.Iterate.cljs$lang$ctorPrWriter = function(this__4369__auto__, writer__4370__auto__, opt__4371__auto__) {
  return cljs.core._write(writer__4370__auto__, "cljs.core/Iterate");
};
cljs.core.__GT_Iterate = function cljs$core$__GT_Iterate(meta, f, prev_seed, seed, next) {
  return new cljs.core.Iterate(meta, f, prev_seed, seed, next);
};
cljs.core.iterate = function cljs$core$iterate(f, x) {
  return new cljs.core.Iterate(null, f, null, x, null);
};
cljs.core.interleave = function cljs$core$interleave(var_args) {
  var G__3375 = arguments.length;
  switch(G__3375) {
    case 0:
      return cljs.core.interleave.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.interleave.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.interleave.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var args_arr__4757__auto__ = [];
      var len__4736__auto___3377 = arguments.length;
      var i__4737__auto___3378 = 0;
      while (true) {
        if (i__4737__auto___3378 < len__4736__auto___3377) {
          args_arr__4757__auto__.push(arguments[i__4737__auto___3378]);
          var G__3379 = i__4737__auto___3378 + 1;
          i__4737__auto___3378 = G__3379;
          continue;
        } else {
        }
        break;
      }
      var argseq__4758__auto__ = new cljs.core.IndexedSeq(args_arr__4757__auto__.slice(2), 0, null);
      return cljs.core.interleave.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__4758__auto__);
  }
};
cljs.core.interleave.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.List.EMPTY;
};
cljs.core.interleave.cljs$core$IFn$_invoke$arity$1 = function(c1) {
  return new cljs.core.LazySeq(null, function() {
    return c1;
  }, null, null);
};
cljs.core.interleave.cljs$core$IFn$_invoke$arity$2 = function(c1, c2) {
  return new cljs.core.LazySeq(null, function() {
    var s1 = cljs.core.seq(c1);
    var s2 = cljs.core.seq(c2);
    if (s1 && s2) {
      return cljs.core.cons(cljs.core.first(s1), cljs.core.cons(cljs.core.first(s2), cljs.core.interleave.cljs$core$IFn$_invoke$arity$2(cljs.core.rest(s1), cljs.core.rest(s2))));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.interleave.cljs$core$IFn$_invoke$arity$variadic = function(c1, c2, colls) {
  return new cljs.core.LazySeq(null, function() {
    var ss = cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.seq, cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(colls, c2, cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([c1], 0)));
    if (cljs.core.every_QMARK_(cljs.core.identity, ss)) {
      return cljs.core.concat.cljs$core$IFn$_invoke$arity$2(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.first, ss), cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.interleave, cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.rest, ss)));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.interleave.cljs$lang$applyTo = function(seq3372) {
  var G__3373 = cljs.core.first(seq3372);
  var seq3372__$1 = cljs.core.next(seq3372);
  var G__3374 = cljs.core.first(seq3372__$1);
  var seq3372__$2 = cljs.core.next(seq3372__$1);
  var self__4723__auto__ = this;
  return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__3373, G__3374, seq3372__$2);
};
cljs.core.interleave.cljs$lang$maxFixedArity = 2;
cljs.core.interpose = function cljs$core$interpose(var_args) {
  var G__3381 = arguments.length;
  switch(G__3381) {
    case 1:
      return cljs.core.interpose.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.interpose.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
cljs.core.interpose.cljs$core$IFn$_invoke$arity$1 = function(sep) {
  return function(rf) {
    var started = cljs.core.volatile_BANG_(false);
    return function() {
      var G__3383 = null;
      var G__3383__0 = function() {
        return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
      };
      var G__3383__1 = function(result) {
        return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
      };
      var G__3383__2 = function(result, input) {
        if (cljs.core.truth_(cljs.core.deref(started))) {
          var sepr = rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, sep) : rf.call(null, result, sep);
          if (cljs.core.reduced_QMARK_(sepr)) {
            return sepr;
          } else {
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(sepr, input) : rf.call(null, sepr, input);
          }
        } else {
          cljs.core.vreset_BANG_(started, true);
          return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, input) : rf.call(null, result, input);
        }
      };
      G__3383 = function(result, input) {
        switch(arguments.length) {
          case 0:
            return G__3383__0.call(this);
          case 1:
            return G__3383__1.call(this, result);
          case 2:
            return G__3383__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__3383.cljs$core$IFn$_invoke$arity$0 = G__3383__0;
      G__3383.cljs$core$IFn$_invoke$arity$1 = G__3383__1;
      G__3383.cljs$core$IFn$_invoke$arity$2 = G__3383__2;
      return G__3383;
    }();
  };
};
cljs.core.interpose.cljs$core$IFn$_invoke$arity$2 = function(sep, coll) {
  return cljs.core.drop.cljs$core$IFn$_invoke$arity$2(1, cljs.core.interleave.cljs$core$IFn$_invoke$arity$2(cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(sep), coll));
};
cljs.core.interpose.cljs$lang$maxFixedArity = 2;
cljs.core.flatten1 = function cljs$core$flatten1(colls) {
  var cat = function cljs$core$flatten1_$_cat(coll, colls__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__5733__auto__ = cljs.core.seq(coll);
      if (temp__5733__auto__) {
        var coll__$1 = temp__5733__auto__;
        return cljs.core.cons(cljs.core.first(coll__$1), cljs$core$flatten1_$_cat(cljs.core.rest(coll__$1), colls__$1));
      } else {
        if (cljs.core.seq(colls__$1)) {
          return cljs$core$flatten1_$_cat(cljs.core.first(colls__$1), cljs.core.rest(colls__$1));
        } else {
          return null;
        }
      }
    }, null, null);
  };
  return cat(null, colls);
};
cljs.core.mapcat = function cljs$core$mapcat(var_args) {
  var G__3387 = arguments.length;
  switch(G__3387) {
    case 1:
      return cljs.core.mapcat.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      var args_arr__4757__auto__ = [];
      var len__4736__auto___3389 = arguments.length;
      var i__4737__auto___3390 = 0;
      while (true) {
        if (i__4737__auto___3390 < len__4736__auto___3389) {
          args_arr__4757__auto__.push(arguments[i__4737__auto___3390]);
          var G__3391 = i__4737__auto___3390 + 1;
          i__4737__auto___3390 = G__3391;
          continue;
        } else {
        }
        break;
      }
      var argseq__4758__auto__ = new cljs.core.IndexedSeq(args_arr__4757__auto__.slice(1), 0, null);
      return cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__4758__auto__);
  }
};
cljs.core.mapcat.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return cljs.core.comp.cljs$core$IFn$_invoke$arity$2(cljs.core.map.cljs$core$IFn$_invoke$arity$1(f), cljs.core.cat);
};
cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic = function(f, colls) {
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.concat, cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.map, f, colls));
};
cljs.core.mapcat.cljs$lang$applyTo = function(seq3385) {
  var G__3386 = cljs.core.first(seq3385);
  var seq3385__$1 = cljs.core.next(seq3385);
  var self__4723__auto__ = this;
  return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__3386, seq3385__$1);
};
cljs.core.mapcat.cljs$lang$maxFixedArity = 1;
cljs.core.filter = function cljs$core$filter(var_args) {
  var G__3393 = arguments.length;
  switch(G__3393) {
    case 1:
      return cljs.core.filter.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
cljs.core.filter.cljs$core$IFn$_invoke$arity$1 = function(pred) {
  return function(rf) {
    return function() {
      var G__3396 = null;
      var G__3396__0 = function() {
        return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
      };
      var G__3396__1 = function(result) {
        return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
      };
      var G__3396__2 = function(result, input) {
        if (cljs.core.truth_(pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(input) : pred.call(null, input))) {
          return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, input) : rf.call(null, result, input);
        } else {
          return result;
        }
      };
      G__3396 = function(result, input) {
        switch(arguments.length) {
          case 0:
            return G__3396__0.call(this);
          case 1:
            return G__3396__1.call(this, result);
          case 2:
            return G__3396__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__3396.cljs$core$IFn$_invoke$arity$0 = G__3396__0;
      G__3396.cljs$core$IFn$_invoke$arity$1 = G__3396__1;
      G__3396.cljs$core$IFn$_invoke$arity$2 = G__3396__2;
      return G__3396;
    }();
  };
};
cljs.core.filter.cljs$core$IFn$_invoke$arity$2 = function(pred, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__5735__auto__ = cljs.core.seq(coll);
    if (temp__5735__auto__) {
      var s = temp__5735__auto__;
      if (cljs.core.chunked_seq_QMARK_(s)) {
        var c = cljs.core.chunk_first(s);
        var size = cljs.core.count(c);
        var b = cljs.core.chunk_buffer(size);
        var n__4613__auto___3397 = size;
        var i_3398 = 0;
        while (true) {
          if (i_3398 < n__4613__auto___3397) {
            if (cljs.core.truth_(function() {
              var G__3394 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_3398);
              return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__3394) : pred.call(null, G__3394);
            }())) {
              cljs.core.chunk_append(b, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_3398));
            } else {
            }
            var G__3399 = i_3398 + 1;
            i_3398 = G__3399;
            continue;
          } else {
          }
          break;
        }
        return cljs.core.chunk_cons(cljs.core.chunk(b), cljs.core.filter.cljs$core$IFn$_invoke$arity$2(pred, cljs.core.chunk_rest(s)));
      } else {
        var f = cljs.core.first(s);
        var r = cljs.core.rest(s);
        if (cljs.core.truth_(pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(f) : pred.call(null, f))) {
          return cljs.core.cons(f, cljs.core.filter.cljs$core$IFn$_invoke$arity$2(pred, r));
        } else {
          return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(pred, r);
        }
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.filter.cljs$lang$maxFixedArity = 2;
cljs.core.remove = function cljs$core$remove(var_args) {
  var G__3401 = arguments.length;
  switch(G__3401) {
    case 1:
      return cljs.core.remove.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.remove.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
cljs.core.remove.cljs$core$IFn$_invoke$arity$1 = function(pred) {
  return cljs.core.filter.cljs$core$IFn$_invoke$arity$1(cljs.core.complement(pred));
};
cljs.core.remove.cljs$core$IFn$_invoke$arity$2 = function(pred, coll) {
  return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(cljs.core.complement(pred), coll);
};
cljs.core.remove.cljs$lang$maxFixedArity = 2;
cljs.core.tree_seq = function cljs$core$tree_seq(branch_QMARK_, children, root) {
  var walk = function cljs$core$tree_seq_$_walk(node) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons(node, cljs.core.truth_(branch_QMARK_.cljs$core$IFn$_invoke$arity$1 ? branch_QMARK_.cljs$core$IFn$_invoke$arity$1(node) : branch_QMARK_.call(null, node)) ? cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic(cljs$core$tree_seq_$_walk, cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([children.cljs$core$IFn$_invoke$arity$1 ? children.cljs$core$IFn$_invoke$arity$1(node) : children.call(null, node)], 0)) : null);
    }, null, null);
  };
  return walk(root);
};
cljs.core.flatten = function cljs$core$flatten(x) {
  return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(function(p1__3403_SHARP_) {
    return !cljs.core.sequential_QMARK_(p1__3403_SHARP_);
  }, cljs.core.rest(cljs.core.tree_seq(cljs.core.sequential_QMARK_, cljs.core.seq, x)));
};
cljs.core.into = function cljs$core$into(var_args) {
  var G__3405 = arguments.length;
  switch(G__3405) {
    case 0:
      return cljs.core.into.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.into.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.into.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.into.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
cljs.core.into.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.into.cljs$core$IFn$_invoke$arity$1 = function(to) {
  return to;
};
cljs.core.into.cljs$core$IFn$_invoke$arity$2 = function(to, from) {
  if (!(to == null)) {
    if (!(to == null) ? to.cljs$lang$protocol_mask$partition1$ & 4 || cljs.core.PROTOCOL_SENTINEL === to.cljs$core$IEditableCollection$ ? true : false : false) {
      return cljs.core._with_meta(cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj_BANG_, cljs.core.transient$(to), from)), cljs.core.meta(to));
    } else {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj, to, from);
    }
  } else {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj, to, from);
  }
};
cljs.core.into.cljs$core$IFn$_invoke$arity$3 = function(to, xform, from) {
  if (!(to == null) ? to.cljs$lang$protocol_mask$partition1$ & 4 || cljs.core.PROTOCOL_SENTINEL === to.cljs$core$IEditableCollection$ ? true : false : false) {
    return cljs.core._with_meta(cljs.core.persistent_BANG_(cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(xform, cljs.core.conj_BANG_, cljs.core.transient$(to), from)), cljs.core.meta(to));
  } else {
    return cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(xform, cljs.core.conj, to, from);
  }
};
cljs.core.into.cljs$lang$maxFixedArity = 3;
cljs.core.mapv = function cljs$core$mapv(var_args) {
  var G__3415 = arguments.length;
  switch(G__3415) {
    case 2:
      return cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.mapv.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.mapv.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      var args_arr__4757__auto__ = [];
      var len__4736__auto___3417 = arguments.length;
      var i__4737__auto___3418 = 0;
      while (true) {
        if (i__4737__auto___3418 < len__4736__auto___3417) {
          args_arr__4757__auto__.push(arguments[i__4737__auto___3418]);
          var G__3419 = i__4737__auto___3418 + 1;
          i__4737__auto___3418 = G__3419;
          continue;
        } else {
        }
        break;
      }
      var argseq__4758__auto__ = new cljs.core.IndexedSeq(args_arr__4757__auto__.slice(4), 0, null);
      return cljs.core.mapv.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], argseq__4758__auto__);
  }
};
cljs.core.mapv.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(v, o) {
    return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(v, f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(o) : f.call(null, o));
  }, cljs.core.transient$(cljs.core.PersistentVector.EMPTY), coll));
};
cljs.core.mapv.cljs$core$IFn$_invoke$arity$3 = function(f, c1, c2) {
  return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY, cljs.core.map.cljs$core$IFn$_invoke$arity$3(f, c1, c2));
};
cljs.core.mapv.cljs$core$IFn$_invoke$arity$4 = function(f, c1, c2, c3) {
  return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY, cljs.core.map.cljs$core$IFn$_invoke$arity$4(f, c1, c2, c3));
};
cljs.core.mapv.cljs$core$IFn$_invoke$arity$variadic = function(f, c1, c2, c3, colls) {
  return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(cljs.core.map, f, c1, c2, c3, cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([colls], 0)));
};
cljs.core.mapv.cljs$lang$applyTo = function(seq3410) {
  var G__3411 = cljs.core.first(seq3410);
  var seq3410__$1 = cljs.core.next(seq3410);
  var G__3412 = cljs.core.first(seq3410__$1);
  var seq3410__$2 = cljs.core.next(seq3410__$1);
  var G__3413 = cljs.core.first(seq3410__$2);
  var seq3410__$3 = cljs.core.next(seq3410__$2);
  var G__3414 = cljs.core.first(seq3410__$3);
  var seq3410__$4 = cljs.core.next(seq3410__$3);
  var self__4723__auto__ = this;
  return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__3411, G__3412, G__3413, G__3414, seq3410__$4);
};
cljs.core.mapv.cljs$lang$maxFixedArity = 4;
cljs.core.filterv = function cljs$core$filterv(pred, coll) {
  return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(v, o) {
    if (cljs.core.truth_(pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(o) : pred.call(null, o))) {
      return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(v, o);
    } else {
      return v;
    }
  }, cljs.core.transient$(cljs.core.PersistentVector.EMPTY), coll));
};
cljs.core.partition = function cljs$core$partition(var_args) {
  var G__3421 = arguments.length;
  switch(G__3421) {
    case 2:
      return cljs.core.partition.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.partition.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.partition.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
cljs.core.partition.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  return cljs.core.partition.cljs$core$IFn$_invoke$arity$3(n, n, coll);
};
cljs.core.partition.cljs$core$IFn$_invoke$arity$3 = function(n, step, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__5735__auto__ = cljs.core.seq(coll);
    if (temp__5735__auto__) {
      var s = temp__5735__auto__;
      var p = cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, s);
      if (n === cljs.core.count(p)) {
        return cljs.core.cons(p, cljs.core.partition.cljs$core$IFn$_invoke$arity$3(n, step, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(step, s)));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.partition.cljs$core$IFn$_invoke$arity$4 = function(n, step, pad, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__5735__auto__ = cljs.core.seq(coll);
    if (temp__5735__auto__) {
      var s = temp__5735__auto__;
      var p = cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, s);
      if (n === cljs.core.count(p)) {
        return cljs.core.cons(p, cljs.core.partition.cljs$core$IFn$_invoke$arity$4(n, step, pad, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(step, s)));
      } else {
        return new cljs.core.List(null, cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.concat.cljs$core$IFn$_invoke$arity$2(p, pad)), null, 1, null);
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.partition.cljs$lang$maxFixedArity = 4;
cljs.core.get_in = function cljs$core$get_in(var_args) {
  var G__3424 = arguments.length;
  switch(G__3424) {
    case 2:
      return cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.get_in.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
cljs.core.get_in.cljs$core$IFn$_invoke$arity$2 = function(m, ks) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.get, m, ks);
};
cljs.core.get_in.cljs$core$IFn$_invoke$arity$3 = function(m, ks, not_found) {
  var sentinel = cljs.core.lookup_sentinel;
  var m__$1 = m;
  var ks__$1 = cljs.core.seq(ks);
  while (true) {
    if (!(ks__$1 == null)) {
      var m__$2 = cljs.core.get.cljs$core$IFn$_invoke$arity$3(m__$1, cljs.core.first(ks__$1), sentinel);
      if (sentinel === m__$2) {
        return not_found;
      } else {
        var G__3426 = sentinel;
        var G__3427 = m__$2;
        var G__3428 = cljs.core.next(ks__$1);
        sentinel = G__3426;
        m__$1 = G__3427;
        ks__$1 = G__3428;
        continue;
      }
    } else {
      return m__$1;
    }
    break;
  }
};
cljs.core.get_in.cljs$lang$maxFixedArity = 3;
cljs.core.assoc_in = function cljs$core$assoc_in(m, p__3429, v) {
  var vec__3430 = p__3429;
  var seq__3431 = cljs.core.seq(vec__3430);
  var first__3432 = cljs.core.first(seq__3431);
  var seq__3431__$1 = cljs.core.next(seq__3431);
  var k = first__3432;
  var ks = seq__3431__$1;
  if (ks) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
      var G__3433 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
      var G__3434 = ks;
      var G__3435 = v;
      return cljs.core.assoc_in.cljs$core$IFn$_invoke$arity$3 ? cljs.core.assoc_in.cljs$core$IFn$_invoke$arity$3(G__3433, G__3434, G__3435) : cljs.core.assoc_in.call(null, G__3433, G__3434, G__3435);
    }());
  } else {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, v);
  }
};
cljs.core.update_in = function cljs$core$update_in(var_args) {
  var G__3444 = arguments.length;
  switch(G__3444) {
    case 3:
      return cljs.core.update_in.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.update_in.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core.update_in.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    case 6:
      return cljs.core.update_in.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    default:
      var args_arr__4757__auto__ = [];
      var len__4736__auto___3476 = arguments.length;
      var i__4737__auto___3477 = 0;
      while (true) {
        if (i__4737__auto___3477 < len__4736__auto___3476) {
          args_arr__4757__auto__.push(arguments[i__4737__auto___3477]);
          var G__3478 = i__4737__auto___3477 + 1;
          i__4737__auto___3477 = G__3478;
          continue;
        } else {
        }
        break;
      }
      var argseq__4758__auto__ = new cljs.core.IndexedSeq(args_arr__4757__auto__.slice(6), 0, null);
      return cljs.core.update_in.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], argseq__4758__auto__);
  }
};
cljs.core.update_in.cljs$core$IFn$_invoke$arity$3 = function(m, p__3445, f) {
  var vec__3446 = p__3445;
  var seq__3447 = cljs.core.seq(vec__3446);
  var first__3448 = cljs.core.first(seq__3447);
  var seq__3447__$1 = cljs.core.next(seq__3447);
  var k = first__3448;
  var ks = seq__3447__$1;
  if (ks) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.update_in.cljs$core$IFn$_invoke$arity$3(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f));
  } else {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
      var G__3449 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__3449) : f.call(null, G__3449);
    }());
  }
};
cljs.core.update_in.cljs$core$IFn$_invoke$arity$4 = function(m, p__3450, f, a) {
  var vec__3451 = p__3450;
  var seq__3452 = cljs.core.seq(vec__3451);
  var first__3453 = cljs.core.first(seq__3452);
  var seq__3452__$1 = cljs.core.next(seq__3452);
  var k = first__3453;
  var ks = seq__3452__$1;
  if (ks) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.update_in.cljs$core$IFn$_invoke$arity$4(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f, a));
  } else {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
      var G__3454 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
      var G__3455 = a;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__3454, G__3455) : f.call(null, G__3454, G__3455);
    }());
  }
};
cljs.core.update_in.cljs$core$IFn$_invoke$arity$5 = function(m, p__3456, f, a, b) {
  var vec__3457 = p__3456;
  var seq__3458 = cljs.core.seq(vec__3457);
  var first__3459 = cljs.core.first(seq__3458);
  var seq__3458__$1 = cljs.core.next(seq__3458);
  var k = first__3459;
  var ks = seq__3458__$1;
  if (ks) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.update_in.cljs$core$IFn$_invoke$arity$5(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f, a, b));
  } else {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
      var G__3460 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
      var G__3461 = a;
      var G__3462 = b;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__3460, G__3461, G__3462) : f.call(null, G__3460, G__3461, G__3462);
    }());
  }
};
cljs.core.update_in.cljs$core$IFn$_invoke$arity$6 = function(m, p__3463, f, a, b, c) {
  var vec__3464 = p__3463;
  var seq__3465 = cljs.core.seq(vec__3464);
  var first__3466 = cljs.core.first(seq__3465);
  var seq__3465__$1 = cljs.core.next(seq__3465);
  var k = first__3466;
  var ks = seq__3465__$1;
  if (ks) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.update_in.cljs$core$IFn$_invoke$arity$6(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f, a, b, c));
  } else {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
      var G__3467 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
      var G__3468 = a;
      var G__3469 = b;
      var G__3470 = c;
      return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__3467, G__3468, G__3469, G__3470) : f.call(null, G__3467, G__3468, G__3469, G__3470);
    }());
  }
};
cljs.core.update_in.cljs$core$IFn$_invoke$arity$variadic = function(m, p__3471, f, a, b, c, args) {
  var vec__3472 = p__3471;
  var seq__3473 = cljs.core.seq(vec__3472);
  var first__3474 = cljs.core.first(seq__3473);
  var seq__3473__$1 = cljs.core.next(seq__3473);
  var k = first__3474;
  var ks = seq__3473__$1;
  if (ks) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(cljs.core.update_in, cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f, a, cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([b, c, args], 0)));
  } else {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), a, b, c, cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([args], 0)));
  }
};
cljs.core.update_in.cljs$lang$applyTo = function(seq3437) {
  var G__3438 = cljs.core.first(seq3437);
  var seq3437__$1 = cljs.core.next(seq3437);
  var G__3439 = cljs.core.first(seq3437__$1);
  var seq3437__$2 = cljs.core.next(seq3437__$1);
  var G__3440 = cljs.core.first(seq3437__$2);
  var seq3437__$3 = cljs.core.next(seq3437__$2);
  var G__3441 = cljs.core.first(seq3437__$3);
  var seq3437__$4 = cljs.core.next(seq3437__$3);
  var G__3442 = cljs.core.first(seq3437__$4);
  var seq3437__$5 = cljs.core.next(seq3437__$4);
  var G__3443 = cljs.core.first(seq3437__$5);
  var seq3437__$6 = cljs.core.next(seq3437__$5);
  var self__4723__auto__ = this;
  return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__3438, G__3439, G__3440, G__3441, G__3442, G__3443, seq3437__$6);
};
cljs.core.update_in.cljs$lang$maxFixedArity = 6;
cljs.core.update = function cljs$core$update(var_args) {
  var G__3487 = arguments.length;
  switch(G__3487) {
    case 3:
      return cljs.core.update.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.update.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core.update.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    case 6:
      return cljs.core.update.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    default:
      var args_arr__4757__auto__ = [];
      var len__4736__auto___3499 = arguments.length;
      var i__4737__auto___3500 = 0;
      while (true) {
        if (i__4737__auto___3500 < len__4736__auto___3499) {
          args_arr__4757__auto__.push(arguments[i__4737__auto___3500]);
          var G__3501 = i__4737__auto___3500 + 1;
          i__4737__auto___3500 = G__3501;
          continue;
        } else {
        }
        break;
      }
      var argseq__4758__auto__ = new cljs.core.IndexedSeq(args_arr__4757__auto__.slice(6), 0, null);
      return cljs.core.update.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], argseq__4758__auto__);
  }
};
cljs.core.update.cljs$core$IFn$_invoke$arity$3 = function(m, k, f) {
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
    var G__3488 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
    return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__3488) : f.call(null, G__3488);
  }());
};
cljs.core.update.cljs$core$IFn$_invoke$arity$4 = function(m, k, f, x) {
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
    var G__3489 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
    var G__3490 = x;
    return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__3489, G__3490) : f.call(null, G__3489, G__3490);
  }());
};
cljs.core.update.cljs$core$IFn$_invoke$arity$5 = function(m, k, f, x, y) {
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
    var G__3491 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
    var G__3492 = x;
    var G__3493 = y;
    return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__3491, G__3492, G__3493) : f.call(null, G__3491, G__3492, G__3493);
  }());
};
cljs.core.update.cljs$core$IFn$_invoke$arity$6 = function(m, k, f, x, y, z) {
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
    var G__3494 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
    var G__3495 = x;
    var G__3496 = y;
    var G__3497 = z;
    return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__3494, G__3495, G__3496, G__3497) : f.call(null, G__3494, G__3495, G__3496, G__3497);
  }());
};
cljs.core.update.cljs$core$IFn$_invoke$arity$variadic = function(m, k, f, x, y, z, more) {
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), x, y, z, cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([more], 0)));
};
cljs.core.update.cljs$lang$applyTo = function(seq3480) {
  var G__3481 = cljs.core.first(seq3480);
  var seq3480__$1 = cljs.core.next(seq3480);
  var G__3482 = cljs.core.first(seq3480__$1);
  var seq3480__$2 = cljs.core.next(seq3480__$1);
  var G__3483 = cljs.core.first(seq3480__$2);
  var seq3480__$3 = cljs.core.next(seq3480__$2);
  var G__3484 = cljs.core.first(seq3480__$3);
  var seq3480__$4 = cljs.core.next(seq3480__$3);
  var G__3485 = cljs.core.first(seq3480__$4);
  var seq3480__$5 = cljs.core.next(seq3480__$4);
  var G__3486 = cljs.core.first(seq3480__$5);
  var seq3480__$6 = cljs.core.next(seq3480__$5);
  var self__4723__auto__ = this;
  return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__3481, G__3482, G__3483, G__3484, G__3485, G__3486, seq3480__$6);
};
cljs.core.update.cljs$lang$maxFixedArity = 6;
cljs.core.VectorNode = function(edit, arr) {
  this.edit = edit;
  this.arr = arr;
};
cljs.core.VectorNode.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "edit", "edit", -1302639, null), new cljs.core.Symbol(null, "arr", "arr", 2115492975, null)], null);
};
cljs.core.VectorNode.cljs$lang$type = true;
cljs.core.VectorNode.cljs$lang$ctorStr = "cljs.core/VectorNode";
cljs.core.VectorNode.cljs$lang$ctorPrWriter = function(this__4369__auto__, writer__4370__auto__, opt__4371__auto__) {
  return cljs.core._write(writer__4370__auto__, "cljs.core/VectorNode");
};
cljs.core.__GT_VectorNode = function cljs$core$__GT_VectorNode(edit, arr) {
  return new cljs.core.VectorNode(edit, arr);
};
cljs.core.pv_fresh_node = function cljs$core$pv_fresh_node(edit) {
  return new cljs.core.VectorNode(edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
};
cljs.core.pv_aget = function cljs$core$pv_aget(node, idx) {
  return node.arr[idx];
};
cljs.core.pv_aset = function cljs$core$pv_aset(node, idx, val) {
  return node.arr[idx] = val;
};
cljs.core.pv_clone_node = function cljs$core$pv_clone_node(node) {
  return new cljs.core.VectorNode(node.edit, cljs.core.aclone(node.arr));
};
cljs.core.tail_off = function cljs$core$tail_off(pv) {
  var cnt = pv.cnt;
  if (cnt < 32) {
    return 0;
  } else {
    return cnt - 1 >>> 5 << 5;
  }
};
cljs.core.new_path = function cljs$core$new_path(edit, level, node) {
  var ll = level;
  var ret = node;
  while (true) {
    if (ll === 0) {
      return ret;
    } else {
      var embed = ret;
      var r = cljs.core.pv_fresh_node(edit);
      var _ = cljs.core.pv_aset(r, 0, embed);
      var G__3502 = ll - 5;
      var G__3503 = r;
      ll = G__3502;
      ret = G__3503;
      continue;
    }
    break;
  }
};
cljs.core.push_tail = function cljs$core$push_tail(pv, level, parent, tailnode) {
  var ret = cljs.core.pv_clone_node(parent);
  var subidx = pv.cnt - 1 >>> level & 31;
  if (5 === level) {
    cljs.core.pv_aset(ret, subidx, tailnode);
    return ret;
  } else {
    var child = cljs.core.pv_aget(parent, subidx);
    if (!(child == null)) {
      var node_to_insert = function() {
        var G__3504 = pv;
        var G__3505 = level - 5;
        var G__3506 = child;
        var G__3507 = tailnode;
        return cljs.core.push_tail.cljs$core$IFn$_invoke$arity$4 ? cljs.core.push_tail.cljs$core$IFn$_invoke$arity$4(G__3504, G__3505, G__3506, G__3507) : cljs.core.push_tail.call(null, G__3504, G__3505, G__3506, G__3507);
      }();
      cljs.core.pv_aset(ret, subidx, node_to_insert);
      return ret;
    } else {
      var node_to_insert = cljs.core.new_path(null, level - 5, tailnode);
      cljs.core.pv_aset(ret, subidx, node_to_insert);
      return ret;
    }
  }
};
cljs.core.vector_index_out_of_bounds = function cljs$core$vector_index_out_of_bounds(i, cnt) {
  throw new Error(["No item ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(i), " in vector of length ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(cnt)].join(""));
};
cljs.core.first_array_for_longvec = function cljs$core$first_array_for_longvec(pv) {
  var node = pv.root;
  var level = pv.shift;
  while (true) {
    if (level > 0) {
      var G__3508 = cljs.core.pv_aget(node, 0);
      var G__3509 = level - 5;
      node = G__3508;
      level = G__3509;
      continue;
    } else {
      return node.arr;
    }
    break;
  }
};
cljs.core.unchecked_array_for = function cljs$core$unchecked_array_for(pv, i) {
  if (i >= cljs.core.tail_off(pv)) {
    return pv.tail;
  } else {
    var node = pv.root;
    var level = pv.shift;
    while (true) {
      if (level > 0) {
        var G__3510 = cljs.core.pv_aget(node, i >>> level & 31);
        var G__3511 = level - 5;
        node = G__3510;
        level = G__3511;
        continue;
      } else {
        return node.arr;
      }
      break;
    }
  }
};
cljs.core.array_for = function cljs$core$array_for(pv, i) {
  if (0 <= i && i < pv.cnt) {
    return cljs.core.unchecked_array_for(pv, i);
  } else {
    return cljs.core.vector_index_out_of_bounds(i, pv.cnt);
  }
};
cljs.core.do_assoc = function cljs$core$do_assoc(pv, level, node, i, val) {
  var ret = cljs.core.pv_clone_node(node);
  if (level === 0) {
    cljs.core.pv_aset(ret, i & 31, val);
    return ret;
  } else {
    var subidx = i >>> level & 31;
    cljs.core.pv_aset(ret, subidx, function() {
      var G__3512 = pv;
      var G__3513 = level - 5;
      var G__3514 = cljs.core.pv_aget(node, subidx);
      var G__3515 = i;
      var G__3516 = val;
      return cljs.core.do_assoc.cljs$core$IFn$_invoke$arity$5 ? cljs.core.do_assoc.cljs$core$IFn$_invoke$arity$5(G__3512, G__3513, G__3514, G__3515, G__3516) : cljs.core.do_assoc.call(null, G__3512, G__3513, G__3514, G__3515, G__3516);
    }());
    return ret;
  }
};
cljs.core.pop_tail = function cljs$core$pop_tail(pv, level, node) {
  var subidx = pv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = function() {
      var G__3517 = pv;
      var G__3518 = level - 5;
      var G__3519 = cljs.core.pv_aget(node, subidx);
      return cljs.core.pop_tail.cljs$core$IFn$_invoke$arity$3 ? cljs.core.pop_tail.cljs$core$IFn$_invoke$arity$3(G__3517, G__3518, G__3519) : cljs.core.pop_tail.call(null, G__3517, G__3518, G__3519);
    }();
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      var ret = cljs.core.pv_clone_node(node);
      cljs.core.pv_aset(ret, subidx, new_child);
      return ret;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      var ret = cljs.core.pv_clone_node(node);
      cljs.core.pv_aset(ret, subidx, null);
      return ret;
    }
  }
};
cljs.core.RangedIterator = function(i, base, arr, v, start, end) {
  this.i = i;
  this.base = base;
  this.arr = arr;
  this.v = v;
  this.start = start;
  this.end = end;
};
cljs.core.RangedIterator.prototype.hasNext = function() {
  var self__ = this;
  var this$ = this;
  return self__.i < self__.end;
};
cljs.core.RangedIterator.prototype.next = function() {
  var self__ = this;
  var this$ = this;
  if (self__.i - self__.base === 32) {
    self__.arr = cljs.core.unchecked_array_for(self__.v, self__.i);
    self__.base = self__.base + 32;
  } else {
  }
  var ret = self__.arr[self__.i & 31];
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.RangedIterator.getBasis = function() {
  return new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "base", "base", 1825810849, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, 
  "arr", "arr", 2115492975, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), new cljs.core.Symbol(null, "v", "v", 1661996586, null), new cljs.core.Symbol(null, "start", "start", 1285322546, null), new cljs.core.Symbol(null, "end", "end", 1372345569, null)], null);
};
cljs.core.RangedIterator.cljs$lang$type = true;
cljs.core.RangedIterator.cljs$lang$ctorStr = "cljs.core/RangedIterator";
cljs.core.RangedIterator.cljs$lang$ctorPrWriter = function(this__4369__auto__, writer__4370__auto__, opt__4371__auto__) {
  return cljs.core._write(writer__4370__auto__, "cljs.core/RangedIterator");
};
cljs.core.__GT_RangedIterator = function cljs$core$__GT_RangedIterator(i, base, arr, v, start, end) {
  return new cljs.core.RangedIterator(i, base, arr, v, start, end);
};
cljs.core.ranged_iterator = function cljs$core$ranged_iterator(v, start, end) {
  var i = start;
  return new cljs.core.RangedIterator(i, i - i % 32, start < cljs.core.count(v) ? cljs.core.unchecked_array_for(v, i) : null, v, start, end);
};
cljs.core.pv_reduce = function cljs$core$pv_reduce(var_args) {
  var G__3521 = arguments.length;
  switch(G__3521) {
    case 4:
      return cljs.core.pv_reduce.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core.pv_reduce.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
cljs.core.pv_reduce.cljs$core$IFn$_invoke$arity$4 = function(pv, f, start, end) {
  if (start < end) {
    return cljs.core.pv_reduce.cljs$core$IFn$_invoke$arity$5(pv, f, cljs.core.nth.cljs$core$IFn$_invoke$arity$2(pv, start), start + 1, end);
  } else {
    return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
  }
};
cljs.core.pv_reduce.cljs$core$IFn$_invoke$arity$5 = function(pv, f, init, start, end) {
  var acc = init;
  var i = start;
  var arr = cljs.core.unchecked_array_for(pv, start);
  while (true) {
    if (i < end) {
      var j = i & 31;
      var arr__$1 = j === 0 ? cljs.core.unchecked_array_for(pv, i) : arr;
      var nacc = function() {
        var G__3522 = acc;
        var G__3523 = arr__$1[j];
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__3522, G__3523) : f.call(null, G__3522, G__3523);
      }();
      if (cljs.core.reduced_QMARK_(nacc)) {
        return cljs.core.deref(nacc);
      } else {
        var G__3525 = nacc;
        var G__3526 = i + 1;
        var G__3527 = arr__$1;
        acc = G__3525;
        i = G__3526;
        arr = G__3527;
        continue;
      }
    } else {
      return acc;
    }
    break;
  }
};
cljs.core.pv_reduce.cljs$lang$maxFixedArity = 5;
cljs.core.APersistentVector = function() {
};
cljs.core.PersistentVector = function(meta, cnt, shift, root, tail, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 167666463;
  this.cljs$lang$protocol_mask$partition1$ = 139268;
};
cljs.core.PersistentVector.prototype.cljs$core$IFind$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.PersistentVector.prototype.cljs$core$IFind$_find$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return new cljs.core.MapEntry(n, cljs.core.unchecked_array_for(coll__$1, n)[n & 31], null);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentVector.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentVector.prototype.indexOf = function() {
  var G__3534 = null;
  var G__3534__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
  };
  var G__3534__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__3534 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__3534__1.call(this, x);
      case 2:
        return G__3534__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__3534.cljs$core$IFn$_invoke$arity$1 = G__3534__1;
  G__3534.cljs$core$IFn$_invoke$arity$2 = G__3534__2;
  return G__3534;
}();
cljs.core.PersistentVector.prototype.lastIndexOf = function() {
  var G__3535 = null;
  var G__3535__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, cljs.core.count(coll));
  };
  var G__3535__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__3535 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__3535__1.call(this, x);
      case 2:
        return G__3535__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__3535.cljs$core$IFn$_invoke$arity$1 = G__3535__1;
  G__3535.cljs$core$IFn$_invoke$arity$2 = G__3535__2;
  return G__3535;
}();
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1.cljs$core$ILookup$_lookup$arity$3(null, k, null);
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return coll__$1.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(v, f, init) {
  var self__ = this;
  var v__$1 = this;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < self__.cnt) {
      var arr = cljs.core.unchecked_array_for(v__$1, i);
      var len = arr.length;
      var init__$2 = function() {
        var j = 0;
        var init__$2 = init__$1;
        while (true) {
          if (j < len) {
            var init__$3 = function() {
              var G__3529 = init__$2;
              var G__3530 = j + i;
              var G__3531 = arr[j];
              return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__3529, G__3530, G__3531) : f.call(null, G__3529, G__3530, G__3531);
            }();
            if (cljs.core.reduced_QMARK_(init__$3)) {
              return init__$3;
            } else {
              var G__3536 = j + 1;
              var G__3537 = init__$3;
              j = G__3536;
              init__$2 = G__3537;
              continue;
            }
          } else {
            return init__$2;
          }
          break;
        }
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        return cljs.core.deref(init__$2);
      } else {
        var G__3538 = i + len;
        var G__3539 = init__$2;
        i = G__3538;
        init__$1 = G__3539;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$APersistentVector$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_for(coll__$1, n)[n & 31];
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core.unchecked_array_for(coll__$1, n)[n & 31];
  } else {
    return not_found;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    if (cljs.core.tail_off(coll__$1) <= n) {
      var new_tail = cljs.core.aclone(self__.tail);
      new_tail[n & 31] = val;
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, new_tail, null);
    } else {
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, cljs.core.do_assoc(coll__$1, self__.shift, self__.root, n, val), self__.tail, null);
    }
  } else {
    if (n === self__.cnt) {
      return coll__$1.cljs$core$ICollection$_conj$arity$2(null, val);
    } else {
      throw new Error(["Index ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(n), " out of bounds  [0,", cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.cnt), "]"].join(""));
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IIterable$_iterator$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.ranged_iterator(this$__$1, 0, self__.cnt);
};
cljs.core.PersistentVector.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentVector.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return coll__$1.cljs$core$IIndexed$_nth$arity$2(null, self__.cnt - 1);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    throw new Error("Can't pop empty vector");
  } else {
    if (1 === self__.cnt) {
      return cljs.core._with_meta(cljs.core.PersistentVector.EMPTY, self__.meta);
    } else {
      if (1 < self__.cnt - cljs.core.tail_off(coll__$1)) {
        return new cljs.core.PersistentVector(self__.meta, self__.cnt - 1, self__.shift, self__.root, self__.tail.slice(0, -1), null);
      } else {
        var new_tail = cljs.core.unchecked_array_for(coll__$1, self__.cnt - 2);
        var nr = cljs.core.pop_tail(coll__$1, self__.shift, self__.root);
        var new_root = nr == null ? cljs.core.PersistentVector.EMPTY_NODE : nr;
        var cnt_1 = self__.cnt - 1;
        if (5 < self__.shift && cljs.core.pv_aget(new_root, 1) == null) {
          return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift - 5, cljs.core.pv_aget(new_root, 0), new_tail, null);
        } else {
          return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift, new_root, new_tail, null);
        }
      }
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return new cljs.core.RSeq(coll__$1, self__.cnt - 1, null);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4238__auto__ = self__.__hash;
  if (!(h__4238__auto__ == null)) {
    return h__4238__auto__;
  } else {
    var h__4238__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4238__auto____$1;
    return h__4238__auto____$1;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  if (other instanceof cljs.core.PersistentVector) {
    if (self__.cnt === cljs.core.count(other)) {
      var me_iter = coll__$1.cljs$core$IIterable$_iterator$arity$1(null);
      var you_iter = other.cljs$core$IIterable$_iterator$arity$1(null);
      while (true) {
        if (me_iter.hasNext()) {
          var x = me_iter.next();
          var y = you_iter.next();
          if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y)) {
            continue;
          } else {
            return false;
          }
        } else {
          return true;
        }
        break;
      }
    } else {
      return false;
    }
  } else {
    return cljs.core.equiv_sequential(coll__$1, other);
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientVector(self__.cnt, self__.shift, cljs.core.tv_editable_root(self__.root), cljs.core.tv_editable_tail(self__.tail));
};
cljs.core.PersistentVector.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta(cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$2 = function(v, f) {
  var self__ = this;
  var v__$1 = this;
  return cljs.core.pv_reduce.cljs$core$IFn$_invoke$arity$4(v__$1, f, 0, self__.cnt);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$3 = function(v, f, init) {
  var self__ = this;
  var v__$1 = this;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < self__.cnt) {
      var arr = cljs.core.unchecked_array_for(v__$1, i);
      var len = arr.length;
      var init__$2 = function() {
        var j = 0;
        var init__$2 = init__$1;
        while (true) {
          if (j < len) {
            var init__$3 = function() {
              var G__3532 = init__$2;
              var G__3533 = arr[j];
              return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__3532, G__3533) : f.call(null, G__3532, G__3533);
            }();
            if (cljs.core.reduced_QMARK_(init__$3)) {
              return init__$3;
            } else {
              var G__3540 = j + 1;
              var G__3541 = init__$3;
              j = G__3540;
              init__$2 = G__3541;
              continue;
            }
          } else {
            return init__$2;
          }
          break;
        }
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        return cljs.core.deref(init__$2);
      } else {
        var G__3542 = i + len;
        var G__3543 = init__$2;
        i = G__3542;
        init__$1 = G__3543;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return coll__$1.cljs$core$IVector$_assoc_n$arity$3(null, k, v);
  } else {
    throw new Error("Vector's key for assoc must be a number.");
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.integer_QMARK_(k)) {
    return 0 <= k && k < self__.cnt;
  } else {
    return false;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    return null;
  } else {
    if (self__.cnt <= 32) {
      return new cljs.core.IndexedSeq(self__.tail, 0, null);
    } else {
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(coll__$1, cljs.core.first_array_for_longvec(coll__$1), 0, 0);
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  if (new_meta === self__.meta) {
    return coll__$1;
  } else {
    return new cljs.core.PersistentVector(new_meta, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt - cljs.core.tail_off(coll__$1) < 32) {
    var len = self__.tail.length;
    var new_tail = new Array(len + 1);
    var n__4613__auto___3544 = len;
    var i_3545 = 0;
    while (true) {
      if (i_3545 < n__4613__auto___3544) {
        new_tail[i_3545] = self__.tail[i_3545];
        var G__3546 = i_3545 + 1;
        i_3545 = G__3546;
        continue;
      } else {
      }
      break;
    }
    new_tail[len] = o;
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, self__.shift, self__.root, new_tail, null);
  } else {
    var root_overflow_QMARK_ = self__.cnt >>> 5 > 1 << self__.shift;
    var new_shift = root_overflow_QMARK_ ? self__.shift + 5 : self__.shift;
    var new_root = root_overflow_QMARK_ ? function() {
      var n_r = cljs.core.pv_fresh_node(null);
      cljs.core.pv_aset(n_r, 0, self__.root);
      cljs.core.pv_aset(n_r, 1, cljs.core.new_path(null, self__.shift, new cljs.core.VectorNode(null, self__.tail)));
      return n_r;
    }() : cljs.core.push_tail(coll__$1, self__.shift, self__.root, new cljs.core.VectorNode(null, self__.tail));
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, new_shift, new_root, [o], null);
  }
};
cljs.core.PersistentVector.prototype.call = function() {
  var G__3547 = null;
  var G__3547__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__3547__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__3547 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__3547__2.call(this, self__, k);
      case 3:
        return G__3547__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__3547.cljs$core$IFn$_invoke$arity$2 = G__3547__2;
  G__3547.cljs$core$IFn$_invoke$arity$3 = G__3547__3;
  return G__3547;
}();
cljs.core.PersistentVector.prototype.apply = function(self__, args3528) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args3528)));
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.PersistentVector.getBasis = function() {
  return new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "cnt", "cnt", 1924510325, null), new cljs.core.Symbol(null, "shift", "shift", -1657295705, null), new cljs.core.Symbol(null, "root", "root", 1191874074, null), new cljs.core.Symbol(null, "tail", "tail", 494507963, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 
  1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.PersistentVector.cljs$lang$type = true;
cljs.core.PersistentVector.cljs$lang$ctorStr = "cljs.core/PersistentVector";
cljs.core.PersistentVector.cljs$lang$ctorPrWriter = function(this__4369__auto__, writer__4370__auto__, opt__4371__auto__) {
  return cljs.core._write(writer__4370__auto__, "cljs.core/PersistentVector");
};
cljs.core.__GT_PersistentVector = function cljs$core$__GT_PersistentVector(meta, cnt, shift, root, tail, __hash) {
  return new cljs.core.PersistentVector(meta, cnt, shift, root, tail, __hash);
};
cljs.core.PersistentVector.EMPTY_NODE = new cljs.core.VectorNode(null, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
cljs.core.PersistentVector.EMPTY = new cljs.core.PersistentVector(null, 0, 5, cljs.core.PersistentVector.EMPTY_NODE, [], cljs.core.empty_ordered_hash);
cljs.core.PersistentVector.fromArray = function(xs, no_clone) {
  var l = xs.length;
  var xs__$1 = no_clone ? xs : cljs.core.aclone(xs);
  if (l < 32) {
    return new cljs.core.PersistentVector(null, l, 5, cljs.core.PersistentVector.EMPTY_NODE, xs__$1, null);
  } else {
    var node = xs__$1.slice(0, 32);
    var v = new cljs.core.PersistentVector(null, 32, 5, cljs.core.PersistentVector.EMPTY_NODE, node, null);
    var i = 32;
    var out = v.cljs$core$IEditableCollection$_as_transient$arity$1(null);
    while (true) {
      if (i < l) {
        var G__3548 = i + 1;
        var G__3549 = cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(out, xs__$1[i]);
        i = G__3548;
        out = G__3549;
        continue;
      } else {
        return cljs.core.persistent_BANG_(out);
      }
      break;
    }
  }
};
goog.object.set(cljs.core.PersistentVector.prototype, cljs.core.ITER_SYMBOL, function() {
  var this__4675__auto__ = this;
  return cljs.core.es6_iterator(this__4675__auto__);
});
cljs.core.vec = function cljs$core$vec(coll) {
  if (cljs.core.map_entry_QMARK_(coll)) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.key(coll), cljs.core.val(coll)], null);
  } else {
    if (cljs.core.vector_QMARK_(coll)) {
      return cljs.core.with_meta(coll, null);
    } else {
      if (cljs.core.array_QMARK_(coll)) {
        return cljs.core.PersistentVector.fromArray(coll, true);
      } else {
        return cljs.core._persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj_BANG_, cljs.core._as_transient(cljs.core.PersistentVector.EMPTY), coll));
      }
    }
  }
};
cljs.core.vector = function cljs$core$vector(var_args) {
  var args__4742__auto__ = [];
  var len__4736__auto___3551 = arguments.length;
  var i__4737__auto___3552 = 0;
  while (true) {
    if (i__4737__auto___3552 < len__4736__auto___3551) {
      args__4742__auto__.push(arguments[i__4737__auto___3552]);
      var G__3553 = i__4737__auto___3552 + 1;
      i__4737__auto___3552 = G__3553;
      continue;
    } else {
    }
    break;
  }
  var argseq__4743__auto__ = 0 < args__4742__auto__.length ? new cljs.core.IndexedSeq(args__4742__auto__.slice(0), 0, null) : null;
  return cljs.core.vector.cljs$core$IFn$_invoke$arity$variadic(argseq__4743__auto__);
};
cljs.core.vector.cljs$core$IFn$_invoke$arity$variadic = function(args) {
  if (args instanceof cljs.core.IndexedSeq && args.i === 0) {
    return cljs.core.PersistentVector.fromArray(args.arr, !cljs.core.array_QMARK_(args.arr));
  } else {
    return cljs.core.vec(args);
  }
};
cljs.core.vector.cljs$lang$maxFixedArity = 0;
cljs.core.vector.cljs$lang$applyTo = function(seq3550) {
  var self__4724__auto__ = this;
  return self__4724__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq3550));
};
cljs.core.ChunkedSeq = function(vec, node, i, off, meta, __hash) {
  this.vec = vec;
  this.node = node;
  this.i = i;
  this.off = off;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32375020;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ChunkedSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ChunkedSeq.prototype.indexOf = function() {
  var G__3554 = null;
  var G__3554__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
  };
  var G__3554__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__3554 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__3554__1.call(this, x);
      case 2:
        return G__3554__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__3554.cljs$core$IFn$_invoke$arity$1 = G__3554__1;
  G__3554.cljs$core$IFn$_invoke$arity$2 = G__3554__2;
  return G__3554;
}();
cljs.core.ChunkedSeq.prototype.lastIndexOf = function() {
  var G__3555 = null;
  var G__3555__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, cljs.core.count(coll));
  };
  var G__3555__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__3555 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__3555__1.call(this, x);
      case 2:
        return G__3555__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__3555.cljs$core$IFn$_invoke$arity$1 = G__3555__1;
  G__3555.cljs$core$IFn$_invoke$arity$2 = G__3555__2;
  return G__3555;
}();
cljs.core.ChunkedSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(self__.vec, self__.node, self__.i, self__.off + 1);
    if (s == null) {
      return null;
    } else {
      return s;
    }
  } else {
    return coll__$1.cljs$core$IChunkedNext$_chunked_next$arity$1(null);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4238__auto__ = self__.__hash;
  if (!(h__4238__auto__ == null)) {
    return h__4238__auto__;
  } else {
    var h__4238__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4238__auto____$1;
    return h__4238__auto____$1;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.pv_reduce.cljs$core$IFn$_invoke$arity$4(self__.vec, f, self__.i + self__.off, cljs.core.count(self__.vec));
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.pv_reduce.cljs$core$IFn$_invoke$arity$5(self__.vec, f, start, self__.i + self__.off, cljs.core.count(self__.vec));
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.node[self__.off];
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(self__.vec, self__.node, self__.i, self__.off + 1);
    if (s == null) {
      return cljs.core.List.EMPTY;
    } else {
      return s;
    }
  } else {
    return coll__$1.cljs$core$IChunkedSeq$_chunked_rest$arity$1(null);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$2(self__.node, self__.off);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var end = self__.i + self__.node.length;
  if (end < cljs.core._count(self__.vec)) {
    return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(self__.vec, cljs.core.unchecked_array_for(self__.vec, end), end, 0);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  if (new_meta === self__.meta) {
    return coll__$1;
  } else {
    return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$5(self__.vec, self__.node, self__.i, self__.off, new_meta);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var end = self__.i + self__.node.length;
  if (end < cljs.core._count(self__.vec)) {
    return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(self__.vec, cljs.core.unchecked_array_for(self__.vec, end), end, 0);
  } else {
    return null;
  }
};
cljs.core.ChunkedSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "vec", "vec", 982683596, null), new cljs.core.Symbol(null, "node", "node", -2073234571, null), new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.Symbol(null, "off", "off", -2047994980, null), new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 
  1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.ChunkedSeq.cljs$lang$type = true;
cljs.core.ChunkedSeq.cljs$lang$ctorStr = "cljs.core/ChunkedSeq";
cljs.core.ChunkedSeq.cljs$lang$ctorPrWriter = function(this__4369__auto__, writer__4370__auto__, opt__4371__auto__) {
  return cljs.core._write(writer__4370__auto__, "cljs.core/ChunkedSeq");
};
cljs.core.__GT_ChunkedSeq = function cljs$core$__GT_ChunkedSeq(vec, node, i, off, meta, __hash) {
  return new cljs.core.ChunkedSeq(vec, node, i, off, meta, __hash);
};
goog.object.set(cljs.core.ChunkedSeq.prototype, cljs.core.ITER_SYMBOL, function() {
  var this__4675__auto__ = this;
  return cljs.core.es6_iterator(this__4675__auto__);
});
cljs.core.chunked_seq = function cljs$core$chunked_seq(var_args) {
  var G__3557 = arguments.length;
  switch(G__3557) {
    case 3:
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$3 = function(vec, i, off) {
  return new cljs.core.ChunkedSeq(vec, cljs.core.array_for(vec, i), i, off, null, null);
};
cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 = function(vec, node, i, off) {
  return new cljs.core.ChunkedSeq(vec, node, i, off, null, null);
};
cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$5 = function(vec, node, i, off, meta) {
  return new cljs.core.ChunkedSeq(vec, node, i, off, meta, null);
};
cljs.core.chunked_seq.cljs$lang$maxFixedArity = 5;
cljs.core.Subvec = function(meta, v, start, end, __hash) {
  this.meta = meta;
  this.v = v;
  this.start = start;
  this.end = end;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 167666463;
  this.cljs$lang$protocol_mask$partition1$ = 139264;
};
cljs.core.Subvec.prototype.cljs$core$IFind$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.Subvec.prototype.cljs$core$IFind$_find$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0) {
    return null;
  } else {
    var idx = self__.start + n;
    if (idx < self__.end) {
      return new cljs.core.MapEntry(n, cljs.core._lookup.cljs$core$IFn$_invoke$arity$2(self__.v, idx), null);
    } else {
      return null;
    }
  }
};
cljs.core.Subvec.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.Subvec.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Subvec.prototype.indexOf = function() {
  var G__3566 = null;
  var G__3566__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
  };
  var G__3566__2 = function(x, start__$1) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start__$1);
  };
  G__3566 = function(x, start__$1) {
    switch(arguments.length) {
      case 1:
        return G__3566__1.call(this, x);
      case 2:
        return G__3566__2.call(this, x, start__$1);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__3566.cljs$core$IFn$_invoke$arity$1 = G__3566__1;
  G__3566.cljs$core$IFn$_invoke$arity$2 = G__3566__2;
  return G__3566;
}();
cljs.core.Subvec.prototype.lastIndexOf = function() {
  var G__3567 = null;
  var G__3567__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, cljs.core.count(coll));
  };
  var G__3567__2 = function(x, start__$1) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start__$1);
  };
  G__3567 = function(x, start__$1) {
    switch(arguments.length) {
      case 1:
        return G__3567__1.call(this, x);
      case 2:
        return G__3567__2.call(this, x, start__$1);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__3567.cljs$core$IFn$_invoke$arity$1 = G__3567__1;
  G__3567.cljs$core$IFn$_invoke$arity$2 = G__3567__2;
  return G__3567;
}();
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1.cljs$core$ILookup$_lookup$arity$3(null, k, null);
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return coll__$1.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.Subvec.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var i = self__.start;
  var j = 0;
  var init__$1 = init;
  while (true) {
    if (i < self__.end) {
      var init__$2 = function() {
        var G__3560 = init__$1;
        var G__3561 = j;
        var G__3562 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.v, i);
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__3560, G__3561, G__3562) : f.call(null, G__3560, G__3561, G__3562);
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        return cljs.core.deref(init__$2);
      } else {
        var G__3568 = i + 1;
        var G__3569 = j + 1;
        var G__3570 = init__$2;
        i = G__3568;
        j = G__3569;
        init__$1 = G__3570;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return cljs.core.vector_index_out_of_bounds(n, self__.end - self__.start);
  } else {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.v, self__.start + n);
  }
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return not_found;
  } else {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(self__.v, self__.start + n, not_found);
  }
};
cljs.core.Subvec.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  var v_pos = self__.start + n;
  if (n < 0 || self__.end + 1 <= v_pos) {
    throw new Error(["Index ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(n), " out of bounds [0,", cljs.core.str.cljs$core$IFn$_invoke$arity$1(coll__$1.cljs$core$ICounted$_count$arity$1(null)), "]"].join(""));
  } else {
    return cljs.core.build_subvec(self__.meta, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.v, v_pos, val), self__.start, function() {
      var x__4214__auto__ = self__.end;
      var y__4215__auto__ = v_pos + 1;
      return x__4214__auto__ > y__4215__auto__ ? x__4214__auto__ : y__4215__auto__;
    }(), null);
  }
};
cljs.core.Subvec.prototype.cljs$core$IIterable$_iterator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.v == null) ? false || cljs.core.PROTOCOL_SENTINEL === self__.v.cljs$core$APersistentVector$ ? true : false : false) {
    return cljs.core.ranged_iterator(self__.v, self__.start, self__.end);
  } else {
    return cljs.core.seq_iter(coll__$1);
  }
};
cljs.core.Subvec.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Subvec.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Subvec(self__.meta, self__.v, self__.start, self__.end, self__.__hash);
};
cljs.core.Subvec.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.end - self__.start;
};
cljs.core.Subvec.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.start === self__.end) {
    return null;
  } else {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.v, self__.end - 1);
  }
};
cljs.core.Subvec.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.start === self__.end) {
    throw new Error("Can't pop empty vector");
  } else {
    return cljs.core.build_subvec(self__.meta, self__.v, self__.start, self__.end - 1, null);
  }
};
cljs.core.Subvec.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.start === self__.end)) {
    return new cljs.core.RSeq(coll__$1, self__.end - self__.start - 1, null);
  } else {
    return null;
  }
};
cljs.core.Subvec.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4238__auto__ = self__.__hash;
  if (!(h__4238__auto__ == null)) {
    return h__4238__auto__;
  } else {
    var h__4238__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4238__auto____$1;
    return h__4238__auto____$1;
  }
};
cljs.core.Subvec.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.Subvec.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta(cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.v == null) ? false || cljs.core.PROTOCOL_SENTINEL === self__.v.cljs$core$APersistentVector$ ? true : false : false) {
    return cljs.core.pv_reduce.cljs$core$IFn$_invoke$arity$4(self__.v, f, self__.start, self__.end);
  } else {
    return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(coll__$1, f);
  }
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.v == null) ? false || cljs.core.PROTOCOL_SENTINEL === self__.v.cljs$core$APersistentVector$ ? true : false : false) {
    return cljs.core.pv_reduce.cljs$core$IFn$_invoke$arity$5(self__.v, f, init, self__.start, self__.end);
  } else {
    return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(coll__$1, f, init);
  }
};
cljs.core.Subvec.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, key, val) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof key === "number") {
    return coll__$1.cljs$core$IVector$_assoc_n$arity$3(null, key, val);
  } else {
    throw new Error("Subvec's key for assoc must be a number.");
  }
};
cljs.core.Subvec.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var subvec_seq = function cljs$core$subvec_seq(i) {
    if (i === self__.end) {
      return null;
    } else {
      return cljs.core.cons(cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.v, i), new cljs.core.LazySeq(null, function() {
        return cljs$core$subvec_seq(i + 1);
      }, null, null));
    }
  };
  return subvec_seq(self__.start);
};
cljs.core.Subvec.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  if (new_meta === self__.meta) {
    return coll__$1;
  } else {
    return cljs.core.build_subvec(new_meta, self__.v, self__.start, self__.end, self__.__hash);
  }
};
cljs.core.Subvec.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.build_subvec(self__.meta, cljs.core._assoc_n(self__.v, self__.end, o), self__.start, self__.end + 1, null);
};
cljs.core.Subvec.prototype.call = function() {
  var G__3571 = null;
  var G__3571__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__3571__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__3571 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__3571__2.call(this, self__, k);
      case 3:
        return G__3571__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__3571.cljs$core$IFn$_invoke$arity$2 = G__3571__2;
  G__3571.cljs$core$IFn$_invoke$arity$3 = G__3571__3;
  return G__3571;
}();
cljs.core.Subvec.prototype.apply = function(self__, args3559) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args3559)));
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.Subvec.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "v", "v", 1661996586, null), new cljs.core.Symbol(null, "start", "start", 1285322546, null), new cljs.core.Symbol(null, "end", "end", 1372345569, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", 
  "mutable", 875778266), true], null))], null);
};
cljs.core.Subvec.cljs$lang$type = true;
cljs.core.Subvec.cljs$lang$ctorStr = "cljs.core/Subvec";
cljs.core.Subvec.cljs$lang$ctorPrWriter = function(this__4369__auto__, writer__4370__auto__, opt__4371__auto__) {
  return cljs.core._write(writer__4370__auto__, "cljs.core/Subvec");
};
cljs.core.__GT_Subvec = function cljs$core$__GT_Subvec(meta, v, start, end, __hash) {
  return new cljs.core.Subvec(meta, v, start, end, __hash);
};
goog.object.set(cljs.core.Subvec.prototype, cljs.core.ITER_SYMBOL, function() {
  var this__4675__auto__ = this;
  return cljs.core.es6_iterator(this__4675__auto__);
});
cljs.core.build_subvec = function cljs$core$build_subvec(meta, v, start, end, __hash) {
  while (true) {
    if (v instanceof cljs.core.Subvec) {
      var G__3572 = meta;
      var G__3573 = v.v;
      var G__3574 = v.start + start;
      var G__3575 = v.start + end;
      var G__3576 = __hash;
      meta = G__3572;
      v = G__3573;
      start = G__3574;
      end = G__3575;
      __hash = G__3576;
      continue;
    } else {
      if (cljs.core.vector_QMARK_(v)) {
      } else {
        throw new Error("v must satisfy IVector");
      }
      if (start < 0 || end < start || end > cljs.core.count(v)) {
        throw new Error("Index out of bounds");
      } else {
      }
      return new cljs.core.Subvec(meta, v, start, end, __hash);
    }
    break;
  }
};
cljs.core.subvec = function cljs$core$subvec(var_args) {
  var G__3578 = arguments.length;
  switch(G__3578) {
    case 2:
      return cljs.core.subvec.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
cljs.core.subvec.cljs$core$IFn$_invoke$arity$2 = function(v, start) {
  return cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(v, start, cljs.core.count(v));
};
cljs.core.subvec.cljs$core$IFn$_invoke$arity$3 = function(v, start, end) {
  if (!(start == null) && !(end == null)) {
  } else {
    throw new Error("Assert failed: (and (not (nil? start)) (not (nil? end)))");
  }
  return cljs.core.build_subvec(null, v, start | 0, end | 0, null);
};
cljs.core.subvec.cljs$lang$maxFixedArity = 3;
cljs.core.tv_ensure_editable = function cljs$core$tv_ensure_editable(edit, node) {
  if (edit === node.edit) {
    return node;
  } else {
    return new cljs.core.VectorNode(edit, cljs.core.aclone(node.arr));
  }
};
cljs.core.tv_editable_root = function cljs$core$tv_editable_root(node) {
  return new cljs.core.VectorNode({}, cljs.core.aclone(node.arr));
};
cljs.core.tv_editable_tail = function cljs$core$tv_editable_tail(tl) {
  var ret = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
  cljs.core.array_copy(tl, 0, ret, 0, tl.length);
  return ret;
};
cljs.core.tv_push_tail = function cljs$core$tv_push_tail(tv, level, parent, tail_node) {
  var ret = cljs.core.tv_ensure_editable(tv.root.edit, parent);
  var subidx = tv.cnt - 1 >>> level & 31;
  cljs.core.pv_aset(ret, subidx, level === 5 ? tail_node : function() {
    var child = cljs.core.pv_aget(ret, subidx);
    if (!(child == null)) {
      var G__3582 = tv;
      var G__3583 = level - 5;
      var G__3584 = child;
      var G__3585 = tail_node;
      return cljs.core.tv_push_tail.cljs$core$IFn$_invoke$arity$4 ? cljs.core.tv_push_tail.cljs$core$IFn$_invoke$arity$4(G__3582, G__3583, G__3584, G__3585) : cljs.core.tv_push_tail.call(null, G__3582, G__3583, G__3584, G__3585);
    } else {
      return cljs.core.new_path(tv.root.edit, level - 5, tail_node);
    }
  }());
  return ret;
};
cljs.core.tv_pop_tail = function cljs$core$tv_pop_tail(tv, level, node) {
  var node__$1 = cljs.core.tv_ensure_editable(tv.root.edit, node);
  var subidx = tv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = function() {
      var G__3586 = tv;
      var G__3587 = level - 5;
      var G__3588 = cljs.core.pv_aget(node__$1, subidx);
      return cljs.core.tv_pop_tail.cljs$core$IFn$_invoke$arity$3 ? cljs.core.tv_pop_tail.cljs$core$IFn$_invoke$arity$3(G__3586, G__3587, G__3588) : cljs.core.tv_pop_tail.call(null, G__3586, G__3587, G__3588);
    }();
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      cljs.core.pv_aset(node__$1, subidx, new_child);
      return node__$1;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      cljs.core.pv_aset(node__$1, subidx, null);
      return node__$1;
    }
  }
};
cljs.core.unchecked_editable_array_for = function cljs$core$unchecked_editable_array_for(tv, i) {
  if (i >= cljs.core.tail_off(tv)) {
    return tv.tail;
  } else {
    var root = tv.root;
    var node = root;
    var level = tv.shift;
    while (true) {
      if (level > 0) {
        var G__3589 = cljs.core.tv_ensure_editable(root.edit, cljs.core.pv_aget(node, i >>> level & 31));
        var G__3590 = level - 5;
        node = G__3589;
        level = G__3590;
        continue;
      } else {
        return node.arr;
      }
      break;
    }
  }
};
cljs.core.TransientVector = function(cnt, shift, root, tail) {
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.cljs$lang$protocol_mask$partition1$ = 88;
  this.cljs$lang$protocol_mask$partition0$ = 275;
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt - cljs.core.tail_off(tcoll__$1) < 32) {
      self__.tail[self__.cnt & 31] = o;
      self__.cnt = self__.cnt + 1;
      return tcoll__$1;
    } else {
      var tail_node = new cljs.core.VectorNode(self__.root.edit, self__.tail);
      var new_tail = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      new_tail[0] = o;
      self__.tail = new_tail;
      if (self__.cnt >>> 5 > 1 << self__.shift) {
        var new_root_array = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var new_shift = self__.shift + 5;
        new_root_array[0] = self__.root;
        new_root_array[1] = cljs.core.new_path(self__.root.edit, self__.shift, tail_node);
        self__.root = new cljs.core.VectorNode(self__.root.edit, new_root_array);
        self__.shift = new_shift;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      } else {
        var new_root = cljs.core.tv_push_tail(tcoll__$1, self__.shift, self__.root, tail_node);
        self__.root = new_root;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    self__.root.edit = null;
    var len = self__.cnt - cljs.core.tail_off(tcoll__$1);
    var trimmed_tail = new Array(len);
    cljs.core.array_copy(self__.tail, 0, trimmed_tail, 0, len);
    return new cljs.core.PersistentVector(null, self__.cnt, self__.shift, self__.root, trimmed_tail, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (typeof key === "number") {
    return tcoll__$1.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3(null, key, val);
  } else {
    throw new Error("TransientVector's key for assoc! must be a number.");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3 = function(tcoll, n, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (0 <= n && n < self__.cnt) {
      if (cljs.core.tail_off(tcoll__$1) <= n) {
        self__.tail[n & 31] = val;
        return tcoll__$1;
      } else {
        var new_root = function() {
          var fexpr__3592 = function cljs$core$go(level, node) {
            var node__$1 = cljs.core.tv_ensure_editable(self__.root.edit, node);
            if (level === 0) {
              cljs.core.pv_aset(node__$1, n & 31, val);
              return node__$1;
            } else {
              var subidx = n >>> level & 31;
              cljs.core.pv_aset(node__$1, subidx, cljs$core$go(level - 5, cljs.core.pv_aget(node__$1, subidx)));
              return node__$1;
            }
          };
          return fexpr__3592(self__.shift, self__.root);
        }();
        self__.root = new_root;
        return tcoll__$1;
      }
    } else {
      if (n === self__.cnt) {
        return tcoll__$1.cljs$core$ITransientCollection$_conj_BANG_$arity$2(null, val);
      } else {
        throw new Error(["Index ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(n), " out of bounds for TransientVector of length", cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.cnt)].join(""));
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_pop_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt === 0) {
      throw new Error("Can't pop empty vector");
    } else {
      if (1 === self__.cnt) {
        self__.cnt = 0;
        return tcoll__$1;
      } else {
        if ((self__.cnt - 1 & 31) > 0) {
          self__.cnt = self__.cnt - 1;
          return tcoll__$1;
        } else {
          var new_tail = cljs.core.unchecked_editable_array_for(tcoll__$1, self__.cnt - 2);
          var new_root = function() {
            var nr = cljs.core.tv_pop_tail(tcoll__$1, self__.shift, self__.root);
            if (!(nr == null)) {
              return nr;
            } else {
              return new cljs.core.VectorNode(self__.root.edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
            }
          }();
          if (5 < self__.shift && cljs.core.pv_aget(new_root, 1) == null) {
            var new_root__$1 = cljs.core.tv_ensure_editable(self__.root.edit, cljs.core.pv_aget(new_root, 0));
            self__.root = new_root__$1;
            self__.shift = self__.shift - 5;
            self__.cnt = self__.cnt - 1;
            self__.tail = new_tail;
            return tcoll__$1;
          } else {
            self__.root = new_root;
            self__.cnt = self__.cnt - 1;
            self__.tail = new_tail;
            return tcoll__$1;
          }
        }
      }
    }
  } else {
    throw new Error("pop! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return self__.cnt;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return cljs.core.array_for(coll__$1, n)[n & 31];
  } else {
    throw new Error("nth after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return coll__$1.cljs$core$IIndexed$_nth$arity$2(null, n);
  } else {
    return not_found;
  }
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1.cljs$core$ILookup$_lookup$arity$3(null, k, null);
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (!self__.root.edit) {
    throw new Error("lookup after persistent!");
  } else {
    if (typeof k === "number") {
      return coll__$1.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
    } else {
      return not_found;
    }
  }
};
cljs.core.TransientVector.prototype.call = function() {
  var G__3593 = null;
  var G__3593__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__3593__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__3593 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__3593__2.call(this, self__, k);
      case 3:
        return G__3593__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__3593.cljs$core$IFn$_invoke$arity$2 = G__3593__2;
  G__3593.cljs$core$IFn$_invoke$arity$3 = G__3593__3;
  return G__3593;
}();
cljs.core.TransientVector.prototype.apply = function(self__, args3591) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args3591)));
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.TransientVector.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "cnt", "cnt", 1924510325, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "shift", "shift", -1657295705, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, 
  "root", "root", 1191874074, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "tail", "tail", 494507963, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.TransientVector.cljs$lang$type = true;
cljs.core.TransientVector.cljs$lang$ctorStr = "cljs.core/TransientVector";
cljs.core.TransientVector.cljs$lang$ctorPrWriter = function(this__4369__auto__, writer__4370__auto__, opt__4371__auto__) {
  return cljs.core._write(writer__4370__auto__, "cljs.core/TransientVector");
};
cljs.core.__GT_TransientVector = function cljs$core$__GT_TransientVector(cnt, shift, root, tail) {
  return new cljs.core.TransientVector(cnt, shift, root, tail);
};
cljs.core.PersistentQueueIter = function(fseq, riter) {
  this.fseq = fseq;
  this.riter = riter;
};
cljs.core.PersistentQueueIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  var or__4126__auto__ = !(self__.fseq == null) && cljs.core.seq(self__.fseq);
  if (or__4126__auto__) {
    return or__4126__auto__;
  } else {
    if (!(self__.riter == null)) {
      return self__.riter.hasNext();
    } else {
      return false;
    }
  }
};
cljs.core.PersistentQueueIter.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.fseq == null)) {
    var ret = cljs.core.first(self__.fseq);
    self__.fseq = cljs.core.next(self__.fseq);
    return ret;
  } else {
    if (!(self__.riter == null) && self__.riter.hasNext()) {
      return self__.riter.next();
    } else {
      throw new Error("No such element");
    }
  }
};
cljs.core.PersistentQueueIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.PersistentQueueIter.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "fseq", "fseq", -1466412450, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), new cljs.core.Symbol(null, "riter", "riter", -237834262, null)], null);
};
cljs.core.PersistentQueueIter.cljs$lang$type = true;
cljs.core.PersistentQueueIter.cljs$lang$ctorStr = "cljs.core/PersistentQueueIter";
cljs.core.PersistentQueueIter.cljs$lang$ctorPrWriter = function(this__4369__auto__, writer__4370__auto__, opt__4371__auto__) {
  return cljs.core._write(writer__4370__auto__, "cljs.core/PersistentQueueIter");
};
cljs.core.__GT_PersistentQueueIter = function cljs$core$__GT_PersistentQueueIter(fseq, riter) {
  return new cljs.core.PersistentQueueIter(fseq, riter);
};
cljs.core.PersistentQueueSeq = function(meta, front, rear, __hash) {
  this.meta = meta;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31850700;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.PersistentQueueSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentQueueSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentQueueSeq.prototype.indexOf = function() {
  var G__3594 = null;
  var G__3594__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
  };
  var G__3594__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__3594 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__3594__1.call(this, x);
      case 2:
        return G__3594__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__3594.cljs$core$IFn$_invoke$arity$1 = G__3594__1;
  G__3594.cljs$core$IFn$_invoke$arity$2 = G__3594__2;
  return G__3594;
}();
cljs.core.PersistentQueueSeq.prototype.lastIndexOf = function() {
  var G__3595 = null;
  var G__3595__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, cljs.core.count(coll));
  };
  var G__3595__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__3595 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__3595__1.call(this, x);
      case 2:
        return G__3595__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__3595.cljs$core$IFn$_invoke$arity$1 = G__3595__1;
  G__3595.cljs$core$IFn$_invoke$arity$2 = G__3595__2;
  return G__3595;
}();
cljs.core.PersistentQueueSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var temp__5733__auto__ = cljs.core.next(self__.front);
  if (temp__5733__auto__) {
    var f1 = temp__5733__auto__;
    return new cljs.core.PersistentQueueSeq(self__.meta, f1, self__.rear, null);
  } else {
    if (!(self__.rear == null)) {
      return new cljs.core.PersistentQueueSeq(self__.meta, self__.rear, null, null);
    } else {
      return null;
    }
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4238__auto__ = self__.__hash;
  if (!(h__4238__auto__ == null)) {
    return h__4238__auto__;
  } else {
    var h__4238__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4238__auto____$1;
    return h__4238__auto____$1;
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first(self__.front);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var temp__5733__auto__ = cljs.core.next(self__.front);
  if (temp__5733__auto__) {
    var f1 = temp__5733__auto__;
    return new cljs.core.PersistentQueueSeq(self__.meta, f1, self__.rear, null);
  } else {
    if (self__.rear == null) {
      return coll__$1.cljs$core$IEmptyableCollection$_empty$arity$1(null);
    } else {
      return new cljs.core.PersistentQueueSeq(self__.meta, self__.rear, null, null);
    }
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  if (new_meta === self__.meta) {
    return coll__$1;
  } else {
    return new cljs.core.PersistentQueueSeq(new_meta, self__.front, self__.rear, self__.__hash);
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.PersistentQueueSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "front", "front", 117022539, null), new cljs.core.Symbol(null, "rear", "rear", -900164830, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.PersistentQueueSeq.cljs$lang$type = true;
cljs.core.PersistentQueueSeq.cljs$lang$ctorStr = "cljs.core/PersistentQueueSeq";
cljs.core.PersistentQueueSeq.cljs$lang$ctorPrWriter = function(this__4369__auto__, writer__4370__auto__, opt__4371__auto__) {
  return cljs.core._write(writer__4370__auto__, "cljs.core/PersistentQueueSeq");
};
cljs.core.__GT_PersistentQueueSeq = function cljs$core$__GT_PersistentQueueSeq(meta, front, rear, __hash) {
  return new cljs.core.PersistentQueueSeq(meta, front, rear, __hash);
};
goog.object.set(cljs.core.PersistentQueueSeq.prototype, cljs.core.ITER_SYMBOL, function() {
  var this__4675__auto__ = this;
  return cljs.core.es6_iterator(this__4675__auto__);
});
cljs.core.PersistentQueue = function(meta, count, front, rear, __hash) {
  this.meta = meta;
  this.count = count;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 139264;
  this.cljs$lang$protocol_mask$partition0$ = 31858766;
};
cljs.core.PersistentQueue.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentQueue.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentQueue.prototype.indexOf = function() {
  var G__3596 = null;
  var G__3596__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
  };
  var G__3596__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__3596 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__3596__1.call(this, x);
      case 2:
        return G__3596__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__3596.cljs$core$IFn$_invoke$arity$1 = G__3596__1;
  G__3596.cljs$core$IFn$_invoke$arity$2 = G__3596__2;
  return G__3596;
}();
cljs.core.PersistentQueue.prototype.lastIndexOf = function() {
  var G__3597 = null;
  var G__3597__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, self__.count.cljs$core$IFn$_invoke$arity$1 ? self__.count.cljs$core$IFn$_invoke$arity$1(coll) : self__.count.call(null, coll));
  };
  var G__3597__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__3597 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__3597__1.call(this, x);
      case 2:
        return G__3597__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__3597.cljs$core$IFn$_invoke$arity$1 = G__3597__1;
  G__3597.cljs$core$IFn$_invoke$arity$2 = G__3597__2;
  return G__3597;
}();
cljs.core.PersistentQueue.prototype.cljs$core$IIterable$_iterator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueueIter(self__.front, cljs.core._iterator(self__.rear));
};
cljs.core.PersistentQueue.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueue.prototype.cljs$core$ICloneable$_clone$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(self__.meta, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first(self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    var temp__5733__auto__ = cljs.core.next(self__.front);
    if (temp__5733__auto__) {
      var f1 = temp__5733__auto__;
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, f1, self__.rear, null);
    } else {
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, cljs.core.seq(self__.rear), cljs.core.PersistentVector.EMPTY, null);
    }
  } else {
    return coll__$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4238__auto__ = self__.__hash;
  if (!(h__4238__auto__ == null)) {
    return h__4238__auto__;
  } else {
    var h__4238__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4238__auto____$1;
    return h__4238__auto____$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.PersistentQueue.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta(cljs.core.PersistentQueue.EMPTY, self__.meta);
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first(self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.rest(cljs.core.seq(coll__$1));
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var rear__$1 = cljs.core.seq(self__.rear);
  if (cljs.core.truth_(function() {
    var or__4126__auto__ = self__.front;
    if (cljs.core.truth_(or__4126__auto__)) {
      return or__4126__auto__;
    } else {
      return rear__$1;
    }
  }())) {
    return new cljs.core.PersistentQueueSeq(null, self__.front, cljs.core.seq(rear__$1), null);
  } else {
    return null;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  if (new_meta === self__.meta) {
    return coll__$1;
  } else {
    return new cljs.core.PersistentQueue(new_meta, self__.count, self__.front, self__.rear, self__.__hash);
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, self__.front, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(function() {
      var or__4126__auto__ = self__.rear;
      if (cljs.core.truth_(or__4126__auto__)) {
        return or__4126__auto__;
      } else {
        return cljs.core.PersistentVector.EMPTY;
      }
    }(), o), null);
  } else {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(self__.front, o), cljs.core.PersistentVector.EMPTY, null);
  }
};
cljs.core.PersistentQueue.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "count", "count", -514511684, null), new cljs.core.Symbol(null, "front", "front", 117022539, null), new cljs.core.Symbol(null, "rear", "rear", -900164830, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, 
  "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.PersistentQueue.cljs$lang$type = true;
cljs.core.PersistentQueue.cljs$lang$ctorStr = "cljs.core/PersistentQueue";
cljs.core.PersistentQueue.cljs$lang$ctorPrWriter = function(this__4369__auto__, writer__4370__auto__, opt__4371__auto__) {
  return cljs.core._write(writer__4370__auto__, "cljs.core/PersistentQueue");
};
cljs.core.__GT_PersistentQueue = function cljs$core$__GT_PersistentQueue(meta, count, front, rear, __hash) {
  return new cljs.core.PersistentQueue(meta, count, front, rear, __hash);
};
cljs.core.PersistentQueue.EMPTY = new cljs.core.PersistentQueue(null, 0, null, cljs.core.PersistentVector.EMPTY, cljs.core.empty_ordered_hash);
goog.object.set(cljs.core.PersistentQueue.prototype, cljs.core.ITER_SYMBOL, function() {
  var this__4675__auto__ = this;
  return cljs.core.es6_iterator(this__4675__auto__);
});
cljs.core.NeverEquiv = function() {
  this.cljs$lang$protocol_mask$partition0$ = 2097152;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.NeverEquiv.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.NeverEquiv.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return false;
};
cljs.core.NeverEquiv.getBasis = function() {
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.NeverEquiv.cljs$lang$type = true;
cljs.core.NeverEquiv.cljs$lang$ctorStr = "cljs.core/NeverEquiv";
cljs.core.NeverEquiv.cljs$lang$ctorPrWriter = function(this__4369__auto__, writer__4370__auto__, opt__4371__auto__) {
  return cljs.core._write(writer__4370__auto__, "cljs.core/NeverEquiv");
};
cljs.core.__GT_NeverEquiv = function cljs$core$__GT_NeverEquiv() {
  return new cljs.core.NeverEquiv;
};
cljs.core.never_equiv = new cljs.core.NeverEquiv;
cljs.core.equiv_map = function cljs$core$equiv_map(x, y) {
  return cljs.core.boolean$(cljs.core.map_QMARK_(y) && !cljs.core.record_QMARK_(y) ? cljs.core.count(x) === cljs.core.count(y) ? (!(x == null) ? x.cljs$lang$protocol_mask$partition0$ & 1048576 || cljs.core.PROTOCOL_SENTINEL === x.cljs$core$IKVReduce$ ? true : !x.cljs$lang$protocol_mask$partition0$ ? cljs.core.native_satisfies_QMARK_(cljs.core.IKVReduce, x) : false : cljs.core.native_satisfies_QMARK_(cljs.core.IKVReduce, x)) ? cljs.core.reduce_kv(function(_, k, v) {
    if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(y, k, cljs.core.never_equiv), v)) {
      return true;
    } else {
      return cljs.core.reduced(false);
    }
  }, true, x) : cljs.core.every_QMARK_(function(xkv) {
    return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(y, cljs.core.first(xkv), cljs.core.never_equiv), cljs.core.second(xkv));
  }, x) : null : null);
};
cljs.core.scan_array = function cljs$core$scan_array(incr, k, array) {
  var len = array.length;
  var i = 0;
  while (true) {
    if (i < len) {
      if (k === array[i]) {
        return i;
      } else {
        var G__3599 = i + incr;
        i = G__3599;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.obj_map_compare_keys = function cljs$core$obj_map_compare_keys(a, b) {
  var a__$1 = cljs.core.hash(a);
  var b__$1 = cljs.core.hash(b);
  if (a__$1 < b__$1) {
    return -1;
  } else {
    if (a__$1 > b__$1) {
      return 1;
    } else {
      return 0;
    }
  }
};
cljs.core.obj_map__GT_hash_map = function cljs$core$obj_map__GT_hash_map(m, k, v) {
  var ks = m.keys;
  var len = ks.length;
  var so = m.strobj;
  var mm = cljs.core.meta(m);
  var i = 0;
  var out = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var k__$1 = ks[i];
      var G__3600 = i + 1;
      var G__3601 = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(out, k__$1, goog.object.get(so, k__$1));
      i = G__3600;
      out = G__3601;
      continue;
    } else {
      return cljs.core._with_meta(cljs.core.persistent_BANG_(cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(out, k, v)), mm);
    }
    break;
  }
};
cljs.core.obj_clone = function cljs$core$obj_clone(obj, ks) {
  var new_obj = {};
  var l = ks.length;
  var i_3604 = 0;
  while (true) {
    if (i_3604 < l) {
      var k_3605 = ks[i_3604];
      goog.object.set(new_obj, k_3605, goog.object.get(obj, k_3605));
      var G__3606 = i_3604 + 1;
      i_3604 = G__3606;
      continue;
    } else {
    }
    break;
  }
  return new_obj;
};
cljs.core.ObjMap = function(meta, keys, strobj, update_count, __hash) {
  this.meta = meta;
  this.keys = keys;
  this.strobj = strobj;
  this.update_count = update_count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
  this.cljs$lang$protocol_mask$partition1$ = 4;
};
cljs.core.ObjMap.prototype.cljs$core$IFind$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.ObjMap.prototype.cljs$core$IFind$_find$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array(1, k, self__.keys) == null)) {
    return new cljs.core.MapEntry(k, self__.strobj[k], null);
  } else {
    return null;
  }
};
cljs.core.ObjMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ObjMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1.cljs$core$ILookup$_lookup$arity$3(null, k, null);
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array(1, k, self__.keys) == null)) {
    return self__.strobj[k];
  } else {
    return not_found;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.keys.length;
  var keys__$1 = self__.keys.sort(cljs.core.obj_map_compare_keys);
  var init__$1 = init;
  while (true) {
    if (cljs.core.seq(keys__$1)) {
      var k = cljs.core.first(keys__$1);
      var init__$2 = function() {
        var G__3609 = init__$1;
        var G__3610 = k;
        var G__3611 = self__.strobj[k];
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__3609, G__3610, G__3611) : f.call(null, G__3609, G__3610, G__3611);
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        return cljs.core.deref(init__$2);
      } else {
        var G__3612 = cljs.core.rest(keys__$1);
        var G__3613 = init__$2;
        keys__$1 = G__3612;
        init__$1 = G__3613;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ObjMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.keys.length;
};
cljs.core.ObjMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4238__auto__ = self__.__hash;
  if (!(h__4238__auto__ == null)) {
    return h__4238__auto__;
  } else {
    var h__4238__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__4238__auto____$1;
    return h__4238__auto____$1;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map(coll__$1, other);
};
cljs.core.ObjMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.transient$(cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentHashMap.EMPTY, coll__$1));
};
cljs.core.ObjMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta(cljs.core.ObjMap.EMPTY, self__.meta);
};
cljs.core.ObjMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array(1, k, self__.keys) == null)) {
    var new_keys = cljs.core.aclone(self__.keys);
    var new_strobj = cljs.core.obj_clone(self__.strobj, self__.keys);
    new_keys.splice(cljs.core.scan_array(1, k, new_keys), 1);
    delete new_strobj[k];
    return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
  } else {
    return coll__$1;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k)) {
    if (self__.update_count > cljs.core.ObjMap.HASHMAP_THRESHOLD || self__.keys.length >= cljs.core.ObjMap.HASHMAP_THRESHOLD) {
      return cljs.core.obj_map__GT_hash_map(coll__$1, k, v);
    } else {
      if (!(cljs.core.scan_array(1, k, self__.keys) == null)) {
        var new_strobj = cljs.core.obj_clone(self__.strobj, self__.keys);
        goog.object.set(new_strobj, k, v);
        return new cljs.core.ObjMap(self__.meta, self__.keys, new_strobj, self__.update_count + 1, null);
      } else {
        var new_strobj = cljs.core.obj_clone(self__.strobj, self__.keys);
        var new_keys = cljs.core.aclone(self__.keys);
        goog.object.set(new_strobj, k, v);
        new_keys.push(k);
        return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
      }
    }
  } else {
    return cljs.core.obj_map__GT_hash_map(coll__$1, k, v);
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array(1, k, self__.keys) == null)) {
    return true;
  } else {
    return false;
  }
};
cljs.core.ObjMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.keys.length > 0) {
    return cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(p1__3607_SHARP_) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__3607_SHARP_, self__.strobj[p1__3607_SHARP_]], null);
    }, self__.keys.sort(cljs.core.obj_map_compare_keys));
  } else {
    return null;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  if (new_meta === self__.meta) {
    return coll__$1;
  } else {
    return new cljs.core.ObjMap(new_meta, self__.keys, self__.strobj, self__.update_count, self__.__hash);
  }
};
cljs.core.ObjMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_(entry)) {
    return coll__$1.cljs$core$IAssociative$_assoc$arity$3(null, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 1));
  } else {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.ObjMap.prototype.call = function() {
  var G__3614 = null;
  var G__3614__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__3614__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__3614 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__3614__2.call(this, self__, k);
      case 3:
        return G__3614__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__3614.cljs$core$IFn$_invoke$arity$2 = G__3614__2;
  G__3614.cljs$core$IFn$_invoke$arity$3 = G__3614__3;
  return G__3614;
}();
cljs.core.ObjMap.prototype.apply = function(self__, args3608) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args3608)));
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.ObjMap.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "keys", "keys", -1586012071, null), new cljs.core.Symbol(null, "strobj", "strobj", 1088091283, null), new cljs.core.Symbol(null, "update-count", "update-count", -411982269, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, 
  "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.ObjMap.cljs$lang$type = true;
cljs.core.ObjMap.cljs$lang$ctorStr = "cljs.core/ObjMap";
cljs.core.ObjMap.cljs$lang$ctorPrWriter = function(this__4369__auto__, writer__4370__auto__, opt__4371__auto__) {
  return cljs.core._write(writer__4370__auto__, "cljs.core/ObjMap");
};
cljs.core.__GT_ObjMap = function cljs$core$__GT_ObjMap(meta, keys, strobj, update_count, __hash) {
  return new cljs.core.ObjMap(meta, keys, strobj, update_count, __hash);
};
cljs.core.ObjMap.EMPTY = new cljs.core.ObjMap(null, [], {}, 0, cljs.core.empty_unordered_hash);
cljs.core.ObjMap.HASHMAP_THRESHOLD = 8;
cljs.core.ObjMap.fromObject = function(ks, obj) {
  return new cljs.core.ObjMap(null, ks, obj, 0, null);
};
cljs.core.RecordIter = function(i, record, base_count, fields, ext_map_iter) {
  this.i = i;
  this.record = record;
  this.base_count = base_count;
  this.fields = fields;
  this.ext_map_iter = ext_map_iter;
};
cljs.core.RecordIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  var or__4126__auto__ = self__.i < self__.base_count;
  if (or__4126__auto__) {
    return or__4126__auto__;
  } else {
    return self__.ext_map_iter.hasNext();
  }
};
cljs.core.RecordIter.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (self__.i < self__.base_count) {
    var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(self__.fields, self__.i);
    self__.i = self__.i + 1;
    return new cljs.core.MapEntry(k, cljs.core._lookup.cljs$core$IFn$_invoke$arity$2(self__.record, k), null);
  } else {
    return self__.ext_map_iter.next();
  }
};
cljs.core.RecordIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.RecordIter.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), new cljs.core.Symbol(null, "record", "record", 861424668, null), new cljs.core.Symbol(null, "base-count", "base-count", -1180647182, null), new cljs.core.Symbol(null, "fields", "fields", -291534703, null), new cljs.core.Symbol(null, 
  "ext-map-iter", "ext-map-iter", -1215982757, null)], null);
};
cljs.core.RecordIter.cljs$lang$type = true;
cljs.core.RecordIter.cljs$lang$ctorStr = "cljs.core/RecordIter";
cljs.core.RecordIter.cljs$lang$ctorPrWriter = function(this__4369__auto__, writer__4370__auto__, opt__4371__auto__) {
  return cljs.core._write(writer__4370__auto__, "cljs.core/RecordIter");
};
cljs.core.__GT_RecordIter = function cljs$core$__GT_RecordIter(i, record, base_count, fields, ext_map_iter) {
  return new cljs.core.RecordIter(i, record, base_count, fields, ext_map_iter);
};
cljs.core.ES6EntriesIterator = function(s) {
  this.s = s;
};
cljs.core.ES6EntriesIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var vec__3617 = cljs.core.first(self__.s);
    var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__3617, 0, null);
    var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__3617, 1, null);
    self__.s = cljs.core.next(self__.s);
    return {"value":[k, v], "done":false};
  } else {
    return {"value":null, "done":true};
  }
};
cljs.core.ES6EntriesIterator.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "s", "s", -948495851, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.ES6EntriesIterator.cljs$lang$type = true;
cljs.core.ES6EntriesIterator.cljs$lang$ctorStr = "cljs.core/ES6EntriesIterator";
cljs.core.ES6EntriesIterator.cljs$lang$ctorPrWriter = function(this__4369__auto__, writer__4370__auto__, opt__4371__auto__) {
  return cljs.core._write(writer__4370__auto__, "cljs.core/ES6EntriesIterator");
};
cljs.core.__GT_ES6EntriesIterator = function cljs$core$__GT_ES6EntriesIterator(s) {
  return new cljs.core.ES6EntriesIterator(s);
};
cljs.core.es6_entries_iterator = function cljs$core$es6_entries_iterator(coll) {
  return new cljs.core.ES6EntriesIterator(cljs.core.seq(coll));
};
cljs.core.ES6SetEntriesIterator = function(s) {
  this.s = s;
};
cljs.core.ES6SetEntriesIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var x = cljs.core.first(self__.s);
    self__.s = cljs.core.next(self__.s);
    return {"value":[x, x], "done":false};
  } else {
    return {"value":null, "done":true};
  }
};
cljs.core.ES6SetEntriesIterator.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "s", "s", -948495851, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.ES6SetEntriesIterator.cljs$lang$type = true;
cljs.core.ES6SetEntriesIterator.cljs$lang$ctorStr = "cljs.core/ES6SetEntriesIterator";
cljs.core.ES6SetEntriesIterator.cljs$lang$ctorPrWriter = function(this__4369__auto__, writer__4370__auto__, opt__4371__auto__) {
  return cljs.core._write(writer__4370__auto__, "cljs.core/ES6SetEntriesIterator");
};
cljs.core.__GT_ES6SetEntriesIterator = function cljs$core$__GT_ES6SetEntriesIterator(s) {
  return new cljs.core.ES6SetEntriesIterator(s);
};
cljs.core.es6_set_entries_iterator = function cljs$core$es6_set_entries_iterator(coll) {
  return new cljs.core.ES6SetEntriesIterator(cljs.core.seq(coll));
};
cljs.core.array_index_of_nil_QMARK_ = function cljs$core$array_index_of_nil_QMARK_(arr) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return -1;
    } else {
      if (arr[i] == null) {
        return i;
      } else {
        var G__3620 = i + 2;
        i = G__3620;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_index_of_keyword_QMARK_ = function cljs$core$array_index_of_keyword_QMARK_(arr, k) {
  var len = arr.length;
  var kstr = k.fqn;
  var i = 0;
  while (true) {
    if (len <= i) {
      return -1;
    } else {
      if (arr[i] instanceof cljs.core.Keyword && kstr === arr[i].fqn) {
        return i;
      } else {
        var G__3621 = i + 2;
        i = G__3621;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_index_of_symbol_QMARK_ = function cljs$core$array_index_of_symbol_QMARK_(arr, k) {
  var len = arr.length;
  var kstr = k.str;
  var i = 0;
  while (true) {
    if (len <= i) {
      return -1;
    } else {
      if (arr[i] instanceof cljs.core.Symbol && kstr === arr[i].str) {
        return i;
      } else {
        var G__3622 = i + 2;
        i = G__3622;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_index_of_identical_QMARK_ = function cljs$core$array_index_of_identical_QMARK_(arr, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return -1;
    } else {
      if (k === arr[i]) {
        return i;
      } else {
        var G__3623 = i + 2;
        i = G__3623;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_index_of_equiv_QMARK_ = function cljs$core$array_index_of_equiv_QMARK_(arr, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return -1;
    } else {
      if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(k, arr[i])) {
        return i;
      } else {
        var G__3624 = i + 2;
        i = G__3624;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_index_of = function cljs$core$array_index_of(arr, k) {
  if (k instanceof cljs.core.Keyword) {
    return cljs.core.array_index_of_keyword_QMARK_(arr, k);
  } else {
    if (goog.isString(k) || typeof k === "number") {
      return cljs.core.array_index_of_identical_QMARK_(arr, k);
    } else {
      if (k instanceof cljs.core.Symbol) {
        return cljs.core.array_index_of_symbol_QMARK_(arr, k);
      } else {
        if (k == null) {
          return cljs.core.array_index_of_nil_QMARK_(arr);
        } else {
          return cljs.core.array_index_of_equiv_QMARK_(arr, k);
        }
      }
    }
  }
};
cljs.core.array_map_index_of = function cljs$core$array_map_index_of(m, k) {
  return cljs.core.array_index_of(m.arr, k);
};
cljs.core.array_extend_kv = function cljs$core$array_extend_kv(arr, k, v) {
  var l = arr.length;
  var narr = new Array(l + 2);
  var i_3625 = 0;
  while (true) {
    if (i_3625 < l) {
      narr[i_3625] = arr[i_3625];
      var G__3626 = i_3625 + 1;
      i_3625 = G__3626;
      continue;
    } else {
    }
    break;
  }
  narr[l] = k;
  narr[l + 1] = v;
  return narr;
};
cljs.core.array_map_extend_kv = function cljs$core$array_map_extend_kv(m, k, v) {
  return cljs.core.array_extend_kv(m.arr, k, v);
};
cljs.core.MapEntry = function(key, val, __hash) {
  this.key = key;
  this.val = val;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 166619935;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.MapEntry.prototype.cljs$core$IFind$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.MapEntry.prototype.cljs$core$IFind$_find$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  var G__3628 = k;
  switch(G__3628) {
    case 0:
      return new cljs.core.MapEntry(0, self__.key, null);
      break;
    case 1:
      return new cljs.core.MapEntry(1, self__.val, null);
      break;
    default:
      return null;
  }
};
cljs.core.MapEntry.prototype.indexOf = function() {
  var G__3630 = null;
  var G__3630__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
  };
  var G__3630__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__3630 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__3630__1.call(this, x);
      case 2:
        return G__3630__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__3630.cljs$core$IFn$_invoke$arity$1 = G__3630__1;
  G__3630.cljs$core$IFn$_invoke$arity$2 = G__3630__2;
  return G__3630;
}();
cljs.core.MapEntry.prototype.lastIndexOf = function() {
  var G__3631 = null;
  var G__3631__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, cljs.core.count(coll));
  };
  var G__3631__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__3631 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__3631__1.call(this, x);
      case 2:
        return G__3631__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__3631.cljs$core$IFn$_invoke$arity$1 = G__3631__1;
  G__3631.cljs$core$IFn$_invoke$arity$2 = G__3631__2;
  return G__3631;
}();
cljs.core.MapEntry.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return node__$1.cljs$core$IIndexed$_nth$arity$3(null, k, null);
};
cljs.core.MapEntry.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return node__$1.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.MapEntry.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      throw new Error("Index out of bounds");
    }
  }
};
cljs.core.MapEntry.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return not_found;
    }
  }
};
cljs.core.MapEntry.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return (new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.MapEntry.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.MapEntry.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.MapEntry.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.MapEntry.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.MapEntry.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.MapEntry.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.MapEntry.prototype.cljs$core$IReversible$_rseq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.IndexedSeq([self__.val, self__.key], 0, null);
};
cljs.core.MapEntry.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4238__auto__ = self__.__hash;
  if (!(h__4238__auto__ == null)) {
    return h__4238__auto__;
  } else {
    var h__4238__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4238__auto____$1;
    return h__4238__auto____$1;
  }
};
cljs.core.MapEntry.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.MapEntry.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.MapEntry.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(node__$1, f);
};
cljs.core.MapEntry.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(node__$1, f, start);
};
cljs.core.MapEntry.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.MapEntry.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return k === 0 || k === 1;
};
cljs.core.MapEntry.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.IndexedSeq([self__.key, self__.val], 0, null);
};
cljs.core.MapEntry.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.MapEntry.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.MapEntry.prototype.call = function() {
  var G__3632 = null;
  var G__3632__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__3632__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__3632 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__3632__2.call(this, self__, k);
      case 3:
        return G__3632__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__3632.cljs$core$IFn$_invoke$arity$2 = G__3632__2;
  G__3632.cljs$core$IFn$_invoke$arity$3 = G__3632__3;
  return G__3632;
}();
cljs.core.MapEntry.prototype.apply = function(self__, args3627) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args3627)));
};
cljs.core.MapEntry.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.MapEntry.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.MapEntry.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "key", "key", 124488940, null), new cljs.core.Symbol(null, "val", "val", 1769233139, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.MapEntry.cljs$lang$type = true;
cljs.core.MapEntry.cljs$lang$ctorStr = "cljs.core/MapEntry";
cljs.core.MapEntry.cljs$lang$ctorPrWriter = function(this__4369__auto__, writer__4370__auto__, opt__4371__auto__) {
  return cljs.core._write(writer__4370__auto__, "cljs.core/MapEntry");
};
cljs.core.__GT_MapEntry = function cljs$core$__GT_MapEntry(key, val, __hash) {
  return new cljs.core.MapEntry(key, val, __hash);
};
cljs.core.map_entry_QMARK_ = function cljs$core$map_entry_QMARK_(x) {
  if (!(x == null)) {
    if (x.cljs$lang$protocol_mask$partition0$ & 2048 || cljs.core.PROTOCOL_SENTINEL === x.cljs$core$IMapEntry$) {
      return true;
    } else {
      return false;
    }
  } else {
    return false;
  }
};
cljs.core.PersistentArrayMapSeq = function(arr, i, _meta) {
  this.arr = arr;
  this.i = i;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 32374990;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.PersistentArrayMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentArrayMapSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentArrayMapSeq.prototype.indexOf = function() {
  var G__3634 = null;
  var G__3634__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
  };
  var G__3634__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__3634 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__3634__1.call(this, x);
      case 2:
        return G__3634__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__3634.cljs$core$IFn$_invoke$arity$1 = G__3634__1;
  G__3634.cljs$core$IFn$_invoke$arity$2 = G__3634__2;
  return G__3634;
}();
cljs.core.PersistentArrayMapSeq.prototype.lastIndexOf = function() {
  var G__3635 = null;
  var G__3635__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, cljs.core.count(coll));
  };
  var G__3635__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__3635 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__3635__1.call(this, x);
      case 2:
        return G__3635__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__3635.cljs$core$IFn$_invoke$arity$1 = G__3635__1;
  G__3635.cljs$core$IFn$_invoke$arity$2 = G__3635__2;
  return G__3635;
}();
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, null);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return (self__.arr.length - self__.i) / 2;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.MapEntry(self__.arr[self__.i], self__.arr[self__.i + 1], null);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  if (new_meta === self__._meta) {
    return coll__$1;
  } else {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i, new_meta);
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.PersistentArrayMapSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.Symbol(null, "_meta", "_meta", -1716892533, null)], null);
};
cljs.core.PersistentArrayMapSeq.cljs$lang$type = true;
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentArrayMapSeq";
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorPrWriter = function(this__4369__auto__, writer__4370__auto__, opt__4371__auto__) {
  return cljs.core._write(writer__4370__auto__, "cljs.core/PersistentArrayMapSeq");
};
cljs.core.__GT_PersistentArrayMapSeq = function cljs$core$__GT_PersistentArrayMapSeq(arr, i, _meta) {
  return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
};
goog.object.set(cljs.core.PersistentArrayMapSeq.prototype, cljs.core.ITER_SYMBOL, function() {
  var this__4675__auto__ = this;
  return cljs.core.es6_iterator(this__4675__auto__);
});
cljs.core.persistent_array_map_seq = function cljs$core$persistent_array_map_seq(arr, i, _meta) {
  if (i <= arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMapIterator = function(arr, i, cnt) {
  this.arr = arr;
  this.i = i;
  this.cnt = cnt;
};
cljs.core.PersistentArrayMapIterator.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.cnt;
};
cljs.core.PersistentArrayMapIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = new cljs.core.MapEntry(self__.arr[self__.i], self__.arr[self__.i + 1], null);
  self__.i = self__.i + 2;
  return ret;
};
cljs.core.PersistentArrayMapIterator.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), cljs.core.with_meta(new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), new cljs.core.Symbol(null, "cnt", "cnt", 1924510325, null)], null);
};
cljs.core.PersistentArrayMapIterator.cljs$lang$type = true;
cljs.core.PersistentArrayMapIterator.cljs$lang$ctorStr = "cljs.core/PersistentArrayMapIterator";
cljs.core.PersistentArrayMapIterator.cljs$lang$ctorPrWriter = function(this__4369__auto__, writer__4370__auto__, opt__4371__auto__) {
  return cljs.core._write(writer__4370__auto__, "cljs.core/PersistentArrayMapIterator");
};
cljs.core.__GT_PersistentArrayMapIterator = function cljs$core$__GT_PersistentArrayMapIterator(arr, i, cnt) {
  return new cljs.core.PersistentArrayMapIterator(arr, i, cnt);
};
cljs.core.PersistentArrayMap = function(meta, cnt, arr, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.arr = arr;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16647951;
  this.cljs$lang$protocol_mask$partition1$ = 139268;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFind$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.PersistentArrayMap.prototype.cljs$core$IFind$_find$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of(coll__$1, k);
  if (idx === -1) {
    return null;
  } else {
    return new cljs.core.MapEntry(self__.arr[idx], self__.arr[idx + 1], null);
  }
};
cljs.core.PersistentArrayMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentArrayMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentArrayMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.keys(coll));
};
cljs.core.PersistentArrayMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentArrayMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.vals(coll));
};
cljs.core.PersistentArrayMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentArrayMap.prototype.get = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentArrayMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__3637 = cljs.core.seq(coll);
  var chunk__3638 = null;
  var count__3639 = 0;
  var i__3640 = 0;
  while (true) {
    if (i__3640 < count__3639) {
      var vec__3647 = chunk__3638.cljs$core$IIndexed$_nth$arity$2(null, i__3640);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__3647, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__3647, 1, null);
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(v, k) : f.call(null, v, k);
      var G__3659 = seq__3637;
      var G__3660 = chunk__3638;
      var G__3661 = count__3639;
      var G__3662 = i__3640 + 1;
      seq__3637 = G__3659;
      chunk__3638 = G__3660;
      count__3639 = G__3661;
      i__3640 = G__3662;
      continue;
    } else {
      var temp__5735__auto__ = cljs.core.seq(seq__3637);
      if (temp__5735__auto__) {
        var seq__3637__$1 = temp__5735__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__3637__$1)) {
          var c__4556__auto__ = cljs.core.chunk_first(seq__3637__$1);
          var G__3663 = cljs.core.chunk_rest(seq__3637__$1);
          var G__3664 = c__4556__auto__;
          var G__3665 = cljs.core.count(c__4556__auto__);
          var G__3666 = 0;
          seq__3637 = G__3663;
          chunk__3638 = G__3664;
          count__3639 = G__3665;
          i__3640 = G__3666;
          continue;
        } else {
          var vec__3650 = cljs.core.first(seq__3637__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__3650, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__3650, 1, null);
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(v, k) : f.call(null, v, k);
          var G__3667 = cljs.core.next(seq__3637__$1);
          var G__3668 = null;
          var G__3669 = 0;
          var G__3670 = 0;
          seq__3637 = G__3667;
          chunk__3638 = G__3668;
          count__3639 = G__3669;
          i__3640 = G__3670;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1.cljs$core$ILookup$_lookup$arity$3(null, k, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of(coll__$1, k);
  if (idx === -1) {
    return not_found;
  } else {
    return self__.arr[idx + 1];
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = function() {
        var G__3653 = init__$1;
        var G__3654 = self__.arr[i];
        var G__3655 = self__.arr[i + 1];
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__3653, G__3654, G__3655) : f.call(null, G__3653, G__3654, G__3655);
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        return cljs.core.deref(init__$2);
      } else {
        var G__3671 = i + 2;
        var G__3672 = init__$2;
        i = G__3671;
        init__$1 = G__3672;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IIterable$_iterator$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return new cljs.core.PersistentArrayMapIterator(self__.arr, 0, self__.cnt * 2);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4238__auto__ = self__.__hash;
  if (!(h__4238__auto__ == null)) {
    return h__4238__auto__;
  } else {
    var h__4238__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__4238__auto____$1;
    return h__4238__auto____$1;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.map_QMARK_(other) && !cljs.core.record_QMARK_(other)) {
    var alen = self__.arr.length;
    var other__$1 = other;
    if (self__.cnt === other__$1.cljs$core$ICounted$_count$arity$1(null)) {
      var i = 0;
      while (true) {
        if (i < alen) {
          var v = other__$1.cljs$core$ILookup$_lookup$arity$3(null, self__.arr[i], cljs.core.lookup_sentinel);
          if (!(v === cljs.core.lookup_sentinel)) {
            if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(self__.arr[i + 1], v)) {
              var G__3673 = i + 2;
              i = G__3673;
              continue;
            } else {
              return false;
            }
          } else {
            return false;
          }
        } else {
          return true;
        }
        break;
      }
    } else {
      return false;
    }
  } else {
    return false;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientArrayMap({}, self__.arr.length, cljs.core.aclone(self__.arr));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta(cljs.core.PersistentArrayMap.EMPTY, self__.meta);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.iter_reduce.cljs$core$IFn$_invoke$arity$2(coll__$1, f);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.iter_reduce.cljs$core$IFn$_invoke$arity$3(coll__$1, f, start);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of(coll__$1, k);
  if (idx >= 0) {
    var len = self__.arr.length;
    var new_len = len - 2;
    if (new_len === 0) {
      return coll__$1.cljs$core$IEmptyableCollection$_empty$arity$1(null);
    } else {
      var new_arr = new Array(new_len);
      var s = 0;
      var d = 0;
      while (true) {
        if (s >= len) {
          return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt - 1, new_arr, null);
        } else {
          if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(k, self__.arr[s])) {
            var G__3674 = s + 2;
            var G__3675 = d;
            s = G__3674;
            d = G__3675;
            continue;
          } else {
            new_arr[d] = self__.arr[s];
            new_arr[d + 1] = self__.arr[s + 1];
            var G__3676 = s + 2;
            var G__3677 = d + 2;
            s = G__3676;
            d = G__3677;
            continue;
          }
        }
        break;
      }
    }
  } else {
    return coll__$1;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of(coll__$1, k);
  if (idx === -1) {
    if (self__.cnt < cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
      var arr__$1 = cljs.core.array_map_extend_kv(coll__$1, k, v);
      return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt + 1, arr__$1, null);
    } else {
      return cljs.core._with_meta(cljs.core._assoc(cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentHashMap.EMPTY, coll__$1), k, v), self__.meta);
    }
  } else {
    if (v === self__.arr[idx + 1]) {
      return coll__$1;
    } else {
      var arr__$1 = function() {
        var G__3658 = cljs.core.aclone(self__.arr);
        G__3658[idx + 1] = v;
        return G__3658;
      }();
      return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, arr__$1, null);
    }
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return !(cljs.core.array_map_index_of(coll__$1, k) === -1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.persistent_array_map_seq(self__.arr, 0, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  if (new_meta === self__.meta) {
    return coll__$1;
  } else {
    return new cljs.core.PersistentArrayMap(new_meta, self__.cnt, self__.arr, self__.__hash);
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_(entry)) {
    return coll__$1.cljs$core$IAssociative$_assoc$arity$3(null, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq(entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first(es);
        if (cljs.core.vector_QMARK_(e)) {
          var G__3678 = cljs.core._assoc(ret, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 1));
          var G__3679 = cljs.core.next(es);
          ret = G__3678;
          es = G__3679;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentArrayMap.prototype.call = function() {
  var G__3680 = null;
  var G__3680__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__3680__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__3680 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__3680__2.call(this, self__, k);
      case 3:
        return G__3680__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__3680.cljs$core$IFn$_invoke$arity$2 = G__3680__2;
  G__3680.cljs$core$IFn$_invoke$arity$3 = G__3680__3;
  return G__3680;
}();
cljs.core.PersistentArrayMap.prototype.apply = function(self__, args3636) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args3636)));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentArrayMap.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "cnt", "cnt", 1924510325, null), new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.PersistentArrayMap.cljs$lang$type = true;
cljs.core.PersistentArrayMap.cljs$lang$ctorStr = "cljs.core/PersistentArrayMap";
cljs.core.PersistentArrayMap.cljs$lang$ctorPrWriter = function(this__4369__auto__, writer__4370__auto__, opt__4371__auto__) {
  return cljs.core._write(writer__4370__auto__, "cljs.core/PersistentArrayMap");
};
cljs.core.__GT_PersistentArrayMap = function cljs$core$__GT_PersistentArrayMap(meta, cnt, arr, __hash) {
  return new cljs.core.PersistentArrayMap(meta, cnt, arr, __hash);
};
cljs.core.PersistentArrayMap.EMPTY = new cljs.core.PersistentArrayMap(null, 0, [], cljs.core.empty_unordered_hash);
cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD = 8;
cljs.core.PersistentArrayMap.fromArray = function(arr, no_clone, no_check) {
  var arr__$1 = no_clone ? arr : cljs.core.aclone(arr);
  var arr__$2 = no_check ? arr__$1 : function() {
    var ret = [];
    var i_3681 = 0;
    while (true) {
      if (i_3681 < arr__$1.length) {
        var k_3682 = arr__$1[i_3681];
        var v_3683 = arr__$1[i_3681 + 1];
        var idx_3684 = cljs.core.array_index_of(ret, k_3682);
        if (idx_3684 === -1) {
          ret.push(k_3682);
          ret.push(v_3683);
        } else {
        }
        var G__3685 = i_3681 + 2;
        i_3681 = G__3685;
        continue;
      } else {
      }
      break;
    }
    return ret;
  }();
  var cnt = arr__$2.length / 2;
  return new cljs.core.PersistentArrayMap(null, cnt, arr__$2, null);
};
cljs.core.PersistentArrayMap.createWithCheck = function(arr) {
  var ret = [];
  var i_3687 = 0;
  while (true) {
    if (i_3687 < arr.length) {
      var k_3688 = arr[i_3687];
      var v_3689 = arr[i_3687 + 1];
      var idx_3690 = cljs.core.array_index_of(ret, k_3688);
      if (idx_3690 === -1) {
        var G__3686_3691 = ret;
        G__3686_3691.push(k_3688);
        G__3686_3691.push(v_3689);
      } else {
        throw new Error(["Duplicate key: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(k_3688)].join(""));
      }
      var G__3692 = i_3687 + 2;
      i_3687 = G__3692;
      continue;
    } else {
    }
    break;
  }
  var cnt = arr.length / 2;
  return new cljs.core.PersistentArrayMap(null, cnt, arr, null);
};
cljs.core.PersistentArrayMap.createAsIfByAssoc = function(arr) {
  var ret = [];
  var i_3694 = 0;
  while (true) {
    if (i_3694 < arr.length) {
      var k_3695 = arr[i_3694];
      var v_3696 = arr[i_3694 + 1];
      var idx_3697 = cljs.core.array_index_of(ret, k_3695);
      if (idx_3697 === -1) {
        var G__3693_3698 = ret;
        G__3693_3698.push(k_3695);
        G__3693_3698.push(v_3696);
      } else {
        ret[idx_3697 + 1] = v_3696;
      }
      var G__3699 = i_3694 + 2;
      i_3694 = G__3699;
      continue;
    } else {
    }
    break;
  }
  return new cljs.core.PersistentArrayMap(null, ret.length / 2, ret, null);
};
goog.object.set(cljs.core.PersistentArrayMap.prototype, cljs.core.ITER_SYMBOL, function() {
  var this__4675__auto__ = this;
  return cljs.core.es6_iterator(this__4675__auto__);
});
cljs.core.TransientArrayMap = function(editable_QMARK_, len, arr) {
  this.editable_QMARK_ = editable_QMARK_;
  this.len = len;
  this.arr = arr;
  this.cljs$lang$protocol_mask$partition0$ = 259;
  this.cljs$lang$protocol_mask$partition1$ = 56;
};
cljs.core.TransientArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.editable_QMARK_) {
    return cljs.core.quot(self__.len, 2);
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.cljs$core$ILookup$_lookup$arity$3(null, k, null);
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.editable_QMARK_) {
    var idx = cljs.core.array_map_index_of(tcoll__$1, k);
    if (idx === -1) {
      return not_found;
    } else {
      return self__.arr[idx + 1];
    }
  } else {
    throw new Error("lookup after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.editable_QMARK_) {
    if (cljs.core.map_entry_QMARK_(o)) {
      return tcoll__$1.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(null, cljs.core.key(o), cljs.core.val(o));
    } else {
      if (cljs.core.vector_QMARK_(o)) {
        return tcoll__$1.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(null, o.cljs$core$IFn$_invoke$arity$1 ? o.cljs$core$IFn$_invoke$arity$1(0) : o.call(null, 0), o.cljs$core$IFn$_invoke$arity$1 ? o.cljs$core$IFn$_invoke$arity$1(1) : o.call(null, 1));
      } else {
        var es = cljs.core.seq(o);
        var tcoll__$2 = tcoll__$1;
        while (true) {
          var temp__5733__auto__ = cljs.core.first(es);
          if (cljs.core.truth_(temp__5733__auto__)) {
            var e = temp__5733__auto__;
            var G__3702 = cljs.core.next(es);
            var G__3703 = cljs.core._assoc_BANG_(tcoll__$2, cljs.core.key(e), cljs.core.val(e));
            es = G__3702;
            tcoll__$2 = G__3703;
            continue;
          } else {
            return tcoll__$2;
          }
          break;
        }
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.editable_QMARK_) {
    self__.editable_QMARK_ = false;
    return new cljs.core.PersistentArrayMap(null, cljs.core.quot(self__.len, 2), self__.arr, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.editable_QMARK_) {
    var idx = cljs.core.array_map_index_of(tcoll__$1, key);
    if (idx === -1) {
      if (self__.len + 2 <= 2 * cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
        self__.len = self__.len + 2;
        self__.arr.push(key);
        self__.arr.push(val);
        return tcoll__$1;
      } else {
        return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(cljs.core.array__GT_transient_hash_map(self__.len, self__.arr), key, val);
      }
    } else {
      if (val === self__.arr[idx + 1]) {
        return tcoll__$1;
      } else {
        self__.arr[idx + 1] = val;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.editable_QMARK_) {
    var idx = cljs.core.array_map_index_of(tcoll__$1, key);
    if (idx >= 0) {
      self__.arr[idx] = self__.arr[self__.len - 2];
      self__.arr[idx + 1] = self__.arr[self__.len - 1];
      var G__3701_3704 = self__.arr;
      G__3701_3704.pop();
      G__3701_3704.pop();
      self__.len = self__.len - 2;
    } else {
    }
    return tcoll__$1;
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.call = function() {
  var G__3705 = null;
  var G__3705__2 = function(self__, key) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    return tcoll.cljs$core$ILookup$_lookup$arity$3(null, key, null);
  };
  var G__3705__3 = function(self__, key, not_found) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    return tcoll.cljs$core$ILookup$_lookup$arity$3(null, key, not_found);
  };
  G__3705 = function(self__, key, not_found) {
    switch(arguments.length) {
      case 2:
        return G__3705__2.call(this, self__, key);
      case 3:
        return G__3705__3.call(this, self__, key, not_found);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__3705.cljs$core$IFn$_invoke$arity$2 = G__3705__2;
  G__3705.cljs$core$IFn$_invoke$arity$3 = G__3705__3;
  return G__3705;
}();
cljs.core.TransientArrayMap.prototype.apply = function(self__, args3700) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args3700)));
};
cljs.core.TransientArrayMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(key) {
  var self__ = this;
  var tcoll = this;
  return tcoll.cljs$core$ILookup$_lookup$arity$3(null, key, null);
};
cljs.core.TransientArrayMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(key, not_found) {
  var self__ = this;
  var tcoll = this;
  return tcoll.cljs$core$ILookup$_lookup$arity$3(null, key, not_found);
};
cljs.core.TransientArrayMap.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "editable?", "editable?", -164945806, null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Symbol(null, "boolean", "boolean", -278886877, null), new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "len", "len", -1230778691, 
  null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), new cljs.core.Symbol(null, "arr", "arr", 2115492975, null)], null);
};
cljs.core.TransientArrayMap.cljs$lang$type = true;
cljs.core.TransientArrayMap.cljs$lang$ctorStr = "cljs.core/TransientArrayMap";
cljs.core.TransientArrayMap.cljs$lang$ctorPrWriter = function(this__4369__auto__, writer__4370__auto__, opt__4371__auto__) {
  return cljs.core._write(writer__4370__auto__, "cljs.core/TransientArrayMap");
};
cljs.core.__GT_TransientArrayMap = function cljs$core$__GT_TransientArrayMap(editable_QMARK_, len, arr) {
  return new cljs.core.TransientArrayMap(editable_QMARK_, len, arr);
};
cljs.core.array__GT_transient_hash_map = function cljs$core$array__GT_transient_hash_map(len, arr) {
  var out = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  var i = 0;
  while (true) {
    if (i < len) {
      var G__3706 = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(out, arr[i], arr[i + 1]);
      var G__3707 = i + 2;
      out = G__3706;
      i = G__3707;
      continue;
    } else {
      return out;
    }
    break;
  }
};
cljs.core.Box = function(val) {
  this.val = val;
};
cljs.core.Box.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "val", "val", 1769233139, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.Box.cljs$lang$type = true;
cljs.core.Box.cljs$lang$ctorStr = "cljs.core/Box";
cljs.core.Box.cljs$lang$ctorPrWriter = function(this__4369__auto__, writer__4370__auto__, opt__4371__auto__) {
  return cljs.core._write(writer__4370__auto__, "cljs.core/Box");
};
cljs.core.__GT_Box = function cljs$core$__GT_Box(val) {
  return new cljs.core.Box(val);
};
cljs.core.key_test = function cljs$core$key_test(key, other) {
  if (key === other) {
    return true;
  } else {
    if (cljs.core.keyword_identical_QMARK_(key, other)) {
      return true;
    } else {
      return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(key, other);
    }
  }
};
cljs.core.mask = function cljs$core$mask(hash, shift) {
  return hash >>> shift & 31;
};
cljs.core.clone_and_set = function cljs$core$clone_and_set(var_args) {
  var G__3709 = arguments.length;
  switch(G__3709) {
    case 3:
      return cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 5:
      return cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3 = function(arr, i, a) {
  var G__3710 = cljs.core.aclone(arr);
  G__3710[i] = a;
  return G__3710;
};
cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$5 = function(arr, i, a, j, b) {
  var G__3711 = cljs.core.aclone(arr);
  G__3711[i] = a;
  G__3711[j] = b;
  return G__3711;
};
cljs.core.clone_and_set.cljs$lang$maxFixedArity = 5;
cljs.core.remove_pair = function cljs$core$remove_pair(arr, i) {
  var new_arr = new Array(arr.length - 2);
  cljs.core.array_copy(arr, 0, new_arr, 0, 2 * i);
  cljs.core.array_copy(arr, 2 * (i + 1), new_arr, 2 * i, new_arr.length - 2 * i);
  return new_arr;
};
cljs.core.bitmap_indexed_node_index = function cljs$core$bitmap_indexed_node_index(bitmap, bit) {
  return cljs.core.bit_count(bitmap & bit - 1);
};
cljs.core.bitpos = function cljs$core$bitpos(hash, shift) {
  return 1 << (hash >>> shift & 31);
};
cljs.core.edit_and_set = function cljs$core$edit_and_set(var_args) {
  var G__3714 = arguments.length;
  switch(G__3714) {
    case 4:
      return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 6:
      return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4 = function(inode, edit, i, a) {
  var editable = inode.ensure_editable(edit);
  editable.arr[i] = a;
  return editable;
};
cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$6 = function(inode, edit, i, a, j, b) {
  var editable = inode.ensure_editable(edit);
  editable.arr[i] = a;
  editable.arr[j] = b;
  return editable;
};
cljs.core.edit_and_set.cljs$lang$maxFixedArity = 6;
cljs.core.inode_kv_reduce = function cljs$core$inode_kv_reduce(arr, f, init) {
  var len = arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = function() {
        var k = arr[i];
        if (!(k == null)) {
          var G__3716 = init__$1;
          var G__3717 = k;
          var G__3718 = arr[i + 1];
          return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__3716, G__3717, G__3718) : f.call(null, G__3716, G__3717, G__3718);
        } else {
          var node = arr[i + 1];
          if (!(node == null)) {
            return node.kv_reduce(f, init__$1);
          } else {
            return init__$1;
          }
        }
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        return init__$2;
      } else {
        var G__3719 = i + 2;
        var G__3720 = init__$2;
        i = G__3719;
        init__$1 = G__3720;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.NodeIterator = function(arr, i, next_entry, next_iter) {
  this.arr = arr;
  this.i = i;
  this.next_entry = next_entry;
  this.next_iter = next_iter;
};
cljs.core.NodeIterator.prototype.advance = function() {
  var self__ = this;
  var this$ = this;
  var len = self__.arr.length;
  while (true) {
    if (self__.i < len) {
      var key = self__.arr[self__.i];
      var node_or_val = self__.arr[self__.i + 1];
      var found = !(key == null) ? self__.next_entry = new cljs.core.MapEntry(key, node_or_val, null) : !(node_or_val == null) ? function() {
        var new_iter = cljs.core._iterator(node_or_val);
        if (new_iter.hasNext()) {
          return self__.next_iter = new_iter;
        } else {
          return false;
        }
      }() : false;
      self__.i = self__.i + 2;
      if (found) {
        return true;
      } else {
        continue;
      }
    } else {
      return false;
    }
    break;
  }
};
cljs.core.NodeIterator.prototype.hasNext = function() {
  var self__ = this;
  var this$ = this;
  var or__4126__auto__ = !(self__.next_entry == null);
  if (or__4126__auto__) {
    return or__4126__auto__;
  } else {
    var or__4126__auto____$1 = !(self__.next_iter == null);
    if (or__4126__auto____$1) {
      return or__4126__auto____$1;
    } else {
      return this$.advance();
    }
  }
};
cljs.core.NodeIterator.prototype.next = function() {
  var self__ = this;
  var this$ = this;
  if (!(self__.next_entry == null)) {
    var ret = self__.next_entry;
    self__.next_entry = null;
    return ret;
  } else {
    if (!(self__.next_iter == null)) {
      var ret = self__.next_iter.next();
      if (self__.next_iter.hasNext()) {
      } else {
        self__.next_iter = null;
      }
      return ret;
    } else {
      if (this$.advance()) {
        return this$.next();
      } else {
        throw new Error("No such element");
      }
    }
  }
};
cljs.core.NodeIterator.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.NodeIterator.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), cljs.core.with_meta(new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "next-entry", "next-entry", 1091342476, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, 
  "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "next-iter", "next-iter", 1526626239, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.NodeIterator.cljs$lang$type = true;
cljs.core.NodeIterator.cljs$lang$ctorStr = "cljs.core/NodeIterator";
cljs.core.NodeIterator.cljs$lang$ctorPrWriter = function(this__4369__auto__, writer__4370__auto__, opt__4371__auto__) {
  return cljs.core._write(writer__4370__auto__, "cljs.core/NodeIterator");
};
cljs.core.__GT_NodeIterator = function cljs$core$__GT_NodeIterator(arr, i, next_entry, next_iter) {
  return new cljs.core.NodeIterator(arr, i, next_entry, next_iter);
};
cljs.core.BitmapIndexedNode = function(edit, bitmap, arr) {
  this.edit = edit;
  this.bitmap = bitmap;
  this.arr = arr;
  this.cljs$lang$protocol_mask$partition1$ = 131072;
  this.cljs$lang$protocol_mask$partition0$ = 0;
};
cljs.core.BitmapIndexedNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var n = cljs.core.bit_count(self__.bitmap);
    var new_arr = new Array(n < 0 ? 4 : 2 * (n + 1));
    cljs.core.array_copy(self__.arr, 0, new_arr, 0, 2 * n);
    return new cljs.core.BitmapIndexedNode(e, self__.bitmap, new_arr);
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, 2 * idx + 1, n);
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            return inode.edit_and_remove_pair(edit__$1, bit, idx);
          }
        }
      }
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        removed_leaf_QMARK_.val = true;
        return inode.edit_and_remove_pair(edit__$1, bit, idx);
      } else {
        return inode;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.edit_and_remove_pair = function(e, bit, i) {
  var self__ = this;
  var inode = this;
  if (self__.bitmap === bit) {
    return null;
  } else {
    var editable = inode.ensure_editable(e);
    var earr = editable.arr;
    var len = earr.length;
    editable.bitmap = bit ^ editable.bitmap;
    cljs.core.array_copy(earr, 2 * (i + 1), earr, 2 * i, len - 2 * (i + 1));
    earr[len - 2] = null;
    earr[len - 1] = null;
    return editable;
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1(self__.arr);
};
cljs.core.BitmapIndexedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce(self__.arr, f, init);
};
cljs.core.BitmapIndexedNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_lookup(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        return val_or_node;
      } else {
        return not_found;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count(self__.bitmap);
    if (2 * n < self__.arr.length) {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      added_leaf_QMARK_.val = true;
      cljs.core.array_copy_downward(earr, 2 * idx, earr, 2 * (idx + 1), 2 * (n - idx));
      earr[2 * idx] = key;
      earr[2 * idx + 1] = val;
      editable.bitmap = editable.bitmap | bit;
      return editable;
    } else {
      if (n >= 16) {
        var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var jdx = hash >>> shift & 31;
        nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
        var i_3721 = 0;
        var j_3722 = 0;
        while (true) {
          if (i_3721 < 32) {
            if ((self__.bitmap >>> i_3721 & 1) === 0) {
              var G__3723 = i_3721 + 1;
              var G__3724 = j_3722;
              i_3721 = G__3723;
              j_3722 = G__3724;
              continue;
            } else {
              nodes[i_3721] = !(self__.arr[j_3722] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, cljs.core.hash(self__.arr[j_3722]), self__.arr[j_3722], self__.arr[j_3722 + 1], added_leaf_QMARK_) : self__.arr[j_3722 + 1];
              var G__3725 = i_3721 + 1;
              var G__3726 = j_3722 + 2;
              i_3721 = G__3725;
              j_3722 = G__3726;
              continue;
            }
          } else {
          }
          break;
        }
        return new cljs.core.ArrayNode(edit__$1, n + 1, nodes);
      } else {
        var new_arr = new Array(2 * (n + 4));
        cljs.core.array_copy(self__.arr, 0, new_arr, 0, 2 * idx);
        new_arr[2 * idx] = key;
        new_arr[2 * idx + 1] = val;
        cljs.core.array_copy(self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
        added_leaf_QMARK_.val = true;
        var editable = inode.ensure_editable(edit__$1);
        editable.arr = new_arr;
        editable.bitmap = editable.bitmap | bit;
        return editable;
      }
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, 2 * idx + 1, n);
      }
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, 2 * idx + 1, val);
        }
      } else {
        added_leaf_QMARK_.val = true;
        return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$6(inode, edit__$1, 2 * idx, null, 2 * idx + 1, cljs.core.create_node.cljs$core$IFn$_invoke$arity$7(edit__$1, shift + 5, key_or_nil, val_or_node, hash, key, val));
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count(self__.bitmap);
    if (n >= 16) {
      var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      var jdx = hash >>> shift & 31;
      nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      var i_3727 = 0;
      var j_3728 = 0;
      while (true) {
        if (i_3727 < 32) {
          if ((self__.bitmap >>> i_3727 & 1) === 0) {
            var G__3729 = i_3727 + 1;
            var G__3730 = j_3728;
            i_3727 = G__3729;
            j_3728 = G__3730;
            continue;
          } else {
            nodes[i_3727] = !(self__.arr[j_3728] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, cljs.core.hash(self__.arr[j_3728]), self__.arr[j_3728], self__.arr[j_3728 + 1], added_leaf_QMARK_) : self__.arr[j_3728 + 1];
            var G__3731 = i_3727 + 1;
            var G__3732 = j_3728 + 2;
            i_3727 = G__3731;
            j_3728 = G__3732;
            continue;
          }
        } else {
        }
        break;
      }
      return new cljs.core.ArrayNode(null, n + 1, nodes);
    } else {
      var new_arr = new Array(2 * (n + 1));
      cljs.core.array_copy(self__.arr, 0, new_arr, 0, 2 * idx);
      new_arr[2 * idx] = key;
      new_arr[2 * idx + 1] = val;
      cljs.core.array_copy(self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
      added_leaf_QMARK_.val = true;
      return new cljs.core.BitmapIndexedNode(null, self__.bitmap | bit, new_arr);
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, 2 * idx + 1, n));
      }
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, 2 * idx + 1, val));
        }
      } else {
        added_leaf_QMARK_.val = true;
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$5(self__.arr, 2 * idx, null, 2 * idx + 1, cljs.core.create_node.cljs$core$IFn$_invoke$arity$6(shift + 5, key_or_nil, val_or_node, hash, key, val)));
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_find(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        return new cljs.core.MapEntry(key_or_nil, val_or_node, null);
      } else {
        return not_found;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without(shift + 5, hash, key);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, 2 * idx + 1, n));
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair(self__.arr, idx));
          }
        }
      }
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair(self__.arr, idx));
      } else {
        return inode;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.cljs$core$IIterable$_iterator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.NodeIterator(self__.arr, 0, null, null);
};
cljs.core.BitmapIndexedNode.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "edit", "edit", -1302639, null), cljs.core.with_meta(new cljs.core.Symbol(null, "bitmap", "bitmap", 501334601, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, 
  "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.BitmapIndexedNode.cljs$lang$type = true;
cljs.core.BitmapIndexedNode.cljs$lang$ctorStr = "cljs.core/BitmapIndexedNode";
cljs.core.BitmapIndexedNode.cljs$lang$ctorPrWriter = function(this__4369__auto__, writer__4370__auto__, opt__4371__auto__) {
  return cljs.core._write(writer__4370__auto__, "cljs.core/BitmapIndexedNode");
};
cljs.core.__GT_BitmapIndexedNode = function cljs$core$__GT_BitmapIndexedNode(edit, bitmap, arr) {
  return new cljs.core.BitmapIndexedNode(edit, bitmap, arr);
};
cljs.core.BitmapIndexedNode.EMPTY = new cljs.core.BitmapIndexedNode(null, 0, []);
cljs.core.pack_array_node = function cljs$core$pack_array_node(array_node, edit, idx) {
  var arr = array_node.arr;
  var len = arr.length;
  var new_arr = new Array(2 * (array_node.cnt - 1));
  var i = 0;
  var j = 1;
  var bitmap = 0;
  while (true) {
    if (i < len) {
      if (!(i === idx) && !(arr[i] == null)) {
        new_arr[j] = arr[i];
        var G__3733 = i + 1;
        var G__3734 = j + 2;
        var G__3735 = bitmap | 1 << i;
        i = G__3733;
        j = G__3734;
        bitmap = G__3735;
        continue;
      } else {
        var G__3736 = i + 1;
        var G__3737 = j;
        var G__3738 = bitmap;
        i = G__3736;
        j = G__3737;
        bitmap = G__3738;
        continue;
      }
    } else {
      return new cljs.core.BitmapIndexedNode(edit, bitmap, new_arr);
    }
    break;
  }
};
cljs.core.ArrayNodeIterator = function(arr, i, next_iter) {
  this.arr = arr;
  this.i = i;
  this.next_iter = next_iter;
};
cljs.core.ArrayNodeIterator.prototype.hasNext = function() {
  var self__ = this;
  var this$ = this;
  var len = self__.arr.length;
  while (true) {
    if (!(!(self__.next_iter == null) && self__.next_iter.hasNext())) {
      if (self__.i < len) {
        var node = self__.arr[self__.i];
        self__.i = self__.i + 1;
        if (!(node == null)) {
          self__.next_iter = cljs.core._iterator(node);
        } else {
        }
        continue;
      } else {
        return false;
      }
    } else {
      return true;
    }
    break;
  }
};
cljs.core.ArrayNodeIterator.prototype.next = function() {
  var self__ = this;
  var this$ = this;
  if (this$.hasNext()) {
    return self__.next_iter.next();
  } else {
    throw new Error("No such element");
  }
};
cljs.core.ArrayNodeIterator.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.ArrayNodeIterator.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), cljs.core.with_meta(new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "next-iter", "next-iter", 1526626239, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, 
  "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.ArrayNodeIterator.cljs$lang$type = true;
cljs.core.ArrayNodeIterator.cljs$lang$ctorStr = "cljs.core/ArrayNodeIterator";
cljs.core.ArrayNodeIterator.cljs$lang$ctorPrWriter = function(this__4369__auto__, writer__4370__auto__, opt__4371__auto__) {
  return cljs.core._write(writer__4370__auto__, "cljs.core/ArrayNodeIterator");
};
cljs.core.__GT_ArrayNodeIterator = function cljs$core$__GT_ArrayNodeIterator(arr, i, next_iter) {
  return new cljs.core.ArrayNodeIterator(arr, i, next_iter);
};
cljs.core.ArrayNode = function(edit, cnt, arr) {
  this.edit = edit;
  this.cnt = cnt;
  this.arr = arr;
  this.cljs$lang$protocol_mask$partition1$ = 131072;
  this.cljs$lang$protocol_mask$partition0$ = 0;
};
cljs.core.ArrayNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    return new cljs.core.ArrayNode(e, self__.cnt, cljs.core.aclone(self__.arr));
  }
};
cljs.core.ArrayNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return inode;
  } else {
    var n = node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node(inode, edit__$1, idx);
        } else {
          var editable = cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx, n);
          editable.cnt = editable.cnt - 1;
          return editable;
        }
      } else {
        return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx, n);
      }
    }
  }
};
cljs.core.ArrayNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$1(self__.arr);
};
cljs.core.ArrayNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var node = self__.arr[i];
      if (!(node == null)) {
        var init__$2 = node.kv_reduce(f, init__$1);
        if (cljs.core.reduced_QMARK_(init__$2)) {
          return init__$2;
        } else {
          var G__3739 = i + 1;
          var G__3740 = init__$2;
          i = G__3739;
          init__$1 = G__3740;
          continue;
        }
      } else {
        var G__3741 = i + 1;
        var G__3742 = init__$1;
        i = G__3741;
        init__$1 = G__3742;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ArrayNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_lookup(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.ArrayNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    var editable = cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_));
    editable.cnt = editable.cnt + 1;
    return editable;
  } else {
    var n = node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx, n);
    }
  }
};
cljs.core.ArrayNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return new cljs.core.ArrayNode(null, self__.cnt + 1, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_)));
  } else {
    var n = node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx, n));
    }
  }
};
cljs.core.ArrayNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_find(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.ArrayNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    var n = node.inode_without(shift + 5, hash, key);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node(inode, null, idx);
        } else {
          return new cljs.core.ArrayNode(null, self__.cnt - 1, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx, n));
        }
      } else {
        return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx, n));
      }
    }
  } else {
    return inode;
  }
};
cljs.core.ArrayNode.prototype.cljs$core$IIterable$_iterator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ArrayNodeIterator(self__.arr, 0, null);
};
cljs.core.ArrayNode.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "edit", "edit", -1302639, null), cljs.core.with_meta(new cljs.core.Symbol(null, "cnt", "cnt", 1924510325, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, 
  "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.ArrayNode.cljs$lang$type = true;
cljs.core.ArrayNode.cljs$lang$ctorStr = "cljs.core/ArrayNode";
cljs.core.ArrayNode.cljs$lang$ctorPrWriter = function(this__4369__auto__, writer__4370__auto__, opt__4371__auto__) {
  return cljs.core._write(writer__4370__auto__, "cljs.core/ArrayNode");
};
cljs.core.__GT_ArrayNode = function cljs$core$__GT_ArrayNode(edit, cnt, arr) {
  return new cljs.core.ArrayNode(edit, cnt, arr);
};
cljs.core.hash_collision_node_find_index = function cljs$core$hash_collision_node_find_index(arr, cnt, key) {
  var lim = 2 * cnt;
  var i = 0;
  while (true) {
    if (i < lim) {
      if (cljs.core.key_test(key, arr[i])) {
        return i;
      } else {
        var G__3743 = i + 2;
        i = G__3743;
        continue;
      }
    } else {
      return -1;
    }
    break;
  }
};
cljs.core.HashCollisionNode = function(edit, collision_hash, cnt, arr) {
  this.edit = edit;
  this.collision_hash = collision_hash;
  this.cnt = cnt;
  this.arr = arr;
  this.cljs$lang$protocol_mask$partition1$ = 131072;
  this.cljs$lang$protocol_mask$partition0$ = 0;
};
cljs.core.HashCollisionNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var new_arr = new Array(2 * (self__.cnt + 1));
    cljs.core.array_copy(self__.arr, 0, new_arr, 0, 2 * self__.cnt);
    return new cljs.core.HashCollisionNode(e, self__.collision_hash, self__.cnt, new_arr);
  }
};
cljs.core.HashCollisionNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    removed_leaf_QMARK_.val = true;
    if (self__.cnt === 1) {
      return null;
    } else {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      earr[idx] = earr[2 * self__.cnt - 2];
      earr[idx + 1] = earr[2 * self__.cnt - 1];
      earr[2 * self__.cnt - 1] = null;
      earr[2 * self__.cnt - 2] = null;
      editable.cnt = editable.cnt - 1;
      return editable;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1(self__.arr);
};
cljs.core.HashCollisionNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce(self__.arr, f, init);
};
cljs.core.HashCollisionNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test(key, self__.arr[idx])) {
      return self__.arr[idx + 1];
    } else {
      return not_found;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
    if (idx === -1) {
      if (self__.arr.length > 2 * self__.cnt) {
        var editable = cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$6(inode, edit__$1, 2 * self__.cnt, key, 2 * self__.cnt + 1, val);
        added_leaf_QMARK_.val = true;
        editable.cnt = editable.cnt + 1;
        return editable;
      } else {
        var len = self__.arr.length;
        var new_arr = new Array(len + 2);
        cljs.core.array_copy(self__.arr, 0, new_arr, 0, len);
        new_arr[len] = key;
        new_arr[len + 1] = val;
        added_leaf_QMARK_.val = true;
        return inode.ensure_editable_array(edit__$1, self__.cnt + 1, new_arr);
      }
    } else {
      if (self__.arr[idx + 1] === val) {
        return inode;
      } else {
        return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx + 1, val);
      }
    }
  } else {
    return (new cljs.core.BitmapIndexedNode(edit__$1, 1 << (self__.collision_hash >>> shift & 31), [null, inode, null, null])).inode_assoc_BANG_(edit__$1, shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
    if (idx === -1) {
      var len = 2 * self__.cnt;
      var new_arr = new Array(len + 2);
      cljs.core.array_copy(self__.arr, 0, new_arr, 0, len);
      new_arr[len] = key;
      new_arr[len + 1] = val;
      added_leaf_QMARK_.val = true;
      return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt + 1, new_arr);
    } else {
      if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(self__.arr[idx + 1], val)) {
        return inode;
      } else {
        return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx + 1, val));
      }
    }
  } else {
    return (new cljs.core.BitmapIndexedNode(null, 1 << (self__.collision_hash >>> shift & 31), [null, inode])).inode_assoc(shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.ensure_editable_array = function(e, count, array) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    self__.arr = array;
    self__.cnt = count;
    return inode;
  } else {
    return new cljs.core.HashCollisionNode(self__.edit, self__.collision_hash, count, array);
  }
};
cljs.core.HashCollisionNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test(key, self__.arr[idx])) {
      return new cljs.core.MapEntry(self__.arr[idx], self__.arr[idx + 1], null);
    } else {
      return not_found;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    if (self__.cnt === 1) {
      return null;
    } else {
      return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt - 1, cljs.core.remove_pair(self__.arr, cljs.core.quot(idx, 2)));
    }
  }
};
cljs.core.HashCollisionNode.prototype.cljs$core$IIterable$_iterator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.NodeIterator(self__.arr, 0, null, null);
};
cljs.core.HashCollisionNode.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "edit", "edit", -1302639, null), cljs.core.with_meta(new cljs.core.Symbol(null, "collision-hash", "collision-hash", -35831342, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "cnt", "cnt", 1924510325, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, 
  "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.HashCollisionNode.cljs$lang$type = true;
cljs.core.HashCollisionNode.cljs$lang$ctorStr = "cljs.core/HashCollisionNode";
cljs.core.HashCollisionNode.cljs$lang$ctorPrWriter = function(this__4369__auto__, writer__4370__auto__, opt__4371__auto__) {
  return cljs.core._write(writer__4370__auto__, "cljs.core/HashCollisionNode");
};
cljs.core.__GT_HashCollisionNode = function cljs$core$__GT_HashCollisionNode(edit, collision_hash, cnt, arr) {
  return new cljs.core.HashCollisionNode(edit, collision_hash, cnt, arr);
};
cljs.core.create_node = function cljs$core$create_node(var_args) {
  var G__3745 = arguments.length;
  switch(G__3745) {
    case 6:
      return cljs.core.create_node.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    case 7:
      return cljs.core.create_node.cljs$core$IFn$_invoke$arity$7(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
cljs.core.create_node.cljs$core$IFn$_invoke$arity$6 = function(shift, key1, val1, key2hash, key2, val2) {
  var key1hash = cljs.core.hash(key1);
  if (key1hash === key2hash) {
    return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
  } else {
    var added_leaf_QMARK_ = new cljs.core.Box(false);
    return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc(shift, key2hash, key2, val2, added_leaf_QMARK_);
  }
};
cljs.core.create_node.cljs$core$IFn$_invoke$arity$7 = function(edit, shift, key1, val1, key2hash, key2, val2) {
  var key1hash = cljs.core.hash(key1);
  if (key1hash === key2hash) {
    return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
  } else {
    var added_leaf_QMARK_ = new cljs.core.Box(false);
    return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit, shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc_BANG_(edit, shift, key2hash, key2, val2, added_leaf_QMARK_);
  }
};
cljs.core.create_node.cljs$lang$maxFixedArity = 7;
cljs.core.NodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.NodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.NodeSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.NodeSeq.prototype.indexOf = function() {
  var G__3747 = null;
  var G__3747__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
  };
  var G__3747__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__3747 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__3747__1.call(this, x);
      case 2:
        return G__3747__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__3747.cljs$core$IFn$_invoke$arity$1 = G__3747__1;
  G__3747.cljs$core$IFn$_invoke$arity$2 = G__3747__2;
  return G__3747;
}();
cljs.core.NodeSeq.prototype.lastIndexOf = function() {
  var G__3748 = null;
  var G__3748__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, cljs.core.count(coll));
  };
  var G__3748__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__3748 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__3748__1.call(this, x);
      case 2:
        return G__3748__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__3748.cljs$core$IFn$_invoke$arity$1 = G__3748__1;
  G__3748.cljs$core$IFn$_invoke$arity$2 = G__3748__2;
  return G__3748;
}();
cljs.core.NodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.NodeSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3(self__.nodes, self__.i + 2, null);
  } else {
    return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3(self__.nodes, self__.i, cljs.core.next(self__.s));
  }
};
cljs.core.NodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4238__auto__ = self__.__hash;
  if (!(h__4238__auto__ == null)) {
    return h__4238__auto__;
  } else {
    var h__4238__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4238__auto____$1;
    return h__4238__auto____$1;
  }
};
cljs.core.NodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.NodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    return new cljs.core.MapEntry(self__.nodes[self__.i], self__.nodes[self__.i + 1], null);
  } else {
    return cljs.core.first(self__.s);
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var ret = self__.s == null ? cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3(self__.nodes, self__.i + 2, null) : cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3(self__.nodes, self__.i, cljs.core.next(self__.s));
  if (!(ret == null)) {
    return ret;
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.NodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  if (new_meta === self__.meta) {
    return coll__$1;
  } else {
    return new cljs.core.NodeSeq(new_meta, self__.nodes, self__.i, self__.s, self__.__hash);
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.NodeSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "nodes", "nodes", -459054278, null), new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.Symbol(null, "s", "s", -948495851, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 
  875778266), true], null))], null);
};
cljs.core.NodeSeq.cljs$lang$type = true;
cljs.core.NodeSeq.cljs$lang$ctorStr = "cljs.core/NodeSeq";
cljs.core.NodeSeq.cljs$lang$ctorPrWriter = function(this__4369__auto__, writer__4370__auto__, opt__4371__auto__) {
  return cljs.core._write(writer__4370__auto__, "cljs.core/NodeSeq");
};
cljs.core.__GT_NodeSeq = function cljs$core$__GT_NodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.NodeSeq(meta, nodes, i, s, __hash);
};
goog.object.set(cljs.core.NodeSeq.prototype, cljs.core.ITER_SYMBOL, function() {
  var this__4675__auto__ = this;
  return cljs.core.es6_iterator(this__4675__auto__);
});
cljs.core.create_inode_seq = function cljs$core$create_inode_seq(var_args) {
  var G__3750 = arguments.length;
  switch(G__3750) {
    case 1:
      return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 3:
      return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1 = function(nodes) {
  return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3(nodes, 0, null);
};
cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3 = function(nodes, i, s) {
  if (s == null) {
    var len = nodes.length;
    var j = i;
    while (true) {
      if (j < len) {
        if (!(nodes[j] == null)) {
          return new cljs.core.NodeSeq(null, nodes, j, null, null);
        } else {
          var temp__5733__auto__ = nodes[j + 1];
          if (cljs.core.truth_(temp__5733__auto__)) {
            var node = temp__5733__auto__;
            var temp__5733__auto____$1 = node.inode_seq();
            if (cljs.core.truth_(temp__5733__auto____$1)) {
              var node_seq = temp__5733__auto____$1;
              return new cljs.core.NodeSeq(null, nodes, j + 2, node_seq, null);
            } else {
              var G__3752 = j + 2;
              j = G__3752;
              continue;
            }
          } else {
            var G__3753 = j + 2;
            j = G__3753;
            continue;
          }
        }
      } else {
        return null;
      }
      break;
    }
  } else {
    return new cljs.core.NodeSeq(null, nodes, i, s, null);
  }
};
cljs.core.create_inode_seq.cljs$lang$maxFixedArity = 3;
cljs.core.ArrayNodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.ArrayNodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ArrayNodeSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ArrayNodeSeq.prototype.indexOf = function() {
  var G__3754 = null;
  var G__3754__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
  };
  var G__3754__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__3754 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__3754__1.call(this, x);
      case 2:
        return G__3754__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__3754.cljs$core$IFn$_invoke$arity$1 = G__3754__1;
  G__3754.cljs$core$IFn$_invoke$arity$2 = G__3754__2;
  return G__3754;
}();
cljs.core.ArrayNodeSeq.prototype.lastIndexOf = function() {
  var G__3755 = null;
  var G__3755__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, cljs.core.count(coll));
  };
  var G__3755__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__3755 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__3755__1.call(this, x);
      case 2:
        return G__3755__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__3755.cljs$core$IFn$_invoke$arity$1 = G__3755__1;
  G__3755.cljs$core$IFn$_invoke$arity$2 = G__3755__2;
  return G__3755;
}();
cljs.core.ArrayNodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$3(self__.nodes, self__.i, cljs.core.next(self__.s));
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4238__auto__ = self__.__hash;
  if (!(h__4238__auto__ == null)) {
    return h__4238__auto__;
  } else {
    var h__4238__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4238__auto____$1;
    return h__4238__auto____$1;
  }
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first(self__.s);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var ret = cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$3(self__.nodes, self__.i, cljs.core.next(self__.s));
  if (!(ret == null)) {
    return ret;
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  if (new_meta === self__.meta) {
    return coll__$1;
  } else {
    return new cljs.core.ArrayNodeSeq(new_meta, self__.nodes, self__.i, self__.s, self__.__hash);
  }
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.ArrayNodeSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "nodes", "nodes", -459054278, null), new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.Symbol(null, "s", "s", -948495851, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 
  875778266), true], null))], null);
};
cljs.core.ArrayNodeSeq.cljs$lang$type = true;
cljs.core.ArrayNodeSeq.cljs$lang$ctorStr = "cljs.core/ArrayNodeSeq";
cljs.core.ArrayNodeSeq.cljs$lang$ctorPrWriter = function(this__4369__auto__, writer__4370__auto__, opt__4371__auto__) {
  return cljs.core._write(writer__4370__auto__, "cljs.core/ArrayNodeSeq");
};
cljs.core.__GT_ArrayNodeSeq = function cljs$core$__GT_ArrayNodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, __hash);
};
goog.object.set(cljs.core.ArrayNodeSeq.prototype, cljs.core.ITER_SYMBOL, function() {
  var this__4675__auto__ = this;
  return cljs.core.es6_iterator(this__4675__auto__);
});
cljs.core.create_array_node_seq = function cljs$core$create_array_node_seq(var_args) {
  var G__3757 = arguments.length;
  switch(G__3757) {
    case 1:
      return cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 3:
      return cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$1 = function(nodes) {
  return cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$3(nodes, 0, null);
};
cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$3 = function(nodes, i, s) {
  if (s == null) {
    var len = nodes.length;
    var j = i;
    while (true) {
      if (j < len) {
        var temp__5733__auto__ = nodes[j];
        if (cljs.core.truth_(temp__5733__auto__)) {
          var nj = temp__5733__auto__;
          var temp__5733__auto____$1 = nj.inode_seq();
          if (cljs.core.truth_(temp__5733__auto____$1)) {
            var ns = temp__5733__auto____$1;
            return new cljs.core.ArrayNodeSeq(null, nodes, j + 1, ns, null);
          } else {
            var G__3759 = j + 1;
            j = G__3759;
            continue;
          }
        } else {
          var G__3760 = j + 1;
          j = G__3760;
          continue;
        }
      } else {
        return null;
      }
      break;
    }
  } else {
    return new cljs.core.ArrayNodeSeq(null, nodes, i, s, null);
  }
};
cljs.core.create_array_node_seq.cljs$lang$maxFixedArity = 3;
cljs.core.HashMapIter = function(nil_val, root_iter, seen) {
  this.nil_val = nil_val;
  this.root_iter = root_iter;
  this.seen = seen;
};
cljs.core.HashMapIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return !self__.seen || self__.root_iter.hasNext();
};
cljs.core.HashMapIter.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!self__.seen) {
    self__.seen = true;
    return new cljs.core.MapEntry(null, self__.nil_val, null);
  } else {
    return self__.root_iter.next();
  }
};
cljs.core.HashMapIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.HashMapIter.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "nil-val", "nil-val", -513933559, null), new cljs.core.Symbol(null, "root-iter", "root-iter", 1974672108, null), cljs.core.with_meta(new cljs.core.Symbol(null, "seen", "seen", 1121531738, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.HashMapIter.cljs$lang$type = true;
cljs.core.HashMapIter.cljs$lang$ctorStr = "cljs.core/HashMapIter";
cljs.core.HashMapIter.cljs$lang$ctorPrWriter = function(this__4369__auto__, writer__4370__auto__, opt__4371__auto__) {
  return cljs.core._write(writer__4370__auto__, "cljs.core/HashMapIter");
};
cljs.core.__GT_HashMapIter = function cljs$core$__GT_HashMapIter(nil_val, root_iter, seen) {
  return new cljs.core.HashMapIter(nil_val, root_iter, seen);
};
cljs.core.PersistentHashMap = function(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.root = root;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
  this.cljs$lang$protocol_mask$partition1$ = 139268;
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFind$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.PersistentHashMap.prototype.cljs$core$IFind$_find$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return new cljs.core.MapEntry(null, self__.nil_val, null);
    } else {
      return null;
    }
  } else {
    if (self__.root == null) {
      return null;
    } else {
      return self__.root.inode_find(0, cljs.core.hash(k), k, null);
    }
  }
};
cljs.core.PersistentHashMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentHashMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentHashMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.keys(coll));
};
cljs.core.PersistentHashMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentHashMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.vals(coll));
};
cljs.core.PersistentHashMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentHashMap.prototype.get = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentHashMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__3762 = cljs.core.seq(coll);
  var chunk__3763 = null;
  var count__3764 = 0;
  var i__3765 = 0;
  while (true) {
    if (i__3765 < count__3764) {
      var vec__3772 = chunk__3763.cljs$core$IIndexed$_nth$arity$2(null, i__3765);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__3772, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__3772, 1, null);
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(v, k) : f.call(null, v, k);
      var G__3780 = seq__3762;
      var G__3781 = chunk__3763;
      var G__3782 = count__3764;
      var G__3783 = i__3765 + 1;
      seq__3762 = G__3780;
      chunk__3763 = G__3781;
      count__3764 = G__3782;
      i__3765 = G__3783;
      continue;
    } else {
      var temp__5735__auto__ = cljs.core.seq(seq__3762);
      if (temp__5735__auto__) {
        var seq__3762__$1 = temp__5735__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__3762__$1)) {
          var c__4556__auto__ = cljs.core.chunk_first(seq__3762__$1);
          var G__3784 = cljs.core.chunk_rest(seq__3762__$1);
          var G__3785 = c__4556__auto__;
          var G__3786 = cljs.core.count(c__4556__auto__);
          var G__3787 = 0;
          seq__3762 = G__3784;
          chunk__3763 = G__3785;
          count__3764 = G__3786;
          i__3765 = G__3787;
          continue;
        } else {
          var vec__3775 = cljs.core.first(seq__3762__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__3775, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__3775, 1, null);
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(v, k) : f.call(null, v, k);
          var G__3788 = cljs.core.next(seq__3762__$1);
          var G__3789 = null;
          var G__3790 = 0;
          var G__3791 = 0;
          seq__3762 = G__3788;
          chunk__3763 = G__3789;
          count__3764 = G__3790;
          i__3765 = G__3791;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1.cljs$core$ILookup$_lookup$arity$3(null, k, null);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash(k), k, not_found);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var init__$1 = self__.has_nil_QMARK_ ? f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(init, null, self__.nil_val) : f.call(null, init, null, self__.nil_val) : init;
  if (cljs.core.reduced_QMARK_(init__$1)) {
    return cljs.core.deref(init__$1);
  } else {
    if (!(self__.root == null)) {
      return cljs.core.unreduced(self__.root.kv_reduce(f, init__$1));
    } else {
      return init__$1;
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IIterable$_iterator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var root_iter = self__.root ? cljs.core._iterator(self__.root) : cljs.core.nil_iter();
  if (self__.has_nil_QMARK_) {
    return new cljs.core.HashMapIter(self__.nil_val, root_iter, false);
  } else {
    return root_iter;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashMap(self__.meta, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentHashMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4238__auto__ = self__.__hash;
  if (!(h__4238__auto__ == null)) {
    return h__4238__auto__;
  } else {
    var h__4238__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__4238__auto____$1;
    return h__4238__auto____$1;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map(coll__$1, other);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashMap({}, self__.root, self__.cnt, self__.has_nil_QMARK_, self__.nil_val);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta(cljs.core.PersistentHashMap.EMPTY, self__.meta);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, self__.root, false, null, null);
    } else {
      return coll__$1;
    }
  } else {
    if (self__.root == null) {
      return coll__$1;
    } else {
      var new_root = self__.root.inode_without(0, cljs.core.hash(k), k);
      if (new_root === self__.root) {
        return coll__$1;
      } else {
        return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_ && v === self__.nil_val) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, self__.has_nil_QMARK_ ? self__.cnt : self__.cnt + 1, self__.root, true, v, null);
    }
  } else {
    var added_leaf_QMARK_ = new cljs.core.Box(false);
    var new_root = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc(0, cljs.core.hash(k), k, v, added_leaf_QMARK_);
    if (new_root === self__.root) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, added_leaf_QMARK_.val ? self__.cnt + 1 : self__.cnt, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    return self__.has_nil_QMARK_;
  } else {
    if (self__.root == null) {
      return false;
    } else {
      return !(self__.root.inode_lookup(0, cljs.core.hash(k), k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var s = !(self__.root == null) ? self__.root.inode_seq() : null;
    if (self__.has_nil_QMARK_) {
      return cljs.core.cons(new cljs.core.MapEntry(null, self__.nil_val, null), s);
    } else {
      return s;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  if (new_meta === self__.meta) {
    return coll__$1;
  } else {
    return new cljs.core.PersistentHashMap(new_meta, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_(entry)) {
    return coll__$1.cljs$core$IAssociative$_assoc$arity$3(null, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq(entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first(es);
        if (cljs.core.vector_QMARK_(e)) {
          var G__3792 = cljs.core._assoc(ret, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 1));
          var G__3793 = cljs.core.next(es);
          ret = G__3792;
          es = G__3793;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentHashMap.prototype.call = function() {
  var G__3794 = null;
  var G__3794__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__3794__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__3794 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__3794__2.call(this, self__, k);
      case 3:
        return G__3794__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__3794.cljs$core$IFn$_invoke$arity$2 = G__3794__2;
  G__3794.cljs$core$IFn$_invoke$arity$3 = G__3794__3;
  return G__3794;
}();
cljs.core.PersistentHashMap.prototype.apply = function(self__, args3761) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args3761)));
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentHashMap.getBasis = function() {
  return new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "cnt", "cnt", 1924510325, null), new cljs.core.Symbol(null, "root", "root", 1191874074, null), cljs.core.with_meta(new cljs.core.Symbol(null, "has-nil?", "has-nil?", 825886722, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Symbol(null, "boolean", 
  "boolean", -278886877, null)], null)), new cljs.core.Symbol(null, "nil-val", "nil-val", -513933559, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.PersistentHashMap.cljs$lang$type = true;
cljs.core.PersistentHashMap.cljs$lang$ctorStr = "cljs.core/PersistentHashMap";
cljs.core.PersistentHashMap.cljs$lang$ctorPrWriter = function(this__4369__auto__, writer__4370__auto__, opt__4371__auto__) {
  return cljs.core._write(writer__4370__auto__, "cljs.core/PersistentHashMap");
};
cljs.core.__GT_PersistentHashMap = function cljs$core$__GT_PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  return new cljs.core.PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash);
};
cljs.core.PersistentHashMap.EMPTY = new cljs.core.PersistentHashMap(null, 0, null, false, null, cljs.core.empty_unordered_hash);
cljs.core.PersistentHashMap.fromArray = function(arr, no_clone) {
  var arr__$1 = no_clone ? arr : cljs.core.aclone(arr);
  var len = arr__$1.length;
  var i = 0;
  var ret = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var G__3795 = i + 2;
      var G__3796 = cljs.core._assoc_BANG_(ret, arr__$1[i], arr__$1[i + 1]);
      i = G__3795;
      ret = G__3796;
      continue;
    } else {
      return cljs.core._persistent_BANG_(ret);
    }
    break;
  }
};
cljs.core.PersistentHashMap.fromArrays = function(ks, vs) {
  var len = ks.length;
  var i = 0;
  var out = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var G__3797 = i + 1;
      var G__3798 = cljs.core._assoc_BANG_(out, ks[i], vs[i]);
      i = G__3797;
      out = G__3798;
      continue;
    } else {
      return cljs.core.persistent_BANG_(out);
    }
    break;
  }
};
cljs.core.PersistentHashMap.createWithCheck = function(arr) {
  var len = arr.length;
  var ret = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  var i_3799 = 0;
  while (true) {
    if (i_3799 < len) {
      cljs.core._assoc_BANG_(ret, arr[i_3799], arr[i_3799 + 1]);
      if (cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core._count(ret), i_3799 / 2 + 1)) {
        throw new Error(["Duplicate key: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arr[i_3799])].join(""));
      } else {
        var G__3800 = i_3799 + 2;
        i_3799 = G__3800;
        continue;
      }
    } else {
    }
    break;
  }
  return cljs.core._persistent_BANG_(ret);
};
goog.object.set(cljs.core.PersistentHashMap.prototype, cljs.core.ITER_SYMBOL, function() {
  var this__4675__auto__ = this;
  return cljs.core.es6_iterator(this__4675__auto__);
});
cljs.core.TransientHashMap = function(edit, root, count, has_nil_QMARK_, nil_val) {
  this.edit = edit;
  this.root = root;
  this.count = count;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.cljs$lang$protocol_mask$partition0$ = 259;
  this.cljs$lang$protocol_mask$partition1$ = 56;
};
cljs.core.TransientHashMap.prototype.conj_BANG_ = function(o) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (cljs.core.map_entry_QMARK_(o)) {
      return tcoll.assoc_BANG_(cljs.core.key(o), cljs.core.val(o));
    } else {
      if (cljs.core.vector_QMARK_(o)) {
        return tcoll.assoc_BANG_(o.cljs$core$IFn$_invoke$arity$1 ? o.cljs$core$IFn$_invoke$arity$1(0) : o.call(null, 0), o.cljs$core$IFn$_invoke$arity$1 ? o.cljs$core$IFn$_invoke$arity$1(1) : o.call(null, 1));
      } else {
        var es = cljs.core.seq(o);
        var tcoll__$1 = tcoll;
        while (true) {
          var temp__5733__auto__ = cljs.core.first(es);
          if (cljs.core.truth_(temp__5733__auto__)) {
            var e = temp__5733__auto__;
            var G__3802 = cljs.core.next(es);
            var G__3803 = tcoll__$1.assoc_BANG_(cljs.core.key(e), cljs.core.val(e));
            es = G__3802;
            tcoll__$1 = G__3803;
            continue;
          } else {
            return tcoll__$1;
          }
          break;
        }
      }
    }
  } else {
    throw new Error("conj! after persistent");
  }
};
cljs.core.TransientHashMap.prototype.assoc_BANG_ = function(k, v) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.nil_val === v) {
      } else {
        self__.nil_val = v;
      }
      if (self__.has_nil_QMARK_) {
      } else {
        self__.count = self__.count + 1;
        self__.has_nil_QMARK_ = true;
      }
      return tcoll;
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      var node = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc_BANG_(self__.edit, 0, cljs.core.hash(k), k, v, added_leaf_QMARK_);
      if (node === self__.root) {
      } else {
        self__.root = node;
      }
      if (added_leaf_QMARK_.val) {
        self__.count = self__.count + 1;
      } else {
      }
      return tcoll;
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.without_BANG_ = function(k) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.has_nil_QMARK_) {
        self__.has_nil_QMARK_ = false;
        self__.nil_val = null;
        self__.count = self__.count - 1;
        return tcoll;
      } else {
        return tcoll;
      }
    } else {
      if (self__.root == null) {
        return tcoll;
      } else {
        var removed_leaf_QMARK_ = new cljs.core.Box(false);
        var node = self__.root.inode_without_BANG_(self__.edit, 0, cljs.core.hash(k), k, removed_leaf_QMARK_);
        if (node === self__.root) {
        } else {
          self__.root = node;
        }
        if (removed_leaf_QMARK_.val) {
          self__.count = self__.count - 1;
        } else {
        }
        return tcoll;
      }
    }
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.persistent_BANG_ = function() {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    self__.edit = null;
    return new cljs.core.PersistentHashMap(null, self__.count, self__.root, self__.has_nil_QMARK_, self__.nil_val, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.edit) {
    return self__.count;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return null;
    }
  } else {
    if (self__.root == null) {
      return null;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash(k), k);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash(k), k, not_found);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.conj_BANG_(val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.persistent_BANG_();
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.assoc_BANG_(key, val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.without_BANG_(key);
};
cljs.core.TransientHashMap.prototype.call = function() {
  var G__3804 = null;
  var G__3804__2 = function(self__, key) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    return tcoll.cljs$core$ILookup$_lookup$arity$2(null, key);
  };
  var G__3804__3 = function(self__, key, not_found) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    return tcoll.cljs$core$ILookup$_lookup$arity$3(null, key, not_found);
  };
  G__3804 = function(self__, key, not_found) {
    switch(arguments.length) {
      case 2:
        return G__3804__2.call(this, self__, key);
      case 3:
        return G__3804__3.call(this, self__, key, not_found);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__3804.cljs$core$IFn$_invoke$arity$2 = G__3804__2;
  G__3804.cljs$core$IFn$_invoke$arity$3 = G__3804__3;
  return G__3804;
}();
cljs.core.TransientHashMap.prototype.apply = function(self__, args3801) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args3801)));
};
cljs.core.TransientHashMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(key) {
  var self__ = this;
  var tcoll = this;
  return tcoll.cljs$core$ILookup$_lookup$arity$2(null, key);
};
cljs.core.TransientHashMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(key, not_found) {
  var self__ = this;
  var tcoll = this;
  return tcoll.cljs$core$ILookup$_lookup$arity$3(null, key, not_found);
};
cljs.core.TransientHashMap.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "edit", "edit", -1302639, null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Symbol(null, "boolean", "boolean", -278886877, null), new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "root", "root", 1191874074, null), new cljs.core.PersistentArrayMap(null, 
  1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "count", "count", -514511684, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "has-nil?", "has-nil?", 825886722, null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Symbol(null, 
  "boolean", "boolean", -278886877, null), new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "nil-val", "nil-val", -513933559, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.TransientHashMap.cljs$lang$type = true;
cljs.core.TransientHashMap.cljs$lang$ctorStr = "cljs.core/TransientHashMap";
cljs.core.TransientHashMap.cljs$lang$ctorPrWriter = function(this__4369__auto__, writer__4370__auto__, opt__4371__auto__) {
  return cljs.core._write(writer__4370__auto__, "cljs.core/TransientHashMap");
};
cljs.core.__GT_TransientHashMap = function cljs$core$__GT_TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val) {
  return new cljs.core.TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val);
};
cljs.core.tree_map_seq_push = function cljs$core$tree_map_seq_push(node, stack, ascending_QMARK_) {
  var t = node;
  var stack__$1 = stack;
  while (true) {
    if (!(t == null)) {
      var G__3805 = ascending_QMARK_ ? t.left : t.right;
      var G__3806 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack__$1, t);
      t = G__3805;
      stack__$1 = G__3806;
      continue;
    } else {
      return stack__$1;
    }
    break;
  }
};
cljs.core.PersistentTreeMapSeq = function(meta, stack, ascending_QMARK_, cnt, __hash) {
  this.meta = meta;
  this.stack = stack;
  this.ascending_QMARK_ = ascending_QMARK_;
  this.cnt = cnt;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32374990;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.PersistentTreeMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentTreeMapSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentTreeMapSeq.prototype.indexOf = function() {
  var G__3807 = null;
  var G__3807__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
  };
  var G__3807__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__3807 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__3807__1.call(this, x);
      case 2:
        return G__3807__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__3807.cljs$core$IFn$_invoke$arity$1 = G__3807__1;
  G__3807.cljs$core$IFn$_invoke$arity$2 = G__3807__2;
  return G__3807;
}();
cljs.core.PersistentTreeMapSeq.prototype.lastIndexOf = function() {
  var G__3808 = null;
  var G__3808__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, cljs.core.count(coll));
  };
  var G__3808__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__3808 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__3808__1.call(this, x);
      case 2:
        return G__3808__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__3808.cljs$core$IFn$_invoke$arity$1 = G__3808__1;
  G__3808.cljs$core$IFn$_invoke$arity$2 = G__3808__2;
  return G__3808;
}();
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$INext$_next$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var t = cljs.core.first(self__.stack);
  var next_stack = cljs.core.tree_map_seq_push(self__.ascending_QMARK_ ? t.right : t.left, cljs.core.next(self__.stack), self__.ascending_QMARK_);
  if (next_stack == null) {
    return null;
  } else {
    return new cljs.core.PersistentTreeMapSeq(null, next_stack, self__.ascending_QMARK_, self__.cnt - 1, null);
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt < 0) {
    return cljs.core.count(cljs.core.next(coll__$1)) + 1;
  } else {
    return self__.cnt;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4238__auto__ = self__.__hash;
  if (!(h__4238__auto__ == null)) {
    return h__4238__auto__;
  } else {
    var h__4238__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4238__auto____$1;
    return h__4238__auto____$1;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.peek(self__.stack);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var t = cljs.core.first(self__.stack);
  var next_stack = cljs.core.tree_map_seq_push(self__.ascending_QMARK_ ? t.right : t.left, cljs.core.next(self__.stack), self__.ascending_QMARK_);
  if (!(next_stack == null)) {
    return new cljs.core.PersistentTreeMapSeq(null, next_stack, self__.ascending_QMARK_, self__.cnt - 1, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  if (new_meta === self__.meta) {
    return coll__$1;
  } else {
    return new cljs.core.PersistentTreeMapSeq(new_meta, self__.stack, self__.ascending_QMARK_, self__.cnt, self__.__hash);
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.PersistentTreeMapSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "stack", "stack", 847125597, null), cljs.core.with_meta(new cljs.core.Symbol(null, "ascending?", "ascending?", -1938452653, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Symbol(null, "boolean", "boolean", -278886877, null)], null)), new cljs.core.Symbol(null, 
  "cnt", "cnt", 1924510325, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.PersistentTreeMapSeq.cljs$lang$type = true;
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentTreeMapSeq";
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorPrWriter = function(this__4369__auto__, writer__4370__auto__, opt__4371__auto__) {
  return cljs.core._write(writer__4370__auto__, "cljs.core/PersistentTreeMapSeq");
};
cljs.core.__GT_PersistentTreeMapSeq = function cljs$core$__GT_PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash) {
  return new cljs.core.PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash);
};
goog.object.set(cljs.core.PersistentTreeMapSeq.prototype, cljs.core.ITER_SYMBOL, function() {
  var this__4675__auto__ = this;
  return cljs.core.es6_iterator(this__4675__auto__);
});
cljs.core.create_tree_map_seq = function cljs$core$create_tree_map_seq(tree, ascending_QMARK_, cnt) {
  return new cljs.core.PersistentTreeMapSeq(null, cljs.core.tree_map_seq_push(tree, null, ascending_QMARK_), ascending_QMARK_, cnt, null);
};
cljs.core.balance_left = function cljs$core$balance_left(key, val, ins, right) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, ins.left.blacken(), new cljs.core.BlackNode(key, val, ins.right, right, null), null);
    } else {
      if (ins.right instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.right.key, ins.right.val, new cljs.core.BlackNode(ins.key, ins.val, ins.left, ins.right.left, null), new cljs.core.BlackNode(key, val, ins.right.right, right, null), null);
      } else {
        return new cljs.core.BlackNode(key, val, ins, right, null);
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, ins, right, null);
  }
};
cljs.core.balance_right = function cljs$core$balance_right(key, val, left, ins) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, new cljs.core.BlackNode(key, val, left, ins.left, null), ins.right.blacken(), null);
    } else {
      if (ins.left instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.left.key, ins.left.val, new cljs.core.BlackNode(key, val, left, ins.left.left, null), new cljs.core.BlackNode(ins.key, ins.val, ins.left.right, ins.right, null), null);
      } else {
        return new cljs.core.BlackNode(key, val, left, ins, null);
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, left, ins, null);
  }
};
cljs.core.balance_left_del = function cljs$core$balance_left_del(key, val, del, right) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, del.blacken(), right, null);
  } else {
    if (right instanceof cljs.core.BlackNode) {
      return cljs.core.balance_right(key, val, del, right.redden());
    } else {
      if (right instanceof cljs.core.RedNode && right.left instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(right.left.key, right.left.val, new cljs.core.BlackNode(key, val, del, right.left.left, null), cljs.core.balance_right(right.key, right.val, right.left.right, right.right.redden()), null);
      } else {
        throw new Error("red-black tree invariant violation");
      }
    }
  }
};
cljs.core.balance_right_del = function cljs$core$balance_right_del(key, val, left, del) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, left, del.blacken(), null);
  } else {
    if (left instanceof cljs.core.BlackNode) {
      return cljs.core.balance_left(key, val, left.redden(), del);
    } else {
      if (left instanceof cljs.core.RedNode && left.right instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(left.right.key, left.right.val, cljs.core.balance_left(left.key, left.val, left.left.redden(), left.right.left), new cljs.core.BlackNode(key, val, left.right.right, del, null), null);
      } else {
        throw new Error("red-black tree invariant violation");
      }
    }
  }
};
cljs.core.tree_map_kv_reduce = function cljs$core$tree_map_kv_reduce(node, f, init) {
  var init__$1 = !(node.left == null) ? function() {
    var G__3809 = node.left;
    var G__3810 = f;
    var G__3811 = init;
    return cljs.core.tree_map_kv_reduce.cljs$core$IFn$_invoke$arity$3 ? cljs.core.tree_map_kv_reduce.cljs$core$IFn$_invoke$arity$3(G__3809, G__3810, G__3811) : cljs.core.tree_map_kv_reduce.call(null, G__3809, G__3810, G__3811);
  }() : init;
  if (cljs.core.reduced_QMARK_(init__$1)) {
    return init__$1;
  } else {
    var init__$2 = function() {
      var G__3812 = init__$1;
      var G__3813 = node.key;
      var G__3814 = node.val;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__3812, G__3813, G__3814) : f.call(null, G__3812, G__3813, G__3814);
    }();
    if (cljs.core.reduced_QMARK_(init__$2)) {
      return init__$2;
    } else {
      if (!(node.right == null)) {
        var G__3815 = node.right;
        var G__3816 = f;
        var G__3817 = init__$2;
        return cljs.core.tree_map_kv_reduce.cljs$core$IFn$_invoke$arity$3 ? cljs.core.tree_map_kv_reduce.cljs$core$IFn$_invoke$arity$3(G__3815, G__3816, G__3817) : cljs.core.tree_map_kv_reduce.call(null, G__3815, G__3816, G__3817);
      } else {
        return init__$2;
      }
    }
  }
};
cljs.core.BlackNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 166619935;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.BlackNode.prototype.cljs$core$IFind$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.BlackNode.prototype.cljs$core$IFind$_find$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  var G__3819 = k;
  switch(G__3819) {
    case 0:
      return new cljs.core.MapEntry(0, self__.key, null);
      break;
    case 1:
      return new cljs.core.MapEntry(1, self__.val, null);
      break;
    default:
      return null;
  }
};
cljs.core.BlackNode.prototype.lastIndexOf = function() {
  var G__3821 = null;
  var G__3821__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, cljs.core.count(coll));
  };
  var G__3821__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__3821 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__3821__1.call(this, x);
      case 2:
        return G__3821__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__3821.cljs$core$IFn$_invoke$arity$1 = G__3821__1;
  G__3821.cljs$core$IFn$_invoke$arity$2 = G__3821__2;
  return G__3821;
}();
cljs.core.BlackNode.prototype.indexOf = function() {
  var G__3822 = null;
  var G__3822__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
  };
  var G__3822__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__3822 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__3822__1.call(this, x);
      case 2:
        return G__3822__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__3822.cljs$core$IFn$_invoke$arity$1 = G__3822__1;
  G__3822.cljs$core$IFn$_invoke$arity$2 = G__3822__2;
  return G__3822;
}();
cljs.core.BlackNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_right(node);
};
cljs.core.BlackNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.BlackNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return node;
};
cljs.core.BlackNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_left(node);
};
cljs.core.BlackNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.BlackNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
};
cljs.core.BlackNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
};
cljs.core.BlackNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_left_del(self__.key, self__.val, del, self__.right);
};
cljs.core.BlackNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce(node, f, init);
};
cljs.core.BlackNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_right_del(self__.key, self__.val, self__.left, del);
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return node__$1.cljs$core$IIndexed$_nth$arity$3(null, k, null);
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return node__$1.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      throw new Error("Index out of bounds");
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return not_found;
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return (new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.BlackNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.BlackNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.BlackNode.prototype.cljs$core$IReversible$_rseq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.IndexedSeq([self__.val, self__.key], 0, null);
};
cljs.core.BlackNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4238__auto__ = self__.__hash;
  if (!(h__4238__auto__ == null)) {
    return h__4238__auto__;
  } else {
    var h__4238__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4238__auto____$1;
    return h__4238__auto____$1;
  }
};
cljs.core.BlackNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.BlackNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(node__$1, f);
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(node__$1, f, start);
};
cljs.core.BlackNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.BlackNode.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return k === 0 || k === 1;
};
cljs.core.BlackNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.IndexedSeq([self__.key, self__.val], 0, null);
};
cljs.core.BlackNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._with_meta(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.BlackNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.BlackNode.prototype.call = function() {
  var G__3823 = null;
  var G__3823__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__3823__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__3823 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__3823__2.call(this, self__, k);
      case 3:
        return G__3823__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__3823.cljs$core$IFn$_invoke$arity$2 = G__3823__2;
  G__3823.cljs$core$IFn$_invoke$arity$3 = G__3823__3;
  return G__3823;
}();
cljs.core.BlackNode.prototype.apply = function(self__, args3818) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args3818)));
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.BlackNode.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "key", "key", 124488940, null), new cljs.core.Symbol(null, "val", "val", 1769233139, null), new cljs.core.Symbol(null, "left", "left", 1241415590, null), new cljs.core.Symbol(null, "right", "right", 1187949694, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", 
  "mutable", 875778266), true], null))], null);
};
cljs.core.BlackNode.cljs$lang$type = true;
cljs.core.BlackNode.cljs$lang$ctorStr = "cljs.core/BlackNode";
cljs.core.BlackNode.cljs$lang$ctorPrWriter = function(this__4369__auto__, writer__4370__auto__, opt__4371__auto__) {
  return cljs.core._write(writer__4370__auto__, "cljs.core/BlackNode");
};
cljs.core.__GT_BlackNode = function cljs$core$__GT_BlackNode(key, val, left, right, __hash) {
  return new cljs.core.BlackNode(key, val, left, right, __hash);
};
goog.object.set(cljs.core.BlackNode.prototype, cljs.core.ITER_SYMBOL, function() {
  var this__4675__auto__ = this;
  return cljs.core.es6_iterator(this__4675__auto__);
});
cljs.core.RedNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 166619935;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.RedNode.prototype.cljs$core$IFind$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.RedNode.prototype.cljs$core$IFind$_find$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  var G__3825 = k;
  switch(G__3825) {
    case 0:
      return new cljs.core.MapEntry(0, self__.key, null);
      break;
    case 1:
      return new cljs.core.MapEntry(1, self__.val, null);
      break;
    default:
      return null;
  }
};
cljs.core.RedNode.prototype.lastIndexOf = function() {
  var G__3827 = null;
  var G__3827__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, cljs.core.count(coll));
  };
  var G__3827__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__3827 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__3827__1.call(this, x);
      case 2:
        return G__3827__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__3827.cljs$core$IFn$_invoke$arity$1 = G__3827__1;
  G__3827.cljs$core$IFn$_invoke$arity$2 = G__3827__2;
  return G__3827;
}();
cljs.core.RedNode.prototype.indexOf = function() {
  var G__3828 = null;
  var G__3828__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
  };
  var G__3828__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__3828 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__3828__1.call(this, x);
      case 2:
        return G__3828__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__3828.cljs$core$IFn$_invoke$arity$1 = G__3828__1;
  G__3828.cljs$core$IFn$_invoke$arity$2 = G__3828__2;
  return G__3828;
}();
cljs.core.RedNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, ins, null);
};
cljs.core.RedNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  throw new Error("red-black tree invariant violation");
};
cljs.core.RedNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.RedNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, ins, self__.right, null);
};
cljs.core.RedNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.RedNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.left instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, self__.left.blacken(), new cljs.core.BlackNode(parent.key, parent.val, self__.right, parent.right, null), null);
  } else {
    if (self__.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.right.key, self__.right.val, new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right.left, null), new cljs.core.BlackNode(parent.key, parent.val, self__.right.right, parent.right, null), null);
    } else {
      return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
    }
  }
};
cljs.core.RedNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.right instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left, null), self__.right.blacken(), null);
  } else {
    if (self__.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.left.key, self__.left.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left.left, null), new cljs.core.BlackNode(self__.key, self__.val, self__.left.right, self__.right, null), null);
    } else {
      return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
    }
  }
};
cljs.core.RedNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, del, self__.right, null);
};
cljs.core.RedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce(node, f, init);
};
cljs.core.RedNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, del, null);
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return node__$1.cljs$core$IIndexed$_nth$arity$3(null, k, null);
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return node__$1.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      throw new Error("Index out of bounds");
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return not_found;
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return (new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.RedNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.RedNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.RedNode.prototype.cljs$core$IReversible$_rseq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.IndexedSeq([self__.val, self__.key], 0, null);
};
cljs.core.RedNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4238__auto__ = self__.__hash;
  if (!(h__4238__auto__ == null)) {
    return h__4238__auto__;
  } else {
    var h__4238__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4238__auto____$1;
    return h__4238__auto____$1;
  }
};
cljs.core.RedNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.RedNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(node__$1, f);
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(node__$1, f, start);
};
cljs.core.RedNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.RedNode.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return k === 0 || k === 1;
};
cljs.core.RedNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.IndexedSeq([self__.key, self__.val], 0, null);
};
cljs.core.RedNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._with_meta(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.RedNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.RedNode.prototype.call = function() {
  var G__3829 = null;
  var G__3829__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__3829__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__3829 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__3829__2.call(this, self__, k);
      case 3:
        return G__3829__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__3829.cljs$core$IFn$_invoke$arity$2 = G__3829__2;
  G__3829.cljs$core$IFn$_invoke$arity$3 = G__3829__3;
  return G__3829;
}();
cljs.core.RedNode.prototype.apply = function(self__, args3824) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args3824)));
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.RedNode.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "key", "key", 124488940, null), new cljs.core.Symbol(null, "val", "val", 1769233139, null), new cljs.core.Symbol(null, "left", "left", 1241415590, null), new cljs.core.Symbol(null, "right", "right", 1187949694, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", 
  "mutable", 875778266), true], null))], null);
};
cljs.core.RedNode.cljs$lang$type = true;
cljs.core.RedNode.cljs$lang$ctorStr = "cljs.core/RedNode";
cljs.core.RedNode.cljs$lang$ctorPrWriter = function(this__4369__auto__, writer__4370__auto__, opt__4371__auto__) {
  return cljs.core._write(writer__4370__auto__, "cljs.core/RedNode");
};
cljs.core.__GT_RedNode = function cljs$core$__GT_RedNode(key, val, left, right, __hash) {
  return new cljs.core.RedNode(key, val, left, right, __hash);
};
goog.object.set(cljs.core.RedNode.prototype, cljs.core.ITER_SYMBOL, function() {
  var this__4675__auto__ = this;
  return cljs.core.es6_iterator(this__4675__auto__);
});
cljs.core.tree_map_add = function cljs$core$tree_map_add(comp, tree, k, v, found) {
  if (tree == null) {
    return new cljs.core.RedNode(k, v, null, null, null);
  } else {
    var c = function() {
      var G__3830 = k;
      var G__3831 = tree.key;
      return comp.cljs$core$IFn$_invoke$arity$2 ? comp.cljs$core$IFn$_invoke$arity$2(G__3830, G__3831) : comp.call(null, G__3830, G__3831);
    }();
    if (c === 0) {
      found[0] = tree;
      return null;
    } else {
      if (c < 0) {
        var ins = function() {
          var G__3832 = comp;
          var G__3833 = tree.left;
          var G__3834 = k;
          var G__3835 = v;
          var G__3836 = found;
          return cljs.core.tree_map_add.cljs$core$IFn$_invoke$arity$5 ? cljs.core.tree_map_add.cljs$core$IFn$_invoke$arity$5(G__3832, G__3833, G__3834, G__3835, G__3836) : cljs.core.tree_map_add.call(null, G__3832, G__3833, G__3834, G__3835, G__3836);
        }();
        if (!(ins == null)) {
          return tree.add_left(ins);
        } else {
          return null;
        }
      } else {
        var ins = function() {
          var G__3837 = comp;
          var G__3838 = tree.right;
          var G__3839 = k;
          var G__3840 = v;
          var G__3841 = found;
          return cljs.core.tree_map_add.cljs$core$IFn$_invoke$arity$5 ? cljs.core.tree_map_add.cljs$core$IFn$_invoke$arity$5(G__3837, G__3838, G__3839, G__3840, G__3841) : cljs.core.tree_map_add.call(null, G__3837, G__3838, G__3839, G__3840, G__3841);
        }();
        if (!(ins == null)) {
          return tree.add_right(ins);
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.tree_map_append = function cljs$core$tree_map_append(left, right) {
  if (left == null) {
    return right;
  } else {
    if (right == null) {
      return left;
    } else {
      if (left instanceof cljs.core.RedNode) {
        if (right instanceof cljs.core.RedNode) {
          var app = function() {
            var G__3842 = left.right;
            var G__3843 = right.left;
            return cljs.core.tree_map_append.cljs$core$IFn$_invoke$arity$2 ? cljs.core.tree_map_append.cljs$core$IFn$_invoke$arity$2(G__3842, G__3843) : cljs.core.tree_map_append.call(null, G__3842, G__3843);
          }();
          if (app instanceof cljs.core.RedNode) {
            return new cljs.core.RedNode(app.key, app.val, new cljs.core.RedNode(left.key, left.val, left.left, app.left, null), new cljs.core.RedNode(right.key, right.val, app.right, right.right, null), null);
          } else {
            return new cljs.core.RedNode(left.key, left.val, left.left, new cljs.core.RedNode(right.key, right.val, app, right.right, null), null);
          }
        } else {
          return new cljs.core.RedNode(left.key, left.val, left.left, function() {
            var G__3844 = left.right;
            var G__3845 = right;
            return cljs.core.tree_map_append.cljs$core$IFn$_invoke$arity$2 ? cljs.core.tree_map_append.cljs$core$IFn$_invoke$arity$2(G__3844, G__3845) : cljs.core.tree_map_append.call(null, G__3844, G__3845);
          }(), null);
        }
      } else {
        if (right instanceof cljs.core.RedNode) {
          return new cljs.core.RedNode(right.key, right.val, function() {
            var G__3846 = left;
            var G__3847 = right.left;
            return cljs.core.tree_map_append.cljs$core$IFn$_invoke$arity$2 ? cljs.core.tree_map_append.cljs$core$IFn$_invoke$arity$2(G__3846, G__3847) : cljs.core.tree_map_append.call(null, G__3846, G__3847);
          }(), right.right, null);
        } else {
          var app = function() {
            var G__3848 = left.right;
            var G__3849 = right.left;
            return cljs.core.tree_map_append.cljs$core$IFn$_invoke$arity$2 ? cljs.core.tree_map_append.cljs$core$IFn$_invoke$arity$2(G__3848, G__3849) : cljs.core.tree_map_append.call(null, G__3848, G__3849);
          }();
          if (app instanceof cljs.core.RedNode) {
            return new cljs.core.RedNode(app.key, app.val, new cljs.core.BlackNode(left.key, left.val, left.left, app.left, null), new cljs.core.BlackNode(right.key, right.val, app.right, right.right, null), null);
          } else {
            return cljs.core.balance_left_del(left.key, left.val, left.left, new cljs.core.BlackNode(right.key, right.val, app, right.right, null));
          }
        }
      }
    }
  }
};
cljs.core.tree_map_remove = function cljs$core$tree_map_remove(comp, tree, k, found) {
  if (!(tree == null)) {
    var c = function() {
      var G__3850 = k;
      var G__3851 = tree.key;
      return comp.cljs$core$IFn$_invoke$arity$2 ? comp.cljs$core$IFn$_invoke$arity$2(G__3850, G__3851) : comp.call(null, G__3850, G__3851);
    }();
    if (c === 0) {
      found[0] = tree;
      return cljs.core.tree_map_append(tree.left, tree.right);
    } else {
      if (c < 0) {
        var del = function() {
          var G__3852 = comp;
          var G__3853 = tree.left;
          var G__3854 = k;
          var G__3855 = found;
          return cljs.core.tree_map_remove.cljs$core$IFn$_invoke$arity$4 ? cljs.core.tree_map_remove.cljs$core$IFn$_invoke$arity$4(G__3852, G__3853, G__3854, G__3855) : cljs.core.tree_map_remove.call(null, G__3852, G__3853, G__3854, G__3855);
        }();
        if (!(del == null) || !(found[0] == null)) {
          if (tree.left instanceof cljs.core.BlackNode) {
            return cljs.core.balance_left_del(tree.key, tree.val, del, tree.right);
          } else {
            return new cljs.core.RedNode(tree.key, tree.val, del, tree.right, null);
          }
        } else {
          return null;
        }
      } else {
        var del = function() {
          var G__3856 = comp;
          var G__3857 = tree.right;
          var G__3858 = k;
          var G__3859 = found;
          return cljs.core.tree_map_remove.cljs$core$IFn$_invoke$arity$4 ? cljs.core.tree_map_remove.cljs$core$IFn$_invoke$arity$4(G__3856, G__3857, G__3858, G__3859) : cljs.core.tree_map_remove.call(null, G__3856, G__3857, G__3858, G__3859);
        }();
        if (!(del == null) || !(found[0] == null)) {
          if (tree.right instanceof cljs.core.BlackNode) {
            return cljs.core.balance_right_del(tree.key, tree.val, tree.left, del);
          } else {
            return new cljs.core.RedNode(tree.key, tree.val, tree.left, del, null);
          }
        } else {
          return null;
        }
      }
    }
  } else {
    return null;
  }
};
cljs.core.tree_map_replace = function cljs$core$tree_map_replace(comp, tree, k, v) {
  var tk = tree.key;
  var c = comp.cljs$core$IFn$_invoke$arity$2 ? comp.cljs$core$IFn$_invoke$arity$2(k, tk) : comp.call(null, k, tk);
  if (c === 0) {
    return tree.replace(tk, v, tree.left, tree.right);
  } else {
    if (c < 0) {
      return tree.replace(tk, tree.val, function() {
        var G__3860 = comp;
        var G__3861 = tree.left;
        var G__3862 = k;
        var G__3863 = v;
        return cljs.core.tree_map_replace.cljs$core$IFn$_invoke$arity$4 ? cljs.core.tree_map_replace.cljs$core$IFn$_invoke$arity$4(G__3860, G__3861, G__3862, G__3863) : cljs.core.tree_map_replace.call(null, G__3860, G__3861, G__3862, G__3863);
      }(), tree.right);
    } else {
      return tree.replace(tk, tree.val, tree.left, function() {
        var G__3864 = comp;
        var G__3865 = tree.right;
        var G__3866 = k;
        var G__3867 = v;
        return cljs.core.tree_map_replace.cljs$core$IFn$_invoke$arity$4 ? cljs.core.tree_map_replace.cljs$core$IFn$_invoke$arity$4(G__3864, G__3865, G__3866, G__3867) : cljs.core.tree_map_replace.call(null, G__3864, G__3865, G__3866, G__3867);
      }());
    }
  }
};
cljs.core.PersistentTreeMap = function(comp, tree, cnt, meta, __hash) {
  this.comp = comp;
  this.tree = tree;
  this.cnt = cnt;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 418776847;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFind$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.PersistentTreeMap.prototype.cljs$core$IFind$_find$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1.entry_at(k);
};
cljs.core.PersistentTreeMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__3869 = cljs.core.seq(coll);
  var chunk__3870 = null;
  var count__3871 = 0;
  var i__3872 = 0;
  while (true) {
    if (i__3872 < count__3871) {
      var vec__3879 = chunk__3870.cljs$core$IIndexed$_nth$arity$2(null, i__3872);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__3879, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__3879, 1, null);
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(v, k) : f.call(null, v, k);
      var G__3891 = seq__3869;
      var G__3892 = chunk__3870;
      var G__3893 = count__3871;
      var G__3894 = i__3872 + 1;
      seq__3869 = G__3891;
      chunk__3870 = G__3892;
      count__3871 = G__3893;
      i__3872 = G__3894;
      continue;
    } else {
      var temp__5735__auto__ = cljs.core.seq(seq__3869);
      if (temp__5735__auto__) {
        var seq__3869__$1 = temp__5735__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__3869__$1)) {
          var c__4556__auto__ = cljs.core.chunk_first(seq__3869__$1);
          var G__3895 = cljs.core.chunk_rest(seq__3869__$1);
          var G__3896 = c__4556__auto__;
          var G__3897 = cljs.core.count(c__4556__auto__);
          var G__3898 = 0;
          seq__3869 = G__3895;
          chunk__3870 = G__3896;
          count__3871 = G__3897;
          i__3872 = G__3898;
          continue;
        } else {
          var vec__3882 = cljs.core.first(seq__3869__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__3882, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__3882, 1, null);
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(v, k) : f.call(null, v, k);
          var G__3899 = cljs.core.next(seq__3869__$1);
          var G__3900 = null;
          var G__3901 = 0;
          var G__3902 = 0;
          seq__3869 = G__3899;
          chunk__3870 = G__3900;
          count__3871 = G__3901;
          i__3872 = G__3902;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentTreeMap.prototype.get = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentTreeMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentTreeMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.keys(coll));
};
cljs.core.PersistentTreeMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.vals(coll));
};
cljs.core.PersistentTreeMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentTreeMap.prototype.entry_at = function(k) {
  var self__ = this;
  var coll = this;
  var t = self__.tree;
  while (true) {
    if (!(t == null)) {
      var c = function() {
        var G__3885 = k;
        var G__3886 = t.key;
        return self__.comp.cljs$core$IFn$_invoke$arity$2 ? self__.comp.cljs$core$IFn$_invoke$arity$2(G__3885, G__3886) : self__.comp.call(null, G__3885, G__3886);
      }();
      if (c === 0) {
        return t;
      } else {
        if (c < 0) {
          var G__3903 = t.left;
          t = G__3903;
          continue;
        } else {
          var G__3904 = t.right;
          t = G__3904;
          continue;
        }
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.PersistentTreeMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1.cljs$core$ILookup$_lookup$arity$3(null, k, null);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = coll__$1.entry_at(k);
  if (!(n == null)) {
    return n.val;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.tree == null)) {
    return cljs.core.unreduced(cljs.core.tree_map_kv_reduce(self__.tree, f, init));
  } else {
    return init;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, self__.meta, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq(self__.tree, false, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4238__auto__ = self__.__hash;
  if (!(h__4238__auto__ == null)) {
    return h__4238__auto__;
  } else {
    var h__4238__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__4238__auto____$1;
    return h__4238__auto____$1;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map(coll__$1, other);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, null, 0, self__.meta, 0);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_remove(self__.comp, self__.tree, k, found);
  if (t == null) {
    if (cljs.core.nth.cljs$core$IFn$_invoke$arity$2(found, 0) == null) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, null, 0, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt - 1, self__.meta, null);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_add(self__.comp, self__.tree, k, v, found);
  if (t == null) {
    var found_node = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(found, 0);
    if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(v, found_node.val)) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, cljs.core.tree_map_replace(self__.comp, self__.tree, k, v), self__.cnt, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt + 1, self__.meta, null);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return !(coll__$1.entry_at(k) == null);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq(self__.tree, true, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  if (new_meta === self__.meta) {
    return coll__$1;
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, new_meta, self__.__hash);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_(entry)) {
    return coll__$1.cljs$core$IAssociative$_assoc$arity$3(null, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq(entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first(es);
        if (cljs.core.vector_QMARK_(e)) {
          var G__3905 = cljs.core._assoc(ret, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 1));
          var G__3906 = cljs.core.next(es);
          ret = G__3905;
          es = G__3906;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentTreeMap.prototype.call = function() {
  var G__3907 = null;
  var G__3907__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__3907__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__3907 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__3907__2.call(this, self__, k);
      case 3:
        return G__3907__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__3907.cljs$core$IFn$_invoke$arity$2 = G__3907__2;
  G__3907.cljs$core$IFn$_invoke$arity$3 = G__3907__3;
  return G__3907;
}();
cljs.core.PersistentTreeMap.prototype.apply = function(self__, args3868) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args3868)));
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq(self__.tree, ascending_QMARK_, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var stack = null;
    var t = self__.tree;
    while (true) {
      if (!(t == null)) {
        var c = function() {
          var G__3889 = k;
          var G__3890 = t.key;
          return self__.comp.cljs$core$IFn$_invoke$arity$2 ? self__.comp.cljs$core$IFn$_invoke$arity$2(G__3889, G__3890) : self__.comp.call(null, G__3889, G__3890);
        }();
        if (c === 0) {
          return new cljs.core.PersistentTreeMapSeq(null, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack, t), ascending_QMARK_, -1, null);
        } else {
          if (cljs.core.truth_(ascending_QMARK_)) {
            if (c < 0) {
              var G__3908 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack, t);
              var G__3909 = t.left;
              stack = G__3908;
              t = G__3909;
              continue;
            } else {
              var G__3910 = stack;
              var G__3911 = t.right;
              stack = G__3910;
              t = G__3911;
              continue;
            }
          } else {
            if (c > 0) {
              var G__3912 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack, t);
              var G__3913 = t.right;
              stack = G__3912;
              t = G__3913;
              continue;
            } else {
              var G__3914 = stack;
              var G__3915 = t.left;
              stack = G__3914;
              t = G__3915;
              continue;
            }
          }
        }
      } else {
        if (stack == null) {
          return null;
        } else {
          return new cljs.core.PersistentTreeMapSeq(null, stack, ascending_QMARK_, -1, null);
        }
      }
      break;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.key(entry);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.comp;
};
cljs.core.PersistentTreeMap.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "comp", "comp", -1462482139, null), new cljs.core.Symbol(null, "tree", "tree", 1444219499, null), new cljs.core.Symbol(null, "cnt", "cnt", 1924510325, null), new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", 
  "mutable", 875778266), true], null))], null);
};
cljs.core.PersistentTreeMap.cljs$lang$type = true;
cljs.core.PersistentTreeMap.cljs$lang$ctorStr = "cljs.core/PersistentTreeMap";
cljs.core.PersistentTreeMap.cljs$lang$ctorPrWriter = function(this__4369__auto__, writer__4370__auto__, opt__4371__auto__) {
  return cljs.core._write(writer__4370__auto__, "cljs.core/PersistentTreeMap");
};
cljs.core.__GT_PersistentTreeMap = function cljs$core$__GT_PersistentTreeMap(comp, tree, cnt, meta, __hash) {
  return new cljs.core.PersistentTreeMap(comp, tree, cnt, meta, __hash);
};
cljs.core.PersistentTreeMap.EMPTY = new cljs.core.PersistentTreeMap(cljs.core.compare, null, 0, null, cljs.core.empty_unordered_hash);
goog.object.set(cljs.core.PersistentTreeMap.prototype, cljs.core.ITER_SYMBOL, function() {
  var this__4675__auto__ = this;
  return cljs.core.es6_iterator(this__4675__auto__);
});
cljs.core.hash_map = function cljs$core$hash_map(var_args) {
  var args__4742__auto__ = [];
  var len__4736__auto___3917 = arguments.length;
  var i__4737__auto___3918 = 0;
  while (true) {
    if (i__4737__auto___3918 < len__4736__auto___3917) {
      args__4742__auto__.push(arguments[i__4737__auto___3918]);
      var G__3919 = i__4737__auto___3918 + 1;
      i__4737__auto___3918 = G__3919;
      continue;
    } else {
    }
    break;
  }
  var argseq__4743__auto__ = 0 < args__4742__auto__.length ? new cljs.core.IndexedSeq(args__4742__auto__.slice(0), 0, null) : null;
  return cljs.core.hash_map.cljs$core$IFn$_invoke$arity$variadic(argseq__4743__auto__);
};
cljs.core.hash_map.cljs$core$IFn$_invoke$arity$variadic = function(keyvals) {
  var in$ = cljs.core.seq(keyvals);
  var out = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (in$) {
      var G__3920 = cljs.core.nnext(in$);
      var G__3921 = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(out, cljs.core.first(in$), cljs.core.second(in$));
      in$ = G__3920;
      out = G__3921;
      continue;
    } else {
      return cljs.core.persistent_BANG_(out);
    }
    break;
  }
};
cljs.core.hash_map.cljs$lang$maxFixedArity = 0;
cljs.core.hash_map.cljs$lang$applyTo = function(seq3916) {
  var self__4724__auto__ = this;
  return self__4724__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq3916));
};
cljs.core.array_map = function cljs$core$array_map(var_args) {
  var args__4742__auto__ = [];
  var len__4736__auto___3923 = arguments.length;
  var i__4737__auto___3924 = 0;
  while (true) {
    if (i__4737__auto___3924 < len__4736__auto___3923) {
      args__4742__auto__.push(arguments[i__4737__auto___3924]);
      var G__3925 = i__4737__auto___3924 + 1;
      i__4737__auto___3924 = G__3925;
      continue;
    } else {
    }
    break;
  }
  var argseq__4743__auto__ = 0 < args__4742__auto__.length ? new cljs.core.IndexedSeq(args__4742__auto__.slice(0), 0, null) : null;
  return cljs.core.array_map.cljs$core$IFn$_invoke$arity$variadic(argseq__4743__auto__);
};
cljs.core.array_map.cljs$core$IFn$_invoke$arity$variadic = function(keyvals) {
  var arr = keyvals instanceof cljs.core.IndexedSeq && keyvals.i === 0 ? keyvals.arr : cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(keyvals);
  return cljs.core.PersistentArrayMap.createAsIfByAssoc(arr);
};
cljs.core.array_map.cljs$lang$maxFixedArity = 0;
cljs.core.array_map.cljs$lang$applyTo = function(seq3922) {
  var self__4724__auto__ = this;
  return self__4724__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq3922));
};
cljs.core.obj_map = function cljs$core$obj_map(var_args) {
  var args__4742__auto__ = [];
  var len__4736__auto___3929 = arguments.length;
  var i__4737__auto___3930 = 0;
  while (true) {
    if (i__4737__auto___3930 < len__4736__auto___3929) {
      args__4742__auto__.push(arguments[i__4737__auto___3930]);
      var G__3931 = i__4737__auto___3930 + 1;
      i__4737__auto___3930 = G__3931;
      continue;
    } else {
    }
    break;
  }
  var argseq__4743__auto__ = 0 < args__4742__auto__.length ? new cljs.core.IndexedSeq(args__4742__auto__.slice(0), 0, null) : null;
  return cljs.core.obj_map.cljs$core$IFn$_invoke$arity$variadic(argseq__4743__auto__);
};
cljs.core.obj_map.cljs$core$IFn$_invoke$arity$variadic = function(keyvals) {
  var ks = [];
  var obj = {};
  var kvs = cljs.core.seq(keyvals);
  while (true) {
    if (kvs) {
      ks.push(cljs.core.first(kvs));
      goog.object.set(obj, cljs.core.first(kvs), cljs.core.second(kvs));
      var G__3932 = cljs.core.nnext(kvs);
      kvs = G__3932;
      continue;
    } else {
      return cljs.core.ObjMap.fromObject(ks, obj);
    }
    break;
  }
};
cljs.core.obj_map.cljs$lang$maxFixedArity = 0;
cljs.core.obj_map.cljs$lang$applyTo = function(seq3926) {
  var self__4724__auto__ = this;
  return self__4724__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq3926));
};
cljs.core.sorted_map = function cljs$core$sorted_map(var_args) {
  var args__4742__auto__ = [];
  var len__4736__auto___3934 = arguments.length;
  var i__4737__auto___3935 = 0;
  while (true) {
    if (i__4737__auto___3935 < len__4736__auto___3934) {
      args__4742__auto__.push(arguments[i__4737__auto___3935]);
      var G__3936 = i__4737__auto___3935 + 1;
      i__4737__auto___3935 = G__3936;
      continue;
    } else {
    }
    break;
  }
  var argseq__4743__auto__ = 0 < args__4742__auto__.length ? new cljs.core.IndexedSeq(args__4742__auto__.slice(0), 0, null) : null;
  return cljs.core.sorted_map.cljs$core$IFn$_invoke$arity$variadic(argseq__4743__auto__);
};
cljs.core.sorted_map.cljs$core$IFn$_invoke$arity$variadic = function(keyvals) {
  var in$ = cljs.core.seq(keyvals);
  var out = cljs.core.PersistentTreeMap.EMPTY;
  while (true) {
    if (in$) {
      var G__3937 = cljs.core.nnext(in$);
      var G__3938 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(out, cljs.core.first(in$), cljs.core.second(in$));
      in$ = G__3937;
      out = G__3938;
      continue;
    } else {
      return out;
    }
    break;
  }
};
cljs.core.sorted_map.cljs$lang$maxFixedArity = 0;
cljs.core.sorted_map.cljs$lang$applyTo = function(seq3933) {
  var self__4724__auto__ = this;
  return self__4724__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq3933));
};
cljs.core.sorted_map_by = function cljs$core$sorted_map_by(var_args) {
  var args__4742__auto__ = [];
  var len__4736__auto___3941 = arguments.length;
  var i__4737__auto___3942 = 0;
  while (true) {
    if (i__4737__auto___3942 < len__4736__auto___3941) {
      args__4742__auto__.push(arguments[i__4737__auto___3942]);
      var G__3943 = i__4737__auto___3942 + 1;
      i__4737__auto___3942 = G__3943;
      continue;
    } else {
    }
    break;
  }
  var argseq__4743__auto__ = 1 < args__4742__auto__.length ? new cljs.core.IndexedSeq(args__4742__auto__.slice(1), 0, null) : null;
  return cljs.core.sorted_map_by.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__4743__auto__);
};
cljs.core.sorted_map_by.cljs$core$IFn$_invoke$arity$variadic = function(comparator, keyvals) {
  var in$ = cljs.core.seq(keyvals);
  var out = new cljs.core.PersistentTreeMap(cljs.core.fn__GT_comparator(comparator), null, 0, null, 0);
  while (true) {
    if (in$) {
      var G__3944 = cljs.core.nnext(in$);
      var G__3945 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(out, cljs.core.first(in$), cljs.core.second(in$));
      in$ = G__3944;
      out = G__3945;
      continue;
    } else {
      return out;
    }
    break;
  }
};
cljs.core.sorted_map_by.cljs$lang$maxFixedArity = 1;
cljs.core.sorted_map_by.cljs$lang$applyTo = function(seq3939) {
  var G__3940 = cljs.core.first(seq3939);
  var seq3939__$1 = cljs.core.next(seq3939);
  var self__4723__auto__ = this;
  return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__3940, seq3939__$1);
};
cljs.core.KeySeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.KeySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.KeySeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.KeySeq.prototype.indexOf = function() {
  var G__3948 = null;
  var G__3948__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
  };
  var G__3948__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__3948 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__3948__1.call(this, x);
      case 2:
        return G__3948__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__3948.cljs$core$IFn$_invoke$arity$1 = G__3948__1;
  G__3948.cljs$core$IFn$_invoke$arity$2 = G__3948__2;
  return G__3948;
}();
cljs.core.KeySeq.prototype.lastIndexOf = function() {
  var G__3949 = null;
  var G__3949__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, cljs.core.count(coll));
  };
  var G__3949__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__3949 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__3949__1.call(this, x);
      case 2:
        return G__3949__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__3949.cljs$core$IFn$_invoke$arity$1 = G__3949__1;
  G__3949.cljs$core$IFn$_invoke$arity$2 = G__3949__2;
  return G__3949;
}();
cljs.core.KeySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.KeySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = (!(self__.mseq == null) ? self__.mseq.cljs$lang$protocol_mask$partition0$ & 128 || cljs.core.PROTOCOL_SENTINEL === self__.mseq.cljs$core$INext$ ? true : !self__.mseq.cljs$lang$protocol_mask$partition0$ ? cljs.core.native_satisfies_QMARK_(cljs.core.INext, self__.mseq) : false : cljs.core.native_satisfies_QMARK_(cljs.core.INext, self__.mseq)) ? self__.mseq.cljs$core$INext$_next$arity$1(null) : cljs.core.next(self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.KeySeq(nseq, null);
  }
};
cljs.core.KeySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.KeySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = self__.mseq.cljs$core$ISeq$_first$arity$1(null);
  return me.cljs$core$IMapEntry$_key$arity$1(null);
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = (!(self__.mseq == null) ? self__.mseq.cljs$lang$protocol_mask$partition0$ & 128 || cljs.core.PROTOCOL_SENTINEL === self__.mseq.cljs$core$INext$ ? true : !self__.mseq.cljs$lang$protocol_mask$partition0$ ? cljs.core.native_satisfies_QMARK_(cljs.core.INext, self__.mseq) : false : cljs.core.native_satisfies_QMARK_(cljs.core.INext, self__.mseq)) ? self__.mseq.cljs$core$INext$_next$arity$1(null) : cljs.core.next(self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.KeySeq(nseq, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.KeySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.KeySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  if (new_meta === self__._meta) {
    return coll__$1;
  } else {
    return new cljs.core.KeySeq(self__.mseq, new_meta);
  }
};
cljs.core.KeySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.KeySeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "mseq", "mseq", 1602647196, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Symbol(null, "not-native", "not-native", -236392494, null)], null)), new cljs.core.Symbol(null, "_meta", "_meta", -1716892533, null)], null);
};
cljs.core.KeySeq.cljs$lang$type = true;
cljs.core.KeySeq.cljs$lang$ctorStr = "cljs.core/KeySeq";
cljs.core.KeySeq.cljs$lang$ctorPrWriter = function(this__4369__auto__, writer__4370__auto__, opt__4371__auto__) {
  return cljs.core._write(writer__4370__auto__, "cljs.core/KeySeq");
};
cljs.core.__GT_KeySeq = function cljs$core$__GT_KeySeq(mseq, _meta) {
  return new cljs.core.KeySeq(mseq, _meta);
};
goog.object.set(cljs.core.KeySeq.prototype, cljs.core.ITER_SYMBOL, function() {
  var this__4675__auto__ = this;
  return cljs.core.es6_iterator(this__4675__auto__);
});
cljs.core.keys = function cljs$core$keys(map) {
  var temp__5735__auto__ = cljs.core.seq(map);
  if (temp__5735__auto__) {
    var mseq = temp__5735__auto__;
    return new cljs.core.KeySeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.key = function cljs$core$key(map_entry) {
  return cljs.core._key(map_entry);
};
cljs.core.ValSeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.ValSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ValSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ValSeq.prototype.indexOf = function() {
  var G__3952 = null;
  var G__3952__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
  };
  var G__3952__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__3952 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__3952__1.call(this, x);
      case 2:
        return G__3952__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__3952.cljs$core$IFn$_invoke$arity$1 = G__3952__1;
  G__3952.cljs$core$IFn$_invoke$arity$2 = G__3952__2;
  return G__3952;
}();
cljs.core.ValSeq.prototype.lastIndexOf = function() {
  var G__3953 = null;
  var G__3953__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, cljs.core.count(coll));
  };
  var G__3953__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__3953 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__3953__1.call(this, x);
      case 2:
        return G__3953__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__3953.cljs$core$IFn$_invoke$arity$1 = G__3953__1;
  G__3953.cljs$core$IFn$_invoke$arity$2 = G__3953__2;
  return G__3953;
}();
cljs.core.ValSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.ValSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = (!(self__.mseq == null) ? self__.mseq.cljs$lang$protocol_mask$partition0$ & 128 || cljs.core.PROTOCOL_SENTINEL === self__.mseq.cljs$core$INext$ ? true : !self__.mseq.cljs$lang$protocol_mask$partition0$ ? cljs.core.native_satisfies_QMARK_(cljs.core.INext, self__.mseq) : false : cljs.core.native_satisfies_QMARK_(cljs.core.INext, self__.mseq)) ? self__.mseq.cljs$core$INext$_next$arity$1(null) : cljs.core.next(self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.ValSeq(nseq, null);
  }
};
cljs.core.ValSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.ValSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = self__.mseq.cljs$core$ISeq$_first$arity$1(null);
  return me.cljs$core$IMapEntry$_val$arity$1(null);
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = (!(self__.mseq == null) ? self__.mseq.cljs$lang$protocol_mask$partition0$ & 128 || cljs.core.PROTOCOL_SENTINEL === self__.mseq.cljs$core$INext$ ? true : !self__.mseq.cljs$lang$protocol_mask$partition0$ ? cljs.core.native_satisfies_QMARK_(cljs.core.INext, self__.mseq) : false : cljs.core.native_satisfies_QMARK_(cljs.core.INext, self__.mseq)) ? self__.mseq.cljs$core$INext$_next$arity$1(null) : cljs.core.next(self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.ValSeq(nseq, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.ValSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ValSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  if (new_meta === self__._meta) {
    return coll__$1;
  } else {
    return new cljs.core.ValSeq(self__.mseq, new_meta);
  }
};
cljs.core.ValSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.ValSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "mseq", "mseq", 1602647196, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Symbol(null, "not-native", "not-native", -236392494, null)], null)), new cljs.core.Symbol(null, "_meta", "_meta", -1716892533, null)], null);
};
cljs.core.ValSeq.cljs$lang$type = true;
cljs.core.ValSeq.cljs$lang$ctorStr = "cljs.core/ValSeq";
cljs.core.ValSeq.cljs$lang$ctorPrWriter = function(this__4369__auto__, writer__4370__auto__, opt__4371__auto__) {
  return cljs.core._write(writer__4370__auto__, "cljs.core/ValSeq");
};
cljs.core.__GT_ValSeq = function cljs$core$__GT_ValSeq(mseq, _meta) {
  return new cljs.core.ValSeq(mseq, _meta);
};
goog.object.set(cljs.core.ValSeq.prototype, cljs.core.ITER_SYMBOL, function() {
  var this__4675__auto__ = this;
  return cljs.core.es6_iterator(this__4675__auto__);
});
cljs.core.vals = function cljs$core$vals(map) {
  var temp__5735__auto__ = cljs.core.seq(map);
  if (temp__5735__auto__) {
    var mseq = temp__5735__auto__;
    return new cljs.core.ValSeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.val = function cljs$core$val(map_entry) {
  return cljs.core._val(map_entry);
};
cljs.core.merge = function cljs$core$merge(var_args) {
  var args__4742__auto__ = [];
  var len__4736__auto___3957 = arguments.length;
  var i__4737__auto___3958 = 0;
  while (true) {
    if (i__4737__auto___3958 < len__4736__auto___3957) {
      args__4742__auto__.push(arguments[i__4737__auto___3958]);
      var G__3959 = i__4737__auto___3958 + 1;
      i__4737__auto___3958 = G__3959;
      continue;
    } else {
    }
    break;
  }
  var argseq__4743__auto__ = 0 < args__4742__auto__.length ? new cljs.core.IndexedSeq(args__4742__auto__.slice(0), 0, null) : null;
  return cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(argseq__4743__auto__);
};
cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic = function(maps) {
  if (cljs.core.truth_(cljs.core.some(cljs.core.identity, maps))) {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$2(function(p1__3954_SHARP_, p2__3955_SHARP_) {
      return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(function() {
        var or__4126__auto__ = p1__3954_SHARP_;
        if (cljs.core.truth_(or__4126__auto__)) {
          return or__4126__auto__;
        } else {
          return cljs.core.PersistentArrayMap.EMPTY;
        }
      }(), p2__3955_SHARP_);
    }, maps);
  } else {
    return null;
  }
};
cljs.core.merge.cljs$lang$maxFixedArity = 0;
cljs.core.merge.cljs$lang$applyTo = function(seq3956) {
  var self__4724__auto__ = this;
  return self__4724__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq3956));
};
cljs.core.merge_with = function cljs$core$merge_with(var_args) {
  var args__4742__auto__ = [];
  var len__4736__auto___3964 = arguments.length;
  var i__4737__auto___3965 = 0;
  while (true) {
    if (i__4737__auto___3965 < len__4736__auto___3964) {
      args__4742__auto__.push(arguments[i__4737__auto___3965]);
      var G__3966 = i__4737__auto___3965 + 1;
      i__4737__auto___3965 = G__3966;
      continue;
    } else {
    }
    break;
  }
  var argseq__4743__auto__ = 1 < args__4742__auto__.length ? new cljs.core.IndexedSeq(args__4742__auto__.slice(1), 0, null) : null;
  return cljs.core.merge_with.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__4743__auto__);
};
cljs.core.merge_with.cljs$core$IFn$_invoke$arity$variadic = function(f, maps) {
  if (cljs.core.truth_(cljs.core.some(cljs.core.identity, maps))) {
    var merge_entry = function(m, e) {
      var k = cljs.core.key(e);
      var v = cljs.core.val(e);
      if (cljs.core.contains_QMARK_(m, k)) {
        return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
          var G__3962 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
          var G__3963 = v;
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__3962, G__3963) : f.call(null, G__3962, G__3963);
        }());
      } else {
        return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, v);
      }
    };
    var merge2 = function(m1, m2) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(merge_entry, function() {
        var or__4126__auto__ = m1;
        if (cljs.core.truth_(or__4126__auto__)) {
          return or__4126__auto__;
        } else {
          return cljs.core.PersistentArrayMap.EMPTY;
        }
      }(), cljs.core.seq(m2));
    };
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$2(merge2, maps);
  } else {
    return null;
  }
};
cljs.core.merge_with.cljs$lang$maxFixedArity = 1;
cljs.core.merge_with.cljs$lang$applyTo = function(seq3960) {
  var G__3961 = cljs.core.first(seq3960);
  var seq3960__$1 = cljs.core.next(seq3960);
  var self__4723__auto__ = this;
  return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__3961, seq3960__$1);
};
cljs.core.select_keys = function cljs$core$select_keys(map, keyseq) {
  var ret = cljs.core.PersistentArrayMap.EMPTY;
  var keys = cljs.core.seq(keyseq);
  while (true) {
    if (keys) {
      var key = cljs.core.first(keys);
      var entry = cljs.core.get.cljs$core$IFn$_invoke$arity$3(map, key, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", -1572889185));
      var G__3967 = cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(entry, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", -1572889185)) ? cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(ret, key, entry) : ret;
      var G__3968 = cljs.core.next(keys);
      ret = G__3967;
      keys = G__3968;
      continue;
    } else {
      return cljs.core._with_meta(ret, cljs.core.meta(map));
    }
    break;
  }
};
cljs.core.HashSetIter = function(iter) {
  this.iter = iter;
};
cljs.core.HashSetIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.iter.hasNext();
};
cljs.core.HashSetIter.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (self__.iter.hasNext()) {
    return self__.iter.next().key;
  } else {
    throw new Error("No such element");
  }
};
cljs.core.HashSetIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.HashSetIter.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "iter", "iter", -1346195486, null)], null);
};
cljs.core.HashSetIter.cljs$lang$type = true;
cljs.core.HashSetIter.cljs$lang$ctorStr = "cljs.core/HashSetIter";
cljs.core.HashSetIter.cljs$lang$ctorPrWriter = function(this__4369__auto__, writer__4370__auto__, opt__4371__auto__) {
  return cljs.core._write(writer__4370__auto__, "cljs.core/HashSetIter");
};
cljs.core.__GT_HashSetIter = function cljs$core$__GT_HashSetIter(iter) {
  return new cljs.core.HashSetIter(iter);
};
cljs.core.PersistentHashSet = function(meta, hash_map, __hash) {
  this.meta = meta;
  this.hash_map = hash_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 15077647;
  this.cljs$lang$protocol_mask$partition1$ = 139268;
};
cljs.core.PersistentHashSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentHashSet.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentHashSet.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentHashSet.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_set_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentHashSet.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentHashSet.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentHashSet.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__3972 = cljs.core.seq(coll);
  var chunk__3973 = null;
  var count__3974 = 0;
  var i__3975 = 0;
  while (true) {
    if (i__3975 < count__3974) {
      var vec__3982 = chunk__3973.cljs$core$IIndexed$_nth$arity$2(null, i__3975);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__3982, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__3982, 1, null);
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(v, k) : f.call(null, v, k);
      var G__3991 = seq__3972;
      var G__3992 = chunk__3973;
      var G__3993 = count__3974;
      var G__3994 = i__3975 + 1;
      seq__3972 = G__3991;
      chunk__3973 = G__3992;
      count__3974 = G__3993;
      i__3975 = G__3994;
      continue;
    } else {
      var temp__5735__auto__ = cljs.core.seq(seq__3972);
      if (temp__5735__auto__) {
        var seq__3972__$1 = temp__5735__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__3972__$1)) {
          var c__4556__auto__ = cljs.core.chunk_first(seq__3972__$1);
          var G__3995 = cljs.core.chunk_rest(seq__3972__$1);
          var G__3996 = c__4556__auto__;
          var G__3997 = cljs.core.count(c__4556__auto__);
          var G__3998 = 0;
          seq__3972 = G__3995;
          chunk__3973 = G__3996;
          count__3974 = G__3997;
          i__3975 = G__3998;
          continue;
        } else {
          var vec__3985 = cljs.core.first(seq__3972__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__3985, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__3985, 1, null);
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(v, k) : f.call(null, v, k);
          var G__3999 = cljs.core.next(seq__3972__$1);
          var G__4000 = null;
          var G__4001 = 0;
          var G__4002 = 0;
          seq__3972 = G__3999;
          chunk__3973 = G__4000;
          count__3974 = G__4001;
          i__3975 = G__4002;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1.cljs$core$ILookup$_lookup$arity$3(null, v, null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var temp__5733__auto__ = cljs.core._find(self__.hash_map, v);
  if (cljs.core.truth_(temp__5733__auto__)) {
    var entry = temp__5733__auto__;
    return cljs.core.key(entry);
  } else {
    return not_found;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$IIterable$_iterator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.HashSetIter(cljs.core._iterator(self__.hash_map));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._count(self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4238__auto__ = self__.__hash;
  if (!(h__4238__auto__ == null)) {
    return h__4238__auto__;
  } else {
    var h__4238__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__4238__auto____$1;
    return h__4238__auto____$1;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.set_QMARK_(other)) {
    if (cljs.core.count(coll__$1) === cljs.core.count(other)) {
      try {
        return cljs.core.reduce_kv(function(p1__3970_SHARP_, p2__3969_SHARP_) {
          var or__4126__auto__ = cljs.core.contains_QMARK_(other, p2__3969_SHARP_);
          if (or__4126__auto__) {
            return or__4126__auto__;
          } else {
            return cljs.core.reduced(false);
          }
        }, true, self__.hash_map);
      } catch (e3990) {
        if (e3990 instanceof Error) {
          var ex = e3990;
          return false;
        } else {
          throw e3990;
        }
      }
    } else {
      return false;
    }
  } else {
    return false;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashSet(cljs.core._as_transient(self__.hash_map));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta(cljs.core.PersistentHashSet.EMPTY, self__.meta);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core._dissoc(self__.hash_map, v), null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys(self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  if (new_meta === self__.meta) {
    return coll__$1;
  } else {
    return new cljs.core.PersistentHashSet(new_meta, self__.hash_map, self__.__hash);
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.hash_map, o, null), null);
};
cljs.core.PersistentHashSet.prototype.call = function() {
  var G__4003 = null;
  var G__4003__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__4003__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__4003 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__4003__2.call(this, self__, k);
      case 3:
        return G__4003__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__4003.cljs$core$IFn$_invoke$arity$2 = G__4003__2;
  G__4003.cljs$core$IFn$_invoke$arity$3 = G__4003__3;
  return G__4003;
}();
cljs.core.PersistentHashSet.prototype.apply = function(self__, args3971) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args3971)));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentHashSet.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "hash-map", "hash-map", -439030950, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.PersistentHashSet.cljs$lang$type = true;
cljs.core.PersistentHashSet.cljs$lang$ctorStr = "cljs.core/PersistentHashSet";
cljs.core.PersistentHashSet.cljs$lang$ctorPrWriter = function(this__4369__auto__, writer__4370__auto__, opt__4371__auto__) {
  return cljs.core._write(writer__4370__auto__, "cljs.core/PersistentHashSet");
};
cljs.core.__GT_PersistentHashSet = function cljs$core$__GT_PersistentHashSet(meta, hash_map, __hash) {
  return new cljs.core.PersistentHashSet(meta, hash_map, __hash);
};
cljs.core.PersistentHashSet.EMPTY = new cljs.core.PersistentHashSet(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.empty_unordered_hash);
cljs.core.PersistentHashSet.fromArray = function(items, no_clone) {
  var len = items.length;
  if (len <= cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
    var arr = no_clone ? items : cljs.core.aclone(items);
    var i = 0;
    var out = cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY);
    while (true) {
      if (i < len) {
        var G__4004 = i + 1;
        var G__4005 = cljs.core._assoc_BANG_(out, items[i], null);
        i = G__4004;
        out = G__4005;
        continue;
      } else {
        return new cljs.core.PersistentHashSet(null, cljs.core._persistent_BANG_(out), null);
      }
      break;
    }
  } else {
    var i = 0;
    var out = cljs.core.transient$(cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < len) {
        var G__4006 = i + 1;
        var G__4007 = cljs.core._conj_BANG_(out, items[i]);
        i = G__4006;
        out = G__4007;
        continue;
      } else {
        return cljs.core._persistent_BANG_(out);
      }
      break;
    }
  }
};
cljs.core.PersistentHashSet.createWithCheck = function(items) {
  var len = items.length;
  var t = cljs.core._as_transient(cljs.core.PersistentHashSet.EMPTY);
  var n__4613__auto___4008 = len;
  var i_4009 = 0;
  while (true) {
    if (i_4009 < n__4613__auto___4008) {
      cljs.core._conj_BANG_(t, items[i_4009]);
      if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.count(t), i_4009 + 1)) {
      } else {
        throw new Error(["Duplicate key: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(items[i_4009])].join(""));
      }
      var G__4010 = i_4009 + 1;
      i_4009 = G__4010;
      continue;
    } else {
    }
    break;
  }
  return cljs.core._persistent_BANG_(t);
};
cljs.core.PersistentHashSet.createAsIfByAssoc = function(items) {
  var len = items.length;
  var t = cljs.core._as_transient(cljs.core.PersistentHashSet.EMPTY);
  var n__4613__auto___4011 = len;
  var i_4012 = 0;
  while (true) {
    if (i_4012 < n__4613__auto___4011) {
      cljs.core._conj_BANG_(t, items[i_4012]);
      var G__4013 = i_4012 + 1;
      i_4012 = G__4013;
      continue;
    } else {
    }
    break;
  }
  return cljs.core._persistent_BANG_(t);
};
goog.object.set(cljs.core.PersistentHashSet.prototype, cljs.core.ITER_SYMBOL, function() {
  var this__4675__auto__ = this;
  return cljs.core.es6_iterator(this__4675__auto__);
});
cljs.core.TransientHashSet = function(transient_map) {
  this.transient_map = transient_map;
  this.cljs$lang$protocol_mask$partition1$ = 136;
  this.cljs$lang$protocol_mask$partition0$ = 259;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(self__.transient_map, o, null);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return new cljs.core.PersistentHashSet(null, cljs.core.persistent_BANG_(self__.transient_map), null);
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientSet$_disjoin_BANG_$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$2(self__.transient_map, v);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core.count(self__.transient_map);
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.cljs$core$ILookup$_lookup$arity$3(null, v, null);
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, v, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return v;
  }
};
cljs.core.TransientHashSet.prototype.call = function() {
  var G__4015 = null;
  var G__4015__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return null;
    } else {
      return k;
    }
  };
  var G__4015__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return not_found;
    } else {
      return k;
    }
  };
  G__4015 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__4015__2.call(this, self__, k);
      case 3:
        return G__4015__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__4015.cljs$core$IFn$_invoke$arity$2 = G__4015__2;
  G__4015.cljs$core$IFn$_invoke$arity$3 = G__4015__3;
  return G__4015;
}();
cljs.core.TransientHashSet.prototype.apply = function(self__, args4014) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args4014)));
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return null;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "transient-map", "transient-map", 351764893, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.TransientHashSet.cljs$lang$type = true;
cljs.core.TransientHashSet.cljs$lang$ctorStr = "cljs.core/TransientHashSet";
cljs.core.TransientHashSet.cljs$lang$ctorPrWriter = function(this__4369__auto__, writer__4370__auto__, opt__4371__auto__) {
  return cljs.core._write(writer__4370__auto__, "cljs.core/TransientHashSet");
};
cljs.core.__GT_TransientHashSet = function cljs$core$__GT_TransientHashSet(transient_map) {
  return new cljs.core.TransientHashSet(transient_map);
};
cljs.core.PersistentTreeSet = function(meta, tree_map, __hash) {
  this.meta = meta;
  this.tree_map = tree_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 417730831;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentTreeSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentTreeSet.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentTreeSet.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentTreeSet.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_set_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentTreeSet.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentTreeSet.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentTreeSet.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__4019 = cljs.core.seq(coll);
  var chunk__4020 = null;
  var count__4021 = 0;
  var i__4022 = 0;
  while (true) {
    if (i__4022 < count__4021) {
      var vec__4029 = chunk__4020.cljs$core$IIndexed$_nth$arity$2(null, i__4022);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__4029, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__4029, 1, null);
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(v, k) : f.call(null, v, k);
      var G__4038 = seq__4019;
      var G__4039 = chunk__4020;
      var G__4040 = count__4021;
      var G__4041 = i__4022 + 1;
      seq__4019 = G__4038;
      chunk__4020 = G__4039;
      count__4021 = G__4040;
      i__4022 = G__4041;
      continue;
    } else {
      var temp__5735__auto__ = cljs.core.seq(seq__4019);
      if (temp__5735__auto__) {
        var seq__4019__$1 = temp__5735__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__4019__$1)) {
          var c__4556__auto__ = cljs.core.chunk_first(seq__4019__$1);
          var G__4042 = cljs.core.chunk_rest(seq__4019__$1);
          var G__4043 = c__4556__auto__;
          var G__4044 = cljs.core.count(c__4556__auto__);
          var G__4045 = 0;
          seq__4019 = G__4042;
          chunk__4020 = G__4043;
          count__4021 = G__4044;
          i__4022 = G__4045;
          continue;
        } else {
          var vec__4032 = cljs.core.first(seq__4019__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__4032, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__4032, 1, null);
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(v, k) : f.call(null, v, k);
          var G__4046 = cljs.core.next(seq__4019__$1);
          var G__4047 = null;
          var G__4048 = 0;
          var G__4049 = 0;
          seq__4019 = G__4046;
          chunk__4020 = G__4047;
          count__4021 = G__4048;
          i__4022 = G__4049;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1.cljs$core$ILookup$_lookup$arity$3(null, v, null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = self__.tree_map.entry_at(v);
  if (!(n == null)) {
    return n.key;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.count(self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.count(self__.tree_map) > 0) {
    return cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.key, cljs.core.rseq(self__.tree_map));
  } else {
    return null;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4238__auto__ = self__.__hash;
  if (!(h__4238__auto__ == null)) {
    return h__4238__auto__;
  } else {
    var h__4238__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__4238__auto____$1;
    return h__4238__auto____$1;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.set_QMARK_(other)) {
    if (cljs.core.count(coll__$1) === cljs.core.count(other)) {
      try {
        return cljs.core.reduce_kv(function(p1__4017_SHARP_, p2__4016_SHARP_) {
          var or__4126__auto__ = cljs.core.contains_QMARK_(other, p2__4016_SHARP_);
          if (or__4126__auto__) {
            return or__4126__auto__;
          } else {
            return cljs.core.reduced(false);
          }
        }, true, self__.tree_map);
      } catch (e4037) {
        if (e4037 instanceof Error) {
          var ex = e4037;
          return false;
        } else {
          throw e4037;
        }
      }
    } else {
      return false;
    }
  } else {
    return false;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core._empty(self__.tree_map), 0);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(self__.tree_map, v), null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys(self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  if (new_meta === self__.meta) {
    return coll__$1;
  } else {
    return new cljs.core.PersistentTreeSet(new_meta, self__.tree_map, self__.__hash);
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.tree_map, o, null), null);
};
cljs.core.PersistentTreeSet.prototype.call = function() {
  var G__4050 = null;
  var G__4050__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__4050__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__4050 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__4050__2.call(this, self__, k);
      case 3:
        return G__4050__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__4050.cljs$core$IFn$_invoke$arity$2 = G__4050__2;
  G__4050.cljs$core$IFn$_invoke$arity$3 = G__4050__3;
  return G__4050;
}();
cljs.core.PersistentTreeSet.prototype.apply = function(self__, args4018) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args4018)));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.key, cljs.core._sorted_seq(self__.tree_map, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.key, cljs.core._sorted_seq_from(self__.tree_map, k, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  return entry;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._comparator(self__.tree_map);
};
cljs.core.PersistentTreeSet.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "tree-map", "tree-map", 1373073049, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.PersistentTreeSet.cljs$lang$type = true;
cljs.core.PersistentTreeSet.cljs$lang$ctorStr = "cljs.core/PersistentTreeSet";
cljs.core.PersistentTreeSet.cljs$lang$ctorPrWriter = function(this__4369__auto__, writer__4370__auto__, opt__4371__auto__) {
  return cljs.core._write(writer__4370__auto__, "cljs.core/PersistentTreeSet");
};
cljs.core.__GT_PersistentTreeSet = function cljs$core$__GT_PersistentTreeSet(meta, tree_map, __hash) {
  return new cljs.core.PersistentTreeSet(meta, tree_map, __hash);
};
cljs.core.PersistentTreeSet.EMPTY = new cljs.core.PersistentTreeSet(null, cljs.core.PersistentTreeMap.EMPTY, cljs.core.empty_unordered_hash);
goog.object.set(cljs.core.PersistentTreeSet.prototype, cljs.core.ITER_SYMBOL, function() {
  var this__4675__auto__ = this;
  return cljs.core.es6_iterator(this__4675__auto__);
});
cljs.core.set_from_indexed_seq = function cljs$core$set_from_indexed_seq(iseq) {
  var arr = iseq.arr;
  var ret = function() {
    var a__4610__auto__ = arr;
    var l__4611__auto__ = a__4610__auto__.length;
    var i = 0;
    var res = cljs.core._as_transient(cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < l__4611__auto__) {
        var G__4051 = i + 1;
        var G__4052 = cljs.core._conj_BANG_(res, arr[i]);
        i = G__4051;
        res = G__4052;
        continue;
      } else {
        return res;
      }
      break;
    }
  }();
  return ret.cljs$core$ITransientCollection$_persistent_BANG_$arity$1(null);
};
cljs.core.set = function cljs$core$set(coll) {
  if (cljs.core.set_QMARK_(coll)) {
    return cljs.core.with_meta(coll, null);
  } else {
    var in$ = cljs.core.seq(coll);
    if (in$ == null) {
      return cljs.core.PersistentHashSet.EMPTY;
    } else {
      if (in$ instanceof cljs.core.IndexedSeq && in$.i === 0) {
        return cljs.core.PersistentHashSet.createAsIfByAssoc(in$.arr);
      } else {
        var in$__$1 = in$;
        var out = cljs.core._as_transient(cljs.core.PersistentHashSet.EMPTY);
        while (true) {
          if (!(in$__$1 == null)) {
            var G__4053 = cljs.core.next(in$__$1);
            var G__4054 = cljs.core._conj_BANG_(out, cljs.core._first(in$__$1));
            in$__$1 = G__4053;
            out = G__4054;
            continue;
          } else {
            return cljs.core.persistent_BANG_(out);
          }
          break;
        }
      }
    }
  }
};
cljs.core.hash_set = function cljs$core$hash_set(var_args) {
  var G__4057 = arguments.length;
  switch(G__4057) {
    case 0:
      return cljs.core.hash_set.cljs$core$IFn$_invoke$arity$0();
      break;
    default:
      var args_arr__4757__auto__ = [];
      var len__4736__auto___4059 = arguments.length;
      var i__4737__auto___4060 = 0;
      while (true) {
        if (i__4737__auto___4060 < len__4736__auto___4059) {
          args_arr__4757__auto__.push(arguments[i__4737__auto___4060]);
          var G__4061 = i__4737__auto___4060 + 1;
          i__4737__auto___4060 = G__4061;
          continue;
        } else {
        }
        break;
      }
      var argseq__4758__auto__ = new cljs.core.IndexedSeq(args_arr__4757__auto__.slice(0), 0, null);
      return cljs.core.hash_set.cljs$core$IFn$_invoke$arity$variadic(argseq__4758__auto__);
  }
};
cljs.core.hash_set.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.PersistentHashSet.EMPTY;
};
cljs.core.hash_set.cljs$core$IFn$_invoke$arity$variadic = function(keys) {
  return cljs.core.set(keys);
};
cljs.core.hash_set.cljs$lang$applyTo = function(seq4056) {
  var self__4724__auto__ = this;
  return self__4724__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq4056));
};
cljs.core.hash_set.cljs$lang$maxFixedArity = 0;
cljs.core.sorted_set = function cljs$core$sorted_set(var_args) {
  var args__4742__auto__ = [];
  var len__4736__auto___4063 = arguments.length;
  var i__4737__auto___4064 = 0;
  while (true) {
    if (i__4737__auto___4064 < len__4736__auto___4063) {
      args__4742__auto__.push(arguments[i__4737__auto___4064]);
      var G__4065 = i__4737__auto___4064 + 1;
      i__4737__auto___4064 = G__4065;
      continue;
    } else {
    }
    break;
  }
  var argseq__4743__auto__ = 0 < args__4742__auto__.length ? new cljs.core.IndexedSeq(args__4742__auto__.slice(0), 0, null) : null;
  return cljs.core.sorted_set.cljs$core$IFn$_invoke$arity$variadic(argseq__4743__auto__);
};
cljs.core.sorted_set.cljs$core$IFn$_invoke$arity$variadic = function(keys) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj, cljs.core.PersistentTreeSet.EMPTY, keys);
};
cljs.core.sorted_set.cljs$lang$maxFixedArity = 0;
cljs.core.sorted_set.cljs$lang$applyTo = function(seq4062) {
  var self__4724__auto__ = this;
  return self__4724__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq4062));
};
cljs.core.sorted_set_by = function cljs$core$sorted_set_by(var_args) {
  var args__4742__auto__ = [];
  var len__4736__auto___4068 = arguments.length;
  var i__4737__auto___4069 = 0;
  while (true) {
    if (i__4737__auto___4069 < len__4736__auto___4068) {
      args__4742__auto__.push(arguments[i__4737__auto___4069]);
      var G__4070 = i__4737__auto___4069 + 1;
      i__4737__auto___4069 = G__4070;
      continue;
    } else {
    }
    break;
  }
  var argseq__4743__auto__ = 1 < args__4742__auto__.length ? new cljs.core.IndexedSeq(args__4742__auto__.slice(1), 0, null) : null;
  return cljs.core.sorted_set_by.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__4743__auto__);
};
cljs.core.sorted_set_by.cljs$core$IFn$_invoke$arity$variadic = function(comparator, keys) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj, new cljs.core.PersistentTreeSet(null, cljs.core.sorted_map_by(comparator), 0), keys);
};
cljs.core.sorted_set_by.cljs$lang$maxFixedArity = 1;
cljs.core.sorted_set_by.cljs$lang$applyTo = function(seq4066) {
  var G__4067 = cljs.core.first(seq4066);
  var seq4066__$1 = cljs.core.next(seq4066);
  var self__4723__auto__ = this;
  return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__4067, seq4066__$1);
};
cljs.core.replace = function cljs$core$replace(var_args) {
  var G__4074 = arguments.length;
  switch(G__4074) {
    case 1:
      return cljs.core.replace.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.replace.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
cljs.core.replace.cljs$core$IFn$_invoke$arity$1 = function(smap) {
  return cljs.core.map.cljs$core$IFn$_invoke$arity$1(function(p1__4071_SHARP_) {
    var temp__5733__auto__ = cljs.core.find(smap, p1__4071_SHARP_);
    if (cljs.core.truth_(temp__5733__auto__)) {
      var e = temp__5733__auto__;
      return cljs.core.val(e);
    } else {
      return p1__4071_SHARP_;
    }
  });
};
cljs.core.replace.cljs$core$IFn$_invoke$arity$2 = function(smap, coll) {
  if (cljs.core.vector_QMARK_(coll)) {
    var n = cljs.core.count(coll);
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(v, i) {
      var temp__5733__auto__ = cljs.core.find(smap, cljs.core.nth.cljs$core$IFn$_invoke$arity$2(v, i));
      if (cljs.core.truth_(temp__5733__auto__)) {
        var e = temp__5733__auto__;
        return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(v, i, cljs.core.second(e));
      } else {
        return v;
      }
    }, coll, cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.iterate(cljs.core.inc, 0)));
  } else {
    return cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(p1__4072_SHARP_) {
      var temp__5733__auto__ = cljs.core.find(smap, p1__4072_SHARP_);
      if (cljs.core.truth_(temp__5733__auto__)) {
        var e = temp__5733__auto__;
        return cljs.core.second(e);
      } else {
        return p1__4072_SHARP_;
      }
    }, coll);
  }
};
cljs.core.replace.cljs$lang$maxFixedArity = 2;
cljs.core.distinct = function cljs$core$distinct(var_args) {
  var G__4077 = arguments.length;
  switch(G__4077) {
    case 0:
      return cljs.core.distinct.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.distinct.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
cljs.core.distinct.cljs$core$IFn$_invoke$arity$0 = function() {
  return function(rf) {
    var seen = cljs.core.volatile_BANG_(cljs.core.PersistentHashSet.EMPTY);
    return function() {
      var G__4088 = null;
      var G__4088__0 = function() {
        return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
      };
      var G__4088__1 = function(result) {
        return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
      };
      var G__4088__2 = function(result, input) {
        if (cljs.core.contains_QMARK_(cljs.core.deref(seen), input)) {
          return result;
        } else {
          seen.cljs$core$IVolatile$_vreset_BANG_$arity$2(null, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(seen.cljs$core$IDeref$_deref$arity$1(null), input));
          return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, input) : rf.call(null, result, input);
        }
      };
      G__4088 = function(result, input) {
        switch(arguments.length) {
          case 0:
            return G__4088__0.call(this);
          case 1:
            return G__4088__1.call(this, result);
          case 2:
            return G__4088__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__4088.cljs$core$IFn$_invoke$arity$0 = G__4088__0;
      G__4088.cljs$core$IFn$_invoke$arity$1 = G__4088__1;
      G__4088.cljs$core$IFn$_invoke$arity$2 = G__4088__2;
      return G__4088;
    }();
  };
};
cljs.core.distinct.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var step = function cljs$core$step(xs, seen) {
    return new cljs.core.LazySeq(null, function() {
      var fexpr__4082 = function(p__4083, seen__$1) {
        while (true) {
          var vec__4084 = p__4083;
          var f = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__4084, 0, null);
          var xs__$1 = vec__4084;
          var temp__5735__auto__ = cljs.core.seq(xs__$1);
          if (temp__5735__auto__) {
            var s = temp__5735__auto__;
            if (cljs.core.contains_QMARK_(seen__$1, f)) {
              var G__4089 = cljs.core.rest(s);
              var G__4090 = seen__$1;
              p__4083 = G__4089;
              seen__$1 = G__4090;
              continue;
            } else {
              return cljs.core.cons(f, cljs$core$step(cljs.core.rest(s), cljs.core.conj.cljs$core$IFn$_invoke$arity$2(seen__$1, f)));
            }
          } else {
            return null;
          }
          break;
        }
      };
      return fexpr__4082(xs, seen);
    }, null, null);
  };
  return step(coll, cljs.core.PersistentHashSet.EMPTY);
};
cljs.core.distinct.cljs$lang$maxFixedArity = 1;
cljs.core.butlast = function cljs$core$butlast(s) {
  var ret = cljs.core.PersistentVector.EMPTY;
  var s__$1 = s;
  while (true) {
    if (cljs.core.next(s__$1)) {
      var G__4091 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(ret, cljs.core.first(s__$1));
      var G__4092 = cljs.core.next(s__$1);
      ret = G__4091;
      s__$1 = G__4092;
      continue;
    } else {
      return cljs.core.seq(ret);
    }
    break;
  }
};
cljs.core.name = function cljs$core$name(x) {
  if (!(x == null) ? x.cljs$lang$protocol_mask$partition1$ & 4096 || cljs.core.PROTOCOL_SENTINEL === x.cljs$core$INamed$ ? true : false : false) {
    return x.cljs$core$INamed$_name$arity$1(null);
  } else {
    if (typeof x === "string") {
      return x;
    } else {
      throw new Error(["Doesn't support name: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(x)].join(""));
    }
  }
};
cljs.core.zipmap = function cljs$core$zipmap(keys, vals) {
  var map = cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY);
  var ks = cljs.core.seq(keys);
  var vs = cljs.core.seq(vals);
  while (true) {
    if (ks && vs) {
      var G__4094 = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(map, cljs.core.first(ks), cljs.core.first(vs));
      var G__4095 = cljs.core.next(ks);
      var G__4096 = cljs.core.next(vs);
      map = G__4094;
      ks = G__4095;
      vs = G__4096;
      continue;
    } else {
      return cljs.core.persistent_BANG_(map);
    }
    break;
  }
};
cljs.core.max_key = function cljs$core$max_key(var_args) {
  var G__4104 = arguments.length;
  switch(G__4104) {
    case 2:
      return cljs.core.max_key.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.max_key.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var args_arr__4757__auto__ = [];
      var len__4736__auto___4106 = arguments.length;
      var i__4737__auto___4107 = 0;
      while (true) {
        if (i__4737__auto___4107 < len__4736__auto___4106) {
          args_arr__4757__auto__.push(arguments[i__4737__auto___4107]);
          var G__4108 = i__4737__auto___4107 + 1;
          i__4737__auto___4107 = G__4108;
          continue;
        } else {
        }
        break;
      }
      var argseq__4758__auto__ = new cljs.core.IndexedSeq(args_arr__4757__auto__.slice(3), 0, null);
      return cljs.core.max_key.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__4758__auto__);
  }
};
cljs.core.max_key.cljs$core$IFn$_invoke$arity$2 = function(k, x) {
  return x;
};
cljs.core.max_key.cljs$core$IFn$_invoke$arity$3 = function(k, x, y) {
  if ((k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(x) : k.call(null, x)) > (k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(y) : k.call(null, y))) {
    return x;
  } else {
    return y;
  }
};
cljs.core.max_key.cljs$core$IFn$_invoke$arity$variadic = function(k, x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(p1__4097_SHARP_, p2__4098_SHARP_) {
    return cljs.core.max_key.cljs$core$IFn$_invoke$arity$3(k, p1__4097_SHARP_, p2__4098_SHARP_);
  }, cljs.core.max_key.cljs$core$IFn$_invoke$arity$3(k, x, y), more);
};
cljs.core.max_key.cljs$lang$applyTo = function(seq4100) {
  var G__4101 = cljs.core.first(seq4100);
  var seq4100__$1 = cljs.core.next(seq4100);
  var G__4102 = cljs.core.first(seq4100__$1);
  var seq4100__$2 = cljs.core.next(seq4100__$1);
  var G__4103 = cljs.core.first(seq4100__$2);
  var seq4100__$3 = cljs.core.next(seq4100__$2);
  var self__4723__auto__ = this;
  return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__4101, G__4102, G__4103, seq4100__$3);
};
cljs.core.max_key.cljs$lang$maxFixedArity = 3;
cljs.core.min_key = function cljs$core$min_key(var_args) {
  var G__4116 = arguments.length;
  switch(G__4116) {
    case 2:
      return cljs.core.min_key.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.min_key.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var args_arr__4757__auto__ = [];
      var len__4736__auto___4118 = arguments.length;
      var i__4737__auto___4119 = 0;
      while (true) {
        if (i__4737__auto___4119 < len__4736__auto___4118) {
          args_arr__4757__auto__.push(arguments[i__4737__auto___4119]);
          var G__4120 = i__4737__auto___4119 + 1;
          i__4737__auto___4119 = G__4120;
          continue;
        } else {
        }
        break;
      }
      var argseq__4758__auto__ = new cljs.core.IndexedSeq(args_arr__4757__auto__.slice(3), 0, null);
      return cljs.core.min_key.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__4758__auto__);
  }
};
cljs.core.min_key.cljs$core$IFn$_invoke$arity$2 = function(k, x) {
  return x;
};
cljs.core.min_key.cljs$core$IFn$_invoke$arity$3 = function(k, x, y) {
  if ((k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(x) : k.call(null, x)) < (k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(y) : k.call(null, y))) {
    return x;
  } else {
    return y;
  }
};
cljs.core.min_key.cljs$core$IFn$_invoke$arity$variadic = function(k, x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(p1__4109_SHARP_, p2__4110_SHARP_) {
    return cljs.core.min_key.cljs$core$IFn$_invoke$arity$3(k, p1__4109_SHARP_, p2__4110_SHARP_);
  }, cljs.core.min_key.cljs$core$IFn$_invoke$arity$3(k, x, y), more);
};
cljs.core.min_key.cljs$lang$applyTo = function(seq4112) {
  var G__4113 = cljs.core.first(seq4112);
  var seq4112__$1 = cljs.core.next(seq4112);
  var G__4114 = cljs.core.first(seq4112__$1);
  var seq4112__$2 = cljs.core.next(seq4112__$1);
  var G__4115 = cljs.core.first(seq4112__$2);
  var seq4112__$3 = cljs.core.next(seq4112__$2);
  var self__4723__auto__ = this;
  return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__4113, G__4114, G__4115, seq4112__$3);
};
cljs.core.min_key.cljs$lang$maxFixedArity = 3;
cljs.core.ArrayList = function(arr) {
  this.arr = arr;
};
cljs.core.ArrayList.prototype.add = function(x) {
  var self__ = this;
  var _ = this;
  return self__.arr.push(x);
};
cljs.core.ArrayList.prototype.size = function() {
  var self__ = this;
  var _ = this;
  return self__.arr.length;
};
cljs.core.ArrayList.prototype.clear = function() {
  var self__ = this;
  var _ = this;
  return self__.arr = [];
};
cljs.core.ArrayList.prototype.isEmpty = function() {
  var self__ = this;
  var _ = this;
  return self__.arr.length === 0;
};
cljs.core.ArrayList.prototype.toArray = function() {
  var self__ = this;
  var _ = this;
  return self__.arr;
};
cljs.core.ArrayList.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.ArrayList.cljs$lang$type = true;
cljs.core.ArrayList.cljs$lang$ctorStr = "cljs.core/ArrayList";
cljs.core.ArrayList.cljs$lang$ctorPrWriter = function(this__4369__auto__, writer__4370__auto__, opt__4371__auto__) {
  return cljs.core._write(writer__4370__auto__, "cljs.core/ArrayList");
};
cljs.core.__GT_ArrayList = function cljs$core$__GT_ArrayList(arr) {
  return new cljs.core.ArrayList(arr);
};
cljs.core.array_list = function cljs$core$array_list() {
  return new cljs.core.ArrayList([]);
};
cljs.core.partition_all = function cljs$core$partition_all(var_args) {
  var G__4122 = arguments.length;
  switch(G__4122) {
    case 1:
      return cljs.core.partition_all.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.partition_all.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.partition_all.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
cljs.core.partition_all.cljs$core$IFn$_invoke$arity$1 = function(n) {
  return function(rf) {
    var a = cljs.core.array_list();
    return function() {
      var G__4124 = null;
      var G__4124__0 = function() {
        return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
      };
      var G__4124__1 = function(result) {
        var result__$1 = cljs.core.truth_(a.isEmpty()) ? result : function() {
          var v = cljs.core.vec(a.toArray());
          a.clear();
          return cljs.core.unreduced(rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, v) : rf.call(null, result, v));
        }();
        return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result__$1) : rf.call(null, result__$1);
      };
      var G__4124__2 = function(result, input) {
        a.add(input);
        if (n === a.size()) {
          var v = cljs.core.vec(a.toArray());
          a.clear();
          return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, v) : rf.call(null, result, v);
        } else {
          return result;
        }
      };
      G__4124 = function(result, input) {
        switch(arguments.length) {
          case 0:
            return G__4124__0.call(this);
          case 1:
            return G__4124__1.call(this, result);
          case 2:
            return G__4124__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__4124.cljs$core$IFn$_invoke$arity$0 = G__4124__0;
      G__4124.cljs$core$IFn$_invoke$arity$1 = G__4124__1;
      G__4124.cljs$core$IFn$_invoke$arity$2 = G__4124__2;
      return G__4124;
    }();
  };
};
cljs.core.partition_all.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  return cljs.core.partition_all.cljs$core$IFn$_invoke$arity$3(n, n, coll);
};
cljs.core.partition_all.cljs$core$IFn$_invoke$arity$3 = function(n, step, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__5735__auto__ = cljs.core.seq(coll);
    if (temp__5735__auto__) {
      var s = temp__5735__auto__;
      return cljs.core.cons(cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, s), cljs.core.partition_all.cljs$core$IFn$_invoke$arity$3(n, step, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(step, s)));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.partition_all.cljs$lang$maxFixedArity = 3;
cljs.core.take_while = function cljs$core$take_while(var_args) {
  var G__4126 = arguments.length;
  switch(G__4126) {
    case 1:
      return cljs.core.take_while.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
cljs.core.take_while.cljs$core$IFn$_invoke$arity$1 = function(pred) {
  return function(rf) {
    return function() {
      var G__4129 = null;
      var G__4129__0 = function() {
        return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
      };
      var G__4129__1 = function(result) {
        return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
      };
      var G__4129__2 = function(result, input) {
        if (cljs.core.truth_(pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(input) : pred.call(null, input))) {
          return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, input) : rf.call(null, result, input);
        } else {
          return cljs.core.reduced(result);
        }
      };
      G__4129 = function(result, input) {
        switch(arguments.length) {
          case 0:
            return G__4129__0.call(this);
          case 1:
            return G__4129__1.call(this, result);
          case 2:
            return G__4129__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__4129.cljs$core$IFn$_invoke$arity$0 = G__4129__0;
      G__4129.cljs$core$IFn$_invoke$arity$1 = G__4129__1;
      G__4129.cljs$core$IFn$_invoke$arity$2 = G__4129__2;
      return G__4129;
    }();
  };
};
cljs.core.take_while.cljs$core$IFn$_invoke$arity$2 = function(pred, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__5735__auto__ = cljs.core.seq(coll);
    if (temp__5735__auto__) {
      var s = temp__5735__auto__;
      if (cljs.core.truth_(function() {
        var G__4127 = cljs.core.first(s);
        return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__4127) : pred.call(null, G__4127);
      }())) {
        return cljs.core.cons(cljs.core.first(s), cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(pred, cljs.core.rest(s)));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.take_while.cljs$lang$maxFixedArity = 2;
cljs.core.mk_bound_fn = function cljs$core$mk_bound_fn(sc, test, key) {
  return function(e) {
    var comp = cljs.core._comparator(sc);
    var G__4130 = function() {
      var G__4132 = cljs.core._entry_key(sc, e);
      var G__4133 = key;
      return comp.cljs$core$IFn$_invoke$arity$2 ? comp.cljs$core$IFn$_invoke$arity$2(G__4132, G__4133) : comp.call(null, G__4132, G__4133);
    }();
    var G__4131 = 0;
    return test.cljs$core$IFn$_invoke$arity$2 ? test.cljs$core$IFn$_invoke$arity$2(G__4130, G__4131) : test.call(null, G__4130, G__4131);
  };
};
cljs.core.subseq = function cljs$core$subseq(var_args) {
  var G__4135 = arguments.length;
  switch(G__4135) {
    case 3:
      return cljs.core.subseq.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 5:
      return cljs.core.subseq.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
cljs.core.subseq.cljs$core$IFn$_invoke$arity$3 = function(sc, test, key) {
  var include = cljs.core.mk_bound_fn(sc, test, key);
  if (cljs.core.truth_(function() {
    var fexpr__4136 = cljs.core.PersistentHashSet.createAsIfByAssoc([cljs.core._GT_, cljs.core._GT__EQ_]);
    return fexpr__4136.cljs$core$IFn$_invoke$arity$1 ? fexpr__4136.cljs$core$IFn$_invoke$arity$1(test) : fexpr__4136.call(null, test);
  }())) {
    var temp__5735__auto__ = cljs.core._sorted_seq_from(sc, key, true);
    if (cljs.core.truth_(temp__5735__auto__)) {
      var vec__4137 = temp__5735__auto__;
      var e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__4137, 0, null);
      var s = vec__4137;
      if (cljs.core.truth_(include.cljs$core$IFn$_invoke$arity$1 ? include.cljs$core$IFn$_invoke$arity$1(e) : include.call(null, e))) {
        return s;
      } else {
        return cljs.core.next(s);
      }
    } else {
      return null;
    }
  } else {
    return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(include, cljs.core._sorted_seq(sc, true));
  }
};
cljs.core.subseq.cljs$core$IFn$_invoke$arity$5 = function(sc, start_test, start_key, end_test, end_key) {
  var temp__5735__auto__ = cljs.core._sorted_seq_from(sc, start_key, true);
  if (cljs.core.truth_(temp__5735__auto__)) {
    var vec__4140 = temp__5735__auto__;
    var e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__4140, 0, null);
    var s = vec__4140;
    return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(cljs.core.mk_bound_fn(sc, end_test, end_key), cljs.core.truth_(function() {
      var fexpr__4143 = cljs.core.mk_bound_fn(sc, start_test, start_key);
      return fexpr__4143.cljs$core$IFn$_invoke$arity$1 ? fexpr__4143.cljs$core$IFn$_invoke$arity$1(e) : fexpr__4143.call(null, e);
    }()) ? s : cljs.core.next(s));
  } else {
    return null;
  }
};
cljs.core.subseq.cljs$lang$maxFixedArity = 5;
cljs.core.rsubseq = function cljs$core$rsubseq(var_args) {
  var G__4146 = arguments.length;
  switch(G__4146) {
    case 3:
      return cljs.core.rsubseq.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 5:
      return cljs.core.rsubseq.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
cljs.core.rsubseq.cljs$core$IFn$_invoke$arity$3 = function(sc, test, key) {
  var include = cljs.core.mk_bound_fn(sc, test, key);
  if (cljs.core.truth_(function() {
    var fexpr__4147 = cljs.core.PersistentHashSet.createAsIfByAssoc([cljs.core._LT_, cljs.core._LT__EQ_]);
    return fexpr__4147.cljs$core$IFn$_invoke$arity$1 ? fexpr__4147.cljs$core$IFn$_invoke$arity$1(test) : fexpr__4147.call(null, test);
  }())) {
    var temp__5735__auto__ = cljs.core._sorted_seq_from(sc, key, false);
    if (cljs.core.truth_(temp__5735__auto__)) {
      var vec__4148 = temp__5735__auto__;
      var e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__4148, 0, null);
      var s = vec__4148;
      if (cljs.core.truth_(include.cljs$core$IFn$_invoke$arity$1 ? include.cljs$core$IFn$_invoke$arity$1(e) : include.call(null, e))) {
        return s;
      } else {
        return cljs.core.next(s);
      }
    } else {
      return null;
    }
  } else {
    return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(include, cljs.core._sorted_seq(sc, false));
  }
};
cljs.core.rsubseq.cljs$core$IFn$_invoke$arity$5 = function(sc, start_test, start_key, end_test, end_key) {
  var temp__5735__auto__ = cljs.core._sorted_seq_from(sc, end_key, false);
  if (cljs.core.truth_(temp__5735__auto__)) {
    var vec__4151 = temp__5735__auto__;
    var e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__4151, 0, null);
    var s = vec__4151;
    return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(cljs.core.mk_bound_fn(sc, start_test, start_key), cljs.core.truth_(function() {
      var fexpr__4154 = cljs.core.mk_bound_fn(sc, end_test, end_key);
      return fexpr__4154.cljs$core$IFn$_invoke$arity$1 ? fexpr__4154.cljs$core$IFn$_invoke$arity$1(e) : fexpr__4154.call(null, e);
    }()) ? s : cljs.core.next(s));
  } else {
    return null;
  }
};
cljs.core.rsubseq.cljs$lang$maxFixedArity = 5;
cljs.core.RangeChunk = function(start, step, count) {
  this.start = start;
  this.step = step;
  this.count = count;
  this.cljs$lang$protocol_mask$partition0$ = 82;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.RangeChunk.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.RangeChunk.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.start;
};
cljs.core.RangeChunk.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, i) {
  var self__ = this;
  var coll__$1 = this;
  return self__.start + i * self__.step;
};
cljs.core.RangeChunk.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, i, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (i >= 0 && i < self__.count) {
    return self__.start + i * self__.step;
  } else {
    return not_found;
  }
};
cljs.core.RangeChunk.prototype.cljs$core$IChunk$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.RangeChunk.prototype.cljs$core$IChunk$_drop_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count <= 1) {
    throw new Error("-drop-first of empty chunk");
  } else {
    return new cljs.core.RangeChunk(self__.start + self__.step, self__.step, self__.count - 1);
  }
};
cljs.core.RangeChunk.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "start", "start", 1285322546, null), new cljs.core.Symbol(null, "step", "step", -1365547645, null), new cljs.core.Symbol(null, "count", "count", -514511684, null)], null);
};
cljs.core.RangeChunk.cljs$lang$type = true;
cljs.core.RangeChunk.cljs$lang$ctorStr = "cljs.core/RangeChunk";
cljs.core.RangeChunk.cljs$lang$ctorPrWriter = function(this__4369__auto__, writer__4370__auto__, opt__4371__auto__) {
  return cljs.core._write(writer__4370__auto__, "cljs.core/RangeChunk");
};
cljs.core.__GT_RangeChunk = function cljs$core$__GT_RangeChunk(start, step, count) {
  return new cljs.core.RangeChunk(start, step, count);
};
cljs.core.RangeIterator = function(i, end, step) {
  this.i = i;
  this.end = end;
  this.step = step;
};
cljs.core.RangeIterator.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  if (self__.step > 0) {
    return self__.i < self__.end;
  } else {
    return self__.i > self__.end;
  }
};
cljs.core.RangeIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.i;
  self__.i = self__.i + self__.step;
  return ret;
};
cljs.core.RangeIterator.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), new cljs.core.Symbol(null, "end", "end", 1372345569, null), new cljs.core.Symbol(null, "step", "step", -1365547645, null)], null);
};
cljs.core.RangeIterator.cljs$lang$type = true;
cljs.core.RangeIterator.cljs$lang$ctorStr = "cljs.core/RangeIterator";
cljs.core.RangeIterator.cljs$lang$ctorPrWriter = function(this__4369__auto__, writer__4370__auto__, opt__4371__auto__) {
  return cljs.core._write(writer__4370__auto__, "cljs.core/RangeIterator");
};
cljs.core.__GT_RangeIterator = function cljs$core$__GT_RangeIterator(i, end, step) {
  return new cljs.core.RangeIterator(i, end, step);
};
cljs.core.Range = function(meta, start, end, step, chunk, chunk_next, __hash) {
  this.meta = meta;
  this.start = start;
  this.end = end;
  this.step = step;
  this.chunk = chunk;
  this.chunk_next = chunk_next;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32375006;
  this.cljs$lang$protocol_mask$partition1$ = 140800;
};
cljs.core.Range.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.Range.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Range.prototype.indexOf = function() {
  var G__4157 = null;
  var G__4157__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
  };
  var G__4157__2 = function(x, start__$1) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start__$1);
  };
  G__4157 = function(x, start__$1) {
    switch(arguments.length) {
      case 1:
        return G__4157__1.call(this, x);
      case 2:
        return G__4157__2.call(this, x, start__$1);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__4157.cljs$core$IFn$_invoke$arity$1 = G__4157__1;
  G__4157.cljs$core$IFn$_invoke$arity$2 = G__4157__2;
  return G__4157;
}();
cljs.core.Range.prototype.lastIndexOf = function() {
  var G__4158 = null;
  var G__4158__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, cljs.core.count(coll));
  };
  var G__4158__2 = function(x, start__$1) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start__$1);
  };
  G__4158 = function(x, start__$1) {
    switch(arguments.length) {
      case 1:
        return G__4158__1.call(this, x);
      case 2:
        return G__4158__2.call(this, x, start__$1);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__4158.cljs$core$IFn$_invoke$arity$1 = G__4158__1;
  G__4158.cljs$core$IFn$_invoke$arity$2 = G__4158__2;
  return G__4158;
}();
cljs.core.Range.prototype.forceChunk = function() {
  var self__ = this;
  var coll = this;
  if (self__.chunk == null) {
    var count = coll.cljs$core$ICounted$_count$arity$1(null);
    if (count > 32) {
      self__.chunk_next = new cljs.core.Range(null, self__.start + self__.step * 32, self__.end, self__.step, null, null, null);
      return self__.chunk = new cljs.core.RangeChunk(self__.start, self__.step, 32);
    } else {
      return self__.chunk = new cljs.core.RangeChunk(self__.start, self__.step, count);
    }
  } else {
    return null;
  }
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$2 = function(rng, n) {
  var self__ = this;
  var rng__$1 = this;
  if (0 <= n && n < rng__$1.cljs$core$ICounted$_count$arity$1(null)) {
    return self__.start + n * self__.step;
  } else {
    if (0 <= n && self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      throw new Error("Index out of bounds");
    }
  }
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$3 = function(rng, n, not_found) {
  var self__ = this;
  var rng__$1 = this;
  if (0 <= n && n < rng__$1.cljs$core$ICounted$_count$arity$1(null)) {
    return self__.start + n * self__.step;
  } else {
    if (0 <= n && self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      return not_found;
    }
  }
};
cljs.core.Range.prototype.cljs$core$IIterable$_iterator$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.RangeIterator(self__.start, self__.end, self__.step);
};
cljs.core.Range.prototype.cljs$core$IMeta$_meta$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return self__.meta;
};
cljs.core.Range.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Range(self__.meta, self__.start, self__.end, self__.step, self__.chunk, self__.chunk_next, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$INext$_next$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start + self__.step < self__.end) {
      return new cljs.core.Range(null, self__.start + self__.step, self__.end, self__.step, null, null, null);
    } else {
      return null;
    }
  } else {
    if (self__.start + self__.step > self__.end) {
      return new cljs.core.Range(null, self__.start + self__.step, self__.end, self__.step, null, null, null);
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$ICounted$_count$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  var G__4156 = (self__.end - self__.start) / self__.step;
  return Math.ceil(G__4156);
};
cljs.core.Range.prototype.cljs$core$IHash$_hash$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  var h__4238__auto__ = self__.__hash;
  if (!(h__4238__auto__ == null)) {
    return h__4238__auto__;
  } else {
    var h__4238__auto____$1 = cljs.core.hash_ordered_coll(rng__$1);
    self__.__hash = h__4238__auto____$1;
    return h__4238__auto____$1;
  }
};
cljs.core.Range.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(rng, other) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.equiv_sequential(rng__$1, other);
};
cljs.core.Range.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$2 = function(rng, f) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(rng__$1, f);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$3 = function(rng, f, init) {
  var self__ = this;
  var rng__$1 = this;
  var i = self__.start;
  var ret = init;
  while (true) {
    if (self__.step > 0 ? i < self__.end : i > self__.end) {
      var ret__$1 = f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(ret, i) : f.call(null, ret, i);
      if (cljs.core.reduced_QMARK_(ret__$1)) {
        return cljs.core.deref(ret__$1);
      } else {
        var G__4159 = i + self__.step;
        var G__4160 = ret__$1;
        i = G__4159;
        ret = G__4160;
        continue;
      }
    } else {
      return ret;
    }
    break;
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_first$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return self__.start;
};
cljs.core.Range.prototype.cljs$core$ISeq$_rest$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  var s = rng__$1.cljs$core$INext$_next$arity$1(null);
  if (s == null) {
    return cljs.core.List.EMPTY;
  } else {
    return s;
  }
};
cljs.core.Range.prototype.cljs$core$ISeqable$_seq$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return rng__$1;
};
cljs.core.Range.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  rng__$1.forceChunk();
  return self__.chunk;
};
cljs.core.Range.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  rng__$1.forceChunk();
  if (self__.chunk_next == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.chunk_next;
  }
};
cljs.core.Range.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(rng, new_meta) {
  var self__ = this;
  var rng__$1 = this;
  if (new_meta === self__.meta) {
    return rng__$1;
  } else {
    return new cljs.core.Range(new_meta, self__.start, self__.end, self__.step, self__.chunk, self__.chunk_next, self__.__hash);
  }
};
cljs.core.Range.prototype.cljs$core$ICollection$_conj$arity$2 = function(rng, o) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.cons(o, rng__$1);
};
cljs.core.Range.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.seq(rng__$1.cljs$core$IChunkedSeq$_chunked_rest$arity$1(null));
};
cljs.core.Range.getBasis = function() {
  return new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "start", "start", 1285322546, null), new cljs.core.Symbol(null, "end", "end", 1372345569, null), new cljs.core.Symbol(null, "step", "step", -1365547645, null), cljs.core.with_meta(new cljs.core.Symbol(null, "chunk", "chunk", 449371907, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", 
  "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "chunk-next", "chunk-next", -547810434, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.Range.cljs$lang$type = true;
cljs.core.Range.cljs$lang$ctorStr = "cljs.core/Range";
cljs.core.Range.cljs$lang$ctorPrWriter = function(this__4369__auto__, writer__4370__auto__, opt__4371__auto__) {
  return cljs.core._write(writer__4370__auto__, "cljs.core/Range");
};
cljs.core.__GT_Range = function cljs$core$__GT_Range(meta, start, end, step, chunk, chunk_next, __hash) {
  return new cljs.core.Range(meta, start, end, step, chunk, chunk_next, __hash);
};
goog.object.set(cljs.core.Range.prototype, cljs.core.ITER_SYMBOL, function() {
  var this__4675__auto__ = this;
  return cljs.core.es6_iterator(this__4675__auto__);
});
cljs.core.range = function cljs$core$range(var_args) {
  var G__4162 = arguments.length;
  switch(G__4162) {
    case 0:
      return cljs.core.range.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.range.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.range.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.range.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
cljs.core.range.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.range.cljs$core$IFn$_invoke$arity$3(0, Number.MAX_VALUE, 1);
};
cljs.core.range.cljs$core$IFn$_invoke$arity$1 = function(end) {
  return cljs.core.range.cljs$core$IFn$_invoke$arity$3(0, end, 1);
};
cljs.core.range.cljs$core$IFn$_invoke$arity$2 = function(start, end) {
  return cljs.core.range.cljs$core$IFn$_invoke$arity$3(start, end, 1);
};
cljs.core.range.cljs$core$IFn$_invoke$arity$3 = function(start, end, step) {
  if (step > 0) {
    if (end <= start) {
      return cljs.core.List.EMPTY;
    } else {
      return new cljs.core.Range(null, start, end, step, null, null, null);
    }
  } else {
    if (step < 0) {
      if (end >= start) {
        return cljs.core.List.EMPTY;
      } else {
        return new cljs.core.Range(null, start, end, step, null, null, null);
      }
    } else {
      if (end === start) {
        return cljs.core.List.EMPTY;
      } else {
        return cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(start);
      }
    }
  }
};
cljs.core.range.cljs$lang$maxFixedArity = 3;
cljs.core.take_nth = function cljs$core$take_nth(var_args) {
  var G__4165 = arguments.length;
  switch(G__4165) {
    case 1:
      return cljs.core.take_nth.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.take_nth.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
cljs.core.take_nth.cljs$core$IFn$_invoke$arity$1 = function(n) {
  if (typeof n === "number") {
  } else {
    throw new Error("Assert failed: (number? n)");
  }
  return function(rf) {
    var ia = cljs.core.volatile_BANG_(-1);
    return function() {
      var G__4167 = null;
      var G__4167__0 = function() {
        return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
      };
      var G__4167__1 = function(result) {
        return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
      };
      var G__4167__2 = function(result, input) {
        var i = ia.cljs$core$IVolatile$_vreset_BANG_$arity$2(null, ia.cljs$core$IDeref$_deref$arity$1(null) + 1);
        if (cljs.core.rem(i, n) === 0) {
          return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, input) : rf.call(null, result, input);
        } else {
          return result;
        }
      };
      G__4167 = function(result, input) {
        switch(arguments.length) {
          case 0:
            return G__4167__0.call(this);
          case 1:
            return G__4167__1.call(this, result);
          case 2:
            return G__4167__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__4167.cljs$core$IFn$_invoke$arity$0 = G__4167__0;
      G__4167.cljs$core$IFn$_invoke$arity$1 = G__4167__1;
      G__4167.cljs$core$IFn$_invoke$arity$2 = G__4167__2;
      return G__4167;
    }();
  };
};
cljs.core.take_nth.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  if (typeof n === "number") {
  } else {
    throw new Error("Assert failed: (number? n)");
  }
  return new cljs.core.LazySeq(null, function() {
    var temp__5735__auto__ = cljs.core.seq(coll);
    if (temp__5735__auto__) {
      var s = temp__5735__auto__;
      return cljs.core.cons(cljs.core.first(s), cljs.core.take_nth.cljs$core$IFn$_invoke$arity$2(n, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(n, s)));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.take_nth.cljs$lang$maxFixedArity = 2;
cljs.core.split_with = function cljs$core$split_with(pred, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(pred, coll), cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2(pred, coll)], null);
};
cljs.core.partition_by = function cljs$core$partition_by(var_args) {
  var G__4170 = arguments.length;
  switch(G__4170) {
    case 1:
      return cljs.core.partition_by.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.partition_by.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
cljs.core.partition_by.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return function(rf) {
    var a = cljs.core.array_list();
    var pa = cljs.core.volatile_BANG_(new cljs.core.Keyword("cljs.core", "none", "cljs.core/none", 926646439));
    return function() {
      var G__4172 = null;
      var G__4172__0 = function() {
        return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
      };
      var G__4172__1 = function(result) {
        var result__$1 = cljs.core.truth_(a.isEmpty()) ? result : function() {
          var v = cljs.core.vec(a.toArray());
          a.clear();
          return cljs.core.unreduced(rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, v) : rf.call(null, result, v));
        }();
        return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result__$1) : rf.call(null, result__$1);
      };
      var G__4172__2 = function(result, input) {
        var pval = cljs.core.deref(pa);
        var val = f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(input) : f.call(null, input);
        cljs.core.vreset_BANG_(pa, val);
        if (cljs.core.keyword_identical_QMARK_(pval, new cljs.core.Keyword("cljs.core", "none", "cljs.core/none", 926646439)) || cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(val, pval)) {
          a.add(input);
          return result;
        } else {
          var v = cljs.core.vec(a.toArray());
          a.clear();
          var ret = rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, v) : rf.call(null, result, v);
          if (cljs.core.reduced_QMARK_(ret)) {
          } else {
            a.add(input);
          }
          return ret;
        }
      };
      G__4172 = function(result, input) {
        switch(arguments.length) {
          case 0:
            return G__4172__0.call(this);
          case 1:
            return G__4172__1.call(this, result);
          case 2:
            return G__4172__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__4172.cljs$core$IFn$_invoke$arity$0 = G__4172__0;
      G__4172.cljs$core$IFn$_invoke$arity$1 = G__4172__1;
      G__4172.cljs$core$IFn$_invoke$arity$2 = G__4172__2;
      return G__4172;
    }();
  };
};
cljs.core.partition_by.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__5735__auto__ = cljs.core.seq(coll);
    if (temp__5735__auto__) {
      var s = temp__5735__auto__;
      var fst = cljs.core.first(s);
      var fv = f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(fst) : f.call(null, fst);
      var run = cljs.core.cons(fst, cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(function(p1__4168_SHARP_) {
        return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(fv, f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(p1__4168_SHARP_) : f.call(null, p1__4168_SHARP_));
      }, cljs.core.next(s)));
      return cljs.core.cons(run, cljs.core.partition_by.cljs$core$IFn$_invoke$arity$2(f, new cljs.core.LazySeq(null, function() {
        return cljs.core.drop.cljs$core$IFn$_invoke$arity$2(cljs.core.count(run), s);
      }, null, null)));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.partition_by.cljs$lang$maxFixedArity = 2;
cljs.core.frequencies = function cljs$core$frequencies(coll) {
  return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(counts, x) {
    return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(counts, x, cljs.core.get.cljs$core$IFn$_invoke$arity$3(counts, x, 0) + 1);
  }, cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY), coll));
};
cljs.core.reductions = function cljs$core$reductions(var_args) {
  var G__4174 = arguments.length;
  switch(G__4174) {
    case 2:
      return cljs.core.reductions.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.reductions.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
cljs.core.reductions.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__5733__auto__ = cljs.core.seq(coll);
    if (temp__5733__auto__) {
      var s = temp__5733__auto__;
      return cljs.core.reductions.cljs$core$IFn$_invoke$arity$3(f, cljs.core.first(s), cljs.core.rest(s));
    } else {
      return new cljs.core.List(null, f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null), null, 1, null);
    }
  }, null, null);
};
cljs.core.reductions.cljs$core$IFn$_invoke$arity$3 = function(f, init, coll) {
  if (cljs.core.reduced_QMARK_(init)) {
    return new cljs.core.List(null, cljs.core.deref(init), null, 1, null);
  } else {
    return cljs.core.cons(init, new cljs.core.LazySeq(null, function() {
      var temp__5735__auto__ = cljs.core.seq(coll);
      if (temp__5735__auto__) {
        var s = temp__5735__auto__;
        return cljs.core.reductions.cljs$core$IFn$_invoke$arity$3(f, function() {
          var G__4175 = init;
          var G__4176 = cljs.core.first(s);
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__4175, G__4176) : f.call(null, G__4175, G__4176);
        }(), cljs.core.rest(s));
      } else {
        return null;
      }
    }, null, null));
  }
};
cljs.core.reductions.cljs$lang$maxFixedArity = 3;
cljs.core.juxt = function cljs$core$juxt(var_args) {
  var G__4193 = arguments.length;
  switch(G__4193) {
    case 1:
      return cljs.core.juxt.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.juxt.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.juxt.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var args_arr__4757__auto__ = [];
      var len__4736__auto___4195 = arguments.length;
      var i__4737__auto___4196 = 0;
      while (true) {
        if (i__4737__auto___4196 < len__4736__auto___4195) {
          args_arr__4757__auto__.push(arguments[i__4737__auto___4196]);
          var G__4197 = i__4737__auto___4196 + 1;
          i__4737__auto___4196 = G__4197;
          continue;
        } else {
        }
        break;
      }
      var argseq__4758__auto__ = new cljs.core.IndexedSeq(args_arr__4757__auto__.slice(3), 0, null);
      return cljs.core.juxt.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__4758__auto__);
  }
};
cljs.core.juxt.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return function() {
    var G__4198 = null;
    var G__4198__0 = function() {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null)], null);
    };
    var G__4198__1 = function(x) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(x) : f.call(null, x)], null);
    };
    var G__4198__2 = function(x, y) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(x, y) : f.call(null, x, y)], null);
    };
    var G__4198__3 = function(x, y, z) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(x, y, z) : f.call(null, x, y, z)], null);
    };
    var G__4198__4 = function() {
      var G__4199__delegate = function(x, y, z, args) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, x, y, z, args)], null);
      };
      var G__4199 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__4200__i = 0, G__4200__a = new Array(arguments.length - 3);
          while (G__4200__i < G__4200__a.length) {
            G__4200__a[G__4200__i] = arguments[G__4200__i + 3];
            ++G__4200__i;
          }
          args = new cljs.core.IndexedSeq(G__4200__a, 0, null);
        }
        return G__4199__delegate.call(this, x, y, z, args);
      };
      G__4199.cljs$lang$maxFixedArity = 3;
      G__4199.cljs$lang$applyTo = function(arglist__4201) {
        var x = cljs.core.first(arglist__4201);
        arglist__4201 = cljs.core.next(arglist__4201);
        var y = cljs.core.first(arglist__4201);
        arglist__4201 = cljs.core.next(arglist__4201);
        var z = cljs.core.first(arglist__4201);
        var args = cljs.core.rest(arglist__4201);
        return G__4199__delegate(x, y, z, args);
      };
      G__4199.cljs$core$IFn$_invoke$arity$variadic = G__4199__delegate;
      return G__4199;
    }();
    G__4198 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__4198__0.call(this);
        case 1:
          return G__4198__1.call(this, x);
        case 2:
          return G__4198__2.call(this, x, y);
        case 3:
          return G__4198__3.call(this, x, y, z);
        default:
          var G__4202 = null;
          if (arguments.length > 3) {
            var G__4203__i = 0, G__4203__a = new Array(arguments.length - 3);
            while (G__4203__i < G__4203__a.length) {
              G__4203__a[G__4203__i] = arguments[G__4203__i + 3];
              ++G__4203__i;
            }
            G__4202 = new cljs.core.IndexedSeq(G__4203__a, 0, null);
          }
          return G__4198__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__4202);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__4198.cljs$lang$maxFixedArity = 3;
    G__4198.cljs$lang$applyTo = G__4198__4.cljs$lang$applyTo;
    G__4198.cljs$core$IFn$_invoke$arity$0 = G__4198__0;
    G__4198.cljs$core$IFn$_invoke$arity$1 = G__4198__1;
    G__4198.cljs$core$IFn$_invoke$arity$2 = G__4198__2;
    G__4198.cljs$core$IFn$_invoke$arity$3 = G__4198__3;
    G__4198.cljs$core$IFn$_invoke$arity$variadic = G__4198__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__4198;
  }();
};
cljs.core.juxt.cljs$core$IFn$_invoke$arity$2 = function(f, g) {
  return function() {
    var G__4204 = null;
    var G__4204__0 = function() {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null), g.cljs$core$IFn$_invoke$arity$0 ? g.cljs$core$IFn$_invoke$arity$0() : g.call(null)], null);
    };
    var G__4204__1 = function(x) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(x) : f.call(null, x), g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(x) : g.call(null, x)], null);
    };
    var G__4204__2 = function(x, y) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(x, y) : f.call(null, x, y), g.cljs$core$IFn$_invoke$arity$2 ? g.cljs$core$IFn$_invoke$arity$2(x, y) : g.call(null, x, y)], null);
    };
    var G__4204__3 = function(x, y, z) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(x, y, z) : f.call(null, x, y, z), g.cljs$core$IFn$_invoke$arity$3 ? g.cljs$core$IFn$_invoke$arity$3(x, y, z) : g.call(null, x, y, z)], null);
    };
    var G__4204__4 = function() {
      var G__4205__delegate = function(x, y, z, args) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, x, y, z, args), cljs.core.apply.cljs$core$IFn$_invoke$arity$5(g, x, y, z, args)], null);
      };
      var G__4205 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__4206__i = 0, G__4206__a = new Array(arguments.length - 3);
          while (G__4206__i < G__4206__a.length) {
            G__4206__a[G__4206__i] = arguments[G__4206__i + 3];
            ++G__4206__i;
          }
          args = new cljs.core.IndexedSeq(G__4206__a, 0, null);
        }
        return G__4205__delegate.call(this, x, y, z, args);
      };
      G__4205.cljs$lang$maxFixedArity = 3;
      G__4205.cljs$lang$applyTo = function(arglist__4207) {
        var x = cljs.core.first(arglist__4207);
        arglist__4207 = cljs.core.next(arglist__4207);
        var y = cljs.core.first(arglist__4207);
        arglist__4207 = cljs.core.next(arglist__4207);
        var z = cljs.core.first(arglist__4207);
        var args = cljs.core.rest(arglist__4207);
        return G__4205__delegate(x, y, z, args);
      };
      G__4205.cljs$core$IFn$_invoke$arity$variadic = G__4205__delegate;
      return G__4205;
    }();
    G__4204 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__4204__0.call(this);
        case 1:
          return G__4204__1.call(this, x);
        case 2:
          return G__4204__2.call(this, x, y);
        case 3:
          return G__4204__3.call(this, x, y, z);
        default:
          var G__4208 = null;
          if (arguments.length > 3) {
            var G__4209__i = 0, G__4209__a = new Array(arguments.length - 3);
            while (G__4209__i < G__4209__a.length) {
              G__4209__a[G__4209__i] = arguments[G__4209__i + 3];
              ++G__4209__i;
            }
            G__4208 = new cljs.core.IndexedSeq(G__4209__a, 0, null);
          }
          return G__4204__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__4208);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__4204.cljs$lang$maxFixedArity = 3;
    G__4204.cljs$lang$applyTo = G__4204__4.cljs$lang$applyTo;
    G__4204.cljs$core$IFn$_invoke$arity$0 = G__4204__0;
    G__4204.cljs$core$IFn$_invoke$arity$1 = G__4204__1;
    G__4204.cljs$core$IFn$_invoke$arity$2 = G__4204__2;
    G__4204.cljs$core$IFn$_invoke$arity$3 = G__4204__3;
    G__4204.cljs$core$IFn$_invoke$arity$variadic = G__4204__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__4204;
  }();
};
cljs.core.juxt.cljs$core$IFn$_invoke$arity$3 = function(f, g, h) {
  return function() {
    var G__4210 = null;
    var G__4210__0 = function() {
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null), g.cljs$core$IFn$_invoke$arity$0 ? g.cljs$core$IFn$_invoke$arity$0() : g.call(null), h.cljs$core$IFn$_invoke$arity$0 ? h.cljs$core$IFn$_invoke$arity$0() : h.call(null)], null);
    };
    var G__4210__1 = function(x) {
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(x) : f.call(null, x), g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(x) : g.call(null, x), h.cljs$core$IFn$_invoke$arity$1 ? h.cljs$core$IFn$_invoke$arity$1(x) : h.call(null, x)], null);
    };
    var G__4210__2 = function(x, y) {
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(x, y) : f.call(null, x, y), g.cljs$core$IFn$_invoke$arity$2 ? g.cljs$core$IFn$_invoke$arity$2(x, y) : g.call(null, x, y), h.cljs$core$IFn$_invoke$arity$2 ? h.cljs$core$IFn$_invoke$arity$2(x, y) : h.call(null, x, y)], null);
    };
    var G__4210__3 = function(x, y, z) {
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(x, y, z) : f.call(null, x, y, z), g.cljs$core$IFn$_invoke$arity$3 ? g.cljs$core$IFn$_invoke$arity$3(x, y, z) : g.call(null, x, y, z), h.cljs$core$IFn$_invoke$arity$3 ? h.cljs$core$IFn$_invoke$arity$3(x, y, z) : h.call(null, x, y, z)], null);
    };
    var G__4210__4 = function() {
      var G__4211__delegate = function(x, y, z, args) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, x, y, z, args), cljs.core.apply.cljs$core$IFn$_invoke$arity$5(g, x, y, z, args), cljs.core.apply.cljs$core$IFn$_invoke$arity$5(h, x, y, z, args)], null);
      };
      var G__4211 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__4212__i = 0, G__4212__a = new Array(arguments.length - 3);
          while (G__4212__i < G__4212__a.length) {
            G__4212__a[G__4212__i] = arguments[G__4212__i + 3];
            ++G__4212__i;
          }
          args = new cljs.core.IndexedSeq(G__4212__a, 0, null);
        }
        return G__4211__delegate.call(this, x, y, z, args);
      };
      G__4211.cljs$lang$maxFixedArity = 3;
      G__4211.cljs$lang$applyTo = function(arglist__4213) {
        var x = cljs.core.first(arglist__4213);
        arglist__4213 = cljs.core.next(arglist__4213);
        var y = cljs.core.first(arglist__4213);
        arglist__4213 = cljs.core.next(arglist__4213);
        var z = cljs.core.first(arglist__4213);
        var args = cljs.core.rest(arglist__4213);
        return G__4211__delegate(x, y, z, args);
      };
      G__4211.cljs$core$IFn$_invoke$arity$variadic = G__4211__delegate;
      return G__4211;
    }();
    G__4210 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__4210__0.call(this);
        case 1:
          return G__4210__1.call(this, x);
        case 2:
          return G__4210__2.call(this, x, y);
        case 3:
          return G__4210__3.call(this, x, y, z);
        default:
          var G__4214 = null;
          if (arguments.length > 3) {
            var G__4215__i = 0, G__4215__a = new Array(arguments.length - 3);
            while (G__4215__i < G__4215__a.length) {
              G__4215__a[G__4215__i] = arguments[G__4215__i + 3];
              ++G__4215__i;
            }
            G__4214 = new cljs.core.IndexedSeq(G__4215__a, 0, null);
          }
          return G__4210__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__4214);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__4210.cljs$lang$maxFixedArity = 3;
    G__4210.cljs$lang$applyTo = G__4210__4.cljs$lang$applyTo;
    G__4210.cljs$core$IFn$_invoke$arity$0 = G__4210__0;
    G__4210.cljs$core$IFn$_invoke$arity$1 = G__4210__1;
    G__4210.cljs$core$IFn$_invoke$arity$2 = G__4210__2;
    G__4210.cljs$core$IFn$_invoke$arity$3 = G__4210__3;
    G__4210.cljs$core$IFn$_invoke$arity$variadic = G__4210__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__4210;
  }();
};
cljs.core.juxt.cljs$core$IFn$_invoke$arity$variadic = function(f, g, h, fs) {
  var fs__$1 = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(f, g, h, fs);
  return function() {
    var G__4216 = null;
    var G__4216__0 = function() {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(p1__4178_SHARP_, p2__4179_SHARP_) {
        return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__4178_SHARP_, p2__4179_SHARP_.cljs$core$IFn$_invoke$arity$0 ? p2__4179_SHARP_.cljs$core$IFn$_invoke$arity$0() : p2__4179_SHARP_.call(null));
      }, cljs.core.PersistentVector.EMPTY, fs__$1);
    };
    var G__4216__1 = function(x) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(p1__4180_SHARP_, p2__4181_SHARP_) {
        return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__4180_SHARP_, p2__4181_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p2__4181_SHARP_.cljs$core$IFn$_invoke$arity$1(x) : p2__4181_SHARP_.call(null, x));
      }, cljs.core.PersistentVector.EMPTY, fs__$1);
    };
    var G__4216__2 = function(x, y) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(p1__4182_SHARP_, p2__4183_SHARP_) {
        return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__4182_SHARP_, p2__4183_SHARP_.cljs$core$IFn$_invoke$arity$2 ? p2__4183_SHARP_.cljs$core$IFn$_invoke$arity$2(x, y) : p2__4183_SHARP_.call(null, x, y));
      }, cljs.core.PersistentVector.EMPTY, fs__$1);
    };
    var G__4216__3 = function(x, y, z) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(p1__4184_SHARP_, p2__4185_SHARP_) {
        return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__4184_SHARP_, p2__4185_SHARP_.cljs$core$IFn$_invoke$arity$3 ? p2__4185_SHARP_.cljs$core$IFn$_invoke$arity$3(x, y, z) : p2__4185_SHARP_.call(null, x, y, z));
      }, cljs.core.PersistentVector.EMPTY, fs__$1);
    };
    var G__4216__4 = function() {
      var G__4217__delegate = function(x, y, z, args) {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(p1__4186_SHARP_, p2__4187_SHARP_) {
          return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__4186_SHARP_, cljs.core.apply.cljs$core$IFn$_invoke$arity$5(p2__4187_SHARP_, x, y, z, args));
        }, cljs.core.PersistentVector.EMPTY, fs__$1);
      };
      var G__4217 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__4218__i = 0, G__4218__a = new Array(arguments.length - 3);
          while (G__4218__i < G__4218__a.length) {
            G__4218__a[G__4218__i] = arguments[G__4218__i + 3];
            ++G__4218__i;
          }
          args = new cljs.core.IndexedSeq(G__4218__a, 0, null);
        }
        return G__4217__delegate.call(this, x, y, z, args);
      };
      G__4217.cljs$lang$maxFixedArity = 3;
      G__4217.cljs$lang$applyTo = function(arglist__4219) {
        var x = cljs.core.first(arglist__4219);
        arglist__4219 = cljs.core.next(arglist__4219);
        var y = cljs.core.first(arglist__4219);
        arglist__4219 = cljs.core.next(arglist__4219);
        var z = cljs.core.first(arglist__4219);
        var args = cljs.core.rest(arglist__4219);
        return G__4217__delegate(x, y, z, args);
      };
      G__4217.cljs$core$IFn$_invoke$arity$variadic = G__4217__delegate;
      return G__4217;
    }();
    G__4216 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__4216__0.call(this);
        case 1:
          return G__4216__1.call(this, x);
        case 2:
          return G__4216__2.call(this, x, y);
        case 3:
          return G__4216__3.call(this, x, y, z);
        default:
          var G__4220 = null;
          if (arguments.length > 3) {
            var G__4221__i = 0, G__4221__a = new Array(arguments.length - 3);
            while (G__4221__i < G__4221__a.length) {
              G__4221__a[G__4221__i] = arguments[G__4221__i + 3];
              ++G__4221__i;
            }
            G__4220 = new cljs.core.IndexedSeq(G__4221__a, 0, null);
          }
          return G__4216__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__4220);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__4216.cljs$lang$maxFixedArity = 3;
    G__4216.cljs$lang$applyTo = G__4216__4.cljs$lang$applyTo;
    G__4216.cljs$core$IFn$_invoke$arity$0 = G__4216__0;
    G__4216.cljs$core$IFn$_invoke$arity$1 = G__4216__1;
    G__4216.cljs$core$IFn$_invoke$arity$2 = G__4216__2;
    G__4216.cljs$core$IFn$_invoke$arity$3 = G__4216__3;
    G__4216.cljs$core$IFn$_invoke$arity$variadic = G__4216__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__4216;
  }();
};
cljs.core.juxt.cljs$lang$applyTo = function(seq4189) {
  var G__4190 = cljs.core.first(seq4189);
  var seq4189__$1 = cljs.core.next(seq4189);
  var G__4191 = cljs.core.first(seq4189__$1);
  var seq4189__$2 = cljs.core.next(seq4189__$1);
  var G__4192 = cljs.core.first(seq4189__$2);
  var seq4189__$3 = cljs.core.next(seq4189__$2);
  var self__4723__auto__ = this;
  return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__4190, G__4191, G__4192, seq4189__$3);
};
cljs.core.juxt.cljs$lang$maxFixedArity = 3;
cljs.core.dorun = function cljs$core$dorun(var_args) {
  var G__4223 = arguments.length;
  switch(G__4223) {
    case 1:
      return cljs.core.dorun.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.dorun.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
cljs.core.dorun.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  while (true) {
    var temp__5735__auto__ = cljs.core.seq(coll);
    if (temp__5735__auto__) {
      var s = temp__5735__auto__;
      var G__4225 = cljs.core.next(s);
      coll = G__4225;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.dorun.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  while (true) {
    if (cljs.core.seq(coll) && n > 0) {
      var G__4226 = n - 1;
      var G__4227 = cljs.core.next(coll);
      n = G__4226;
      coll = G__4227;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.dorun.cljs$lang$maxFixedArity = 2;
cljs.core.doall = function cljs$core$doall(var_args) {
  var G__4229 = arguments.length;
  switch(G__4229) {
    case 1:
      return cljs.core.doall.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.doall.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
cljs.core.doall.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  cljs.core.dorun.cljs$core$IFn$_invoke$arity$1(coll);
  return coll;
};
cljs.core.doall.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  cljs.core.dorun.cljs$core$IFn$_invoke$arity$2(n, coll);
  return coll;
};
cljs.core.doall.cljs$lang$maxFixedArity = 2;
cljs.core.regexp_QMARK_ = function cljs$core$regexp_QMARK_(x) {
  return x instanceof RegExp;
};
cljs.core.re_matches = function cljs$core$re_matches(re, s) {
  if (typeof s === "string") {
    var matches = re.exec(s);
    if (!(matches == null) && cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(matches[0], s)) {
      if (matches.length === 1) {
        return matches[0];
      } else {
        return cljs.core.vec(matches);
      }
    } else {
      return null;
    }
  } else {
    throw new TypeError("re-matches must match against a string.");
  }
};
cljs.core.re_find = function cljs$core$re_find(re, s) {
  if (typeof s === "string") {
    var matches = re.exec(s);
    if (matches == null) {
      return null;
    } else {
      if (matches.length === 1) {
        return matches[0];
      } else {
        return cljs.core.vec(matches);
      }
    }
  } else {
    throw new TypeError("re-find must match against a string.");
  }
};
cljs.core.re_seq_STAR_ = function cljs$core$re_seq_STAR_(re, s) {
  var temp__5739__auto__ = re.exec(s);
  if (temp__5739__auto__ == null) {
    return null;
  } else {
    var matches = temp__5739__auto__;
    var match_str = matches[0];
    var match_vals = matches.length === 1 ? match_str : cljs.core.vec(matches);
    return cljs.core.cons(match_vals, new cljs.core.LazySeq(null, function() {
      var post_idx = matches.index + function() {
        var x__4214__auto__ = 1;
        var y__4215__auto__ = match_str.length;
        return x__4214__auto__ > y__4215__auto__ ? x__4214__auto__ : y__4215__auto__;
      }();
      if (post_idx <= s.length) {
        var G__4231 = re;
        var G__4232 = cljs.core.subs.cljs$core$IFn$_invoke$arity$2(s, post_idx);
        return cljs.core.re_seq_STAR_.cljs$core$IFn$_invoke$arity$2 ? cljs.core.re_seq_STAR_.cljs$core$IFn$_invoke$arity$2(G__4231, G__4232) : cljs.core.re_seq_STAR_.call(null, G__4231, G__4232);
      } else {
        return null;
      }
    }, null, null));
  }
};
cljs.core.re_seq = function cljs$core$re_seq(re, s) {
  if (typeof s === "string") {
    return cljs.core.re_seq_STAR_(re, s);
  } else {
    throw new TypeError("re-seq must match against a string.");
  }
};
cljs.core.re_pattern = function cljs$core$re_pattern(s) {
  if (s instanceof RegExp) {
    return s;
  } else {
    var vec__4233 = cljs.core.re_find(/^\(\?([idmsux]*)\)/, s);
    var prefix = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__4233, 0, null);
    var flags = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__4233, 1, null);
    var pattern = cljs.core.subs.cljs$core$IFn$_invoke$arity$2(s, prefix == null ? 0 : prefix.length);
    return new RegExp(pattern, function() {
      var or__4126__auto__ = flags;
      if (cljs.core.truth_(or__4126__auto__)) {
        return or__4126__auto__;
      } else {
        return "";
      }
    }());
  }
};
cljs.core.pr_sequential_writer = function cljs$core$pr_sequential_writer(writer, print_one, begin, sep, end, opts, coll) {
  var _STAR_print_level_STAR__orig_val__4236 = cljs.core._STAR_print_level_STAR_;
  var _STAR_print_level_STAR__temp_val__4237 = cljs.core._STAR_print_level_STAR_ == null ? null : cljs.core._STAR_print_level_STAR_ - 1;
  cljs.core._STAR_print_level_STAR_ = _STAR_print_level_STAR__temp_val__4237;
  try {
    if (!(cljs.core._STAR_print_level_STAR_ == null) && cljs.core._STAR_print_level_STAR_ < 0) {
      return cljs.core._write(writer, "#");
    } else {
      cljs.core._write(writer, begin);
      if ((new cljs.core.Keyword(null, "print-length", "print-length", 1931866356)).cljs$core$IFn$_invoke$arity$1(opts) === 0) {
        if (cljs.core.seq(coll)) {
          cljs.core._write(writer, function() {
            var or__4126__auto__ = (new cljs.core.Keyword(null, "more-marker", "more-marker", -14717935)).cljs$core$IFn$_invoke$arity$1(opts);
            if (cljs.core.truth_(or__4126__auto__)) {
              return or__4126__auto__;
            } else {
              return "...";
            }
          }());
        } else {
        }
      } else {
        if (cljs.core.seq(coll)) {
          var G__4238_4244 = cljs.core.first(coll);
          var G__4239_4245 = writer;
          var G__4240_4246 = opts;
          print_one.cljs$core$IFn$_invoke$arity$3 ? print_one.cljs$core$IFn$_invoke$arity$3(G__4238_4244, G__4239_4245, G__4240_4246) : print_one.call(null, G__4238_4244, G__4239_4245, G__4240_4246);
        } else {
        }
        var coll_4247__$1 = cljs.core.next(coll);
        var n_4248 = (new cljs.core.Keyword(null, "print-length", "print-length", 1931866356)).cljs$core$IFn$_invoke$arity$1(opts) - 1;
        while (true) {
          if (coll_4247__$1 && (n_4248 == null || !(n_4248 === 0))) {
            cljs.core._write(writer, sep);
            var G__4241_4249 = cljs.core.first(coll_4247__$1);
            var G__4242_4250 = writer;
            var G__4243_4251 = opts;
            print_one.cljs$core$IFn$_invoke$arity$3 ? print_one.cljs$core$IFn$_invoke$arity$3(G__4241_4249, G__4242_4250, G__4243_4251) : print_one.call(null, G__4241_4249, G__4242_4250, G__4243_4251);
            var G__4252 = cljs.core.next(coll_4247__$1);
            var G__4253 = n_4248 - 1;
            coll_4247__$1 = G__4252;
            n_4248 = G__4253;
            continue;
          } else {
            if (cljs.core.seq(coll_4247__$1) && n_4248 === 0) {
              cljs.core._write(writer, sep);
              cljs.core._write(writer, function() {
                var or__4126__auto__ = (new cljs.core.Keyword(null, "more-marker", "more-marker", -14717935)).cljs$core$IFn$_invoke$arity$1(opts);
                if (cljs.core.truth_(or__4126__auto__)) {
                  return or__4126__auto__;
                } else {
                  return "...";
                }
              }());
            } else {
            }
          }
          break;
        }
      }
      return cljs.core._write(writer, end);
    }
  } finally {
    cljs.core._STAR_print_level_STAR_ = _STAR_print_level_STAR__orig_val__4236;
  }
};
cljs.core.write_all = function cljs$core$write_all(var_args) {
  var args__4742__auto__ = [];
  var len__4736__auto___4260 = arguments.length;
  var i__4737__auto___4261 = 0;
  while (true) {
    if (i__4737__auto___4261 < len__4736__auto___4260) {
      args__4742__auto__.push(arguments[i__4737__auto___4261]);
      var G__4262 = i__4737__auto___4261 + 1;
      i__4737__auto___4261 = G__4262;
      continue;
    } else {
    }
    break;
  }
  var argseq__4743__auto__ = 1 < args__4742__auto__.length ? new cljs.core.IndexedSeq(args__4742__auto__.slice(1), 0, null) : null;
  return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__4743__auto__);
};
cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic = function(writer, ss) {
  var seq__4256 = cljs.core.seq(ss);
  var chunk__4257 = null;
  var count__4258 = 0;
  var i__4259 = 0;
  while (true) {
    if (i__4259 < count__4258) {
      var s = chunk__4257.cljs$core$IIndexed$_nth$arity$2(null, i__4259);
      cljs.core._write(writer, s);
      var G__4263 = seq__4256;
      var G__4264 = chunk__4257;
      var G__4265 = count__4258;
      var G__4266 = i__4259 + 1;
      seq__4256 = G__4263;
      chunk__4257 = G__4264;
      count__4258 = G__4265;
      i__4259 = G__4266;
      continue;
    } else {
      var temp__5735__auto__ = cljs.core.seq(seq__4256);
      if (temp__5735__auto__) {
        var seq__4256__$1 = temp__5735__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__4256__$1)) {
          var c__4556__auto__ = cljs.core.chunk_first(seq__4256__$1);
          var G__4267 = cljs.core.chunk_rest(seq__4256__$1);
          var G__4268 = c__4556__auto__;
          var G__4269 = cljs.core.count(c__4556__auto__);
          var G__4270 = 0;
          seq__4256 = G__4267;
          chunk__4257 = G__4268;
          count__4258 = G__4269;
          i__4259 = G__4270;
          continue;
        } else {
          var s = cljs.core.first(seq__4256__$1);
          cljs.core._write(writer, s);
          var G__4271 = cljs.core.next(seq__4256__$1);
          var G__4272 = null;
          var G__4273 = 0;
          var G__4274 = 0;
          seq__4256 = G__4271;
          chunk__4257 = G__4272;
          count__4258 = G__4273;
          i__4259 = G__4274;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.write_all.cljs$lang$maxFixedArity = 1;
cljs.core.write_all.cljs$lang$applyTo = function(seq4254) {
  var G__4255 = cljs.core.first(seq4254);
  var seq4254__$1 = cljs.core.next(seq4254);
  var self__4723__auto__ = this;
  return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__4255, seq4254__$1);
};
cljs.core.string_print = function cljs$core$string_print(x) {
  if (cljs.core._STAR_print_fn_STAR_ == null) {
    throw new Error("No *print-fn* fn set for evaluation environment");
  } else {
  }
  cljs.core._STAR_print_fn_STAR_.cljs$core$IFn$_invoke$arity$1 ? cljs.core._STAR_print_fn_STAR_.cljs$core$IFn$_invoke$arity$1(x) : cljs.core._STAR_print_fn_STAR_.call(null, x);
  return null;
};
cljs.core.flush = function cljs$core$flush() {
  return null;
};
cljs.core.char_escapes = function() {
  var obj4276 = {'"':'\\"', "\\":"\\\\", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t"};
  return obj4276;
}();
cljs.core.quote_string = function cljs$core$quote_string(s) {
  return ['"', cljs.core.str.cljs$core$IFn$_invoke$arity$1(s.replace(RegExp('[\\\\"\b\f\n\r\t]', "g"), function(match) {
    return cljs.core.char_escapes[match];
  })), '"'].join("");
};
cljs.core.print_meta_QMARK_ = function cljs$core$print_meta_QMARK_(opts, obj) {
  if (cljs.core.boolean$(cljs.core.get.cljs$core$IFn$_invoke$arity$2(opts, new cljs.core.Keyword(null, "meta", "meta", 1499536964)))) {
    if (!(obj == null) ? obj.cljs$lang$protocol_mask$partition0$ & 131072 || cljs.core.PROTOCOL_SENTINEL === obj.cljs$core$IMeta$ ? true : false : false) {
      return !(cljs.core.meta(obj) == null);
    } else {
      return false;
    }
  } else {
    return false;
  }
};
cljs.core.pr_writer_impl = function cljs$core$pr_writer_impl(obj, writer, opts) {
  if (obj == null) {
    return cljs.core._write(writer, "nil");
  } else {
    if (cljs.core.print_meta_QMARK_(opts, obj)) {
      cljs.core._write(writer, "^");
      cljs.core.pr_writer(cljs.core.meta(obj), writer, opts);
      cljs.core._write(writer, " ");
    } else {
    }
    if (obj.cljs$lang$type) {
      return obj.cljs$lang$ctorPrWriter(obj, writer, opts);
    } else {
      if (!(obj == null) ? obj.cljs$lang$protocol_mask$partition0$ & 2147483648 || cljs.core.PROTOCOL_SENTINEL === obj.cljs$core$IPrintWithWriter$ ? true : !obj.cljs$lang$protocol_mask$partition0$ ? cljs.core.native_satisfies_QMARK_(cljs.core.IPrintWithWriter, obj) : false : cljs.core.native_satisfies_QMARK_(cljs.core.IPrintWithWriter, obj)) {
        return cljs.core._pr_writer(obj, writer, opts);
      } else {
        if (obj === true || obj === false) {
          return cljs.core._write(writer, cljs.core.str.cljs$core$IFn$_invoke$arity$1(obj));
        } else {
          if (typeof obj === "number") {
            return cljs.core._write(writer, isNaN(obj) ? "##NaN" : obj === Number.POSITIVE_INFINITY ? "##Inf" : obj === Number.NEGATIVE_INFINITY ? "##-Inf" : cljs.core.str.cljs$core$IFn$_invoke$arity$1(obj));
          } else {
            if (cljs.core.object_QMARK_(obj)) {
              cljs.core._write(writer, "#js ");
              return cljs.core.print_map(cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(k) {
                return new cljs.core.MapEntry(function() {
                  var G__4282 = k;
                  if (!(cljs.core.re_matches(/[A-Za-z_\*\+\?!\-'][\w\*\+\?!\-']*/, k) == null)) {
                    return cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(G__4282);
                  } else {
                    return G__4282;
                  }
                }(), obj[k], null);
              }, cljs.core.js_keys(obj)), cljs.core.pr_writer, writer, opts);
            } else {
              if (cljs.core.array_QMARK_(obj)) {
                return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "#js [", " ", "]", opts, obj);
              } else {
                if (goog.isString(obj)) {
                  if (cljs.core.truth_((new cljs.core.Keyword(null, "readably", "readably", 1129599760)).cljs$core$IFn$_invoke$arity$1(opts))) {
                    return cljs.core._write(writer, cljs.core.quote_string(obj));
                  } else {
                    return cljs.core._write(writer, obj);
                  }
                } else {
                  if (goog.isFunction(obj)) {
                    var name = obj.name;
                    var name__$1 = name == null || goog.string.isEmpty(name) ? "Function" : name;
                    return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["#object[", name__$1, cljs.core.truth_(cljs.core._STAR_print_fn_bodies_STAR_) ? [' "', cljs.core.str.cljs$core$IFn$_invoke$arity$1(obj), '"'].join("") : "", "]"], 0));
                  } else {
                    if (obj instanceof Date) {
                      var normalize = function(n, len) {
                        var ns = cljs.core.str.cljs$core$IFn$_invoke$arity$1(n);
                        while (true) {
                          if (ns.length < len) {
                            var G__4285 = ["0", ns].join("");
                            ns = G__4285;
                            continue;
                          } else {
                            return ns;
                          }
                          break;
                        }
                      };
                      return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(['#inst "', cljs.core.str.cljs$core$IFn$_invoke$arity$1(obj.getUTCFullYear()), "-", normalize(obj.getUTCMonth() + 1, 2), "-", normalize(obj.getUTCDate(), 2), "T", normalize(obj.getUTCHours(), 2), ":", normalize(obj.getUTCMinutes(), 2), ":", normalize(obj.getUTCSeconds(), 2), ".", normalize(obj.getUTCMilliseconds(), 3), "-", '00:00"'], 0));
                    } else {
                      if (cljs.core.regexp_QMARK_(obj)) {
                        return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(['#"', obj.source, '"'], 0));
                      } else {
                        if (cljs.core.js_symbol_QMARK_(obj)) {
                          return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["#object[", obj.toString(), "]"], 0));
                        } else {
                          if (cljs.core.truth_(function() {
                            var G__4283 = obj;
                            var G__4283__$1 = G__4283 == null ? null : G__4283.constructor;
                            if (G__4283__$1 == null) {
                              return null;
                            } else {
                              return G__4283__$1.cljs$lang$ctorStr;
                            }
                          }())) {
                            return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["#object[", obj.constructor.cljs$lang$ctorStr.replace(new RegExp("/", "g"), "."), "]"], 0));
                          } else {
                            var name = function() {
                              var G__4284 = obj;
                              var G__4284__$1 = G__4284 == null ? null : G__4284.constructor;
                              if (G__4284__$1 == null) {
                                return null;
                              } else {
                                return G__4284__$1.name;
                              }
                            }();
                            var name__$1 = name == null || goog.string.isEmpty(name) ? "Object" : name;
                            if (obj.constructor == null) {
                              return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["#object[", name__$1, "]"], 0));
                            } else {
                              return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["#object[", name__$1, " ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(obj), "]"], 0));
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.pr_writer = function cljs$core$pr_writer(obj, writer, opts) {
  var temp__5733__auto__ = (new cljs.core.Keyword(null, "alt-impl", "alt-impl", 670969595)).cljs$core$IFn$_invoke$arity$1(opts);
  if (cljs.core.truth_(temp__5733__auto__)) {
    var alt_impl = temp__5733__auto__;
    var G__4286 = obj;
    var G__4287 = writer;
    var G__4288 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(opts, new cljs.core.Keyword(null, "fallback-impl", "fallback-impl", -1501286995), cljs.core.pr_writer_impl);
    return alt_impl.cljs$core$IFn$_invoke$arity$3 ? alt_impl.cljs$core$IFn$_invoke$arity$3(G__4286, G__4287, G__4288) : alt_impl.call(null, G__4286, G__4287, G__4288);
  } else {
    return cljs.core.pr_writer_impl(obj, writer, opts);
  }
};
cljs.core.pr_seq_writer = function cljs$core$pr_seq_writer(objs, writer, opts) {
  cljs.core.pr_writer(cljs.core.first(objs), writer, opts);
  var seq__4289 = cljs.core.seq(cljs.core.next(objs));
  var chunk__4290 = null;
  var count__4291 = 0;
  var i__4292 = 0;
  while (true) {
    if (i__4292 < count__4291) {
      var obj = chunk__4290.cljs$core$IIndexed$_nth$arity$2(null, i__4292);
      cljs.core._write(writer, " ");
      cljs.core.pr_writer(obj, writer, opts);
      var G__4293 = seq__4289;
      var G__4294 = chunk__4290;
      var G__4295 = count__4291;
      var G__4296 = i__4292 + 1;
      seq__4289 = G__4293;
      chunk__4290 = G__4294;
      count__4291 = G__4295;
      i__4292 = G__4296;
      continue;
    } else {
      var temp__5735__auto__ = cljs.core.seq(seq__4289);
      if (temp__5735__auto__) {
        var seq__4289__$1 = temp__5735__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__4289__$1)) {
          var c__4556__auto__ = cljs.core.chunk_first(seq__4289__$1);
          var G__4297 = cljs.core.chunk_rest(seq__4289__$1);
          var G__4298 = c__4556__auto__;
          var G__4299 = cljs.core.count(c__4556__auto__);
          var G__4300 = 0;
          seq__4289 = G__4297;
          chunk__4290 = G__4298;
          count__4291 = G__4299;
          i__4292 = G__4300;
          continue;
        } else {
          var obj = cljs.core.first(seq__4289__$1);
          cljs.core._write(writer, " ");
          cljs.core.pr_writer(obj, writer, opts);
          var G__4301 = cljs.core.next(seq__4289__$1);
          var G__4302 = null;
          var G__4303 = 0;
          var G__4304 = 0;
          seq__4289 = G__4301;
          chunk__4290 = G__4302;
          count__4291 = G__4303;
          i__4292 = G__4304;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.pr_sb_with_opts = function cljs$core$pr_sb_with_opts(objs, opts) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  cljs.core.pr_seq_writer(objs, writer, opts);
  writer.cljs$core$IWriter$_flush$arity$1(null);
  return sb;
};
cljs.core.pr_str_with_opts = function cljs$core$pr_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_(objs)) {
    return "";
  } else {
    return cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_sb_with_opts(objs, opts));
  }
};
cljs.core.prn_str_with_opts = function cljs$core$prn_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_(objs)) {
    return "\n";
  } else {
    var sb = cljs.core.pr_sb_with_opts(objs, opts);
    sb.append("\n");
    return cljs.core.str.cljs$core$IFn$_invoke$arity$1(sb);
  }
};
cljs.core.pr_with_opts = function cljs$core$pr_with_opts(objs, opts) {
  return cljs.core.string_print(cljs.core.pr_str_with_opts(objs, opts));
};
cljs.core.newline = function cljs$core$newline(var_args) {
  var G__4306 = arguments.length;
  switch(G__4306) {
    case 0:
      return cljs.core.newline.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.newline.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
cljs.core.newline.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.newline.cljs$core$IFn$_invoke$arity$1(null);
};
cljs.core.newline.cljs$core$IFn$_invoke$arity$1 = function(opts) {
  cljs.core.string_print("\n");
  if (cljs.core.truth_(cljs.core.get.cljs$core$IFn$_invoke$arity$2(opts, new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", -151457939)))) {
    return cljs.core.flush();
  } else {
    return null;
  }
};
cljs.core.newline.cljs$lang$maxFixedArity = 1;
cljs.core.pr_str = function cljs$core$pr_str(var_args) {
  var args__4742__auto__ = [];
  var len__4736__auto___4309 = arguments.length;
  var i__4737__auto___4310 = 0;
  while (true) {
    if (i__4737__auto___4310 < len__4736__auto___4309) {
      args__4742__auto__.push(arguments[i__4737__auto___4310]);
      var G__4311 = i__4737__auto___4310 + 1;
      i__4737__auto___4310 = G__4311;
      continue;
    } else {
    }
    break;
  }
  var argseq__4743__auto__ = 0 < args__4742__auto__.length ? new cljs.core.IndexedSeq(args__4742__auto__.slice(0), 0, null) : null;
  return cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(argseq__4743__auto__);
};
cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  return cljs.core.pr_str_with_opts(objs, cljs.core.pr_opts());
};
cljs.core.pr_str.cljs$lang$maxFixedArity = 0;
cljs.core.pr_str.cljs$lang$applyTo = function(seq4308) {
  var self__4724__auto__ = this;
  return self__4724__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq4308));
};
cljs.core.prn_str = function cljs$core$prn_str(var_args) {
  var args__4742__auto__ = [];
  var len__4736__auto___4313 = arguments.length;
  var i__4737__auto___4314 = 0;
  while (true) {
    if (i__4737__auto___4314 < len__4736__auto___4313) {
      args__4742__auto__.push(arguments[i__4737__auto___4314]);
      var G__4315 = i__4737__auto___4314 + 1;
      i__4737__auto___4314 = G__4315;
      continue;
    } else {
    }
    break;
  }
  var argseq__4743__auto__ = 0 < args__4742__auto__.length ? new cljs.core.IndexedSeq(args__4742__auto__.slice(0), 0, null) : null;
  return cljs.core.prn_str.cljs$core$IFn$_invoke$arity$variadic(argseq__4743__auto__);
};
cljs.core.prn_str.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  return cljs.core.prn_str_with_opts(objs, cljs.core.pr_opts());
};
cljs.core.prn_str.cljs$lang$maxFixedArity = 0;
cljs.core.prn_str.cljs$lang$applyTo = function(seq4312) {
  var self__4724__auto__ = this;
  return self__4724__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq4312));
};
cljs.core.pr = function cljs$core$pr(var_args) {
  var args__4742__auto__ = [];
  var len__4736__auto___4317 = arguments.length;
  var i__4737__auto___4318 = 0;
  while (true) {
    if (i__4737__auto___4318 < len__4736__auto___4317) {
      args__4742__auto__.push(arguments[i__4737__auto___4318]);
      var G__4319 = i__4737__auto___4318 + 1;
      i__4737__auto___4318 = G__4319;
      continue;
    } else {
    }
    break;
  }
  var argseq__4743__auto__ = 0 < args__4742__auto__.length ? new cljs.core.IndexedSeq(args__4742__auto__.slice(0), 0, null) : null;
  return cljs.core.pr.cljs$core$IFn$_invoke$arity$variadic(argseq__4743__auto__);
};
cljs.core.pr.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  return cljs.core.pr_with_opts(objs, cljs.core.pr_opts());
};
cljs.core.pr.cljs$lang$maxFixedArity = 0;
cljs.core.pr.cljs$lang$applyTo = function(seq4316) {
  var self__4724__auto__ = this;
  return self__4724__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq4316));
};
cljs.core.print = function() {
  var cljs$core$cljs_core_print__delegate = function(objs) {
    return cljs.core.pr_with_opts(objs, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.pr_opts(), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
  };
  var cljs$core$cljs_core_print = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      var G__4320__i = 0, G__4320__a = new Array(arguments.length - 0);
      while (G__4320__i < G__4320__a.length) {
        G__4320__a[G__4320__i] = arguments[G__4320__i + 0];
        ++G__4320__i;
      }
      objs = new cljs.core.IndexedSeq(G__4320__a, 0, null);
    }
    return cljs$core$cljs_core_print__delegate.call(this, objs);
  };
  cljs$core$cljs_core_print.cljs$lang$maxFixedArity = 0;
  cljs$core$cljs_core_print.cljs$lang$applyTo = function(arglist__4321) {
    var objs = cljs.core.seq(arglist__4321);
    return cljs$core$cljs_core_print__delegate(objs);
  };
  cljs$core$cljs_core_print.cljs$core$IFn$_invoke$arity$variadic = cljs$core$cljs_core_print__delegate;
  return cljs$core$cljs_core_print;
}();
cljs.core.print_str = function cljs$core$print_str(var_args) {
  var args__4742__auto__ = [];
  var len__4736__auto___4323 = arguments.length;
  var i__4737__auto___4324 = 0;
  while (true) {
    if (i__4737__auto___4324 < len__4736__auto___4323) {
      args__4742__auto__.push(arguments[i__4737__auto___4324]);
      var G__4325 = i__4737__auto___4324 + 1;
      i__4737__auto___4324 = G__4325;
      continue;
    } else {
    }
    break;
  }
  var argseq__4743__auto__ = 0 < args__4742__auto__.length ? new cljs.core.IndexedSeq(args__4742__auto__.slice(0), 0, null) : null;
  return cljs.core.print_str.cljs$core$IFn$_invoke$arity$variadic(argseq__4743__auto__);
};
cljs.core.print_str.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  return cljs.core.pr_str_with_opts(objs, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.pr_opts(), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
};
cljs.core.print_str.cljs$lang$maxFixedArity = 0;
cljs.core.print_str.cljs$lang$applyTo = function(seq4322) {
  var self__4724__auto__ = this;
  return self__4724__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq4322));
};
cljs.core.println = function cljs$core$println(var_args) {
  var args__4742__auto__ = [];
  var len__4736__auto___4327 = arguments.length;
  var i__4737__auto___4328 = 0;
  while (true) {
    if (i__4737__auto___4328 < len__4736__auto___4327) {
      args__4742__auto__.push(arguments[i__4737__auto___4328]);
      var G__4329 = i__4737__auto___4328 + 1;
      i__4737__auto___4328 = G__4329;
      continue;
    } else {
    }
    break;
  }
  var argseq__4743__auto__ = 0 < args__4742__auto__.length ? new cljs.core.IndexedSeq(args__4742__auto__.slice(0), 0, null) : null;
  return cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(argseq__4743__auto__);
};
cljs.core.println.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  cljs.core.pr_with_opts(objs, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.pr_opts(), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
  if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
    return cljs.core.newline.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_opts());
  } else {
    return null;
  }
};
cljs.core.println.cljs$lang$maxFixedArity = 0;
cljs.core.println.cljs$lang$applyTo = function(seq4326) {
  var self__4724__auto__ = this;
  return self__4724__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq4326));
};
cljs.core.println_str = function cljs$core$println_str(var_args) {
  var args__4742__auto__ = [];
  var len__4736__auto___4331 = arguments.length;
  var i__4737__auto___4332 = 0;
  while (true) {
    if (i__4737__auto___4332 < len__4736__auto___4331) {
      args__4742__auto__.push(arguments[i__4737__auto___4332]);
      var G__4333 = i__4737__auto___4332 + 1;
      i__4737__auto___4332 = G__4333;
      continue;
    } else {
    }
    break;
  }
  var argseq__4743__auto__ = 0 < args__4742__auto__.length ? new cljs.core.IndexedSeq(args__4742__auto__.slice(0), 0, null) : null;
  return cljs.core.println_str.cljs$core$IFn$_invoke$arity$variadic(argseq__4743__auto__);
};
cljs.core.println_str.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  return cljs.core.prn_str_with_opts(objs, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.pr_opts(), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
};
cljs.core.println_str.cljs$lang$maxFixedArity = 0;
cljs.core.println_str.cljs$lang$applyTo = function(seq4330) {
  var self__4724__auto__ = this;
  return self__4724__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq4330));
};
cljs.core.prn = function cljs$core$prn(var_args) {
  var args__4742__auto__ = [];
  var len__4736__auto___4335 = arguments.length;
  var i__4737__auto___4336 = 0;
  while (true) {
    if (i__4737__auto___4336 < len__4736__auto___4335) {
      args__4742__auto__.push(arguments[i__4737__auto___4336]);
      var G__4337 = i__4737__auto___4336 + 1;
      i__4737__auto___4336 = G__4337;
      continue;
    } else {
    }
    break;
  }
  var argseq__4743__auto__ = 0 < args__4742__auto__.length ? new cljs.core.IndexedSeq(args__4742__auto__.slice(0), 0, null) : null;
  return cljs.core.prn.cljs$core$IFn$_invoke$arity$variadic(argseq__4743__auto__);
};
cljs.core.prn.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  cljs.core.pr_with_opts(objs, cljs.core.pr_opts());
  if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
    return cljs.core.newline.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_opts());
  } else {
    return null;
  }
};
cljs.core.prn.cljs$lang$maxFixedArity = 0;
cljs.core.prn.cljs$lang$applyTo = function(seq4334) {
  var self__4724__auto__ = this;
  return self__4724__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq4334));
};
cljs.core.strip_ns = function cljs$core$strip_ns(named) {
  if (named instanceof cljs.core.Symbol) {
    return cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(null, cljs.core.name(named));
  } else {
    return cljs.core.keyword.cljs$core$IFn$_invoke$arity$2(null, cljs.core.name(named));
  }
};
cljs.core.lift_ns = function cljs$core$lift_ns(m) {
  if (cljs.core.truth_(cljs.core._STAR_print_namespace_maps_STAR_)) {
    var ns = null;
    var G__4344 = cljs.core.seq(m);
    var vec__4345 = G__4344;
    var seq__4346 = cljs.core.seq(vec__4345);
    var first__4347 = cljs.core.first(seq__4346);
    var seq__4346__$1 = cljs.core.next(seq__4346);
    var vec__4348 = first__4347;
    var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__4348, 0, null);
    var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__4348, 1, null);
    var entry = vec__4348;
    var entries = seq__4346__$1;
    var lm = cljs.core.empty(m);
    var ns__$1 = ns;
    var G__4344__$1 = G__4344;
    var lm__$1 = lm;
    while (true) {
      var ns__$2 = ns__$1;
      var vec__4357 = G__4344__$1;
      var seq__4358 = cljs.core.seq(vec__4357);
      var first__4359 = cljs.core.first(seq__4358);
      var seq__4358__$1 = cljs.core.next(seq__4358);
      var vec__4360 = first__4359;
      var k__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__4360, 0, null);
      var v__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__4360, 1, null);
      var entry__$1 = vec__4360;
      var entries__$1 = seq__4358__$1;
      var lm__$2 = lm__$1;
      if (cljs.core.truth_(entry__$1)) {
        if (k__$1 instanceof cljs.core.Keyword || k__$1 instanceof cljs.core.Symbol) {
          if (cljs.core.truth_(ns__$2)) {
            if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(ns__$2, cljs.core.namespace(k__$1))) {
              var G__4363 = ns__$2;
              var G__4364 = entries__$1;
              var G__4365 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(lm__$2, cljs.core.strip_ns(k__$1), v__$1);
              ns__$1 = G__4363;
              G__4344__$1 = G__4364;
              lm__$1 = G__4365;
              continue;
            } else {
              return null;
            }
          } else {
            var temp__5735__auto__ = cljs.core.namespace(k__$1);
            if (cljs.core.truth_(temp__5735__auto__)) {
              var new_ns = temp__5735__auto__;
              var G__4366 = new_ns;
              var G__4367 = entries__$1;
              var G__4368 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(lm__$2, cljs.core.strip_ns(k__$1), v__$1);
              ns__$1 = G__4366;
              G__4344__$1 = G__4367;
              lm__$1 = G__4368;
              continue;
            } else {
              return null;
            }
          }
        } else {
          return null;
        }
      } else {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [ns__$2, lm__$2], null);
      }
      break;
    }
  } else {
    return null;
  }
};
cljs.core.print_prefix_map = function cljs$core$print_prefix_map(prefix, m, print_one, writer, opts) {
  return cljs.core.pr_sequential_writer(writer, function(e, w, opts__$1) {
    var G__4369_4375 = cljs.core.key(e);
    var G__4370_4376 = w;
    var G__4371_4377 = opts__$1;
    print_one.cljs$core$IFn$_invoke$arity$3 ? print_one.cljs$core$IFn$_invoke$arity$3(G__4369_4375, G__4370_4376, G__4371_4377) : print_one.call(null, G__4369_4375, G__4370_4376, G__4371_4377);
    cljs.core._write(w, " ");
    var G__4372 = cljs.core.val(e);
    var G__4373 = w;
    var G__4374 = opts__$1;
    return print_one.cljs$core$IFn$_invoke$arity$3 ? print_one.cljs$core$IFn$_invoke$arity$3(G__4372, G__4373, G__4374) : print_one.call(null, G__4372, G__4373, G__4374);
  }, [cljs.core.str.cljs$core$IFn$_invoke$arity$1(prefix), "{"].join(""), ", ", "}", opts, cljs.core.seq(m));
};
cljs.core.print_map = function cljs$core$print_map(m, print_one, writer, opts) {
  var vec__4378 = cljs.core.map_QMARK_(m) ? cljs.core.lift_ns(m) : null;
  var ns = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__4378, 0, null);
  var lift_map = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__4378, 1, null);
  if (cljs.core.truth_(ns)) {
    return cljs.core.print_prefix_map(["#:", cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns)].join(""), lift_map, print_one, writer, opts);
  } else {
    return cljs.core.print_prefix_map(null, m, print_one, writer, opts);
  }
};
cljs.core.Volatile.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.Volatile.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var a__$1 = this;
  cljs.core._write(writer, "#object[cljs.core.Volatile ");
  cljs.core.pr_writer(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "val", "val", 128701612), a__$1.state], null), writer, opts);
  return cljs.core._write(writer, "]");
};
cljs.core.Var.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.Var.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var a__$1 = this;
  cljs.core._write(writer, "#'");
  return cljs.core.pr_writer(a__$1.sym, writer, opts);
};
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.MapEntry.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.MapEntry.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ES6IteratorSeq.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.ES6IteratorSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map(coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Iterate.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.Iterate.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map(coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.Cycle.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.Cycle.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map(coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Atom.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.Atom.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var a__$1 = this;
  cljs.core._write(writer, "#object[cljs.core.Atom ");
  cljs.core.pr_writer(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "val", "val", 128701612), a__$1.state], null), writer, opts);
  return cljs.core._write(writer, "]");
};
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.Repeat.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.Repeat.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.PersistentQueueSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core._write(writer, "()");
};
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "#queue [", " ", "]", opts, cljs.core.seq(coll__$1));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map(coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.TransformerIterator.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.TransformerIterator.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.List.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.List.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Symbol.prototype.cljs$core$IComparable$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.Symbol.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  if (y instanceof cljs.core.Symbol) {
    return cljs.core.compare_symbols(x__$1, y);
  } else {
    throw new Error(["Cannot compare ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(x__$1), " to ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(y)].join(""));
  }
};
cljs.core.Keyword.prototype.cljs$core$IComparable$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.Keyword.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  if (y instanceof cljs.core.Keyword) {
    return cljs.core.compare_keywords(x__$1, y);
  } else {
    throw new Error(["Cannot compare ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(x__$1), " to ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(y)].join(""));
  }
};
cljs.core.Subvec.prototype.cljs$core$IComparable$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.Subvec.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  if (cljs.core.vector_QMARK_(y)) {
    return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$2(x__$1, y);
  } else {
    throw new Error(["Cannot compare ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(x__$1), " to ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(y)].join(""));
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IComparable$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.PersistentVector.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  if (cljs.core.vector_QMARK_(y)) {
    return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$2(x__$1, y);
  } else {
    throw new Error(["Cannot compare ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(x__$1), " to ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(y)].join(""));
  }
};
cljs.core.MapEntry.prototype.cljs$core$IComparable$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.MapEntry.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  if (cljs.core.vector_QMARK_(y)) {
    return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$2(x__$1, y);
  } else {
    throw new Error(["Cannot compare ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(x__$1), " to ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(y)].join(""));
  }
};
cljs.core.BlackNode.prototype.cljs$core$IComparable$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.BlackNode.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  if (cljs.core.vector_QMARK_(y)) {
    return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$2(x__$1, y);
  } else {
    throw new Error(["Cannot compare ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(x__$1), " to ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(y)].join(""));
  }
};
cljs.core.RedNode.prototype.cljs$core$IComparable$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.RedNode.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  if (cljs.core.vector_QMARK_(y)) {
    return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$2(x__$1, y);
  } else {
    throw new Error(["Cannot compare ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(x__$1), " to ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(y)].join(""));
  }
};
cljs.core.alter_meta_BANG_ = function cljs$core$alter_meta_BANG_(var_args) {
  var args__4742__auto__ = [];
  var len__4736__auto___4384 = arguments.length;
  var i__4737__auto___4385 = 0;
  while (true) {
    if (i__4737__auto___4385 < len__4736__auto___4384) {
      args__4742__auto__.push(arguments[i__4737__auto___4385]);
      var G__4386 = i__4737__auto___4385 + 1;
      i__4737__auto___4385 = G__4386;
      continue;
    } else {
    }
    break;
  }
  var argseq__4743__auto__ = 2 < args__4742__auto__.length ? new cljs.core.IndexedSeq(args__4742__auto__.slice(2), 0, null) : null;
  return cljs.core.alter_meta_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__4743__auto__);
};
cljs.core.alter_meta_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(iref, f, args) {
  return iref.meta = cljs.core.apply.cljs$core$IFn$_invoke$arity$3(f, iref.meta, args);
};
cljs.core.alter_meta_BANG_.cljs$lang$maxFixedArity = 2;
cljs.core.alter_meta_BANG_.cljs$lang$applyTo = function(seq4381) {
  var G__4382 = cljs.core.first(seq4381);
  var seq4381__$1 = cljs.core.next(seq4381);
  var G__4383 = cljs.core.first(seq4381__$1);
  var seq4381__$2 = cljs.core.next(seq4381__$1);
  var self__4723__auto__ = this;
  return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__4382, G__4383, seq4381__$2);
};
cljs.core.reset_meta_BANG_ = function cljs$core$reset_meta_BANG_(iref, m) {
  return iref.meta = m;
};
cljs.core.add_watch = function cljs$core$add_watch(iref, key, f) {
  cljs.core._add_watch(iref, key, f);
  return iref;
};
cljs.core.remove_watch = function cljs$core$remove_watch(iref, key) {
  cljs.core._remove_watch(iref, key);
  return iref;
};
cljs.core.gensym_counter = null;
cljs.core.gensym = function cljs$core$gensym(var_args) {
  var G__4388 = arguments.length;
  switch(G__4388) {
    case 0:
      return cljs.core.gensym.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.gensym.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
cljs.core.gensym.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.gensym.cljs$core$IFn$_invoke$arity$1("G__");
};
cljs.core.gensym.cljs$core$IFn$_invoke$arity$1 = function(prefix_string) {
  if (cljs.core.gensym_counter == null) {
    cljs.core.gensym_counter = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(0);
  } else {
  }
  return cljs.core.symbol.cljs$core$IFn$_invoke$arity$1([cljs.core.str.cljs$core$IFn$_invoke$arity$1(prefix_string), cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(cljs.core.gensym_counter, cljs.core.inc))].join(""));
};
cljs.core.gensym.cljs$lang$maxFixedArity = 1;
cljs.core.Delay = function(f, value) {
  this.f = f;
  this.value = value;
  this.cljs$lang$protocol_mask$partition0$ = 2147516416;
  this.cljs$lang$protocol_mask$partition1$ = 1;
};
cljs.core.Delay.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (cljs.core.truth_(self__.f)) {
    self__.value = self__.f.cljs$core$IFn$_invoke$arity$0 ? self__.f.cljs$core$IFn$_invoke$arity$0() : self__.f.call(null);
    self__.f = null;
  } else {
  }
  return self__.value;
};
cljs.core.Delay.prototype.cljs$core$IPending$_realized_QMARK_$arity$1 = function(x) {
  var self__ = this;
  var x__$1 = this;
  return cljs.core.not(self__.f);
};
cljs.core.Delay.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(x, writer, opts) {
  var self__ = this;
  var x__$1 = this;
  cljs.core._write(writer, "#object[cljs.core.Delay ");
  cljs.core.pr_writer(new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "status", "status", -1997798413), self__.f == null ? new cljs.core.Keyword(null, "ready", "ready", 1086465795) : new cljs.core.Keyword(null, "pending", "pending", -220036727), new cljs.core.Keyword(null, "val", "val", 128701612), self__.value], null), writer, opts);
  return cljs.core._write(writer, "]");
};
cljs.core.Delay.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "f", "f", 43394975, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "value", "value", 1946509744, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.Delay.cljs$lang$type = true;
cljs.core.Delay.cljs$lang$ctorStr = "cljs.core/Delay";
cljs.core.Delay.cljs$lang$ctorPrWriter = function(this__4369__auto__, writer__4370__auto__, opt__4371__auto__) {
  return cljs.core._write(writer__4370__auto__, "cljs.core/Delay");
};
cljs.core.__GT_Delay = function cljs$core$__GT_Delay(f, value) {
  return new cljs.core.Delay(f, value);
};
cljs.core.delay_QMARK_ = function cljs$core$delay_QMARK_(x) {
  return x instanceof cljs.core.Delay;
};
cljs.core.force = function cljs$core$force(x) {
  if (cljs.core.delay_QMARK_(x)) {
    return cljs.core.deref(x);
  } else {
    return x;
  }
};
cljs.core.realized_QMARK_ = function cljs$core$realized_QMARK_(x) {
  return cljs.core._realized_QMARK_(x);
};
cljs.core.preserving_reduced = function cljs$core$preserving_reduced(rf) {
  return function(p1__4390_SHARP_, p2__4391_SHARP_) {
    var ret = rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(p1__4390_SHARP_, p2__4391_SHARP_) : rf.call(null, p1__4390_SHARP_, p2__4391_SHARP_);
    if (cljs.core.reduced_QMARK_(ret)) {
      return cljs.core.reduced(ret);
    } else {
      return ret;
    }
  };
};
cljs.core.cat = function cljs$core$cat(rf) {
  var rf1 = cljs.core.preserving_reduced(rf);
  return function() {
    var G__4392 = null;
    var G__4392__0 = function() {
      return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
    };
    var G__4392__1 = function(result) {
      return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
    };
    var G__4392__2 = function(result, input) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(rf1, result, input);
    };
    G__4392 = function(result, input) {
      switch(arguments.length) {
        case 0:
          return G__4392__0.call(this);
        case 1:
          return G__4392__1.call(this, result);
        case 2:
          return G__4392__2.call(this, result, input);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__4392.cljs$core$IFn$_invoke$arity$0 = G__4392__0;
    G__4392.cljs$core$IFn$_invoke$arity$1 = G__4392__1;
    G__4392.cljs$core$IFn$_invoke$arity$2 = G__4392__2;
    return G__4392;
  }();
};
cljs.core.halt_when = function cljs$core$halt_when(var_args) {
  var G__4394 = arguments.length;
  switch(G__4394) {
    case 1:
      return cljs.core.halt_when.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.halt_when.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
cljs.core.halt_when.cljs$core$IFn$_invoke$arity$1 = function(pred) {
  return cljs.core.halt_when.cljs$core$IFn$_invoke$arity$2(pred, null);
};
cljs.core.halt_when.cljs$core$IFn$_invoke$arity$2 = function(pred, retf) {
  return function(rf) {
    return function() {
      var G__4398 = null;
      var G__4398__0 = function() {
        return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
      };
      var G__4398__1 = function(result) {
        if (cljs.core.map_QMARK_(result) && cljs.core.contains_QMARK_(result, new cljs.core.Keyword("cljs.core", "halt", "cljs.core/halt", -1049036715))) {
          return (new cljs.core.Keyword("cljs.core", "halt", "cljs.core/halt", -1049036715)).cljs$core$IFn$_invoke$arity$1(result);
        } else {
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
        }
      };
      var G__4398__2 = function(result, input) {
        if (cljs.core.truth_(pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(input) : pred.call(null, input))) {
          return cljs.core.reduced(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.core", "halt", "cljs.core/halt", -1049036715), cljs.core.truth_(retf) ? function() {
            var G__4395 = rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
            var G__4396 = input;
            return retf.cljs$core$IFn$_invoke$arity$2 ? retf.cljs$core$IFn$_invoke$arity$2(G__4395, G__4396) : retf.call(null, G__4395, G__4396);
          }() : input], null));
        } else {
          return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, input) : rf.call(null, result, input);
        }
      };
      G__4398 = function(result, input) {
        switch(arguments.length) {
          case 0:
            return G__4398__0.call(this);
          case 1:
            return G__4398__1.call(this, result);
          case 2:
            return G__4398__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__4398.cljs$core$IFn$_invoke$arity$0 = G__4398__0;
      G__4398.cljs$core$IFn$_invoke$arity$1 = G__4398__1;
      G__4398.cljs$core$IFn$_invoke$arity$2 = G__4398__2;
      return G__4398;
    }();
  };
};
cljs.core.halt_when.cljs$lang$maxFixedArity = 2;
cljs.core.dedupe = function cljs$core$dedupe(var_args) {
  var G__4400 = arguments.length;
  switch(G__4400) {
    case 0:
      return cljs.core.dedupe.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.dedupe.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
cljs.core.dedupe.cljs$core$IFn$_invoke$arity$0 = function() {
  return function(rf) {
    var pa = cljs.core.volatile_BANG_(new cljs.core.Keyword("cljs.core", "none", "cljs.core/none", 926646439));
    return function() {
      var G__4402 = null;
      var G__4402__0 = function() {
        return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
      };
      var G__4402__1 = function(result) {
        return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
      };
      var G__4402__2 = function(result, input) {
        var prior = cljs.core.deref(pa);
        cljs.core.vreset_BANG_(pa, input);
        if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(prior, input)) {
          return result;
        } else {
          return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, input) : rf.call(null, result, input);
        }
      };
      G__4402 = function(result, input) {
        switch(arguments.length) {
          case 0:
            return G__4402__0.call(this);
          case 1:
            return G__4402__1.call(this, result);
          case 2:
            return G__4402__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__4402.cljs$core$IFn$_invoke$arity$0 = G__4402__0;
      G__4402.cljs$core$IFn$_invoke$arity$1 = G__4402__1;
      G__4402.cljs$core$IFn$_invoke$arity$2 = G__4402__2;
      return G__4402;
    }();
  };
};
cljs.core.dedupe.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  return cljs.core.sequence.cljs$core$IFn$_invoke$arity$2(cljs.core.dedupe.cljs$core$IFn$_invoke$arity$0(), coll);
};
cljs.core.dedupe.cljs$lang$maxFixedArity = 1;
cljs.core.random_sample = function cljs$core$random_sample(var_args) {
  var G__4404 = arguments.length;
  switch(G__4404) {
    case 1:
      return cljs.core.random_sample.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.random_sample.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
cljs.core.random_sample.cljs$core$IFn$_invoke$arity$1 = function(prob) {
  return cljs.core.filter.cljs$core$IFn$_invoke$arity$1(function(_) {
    return cljs.core.rand.cljs$core$IFn$_invoke$arity$0() < prob;
  });
};
cljs.core.random_sample.cljs$core$IFn$_invoke$arity$2 = function(prob, coll) {
  return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(function(_) {
    return cljs.core.rand.cljs$core$IFn$_invoke$arity$0() < prob;
  }, coll);
};
cljs.core.random_sample.cljs$lang$maxFixedArity = 2;
cljs.core.Eduction = function(xform, coll) {
  this.xform = xform;
  this.coll = coll;
  this.cljs$lang$protocol_mask$partition0$ = 2173173760;
  this.cljs$lang$protocol_mask$partition1$ = 131072;
};
cljs.core.Eduction.prototype.indexOf = function() {
  var G__4406 = null;
  var G__4406__1 = function(x) {
    var self__ = this;
    var coll__$1 = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll__$1, x, 0);
  };
  var G__4406__2 = function(x, start) {
    var self__ = this;
    var coll__$1 = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll__$1, x, start);
  };
  G__4406 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__4406__1.call(this, x);
      case 2:
        return G__4406__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__4406.cljs$core$IFn$_invoke$arity$1 = G__4406__1;
  G__4406.cljs$core$IFn$_invoke$arity$2 = G__4406__2;
  return G__4406;
}();
cljs.core.Eduction.prototype.lastIndexOf = function() {
  var G__4407 = null;
  var G__4407__1 = function(x) {
    var self__ = this;
    var coll__$1 = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll__$1, x, cljs.core.count(coll__$1));
  };
  var G__4407__2 = function(x, start) {
    var self__ = this;
    var coll__$1 = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll__$1, x, start);
  };
  G__4407 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__4407__1.call(this, x);
      case 2:
        return G__4407__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__4407.cljs$core$IFn$_invoke$arity$1 = G__4407__1;
  G__4407.cljs$core$IFn$_invoke$arity$2 = G__4407__2;
  return G__4407;
}();
cljs.core.Eduction.prototype.cljs$core$IIterable$_iterator$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.TransformerIterator.create(self__.xform, cljs.core.iter(self__.coll));
};
cljs.core.Eduction.prototype.cljs$core$ISeqable$_seq$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.seq(cljs.core.sequence.cljs$core$IFn$_invoke$arity$2(self__.xform, self__.coll));
};
cljs.core.Eduction.prototype.cljs$core$IReduce$_reduce$arity$2 = function(_, f) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.transduce.cljs$core$IFn$_invoke$arity$3(self__.xform, cljs.core.completing.cljs$core$IFn$_invoke$arity$1(f), self__.coll);
};
cljs.core.Eduction.prototype.cljs$core$IReduce$_reduce$arity$3 = function(_, f, init) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(self__.xform, cljs.core.completing.cljs$core$IFn$_invoke$arity$1(f), init, self__.coll);
};
cljs.core.Eduction.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll__$1, writer, opts) {
  var self__ = this;
  var coll__$2 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$2);
};
cljs.core.Eduction.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "xform", "xform", -85179481, null), new cljs.core.Symbol(null, "coll", "coll", -1006698606, null)], null);
};
cljs.core.Eduction.cljs$lang$type = true;
cljs.core.Eduction.cljs$lang$ctorStr = "cljs.core/Eduction";
cljs.core.Eduction.cljs$lang$ctorPrWriter = function(this__4369__auto__, writer__4370__auto__, opt__4371__auto__) {
  return cljs.core._write(writer__4370__auto__, "cljs.core/Eduction");
};
cljs.core.__GT_Eduction = function cljs$core$__GT_Eduction(xform, coll) {
  return new cljs.core.Eduction(xform, coll);
};
goog.object.set(cljs.core.Eduction.prototype, cljs.core.ITER_SYMBOL, function() {
  var this__4675__auto__ = this;
  return cljs.core.es6_iterator(this__4675__auto__);
});
cljs.core.eduction = function cljs$core$eduction(var_args) {
  var args__4742__auto__ = [];
  var len__4736__auto___4409 = arguments.length;
  var i__4737__auto___4410 = 0;
  while (true) {
    if (i__4737__auto___4410 < len__4736__auto___4409) {
      args__4742__auto__.push(arguments[i__4737__auto___4410]);
      var G__4411 = i__4737__auto___4410 + 1;
      i__4737__auto___4410 = G__4411;
      continue;
    } else {
    }
    break;
  }
  var argseq__4743__auto__ = 0 < args__4742__auto__.length ? new cljs.core.IndexedSeq(args__4742__auto__.slice(0), 0, null) : null;
  return cljs.core.eduction.cljs$core$IFn$_invoke$arity$variadic(argseq__4743__auto__);
};
cljs.core.eduction.cljs$core$IFn$_invoke$arity$variadic = function(xforms) {
  return new cljs.core.Eduction(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.comp, cljs.core.butlast(xforms)), cljs.core.last(xforms));
};
cljs.core.eduction.cljs$lang$maxFixedArity = 0;
cljs.core.eduction.cljs$lang$applyTo = function(seq4408) {
  var self__4724__auto__ = this;
  return self__4724__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq4408));
};
cljs.core.run_BANG_ = function cljs$core$run_BANG_(proc, coll) {
  cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(p1__4413_SHARP_, p2__4412_SHARP_) {
    return proc.cljs$core$IFn$_invoke$arity$1 ? proc.cljs$core$IFn$_invoke$arity$1(p2__4412_SHARP_) : proc.call(null, p2__4412_SHARP_);
  }, null, coll);
  return null;
};
cljs.core.IEncodeJS = function() {
};
var cljs$core$IEncodeJS$_clj__GT_js$dyn_4414 = function(x) {
  var x__4428__auto__ = x == null ? null : x;
  var m__4429__auto__ = cljs.core._clj__GT_js[goog.typeOf(x__4428__auto__)];
  if (!(m__4429__auto__ == null)) {
    return m__4429__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4429__auto__.cljs$core$IFn$_invoke$arity$1(x) : m__4429__auto__.call(null, x);
  } else {
    var m__4426__auto__ = cljs.core._clj__GT_js["_"];
    if (!(m__4426__auto__ == null)) {
      return m__4426__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4426__auto__.cljs$core$IFn$_invoke$arity$1(x) : m__4426__auto__.call(null, x);
    } else {
      throw cljs.core.missing_protocol("IEncodeJS.-clj-\x3ejs", x);
    }
  }
};
cljs.core._clj__GT_js = function cljs$core$_clj__GT_js(x) {
  if (!(x == null) && !(x.cljs$core$IEncodeJS$_clj__GT_js$arity$1 == null)) {
    return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1(x);
  } else {
    return cljs$core$IEncodeJS$_clj__GT_js$dyn_4414(x);
  }
};
var cljs$core$IEncodeJS$_key__GT_js$dyn_4415 = function(x) {
  var x__4428__auto__ = x == null ? null : x;
  var m__4429__auto__ = cljs.core._key__GT_js[goog.typeOf(x__4428__auto__)];
  if (!(m__4429__auto__ == null)) {
    return m__4429__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4429__auto__.cljs$core$IFn$_invoke$arity$1(x) : m__4429__auto__.call(null, x);
  } else {
    var m__4426__auto__ = cljs.core._key__GT_js["_"];
    if (!(m__4426__auto__ == null)) {
      return m__4426__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4426__auto__.cljs$core$IFn$_invoke$arity$1(x) : m__4426__auto__.call(null, x);
    } else {
      throw cljs.core.missing_protocol("IEncodeJS.-key-\x3ejs", x);
    }
  }
};
cljs.core._key__GT_js = function cljs$core$_key__GT_js(x) {
  if (!(x == null) && !(x.cljs$core$IEncodeJS$_key__GT_js$arity$1 == null)) {
    return x.cljs$core$IEncodeJS$_key__GT_js$arity$1(x);
  } else {
    return cljs$core$IEncodeJS$_key__GT_js$dyn_4415(x);
  }
};
cljs.core.key__GT_js = function cljs$core$key__GT_js(var_args) {
  var G__4417 = arguments.length;
  switch(G__4417) {
    case 1:
      return cljs.core.key__GT_js.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.key__GT_js.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
cljs.core.key__GT_js.cljs$core$IFn$_invoke$arity$1 = function(k) {
  return cljs.core.key__GT_js.cljs$core$IFn$_invoke$arity$2(k, cljs.core.clj__GT_js);
};
cljs.core.key__GT_js.cljs$core$IFn$_invoke$arity$2 = function(k, primitive_fn) {
  if (!(k == null) ? false || cljs.core.PROTOCOL_SENTINEL === k.cljs$core$IEncodeJS$ ? true : !k.cljs$lang$protocol_mask$partition$ ? cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeJS, k) : false : cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeJS, k)) {
    return cljs.core._clj__GT_js(k);
  } else {
    if (typeof k === "string" || typeof k === "number" || k instanceof cljs.core.Keyword || k instanceof cljs.core.Symbol) {
      return primitive_fn.cljs$core$IFn$_invoke$arity$1 ? primitive_fn.cljs$core$IFn$_invoke$arity$1(k) : primitive_fn.call(null, k);
    } else {
      return cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([k], 0));
    }
  }
};
cljs.core.key__GT_js.cljs$lang$maxFixedArity = 2;
cljs.core.clj__GT_js = function cljs$core$clj__GT_js(var_args) {
  var args__4742__auto__ = [];
  var len__4736__auto___4471 = arguments.length;
  var i__4737__auto___4472 = 0;
  while (true) {
    if (i__4737__auto___4472 < len__4736__auto___4471) {
      args__4742__auto__.push(arguments[i__4737__auto___4472]);
      var G__4473 = i__4737__auto___4472 + 1;
      i__4737__auto___4472 = G__4473;
      continue;
    } else {
    }
    break;
  }
  var argseq__4743__auto__ = 1 < args__4742__auto__.length ? new cljs.core.IndexedSeq(args__4742__auto__.slice(1), 0, null) : null;
  return cljs.core.clj__GT_js.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__4743__auto__);
};
cljs.core.clj__GT_js.cljs$core$IFn$_invoke$arity$variadic = function(x, p__4422) {
  var map__4423 = p__4422;
  var map__4423__$1 = (!(map__4423 == null) ? map__4423.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === map__4423.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map, map__4423) : map__4423;
  var options = map__4423__$1;
  var keyword_fn = cljs.core.get.cljs$core$IFn$_invoke$arity$3(map__4423__$1, new cljs.core.Keyword(null, "keyword-fn", "keyword-fn", -64566675), cljs.core.name);
  var keyfn = function cljs$core$keyfn(k) {
    return cljs.core.key__GT_js.cljs$core$IFn$_invoke$arity$2(k, thisfn);
  };
  var thisfn = function cljs$core$thisfn(x__$1) {
    if (x__$1 == null) {
      return null;
    } else {
      if (!(x__$1 == null) ? false || cljs.core.PROTOCOL_SENTINEL === x__$1.cljs$core$IEncodeJS$ ? true : !x__$1.cljs$lang$protocol_mask$partition$ ? cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeJS, x__$1) : false : cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeJS, x__$1)) {
        return cljs.core._clj__GT_js(x__$1);
      } else {
        if (x__$1 instanceof cljs.core.Keyword) {
          return keyword_fn.cljs$core$IFn$_invoke$arity$1 ? keyword_fn.cljs$core$IFn$_invoke$arity$1(x__$1) : keyword_fn.call(null, x__$1);
        } else {
          if (x__$1 instanceof cljs.core.Symbol) {
            return cljs.core.str.cljs$core$IFn$_invoke$arity$1(x__$1);
          } else {
            if (cljs.core.map_QMARK_(x__$1)) {
              var m = {};
              var seq__4451_4474 = cljs.core.seq(x__$1);
              var chunk__4452_4475 = null;
              var count__4453_4476 = 0;
              var i__4454_4477 = 0;
              while (true) {
                if (i__4454_4477 < count__4453_4476) {
                  var vec__4461_4478 = chunk__4452_4475.cljs$core$IIndexed$_nth$arity$2(null, i__4454_4477);
                  var k_4479 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__4461_4478, 0, null);
                  var v_4480 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__4461_4478, 1, null);
                  goog.object.set(m, keyfn(k_4479), cljs$core$thisfn(v_4480));
                  var G__4481 = seq__4451_4474;
                  var G__4482 = chunk__4452_4475;
                  var G__4483 = count__4453_4476;
                  var G__4484 = i__4454_4477 + 1;
                  seq__4451_4474 = G__4481;
                  chunk__4452_4475 = G__4482;
                  count__4453_4476 = G__4483;
                  i__4454_4477 = G__4484;
                  continue;
                } else {
                  var temp__5735__auto___4485 = cljs.core.seq(seq__4451_4474);
                  if (temp__5735__auto___4485) {
                    var seq__4451_4486__$1 = temp__5735__auto___4485;
                    if (cljs.core.chunked_seq_QMARK_(seq__4451_4486__$1)) {
                      var c__4556__auto___4487 = cljs.core.chunk_first(seq__4451_4486__$1);
                      var G__4488 = cljs.core.chunk_rest(seq__4451_4486__$1);
                      var G__4489 = c__4556__auto___4487;
                      var G__4490 = cljs.core.count(c__4556__auto___4487);
                      var G__4491 = 0;
                      seq__4451_4474 = G__4488;
                      chunk__4452_4475 = G__4489;
                      count__4453_4476 = G__4490;
                      i__4454_4477 = G__4491;
                      continue;
                    } else {
                      var vec__4464_4492 = cljs.core.first(seq__4451_4486__$1);
                      var k_4493 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__4464_4492, 0, null);
                      var v_4494 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__4464_4492, 1, null);
                      goog.object.set(m, keyfn(k_4493), cljs$core$thisfn(v_4494));
                      var G__4495 = cljs.core.next(seq__4451_4486__$1);
                      var G__4496 = null;
                      var G__4497 = 0;
                      var G__4498 = 0;
                      seq__4451_4474 = G__4495;
                      chunk__4452_4475 = G__4496;
                      count__4453_4476 = G__4497;
                      i__4454_4477 = G__4498;
                      continue;
                    }
                  } else {
                  }
                }
                break;
              }
              return m;
            } else {
              if (cljs.core.coll_QMARK_(x__$1)) {
                var arr = [];
                var seq__4467_4499 = cljs.core.seq(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs$core$thisfn, x__$1));
                var chunk__4468_4500 = null;
                var count__4469_4501 = 0;
                var i__4470_4502 = 0;
                while (true) {
                  if (i__4470_4502 < count__4469_4501) {
                    var x_4503__$2 = chunk__4468_4500.cljs$core$IIndexed$_nth$arity$2(null, i__4470_4502);
                    arr.push(x_4503__$2);
                    var G__4504 = seq__4467_4499;
                    var G__4505 = chunk__4468_4500;
                    var G__4506 = count__4469_4501;
                    var G__4507 = i__4470_4502 + 1;
                    seq__4467_4499 = G__4504;
                    chunk__4468_4500 = G__4505;
                    count__4469_4501 = G__4506;
                    i__4470_4502 = G__4507;
                    continue;
                  } else {
                    var temp__5735__auto___4508 = cljs.core.seq(seq__4467_4499);
                    if (temp__5735__auto___4508) {
                      var seq__4467_4509__$1 = temp__5735__auto___4508;
                      if (cljs.core.chunked_seq_QMARK_(seq__4467_4509__$1)) {
                        var c__4556__auto___4510 = cljs.core.chunk_first(seq__4467_4509__$1);
                        var G__4511 = cljs.core.chunk_rest(seq__4467_4509__$1);
                        var G__4512 = c__4556__auto___4510;
                        var G__4513 = cljs.core.count(c__4556__auto___4510);
                        var G__4514 = 0;
                        seq__4467_4499 = G__4511;
                        chunk__4468_4500 = G__4512;
                        count__4469_4501 = G__4513;
                        i__4470_4502 = G__4514;
                        continue;
                      } else {
                        var x_4515__$2 = cljs.core.first(seq__4467_4509__$1);
                        arr.push(x_4515__$2);
                        var G__4516 = cljs.core.next(seq__4467_4509__$1);
                        var G__4517 = null;
                        var G__4518 = 0;
                        var G__4519 = 0;
                        seq__4467_4499 = G__4516;
                        chunk__4468_4500 = G__4517;
                        count__4469_4501 = G__4518;
                        i__4470_4502 = G__4519;
                        continue;
                      }
                    } else {
                    }
                  }
                  break;
                }
                return arr;
              } else {
                return x__$1;
              }
            }
          }
        }
      }
    }
  };
  return thisfn(x);
};
cljs.core.clj__GT_js.cljs$lang$maxFixedArity = 1;
cljs.core.clj__GT_js.cljs$lang$applyTo = function(seq4420) {
  var G__4421 = cljs.core.first(seq4420);
  var seq4420__$1 = cljs.core.next(seq4420);
  var self__4723__auto__ = this;
  return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__4421, seq4420__$1);
};
cljs.core.IEncodeClojure = function() {
};
var cljs$core$IEncodeClojure$_js__GT_clj$dyn_4520 = function(x, options) {
  var x__4428__auto__ = x == null ? null : x;
  var m__4429__auto__ = cljs.core._js__GT_clj[goog.typeOf(x__4428__auto__)];
  if (!(m__4429__auto__ == null)) {
    return m__4429__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4429__auto__.cljs$core$IFn$_invoke$arity$2(x, options) : m__4429__auto__.call(null, x, options);
  } else {
    var m__4426__auto__ = cljs.core._js__GT_clj["_"];
    if (!(m__4426__auto__ == null)) {
      return m__4426__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4426__auto__.cljs$core$IFn$_invoke$arity$2(x, options) : m__4426__auto__.call(null, x, options);
    } else {
      throw cljs.core.missing_protocol("IEncodeClojure.-js-\x3eclj", x);
    }
  }
};
cljs.core._js__GT_clj = function cljs$core$_js__GT_clj(x, options) {
  if (!(x == null) && !(x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2 == null)) {
    return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2(x, options);
  } else {
    return cljs$core$IEncodeClojure$_js__GT_clj$dyn_4520(x, options);
  }
};
cljs.core.js__GT_clj = function cljs$core$js__GT_clj(var_args) {
  var G__4526 = arguments.length;
  switch(G__4526) {
    case 1:
      return cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      var args_arr__4757__auto__ = [];
      var len__4736__auto___4531 = arguments.length;
      var i__4737__auto___4532 = 0;
      while (true) {
        if (i__4737__auto___4532 < len__4736__auto___4531) {
          args_arr__4757__auto__.push(arguments[i__4737__auto___4532]);
          var G__4533 = i__4737__auto___4532 + 1;
          i__4737__auto___4532 = G__4533;
          continue;
        } else {
        }
        break;
      }
      var argseq__4758__auto__ = new cljs.core.IndexedSeq(args_arr__4757__auto__.slice(1), 0, null);
      return cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__4758__auto__);
  }
};
cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252), false], 0));
};
cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$variadic = function(x, opts) {
  var map__4527 = opts;
  var map__4527__$1 = (!(map__4527 == null) ? map__4527.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === map__4527.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map, map__4527) : map__4527;
  var keywordize_keys = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__4527__$1, new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252));
  var keyfn = cljs.core.truth_(keywordize_keys) ? cljs.core.keyword : cljs.core.str;
  var f = function cljs$core$thisfn(x__$1) {
    if (!(x__$1 == null) ? false || cljs.core.PROTOCOL_SENTINEL === x__$1.cljs$core$IEncodeClojure$ ? true : !x__$1.cljs$lang$protocol_mask$partition$ ? cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeClojure, x__$1) : false : cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeClojure, x__$1)) {
      return cljs.core._js__GT_clj(x__$1, cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.array_map, opts));
    } else {
      if (cljs.core.seq_QMARK_(x__$1)) {
        return cljs.core.doall.cljs$core$IFn$_invoke$arity$1(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs$core$thisfn, x__$1));
      } else {
        if (cljs.core.map_entry_QMARK_(x__$1)) {
          return new cljs.core.MapEntry(cljs$core$thisfn(cljs.core.key(x__$1)), cljs$core$thisfn(cljs.core.val(x__$1)), null);
        } else {
          if (cljs.core.coll_QMARK_(x__$1)) {
            return cljs.core.into.cljs$core$IFn$_invoke$arity$3(cljs.core.empty(x__$1), cljs.core.map.cljs$core$IFn$_invoke$arity$1(cljs$core$thisfn), x__$1);
          } else {
            if (cljs.core.array_QMARK_(x__$1)) {
              return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(p1__4521_SHARP_, p2__4522_SHARP_) {
                return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(p1__4521_SHARP_, cljs$core$thisfn(p2__4522_SHARP_));
              }, cljs.core.transient$(cljs.core.PersistentVector.EMPTY), x__$1));
            } else {
              if (cljs.core.type(x__$1) === Object) {
                return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(r, k) {
                  return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(r, keyfn.cljs$core$IFn$_invoke$arity$1 ? keyfn.cljs$core$IFn$_invoke$arity$1(k) : keyfn.call(null, k), cljs$core$thisfn(goog.object.get(x__$1, k)));
                }, cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY), cljs.core.js_keys(x__$1)));
              } else {
                return x__$1;
              }
            }
          }
        }
      }
    }
  };
  return f(x);
};
cljs.core.js__GT_clj.cljs$lang$applyTo = function(seq4524) {
  var G__4525 = cljs.core.first(seq4524);
  var seq4524__$1 = cljs.core.next(seq4524);
  var self__4723__auto__ = this;
  return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__4525, seq4524__$1);
};
cljs.core.js__GT_clj.cljs$lang$maxFixedArity = 1;
cljs.core.memoize = function cljs$core$memoize(f) {
  var mem = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);
  return function() {
    var G__4534__delegate = function(args) {
      var v = cljs.core.get.cljs$core$IFn$_invoke$arity$3(cljs.core.deref(mem), args, cljs.core.lookup_sentinel);
      if (v === cljs.core.lookup_sentinel) {
        var ret = cljs.core.apply.cljs$core$IFn$_invoke$arity$2(f, args);
        cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(mem, cljs.core.assoc, args, ret);
        return ret;
      } else {
        return v;
      }
    };
    var G__4534 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        var G__4535__i = 0, G__4535__a = new Array(arguments.length - 0);
        while (G__4535__i < G__4535__a.length) {
          G__4535__a[G__4535__i] = arguments[G__4535__i + 0];
          ++G__4535__i;
        }
        args = new cljs.core.IndexedSeq(G__4535__a, 0, null);
      }
      return G__4534__delegate.call(this, args);
    };
    G__4534.cljs$lang$maxFixedArity = 0;
    G__4534.cljs$lang$applyTo = function(arglist__4536) {
      var args = cljs.core.seq(arglist__4536);
      return G__4534__delegate(args);
    };
    G__4534.cljs$core$IFn$_invoke$arity$variadic = G__4534__delegate;
    return G__4534;
  }();
};
cljs.core.trampoline = function cljs$core$trampoline(var_args) {
  var G__4540 = arguments.length;
  switch(G__4540) {
    case 1:
      return cljs.core.trampoline.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      var args_arr__4757__auto__ = [];
      var len__4736__auto___4542 = arguments.length;
      var i__4737__auto___4543 = 0;
      while (true) {
        if (i__4737__auto___4543 < len__4736__auto___4542) {
          args_arr__4757__auto__.push(arguments[i__4737__auto___4543]);
          var G__4544 = i__4737__auto___4543 + 1;
          i__4737__auto___4543 = G__4544;
          continue;
        } else {
        }
        break;
      }
      var argseq__4758__auto__ = new cljs.core.IndexedSeq(args_arr__4757__auto__.slice(1), 0, null);
      return cljs.core.trampoline.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__4758__auto__);
  }
};
cljs.core.trampoline.cljs$core$IFn$_invoke$arity$1 = function(f) {
  while (true) {
    var ret = f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
    if (cljs.core.fn_QMARK_(ret)) {
      var G__4545 = ret;
      f = G__4545;
      continue;
    } else {
      return ret;
    }
    break;
  }
};
cljs.core.trampoline.cljs$core$IFn$_invoke$arity$variadic = function(f, args) {
  return cljs.core.trampoline.cljs$core$IFn$_invoke$arity$1(function() {
    return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(f, args);
  });
};
cljs.core.trampoline.cljs$lang$applyTo = function(seq4538) {
  var G__4539 = cljs.core.first(seq4538);
  var seq4538__$1 = cljs.core.next(seq4538);
  var self__4723__auto__ = this;
  return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__4539, seq4538__$1);
};
cljs.core.trampoline.cljs$lang$maxFixedArity = 1;
cljs.core.rand = function cljs$core$rand(var_args) {
  var G__4547 = arguments.length;
  switch(G__4547) {
    case 0:
      return cljs.core.rand.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.rand.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
cljs.core.rand.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.rand.cljs$core$IFn$_invoke$arity$1(1);
};
cljs.core.rand.cljs$core$IFn$_invoke$arity$1 = function(n) {
  return Math.random() * n;
};
cljs.core.rand.cljs$lang$maxFixedArity = 1;
cljs.core.rand_int = function cljs$core$rand_int(n) {
  var G__4549 = Math.random() * n;
  return Math.floor(G__4549);
};
cljs.core.rand_nth = function cljs$core$rand_nth(coll) {
  return cljs.core.nth.cljs$core$IFn$_invoke$arity$2(coll, cljs.core.rand_int(cljs.core.count(coll)));
};
cljs.core.group_by = function cljs$core$group_by(f, coll) {
  return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(ret, x) {
    var k = f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(x) : f.call(null, x);
    return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(ret, k, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(ret, k, cljs.core.PersistentVector.EMPTY), x));
  }, cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY), coll));
};
cljs.core.make_hierarchy = function cljs$core$make_hierarchy() {
  return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", -2027538891), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "descendants", "descendants", 1824886031), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424), cljs.core.PersistentArrayMap.EMPTY], null);
};
cljs.core._global_hierarchy = null;
cljs.core.get_global_hierarchy = function cljs$core$get_global_hierarchy() {
  if (cljs.core._global_hierarchy == null) {
    cljs.core._global_hierarchy = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.make_hierarchy());
  } else {
  }
  return cljs.core._global_hierarchy;
};
cljs.core.swap_global_hierarchy_BANG_ = function cljs$core$swap_global_hierarchy_BANG_(var_args) {
  var args__4742__auto__ = [];
  var len__4736__auto___4552 = arguments.length;
  var i__4737__auto___4553 = 0;
  while (true) {
    if (i__4737__auto___4553 < len__4736__auto___4552) {
      args__4742__auto__.push(arguments[i__4737__auto___4553]);
      var G__4554 = i__4737__auto___4553 + 1;
      i__4737__auto___4553 = G__4554;
      continue;
    } else {
    }
    break;
  }
  var argseq__4743__auto__ = 1 < args__4742__auto__.length ? new cljs.core.IndexedSeq(args__4742__auto__.slice(1), 0, null) : null;
  return cljs.core.swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__4743__auto__);
};
cljs.core.swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(f, args) {
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$4(cljs.core.swap_BANG_, cljs.core.get_global_hierarchy(), f, args);
};
cljs.core.swap_global_hierarchy_BANG_.cljs$lang$maxFixedArity = 1;
cljs.core.swap_global_hierarchy_BANG_.cljs$lang$applyTo = function(seq4550) {
  var G__4551 = cljs.core.first(seq4550);
  var seq4550__$1 = cljs.core.next(seq4550);
  var self__4723__auto__ = this;
  return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__4551, seq4550__$1);
};
cljs.core.isa_QMARK_ = function cljs$core$isa_QMARK_(var_args) {
  var G__4556 = arguments.length;
  switch(G__4556) {
    case 2:
      return cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$2 = function(child, parent) {
  return cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$3(cljs.core.deref(cljs.core.get_global_hierarchy()), child, parent);
};
cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$3 = function(h, child, parent) {
  var or__4126__auto__ = cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(child, parent);
  if (or__4126__auto__) {
    return or__4126__auto__;
  } else {
    var or__4126__auto____$1 = cljs.core.contains_QMARK_(function() {
      var fexpr__4559 = (new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h);
      return fexpr__4559.cljs$core$IFn$_invoke$arity$1 ? fexpr__4559.cljs$core$IFn$_invoke$arity$1(child) : fexpr__4559.call(null, child);
    }(), parent);
    if (or__4126__auto____$1) {
      return or__4126__auto____$1;
    } else {
      if (cljs.core.vector_QMARK_(parent)) {
        if (cljs.core.vector_QMARK_(child)) {
          if (cljs.core.count(parent) === cljs.core.count(child)) {
            var ret = true;
            var i = 0;
            while (true) {
              if (!ret || i === cljs.core.count(parent)) {
                return ret;
              } else {
                var G__4561 = cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$3(h, child.cljs$core$IFn$_invoke$arity$1 ? child.cljs$core$IFn$_invoke$arity$1(i) : child.call(null, i), parent.cljs$core$IFn$_invoke$arity$1 ? parent.cljs$core$IFn$_invoke$arity$1(i) : parent.call(null, i));
                var G__4562 = i + 1;
                ret = G__4561;
                i = G__4562;
                continue;
              }
              break;
            }
          } else {
            return false;
          }
        } else {
          return false;
        }
      } else {
        return false;
      }
    }
  }
};
cljs.core.isa_QMARK_.cljs$lang$maxFixedArity = 3;
cljs.core.parents = function cljs$core$parents(var_args) {
  var G__4564 = arguments.length;
  switch(G__4564) {
    case 1:
      return cljs.core.parents.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.parents.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
cljs.core.parents.cljs$core$IFn$_invoke$arity$1 = function(tag) {
  return cljs.core.parents.cljs$core$IFn$_invoke$arity$2(cljs.core.deref(cljs.core.get_global_hierarchy()), tag);
};
cljs.core.parents.cljs$core$IFn$_invoke$arity$2 = function(h, tag) {
  return cljs.core.not_empty(cljs.core.get.cljs$core$IFn$_invoke$arity$2((new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h), tag));
};
cljs.core.parents.cljs$lang$maxFixedArity = 2;
cljs.core.ancestors = function cljs$core$ancestors(var_args) {
  var G__4567 = arguments.length;
  switch(G__4567) {
    case 1:
      return cljs.core.ancestors.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.ancestors.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
cljs.core.ancestors.cljs$core$IFn$_invoke$arity$1 = function(tag) {
  return cljs.core.ancestors.cljs$core$IFn$_invoke$arity$2(cljs.core.deref(cljs.core.get_global_hierarchy()), tag);
};
cljs.core.ancestors.cljs$core$IFn$_invoke$arity$2 = function(h, tag) {
  return cljs.core.not_empty(cljs.core.get.cljs$core$IFn$_invoke$arity$2((new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h), tag));
};
cljs.core.ancestors.cljs$lang$maxFixedArity = 2;
cljs.core.descendants = function cljs$core$descendants(var_args) {
  var G__4570 = arguments.length;
  switch(G__4570) {
    case 1:
      return cljs.core.descendants.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.descendants.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
cljs.core.descendants.cljs$core$IFn$_invoke$arity$1 = function(tag) {
  return cljs.core.descendants.cljs$core$IFn$_invoke$arity$2(cljs.core.deref(cljs.core.get_global_hierarchy()), tag);
};
cljs.core.descendants.cljs$core$IFn$_invoke$arity$2 = function(h, tag) {
  return cljs.core.not_empty(cljs.core.get.cljs$core$IFn$_invoke$arity$2((new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h), tag));
};
cljs.core.descendants.cljs$lang$maxFixedArity = 2;
cljs.core.derive = function cljs$core$derive(var_args) {
  var G__4573 = arguments.length;
  switch(G__4573) {
    case 2:
      return cljs.core.derive.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.derive.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
cljs.core.derive.cljs$core$IFn$_invoke$arity$2 = function(tag, parent) {
  if (cljs.core.truth_(cljs.core.namespace(parent))) {
  } else {
    throw new Error("Assert failed: (namespace parent)");
  }
  cljs.core.swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic(cljs.core.derive, cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([tag, parent], 0));
  return null;
};
cljs.core.derive.cljs$core$IFn$_invoke$arity$3 = function(h, tag, parent) {
  if (cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(tag, parent)) {
  } else {
    throw new Error("Assert failed: (not\x3d tag parent)");
  }
  var tp = (new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h);
  var td = (new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h);
  var ta = (new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h);
  var tf = function(m, source, sources, target, targets) {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(ret, k) {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(ret, k, cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj, cljs.core.get.cljs$core$IFn$_invoke$arity$3(targets, k, cljs.core.PersistentHashSet.EMPTY), cljs.core.cons(target, targets.cljs$core$IFn$_invoke$arity$1 ? targets.cljs$core$IFn$_invoke$arity$1(target) : targets.call(null, target))));
    }, m, cljs.core.cons(source, sources.cljs$core$IFn$_invoke$arity$1 ? sources.cljs$core$IFn$_invoke$arity$1(source) : sources.call(null, source)));
  };
  var or__4126__auto__ = cljs.core.contains_QMARK_(tp.cljs$core$IFn$_invoke$arity$1 ? tp.cljs$core$IFn$_invoke$arity$1(tag) : tp.call(null, tag), parent) ? null : function() {
    if (cljs.core.contains_QMARK_(ta.cljs$core$IFn$_invoke$arity$1 ? ta.cljs$core$IFn$_invoke$arity$1(tag) : ta.call(null, tag), parent)) {
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag), "already has", cljs.core.str.cljs$core$IFn$_invoke$arity$1(parent), "as ancestor"].join(""));
    } else {
    }
    if (cljs.core.contains_QMARK_(ta.cljs$core$IFn$_invoke$arity$1 ? ta.cljs$core$IFn$_invoke$arity$1(parent) : ta.call(null, parent), tag)) {
      throw new Error(["Cyclic derivation:", cljs.core.str.cljs$core$IFn$_invoke$arity$1(parent), "has", cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag), "as ancestor"].join(""));
    } else {
    }
    return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", -2027538891), cljs.core.assoc.cljs$core$IFn$_invoke$arity$3((new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h), tag, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(tp, tag, cljs.core.PersistentHashSet.EMPTY), parent)), new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424), tf((new cljs.core.Keyword(null, 
    "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h), tag, td, parent, ta), new cljs.core.Keyword(null, "descendants", "descendants", 1824886031), tf((new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h), parent, ta, tag, td)], null);
  }();
  if (cljs.core.truth_(or__4126__auto__)) {
    return or__4126__auto__;
  } else {
    return h;
  }
};
cljs.core.derive.cljs$lang$maxFixedArity = 3;
cljs.core.underive = function cljs$core$underive(var_args) {
  var G__4579 = arguments.length;
  switch(G__4579) {
    case 2:
      return cljs.core.underive.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.underive.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
cljs.core.underive.cljs$core$IFn$_invoke$arity$2 = function(tag, parent) {
  cljs.core.swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic(cljs.core.underive, cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([tag, parent], 0));
  return null;
};
cljs.core.underive.cljs$core$IFn$_invoke$arity$3 = function(h, tag, parent) {
  var parentMap = (new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h);
  var childsParents = cljs.core.truth_(parentMap.cljs$core$IFn$_invoke$arity$1 ? parentMap.cljs$core$IFn$_invoke$arity$1(tag) : parentMap.call(null, tag)) ? cljs.core.disj.cljs$core$IFn$_invoke$arity$2(parentMap.cljs$core$IFn$_invoke$arity$1 ? parentMap.cljs$core$IFn$_invoke$arity$1(tag) : parentMap.call(null, tag), parent) : cljs.core.PersistentHashSet.EMPTY;
  var newParents = cljs.core.truth_(cljs.core.not_empty(childsParents)) ? cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(parentMap, tag, childsParents) : cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(parentMap, tag);
  var deriv_seq = cljs.core.flatten(cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(p1__4575_SHARP_) {
    return cljs.core.cons(cljs.core.first(p1__4575_SHARP_), cljs.core.interpose.cljs$core$IFn$_invoke$arity$2(cljs.core.first(p1__4575_SHARP_), cljs.core.second(p1__4575_SHARP_)));
  }, cljs.core.seq(newParents)));
  if (cljs.core.contains_QMARK_(parentMap.cljs$core$IFn$_invoke$arity$1 ? parentMap.cljs$core$IFn$_invoke$arity$1(tag) : parentMap.call(null, tag), parent)) {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(p1__4576_SHARP_, p2__4577_SHARP_) {
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.derive, p1__4576_SHARP_, p2__4577_SHARP_);
    }, cljs.core.make_hierarchy(), cljs.core.partition.cljs$core$IFn$_invoke$arity$2(2, deriv_seq));
  } else {
    return h;
  }
};
cljs.core.underive.cljs$lang$maxFixedArity = 3;
cljs.core.reset_cache = function cljs$core$reset_cache(method_cache, method_table, cached_hierarchy, hierarchy) {
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(method_cache, function(_) {
    return cljs.core.deref(method_table);
  });
  return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(cached_hierarchy, function(_) {
    return cljs.core.deref(hierarchy);
  });
};
cljs.core.prefers_STAR_ = function cljs$core$prefers_STAR_(x, y, prefer_table) {
  var xprefs = function() {
    var fexpr__4581 = cljs.core.deref(prefer_table);
    return fexpr__4581.cljs$core$IFn$_invoke$arity$1 ? fexpr__4581.cljs$core$IFn$_invoke$arity$1(x) : fexpr__4581.call(null, x);
  }();
  var or__4126__auto__ = cljs.core.truth_(function() {
    var and__4115__auto__ = xprefs;
    if (cljs.core.truth_(and__4115__auto__)) {
      return xprefs.cljs$core$IFn$_invoke$arity$1 ? xprefs.cljs$core$IFn$_invoke$arity$1(y) : xprefs.call(null, y);
    } else {
      return and__4115__auto__;
    }
  }()) ? true : null;
  if (cljs.core.truth_(or__4126__auto__)) {
    return or__4126__auto__;
  } else {
    var or__4126__auto____$1 = function() {
      var ps = cljs.core.parents.cljs$core$IFn$_invoke$arity$1(y);
      while (true) {
        if (cljs.core.count(ps) > 0) {
          if (cljs.core.truth_(function() {
            var G__4585 = x;
            var G__4586 = cljs.core.first(ps);
            var G__4587 = prefer_table;
            return cljs.core.prefers_STAR_.cljs$core$IFn$_invoke$arity$3 ? cljs.core.prefers_STAR_.cljs$core$IFn$_invoke$arity$3(G__4585, G__4586, G__4587) : cljs.core.prefers_STAR_.call(null, G__4585, G__4586, G__4587);
          }())) {
          } else {
          }
          var G__4594 = cljs.core.rest(ps);
          ps = G__4594;
          continue;
        } else {
          return null;
        }
        break;
      }
    }();
    if (cljs.core.truth_(or__4126__auto____$1)) {
      return or__4126__auto____$1;
    } else {
      var or__4126__auto____$2 = function() {
        var ps = cljs.core.parents.cljs$core$IFn$_invoke$arity$1(x);
        while (true) {
          if (cljs.core.count(ps) > 0) {
            if (cljs.core.truth_(function() {
              var G__4591 = cljs.core.first(ps);
              var G__4592 = y;
              var G__4593 = prefer_table;
              return cljs.core.prefers_STAR_.cljs$core$IFn$_invoke$arity$3 ? cljs.core.prefers_STAR_.cljs$core$IFn$_invoke$arity$3(G__4591, G__4592, G__4593) : cljs.core.prefers_STAR_.call(null, G__4591, G__4592, G__4593);
            }())) {
            } else {
            }
            var G__4595 = cljs.core.rest(ps);
            ps = G__4595;
            continue;
          } else {
            return null;
          }
          break;
        }
      }();
      if (cljs.core.truth_(or__4126__auto____$2)) {
        return or__4126__auto____$2;
      } else {
        return false;
      }
    }
  }
};
cljs.core.dominates = function cljs$core$dominates(x, y, prefer_table, hierarchy) {
  var or__4126__auto__ = cljs.core.prefers_STAR_(x, y, prefer_table);
  if (cljs.core.truth_(or__4126__auto__)) {
    return or__4126__auto__;
  } else {
    return cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$3(hierarchy, x, y);
  }
};
cljs.core.find_and_cache_best_method = function cljs$core$find_and_cache_best_method(name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy, default_dispatch_val) {
  var best_entry = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(be, p__4596) {
    var vec__4597 = p__4596;
    var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__4597, 0, null);
    var _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__4597, 1, null);
    var e = vec__4597;
    if (cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$3(cljs.core.deref(hierarchy), dispatch_val, k)) {
      var be2 = be == null || cljs.core.dominates(k, cljs.core.first(be), prefer_table, cljs.core.deref(hierarchy)) ? e : be;
      if (cljs.core.dominates(cljs.core.first(be2), k, prefer_table, cljs.core.deref(hierarchy))) {
      } else {
        throw new Error(["Multiple methods in multimethod '", cljs.core.str.cljs$core$IFn$_invoke$arity$1(name), "' match dispatch value: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(dispatch_val), " -\x3e ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(k), " and ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.first(be2)), ", and neither is preferred"].join(""));
      }
      return be2;
    } else {
      return be;
    }
  }, null, cljs.core.deref(method_table));
  var best_entry__$1 = function() {
    var temp__5733__auto__ = best_entry == null ? function() {
      var fexpr__4601 = cljs.core.deref(method_table);
      return fexpr__4601.cljs$core$IFn$_invoke$arity$1 ? fexpr__4601.cljs$core$IFn$_invoke$arity$1(default_dispatch_val) : fexpr__4601.call(null, default_dispatch_val);
    }() : false;
    if (cljs.core.truth_(temp__5733__auto__)) {
      var entry = temp__5733__auto__;
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [default_dispatch_val, entry], null);
    } else {
      return best_entry;
    }
  }();
  if (cljs.core.truth_(best_entry__$1)) {
    if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.deref(cached_hierarchy), cljs.core.deref(hierarchy))) {
      cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(method_cache, cljs.core.assoc, dispatch_val, cljs.core.second(best_entry__$1));
      return cljs.core.second(best_entry__$1);
    } else {
      cljs.core.reset_cache(method_cache, method_table, cached_hierarchy, hierarchy);
      return cljs.core.find_and_cache_best_method.cljs$core$IFn$_invoke$arity$8 ? cljs.core.find_and_cache_best_method.cljs$core$IFn$_invoke$arity$8(name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy, default_dispatch_val) : cljs.core.find_and_cache_best_method.call(null, name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy, default_dispatch_val);
    }
  } else {
    return null;
  }
};
cljs.core.IMultiFn = function() {
};
var cljs$core$IMultiFn$_reset$dyn_4602 = function(mf) {
  var x__4428__auto__ = mf == null ? null : mf;
  var m__4429__auto__ = cljs.core._reset[goog.typeOf(x__4428__auto__)];
  if (!(m__4429__auto__ == null)) {
    return m__4429__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4429__auto__.cljs$core$IFn$_invoke$arity$1(mf) : m__4429__auto__.call(null, mf);
  } else {
    var m__4426__auto__ = cljs.core._reset["_"];
    if (!(m__4426__auto__ == null)) {
      return m__4426__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4426__auto__.cljs$core$IFn$_invoke$arity$1(mf) : m__4426__auto__.call(null, mf);
    } else {
      throw cljs.core.missing_protocol("IMultiFn.-reset", mf);
    }
  }
};
cljs.core._reset = function cljs$core$_reset(mf) {
  if (!(mf == null) && !(mf.cljs$core$IMultiFn$_reset$arity$1 == null)) {
    return mf.cljs$core$IMultiFn$_reset$arity$1(mf);
  } else {
    return cljs$core$IMultiFn$_reset$dyn_4602(mf);
  }
};
var cljs$core$IMultiFn$_add_method$dyn_4603 = function(mf, dispatch_val, method) {
  var x__4428__auto__ = mf == null ? null : mf;
  var m__4429__auto__ = cljs.core._add_method[goog.typeOf(x__4428__auto__)];
  if (!(m__4429__auto__ == null)) {
    return m__4429__auto__.cljs$core$IFn$_invoke$arity$3 ? m__4429__auto__.cljs$core$IFn$_invoke$arity$3(mf, dispatch_val, method) : m__4429__auto__.call(null, mf, dispatch_val, method);
  } else {
    var m__4426__auto__ = cljs.core._add_method["_"];
    if (!(m__4426__auto__ == null)) {
      return m__4426__auto__.cljs$core$IFn$_invoke$arity$3 ? m__4426__auto__.cljs$core$IFn$_invoke$arity$3(mf, dispatch_val, method) : m__4426__auto__.call(null, mf, dispatch_val, method);
    } else {
      throw cljs.core.missing_protocol("IMultiFn.-add-method", mf);
    }
  }
};
cljs.core._add_method = function cljs$core$_add_method(mf, dispatch_val, method) {
  if (!(mf == null) && !(mf.cljs$core$IMultiFn$_add_method$arity$3 == null)) {
    return mf.cljs$core$IMultiFn$_add_method$arity$3(mf, dispatch_val, method);
  } else {
    return cljs$core$IMultiFn$_add_method$dyn_4603(mf, dispatch_val, method);
  }
};
var cljs$core$IMultiFn$_remove_method$dyn_4604 = function(mf, dispatch_val) {
  var x__4428__auto__ = mf == null ? null : mf;
  var m__4429__auto__ = cljs.core._remove_method[goog.typeOf(x__4428__auto__)];
  if (!(m__4429__auto__ == null)) {
    return m__4429__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4429__auto__.cljs$core$IFn$_invoke$arity$2(mf, dispatch_val) : m__4429__auto__.call(null, mf, dispatch_val);
  } else {
    var m__4426__auto__ = cljs.core._remove_method["_"];
    if (!(m__4426__auto__ == null)) {
      return m__4426__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4426__auto__.cljs$core$IFn$_invoke$arity$2(mf, dispatch_val) : m__4426__auto__.call(null, mf, dispatch_val);
    } else {
      throw cljs.core.missing_protocol("IMultiFn.-remove-method", mf);
    }
  }
};
cljs.core._remove_method = function cljs$core$_remove_method(mf, dispatch_val) {
  if (!(mf == null) && !(mf.cljs$core$IMultiFn$_remove_method$arity$2 == null)) {
    return mf.cljs$core$IMultiFn$_remove_method$arity$2(mf, dispatch_val);
  } else {
    return cljs$core$IMultiFn$_remove_method$dyn_4604(mf, dispatch_val);
  }
};
var cljs$core$IMultiFn$_prefer_method$dyn_4605 = function(mf, dispatch_val, dispatch_val_y) {
  var x__4428__auto__ = mf == null ? null : mf;
  var m__4429__auto__ = cljs.core._prefer_method[goog.typeOf(x__4428__auto__)];
  if (!(m__4429__auto__ == null)) {
    return m__4429__auto__.cljs$core$IFn$_invoke$arity$3 ? m__4429__auto__.cljs$core$IFn$_invoke$arity$3(mf, dispatch_val, dispatch_val_y) : m__4429__auto__.call(null, mf, dispatch_val, dispatch_val_y);
  } else {
    var m__4426__auto__ = cljs.core._prefer_method["_"];
    if (!(m__4426__auto__ == null)) {
      return m__4426__auto__.cljs$core$IFn$_invoke$arity$3 ? m__4426__auto__.cljs$core$IFn$_invoke$arity$3(mf, dispatch_val, dispatch_val_y) : m__4426__auto__.call(null, mf, dispatch_val, dispatch_val_y);
    } else {
      throw cljs.core.missing_protocol("IMultiFn.-prefer-method", mf);
    }
  }
};
cljs.core._prefer_method = function cljs$core$_prefer_method(mf, dispatch_val, dispatch_val_y) {
  if (!(mf == null) && !(mf.cljs$core$IMultiFn$_prefer_method$arity$3 == null)) {
    return mf.cljs$core$IMultiFn$_prefer_method$arity$3(mf, dispatch_val, dispatch_val_y);
  } else {
    return cljs$core$IMultiFn$_prefer_method$dyn_4605(mf, dispatch_val, dispatch_val_y);
  }
};
var cljs$core$IMultiFn$_get_method$dyn_4606 = function(mf, dispatch_val) {
  var x__4428__auto__ = mf == null ? null : mf;
  var m__4429__auto__ = cljs.core._get_method[goog.typeOf(x__4428__auto__)];
  if (!(m__4429__auto__ == null)) {
    return m__4429__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4429__auto__.cljs$core$IFn$_invoke$arity$2(mf, dispatch_val) : m__4429__auto__.call(null, mf, dispatch_val);
  } else {
    var m__4426__auto__ = cljs.core._get_method["_"];
    if (!(m__4426__auto__ == null)) {
      return m__4426__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4426__auto__.cljs$core$IFn$_invoke$arity$2(mf, dispatch_val) : m__4426__auto__.call(null, mf, dispatch_val);
    } else {
      throw cljs.core.missing_protocol("IMultiFn.-get-method", mf);
    }
  }
};
cljs.core._get_method = function cljs$core$_get_method(mf, dispatch_val) {
  if (!(mf == null) && !(mf.cljs$core$IMultiFn$_get_method$arity$2 == null)) {
    return mf.cljs$core$IMultiFn$_get_method$arity$2(mf, dispatch_val);
  } else {
    return cljs$core$IMultiFn$_get_method$dyn_4606(mf, dispatch_val);
  }
};
var cljs$core$IMultiFn$_methods$dyn_4607 = function(mf) {
  var x__4428__auto__ = mf == null ? null : mf;
  var m__4429__auto__ = cljs.core._methods[goog.typeOf(x__4428__auto__)];
  if (!(m__4429__auto__ == null)) {
    return m__4429__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4429__auto__.cljs$core$IFn$_invoke$arity$1(mf) : m__4429__auto__.call(null, mf);
  } else {
    var m__4426__auto__ = cljs.core._methods["_"];
    if (!(m__4426__auto__ == null)) {
      return m__4426__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4426__auto__.cljs$core$IFn$_invoke$arity$1(mf) : m__4426__auto__.call(null, mf);
    } else {
      throw cljs.core.missing_protocol("IMultiFn.-methods", mf);
    }
  }
};
cljs.core._methods = function cljs$core$_methods(mf) {
  if (!(mf == null) && !(mf.cljs$core$IMultiFn$_methods$arity$1 == null)) {
    return mf.cljs$core$IMultiFn$_methods$arity$1(mf);
  } else {
    return cljs$core$IMultiFn$_methods$dyn_4607(mf);
  }
};
var cljs$core$IMultiFn$_prefers$dyn_4608 = function(mf) {
  var x__4428__auto__ = mf == null ? null : mf;
  var m__4429__auto__ = cljs.core._prefers[goog.typeOf(x__4428__auto__)];
  if (!(m__4429__auto__ == null)) {
    return m__4429__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4429__auto__.cljs$core$IFn$_invoke$arity$1(mf) : m__4429__auto__.call(null, mf);
  } else {
    var m__4426__auto__ = cljs.core._prefers["_"];
    if (!(m__4426__auto__ == null)) {
      return m__4426__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4426__auto__.cljs$core$IFn$_invoke$arity$1(mf) : m__4426__auto__.call(null, mf);
    } else {
      throw cljs.core.missing_protocol("IMultiFn.-prefers", mf);
    }
  }
};
cljs.core._prefers = function cljs$core$_prefers(mf) {
  if (!(mf == null) && !(mf.cljs$core$IMultiFn$_prefers$arity$1 == null)) {
    return mf.cljs$core$IMultiFn$_prefers$arity$1(mf);
  } else {
    return cljs$core$IMultiFn$_prefers$dyn_4608(mf);
  }
};
var cljs$core$IMultiFn$_default_dispatch_val$dyn_4609 = function(mf) {
  var x__4428__auto__ = mf == null ? null : mf;
  var m__4429__auto__ = cljs.core._default_dispatch_val[goog.typeOf(x__4428__auto__)];
  if (!(m__4429__auto__ == null)) {
    return m__4429__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4429__auto__.cljs$core$IFn$_invoke$arity$1(mf) : m__4429__auto__.call(null, mf);
  } else {
    var m__4426__auto__ = cljs.core._default_dispatch_val["_"];
    if (!(m__4426__auto__ == null)) {
      return m__4426__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4426__auto__.cljs$core$IFn$_invoke$arity$1(mf) : m__4426__auto__.call(null, mf);
    } else {
      throw cljs.core.missing_protocol("IMultiFn.-default-dispatch-val", mf);
    }
  }
};
cljs.core._default_dispatch_val = function cljs$core$_default_dispatch_val(mf) {
  if (!(mf == null) && !(mf.cljs$core$IMultiFn$_default_dispatch_val$arity$1 == null)) {
    return mf.cljs$core$IMultiFn$_default_dispatch_val$arity$1(mf);
  } else {
    return cljs$core$IMultiFn$_default_dispatch_val$dyn_4609(mf);
  }
};
var cljs$core$IMultiFn$_dispatch_fn$dyn_4610 = function(mf) {
  var x__4428__auto__ = mf == null ? null : mf;
  var m__4429__auto__ = cljs.core._dispatch_fn[goog.typeOf(x__4428__auto__)];
  if (!(m__4429__auto__ == null)) {
    return m__4429__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4429__auto__.cljs$core$IFn$_invoke$arity$1(mf) : m__4429__auto__.call(null, mf);
  } else {
    var m__4426__auto__ = cljs.core._dispatch_fn["_"];
    if (!(m__4426__auto__ == null)) {
      return m__4426__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4426__auto__.cljs$core$IFn$_invoke$arity$1(mf) : m__4426__auto__.call(null, mf);
    } else {
      throw cljs.core.missing_protocol("IMultiFn.-dispatch-fn", mf);
    }
  }
};
cljs.core._dispatch_fn = function cljs$core$_dispatch_fn(mf) {
  if (!(mf == null) && !(mf.cljs$core$IMultiFn$_dispatch_fn$arity$1 == null)) {
    return mf.cljs$core$IMultiFn$_dispatch_fn$arity$1(mf);
  } else {
    return cljs$core$IMultiFn$_dispatch_fn$dyn_4610(mf);
  }
};
cljs.core.throw_no_method_error = function cljs$core$throw_no_method_error(name, dispatch_val) {
  throw new Error(["No method in multimethod '", cljs.core.str.cljs$core$IFn$_invoke$arity$1(name), "' for dispatch value: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(dispatch_val)].join(""));
};
cljs.core.MultiFn = function(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  this.name = name;
  this.dispatch_fn = dispatch_fn;
  this.default_dispatch_val = default_dispatch_val;
  this.hierarchy = hierarchy;
  this.method_table = method_table;
  this.prefer_table = prefer_table;
  this.method_cache = method_cache;
  this.cached_hierarchy = cached_hierarchy;
  this.cljs$lang$protocol_mask$partition0$ = 4194305;
  this.cljs$lang$protocol_mask$partition1$ = 4352;
};
cljs.core.MultiFn.prototype.call = function() {
  var G__4613 = null;
  var G__4613__1 = function(self__) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$0 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$0() : self__.dispatch_fn.call(null);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$0 ? target_fn.cljs$core$IFn$_invoke$arity$0() : target_fn.call(null);
  };
  var G__4613__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$1 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$1(a) : self__.dispatch_fn.call(null, a);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$1 ? target_fn.cljs$core$IFn$_invoke$arity$1(a) : target_fn.call(null, a);
  };
  var G__4613__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$2 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$2(a, b) : self__.dispatch_fn.call(null, a, b);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$2 ? target_fn.cljs$core$IFn$_invoke$arity$2(a, b) : target_fn.call(null, a, b);
  };
  var G__4613__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$3 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$3(a, b, c) : self__.dispatch_fn.call(null, a, b, c);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$3 ? target_fn.cljs$core$IFn$_invoke$arity$3(a, b, c) : target_fn.call(null, a, b, c);
  };
  var G__4613__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$4 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$4(a, b, c, d) : self__.dispatch_fn.call(null, a, b, c, d);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$4 ? target_fn.cljs$core$IFn$_invoke$arity$4(a, b, c, d) : target_fn.call(null, a, b, c, d);
  };
  var G__4613__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$5 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$5(a, b, c, d, e) : self__.dispatch_fn.call(null, a, b, c, d, e);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$5 ? target_fn.cljs$core$IFn$_invoke$arity$5(a, b, c, d, e) : target_fn.call(null, a, b, c, d, e);
  };
  var G__4613__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$6 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$6(a, b, c, d, e, f) : self__.dispatch_fn.call(null, a, b, c, d, e, f);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$6 ? target_fn.cljs$core$IFn$_invoke$arity$6(a, b, c, d, e, f) : target_fn.call(null, a, b, c, d, e, f);
  };
  var G__4613__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$7 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$7(a, b, c, d, e, f, g) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$7 ? target_fn.cljs$core$IFn$_invoke$arity$7(a, b, c, d, e, f, g) : target_fn.call(null, a, b, c, d, e, f, g);
  };
  var G__4613__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$8 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$8(a, b, c, d, e, f, g, h) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$8 ? target_fn.cljs$core$IFn$_invoke$arity$8(a, b, c, d, e, f, g, h) : target_fn.call(null, a, b, c, d, e, f, g, h);
  };
  var G__4613__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$9 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$9(a, b, c, d, e, f, g, h, i) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$9 ? target_fn.cljs$core$IFn$_invoke$arity$9(a, b, c, d, e, f, g, h, i) : target_fn.call(null, a, b, c, d, e, f, g, h, i);
  };
  var G__4613__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$10 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$10(a, b, c, d, e, f, g, h, i, j) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$10 ? target_fn.cljs$core$IFn$_invoke$arity$10(a, b, c, d, e, f, g, h, i, j) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j);
  };
  var G__4613__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$11 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$11(a, b, c, d, e, f, g, h, i, j, k) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$11 ? target_fn.cljs$core$IFn$_invoke$arity$11(a, b, c, d, e, f, g, h, i, j, k) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k);
  };
  var G__4613__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$12 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$12(a, b, c, d, e, f, g, h, i, j, k, l) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$12 ? target_fn.cljs$core$IFn$_invoke$arity$12(a, b, c, d, e, f, g, h, i, j, k, l) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
  };
  var G__4613__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$13 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$13(a, b, c, d, e, f, g, h, i, j, k, l, m) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$13 ? target_fn.cljs$core$IFn$_invoke$arity$13(a, b, c, d, e, f, g, h, i, j, k, l, m) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
  };
  var G__4613__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$14 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$14(a, b, c, d, e, f, g, h, i, j, k, l, m, n) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$14 ? target_fn.cljs$core$IFn$_invoke$arity$14(a, b, c, d, e, f, g, h, i, j, k, l, m, n) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  };
  var G__4613__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$15 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$15(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$15 ? target_fn.cljs$core$IFn$_invoke$arity$15(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  };
  var G__4613__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$16 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$16(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$16 ? target_fn.cljs$core$IFn$_invoke$arity$16(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  };
  var G__4613__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$17 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$17(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$17 ? target_fn.cljs$core$IFn$_invoke$arity$17(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  };
  var G__4613__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$18 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$18(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$18 ? target_fn.cljs$core$IFn$_invoke$arity$18(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  };
  var G__4613__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$19 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$19(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$19 ? target_fn.cljs$core$IFn$_invoke$arity$19(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  };
  var G__4613__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$20 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$20(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$20 ? target_fn.cljs$core$IFn$_invoke$arity$20(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  };
  var G__4613__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(self__.dispatch_fn, a, b, c, d, cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest], 0));
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(target_fn, a, b, c, d, cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest], 0));
  };
  G__4613 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return G__4613__1.call(this, self__);
      case 2:
        return G__4613__2.call(this, self__, a);
      case 3:
        return G__4613__3.call(this, self__, a, b);
      case 4:
        return G__4613__4.call(this, self__, a, b, c);
      case 5:
        return G__4613__5.call(this, self__, a, b, c, d);
      case 6:
        return G__4613__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__4613__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__4613__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__4613__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__4613__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__4613__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__4613__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__4613__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__4613__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__4613__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__4613__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__4613__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__4613__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__4613__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__4613__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__4613__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__4613__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__4613.cljs$core$IFn$_invoke$arity$1 = G__4613__1;
  G__4613.cljs$core$IFn$_invoke$arity$2 = G__4613__2;
  G__4613.cljs$core$IFn$_invoke$arity$3 = G__4613__3;
  G__4613.cljs$core$IFn$_invoke$arity$4 = G__4613__4;
  G__4613.cljs$core$IFn$_invoke$arity$5 = G__4613__5;
  G__4613.cljs$core$IFn$_invoke$arity$6 = G__4613__6;
  G__4613.cljs$core$IFn$_invoke$arity$7 = G__4613__7;
  G__4613.cljs$core$IFn$_invoke$arity$8 = G__4613__8;
  G__4613.cljs$core$IFn$_invoke$arity$9 = G__4613__9;
  G__4613.cljs$core$IFn$_invoke$arity$10 = G__4613__10;
  G__4613.cljs$core$IFn$_invoke$arity$11 = G__4613__11;
  G__4613.cljs$core$IFn$_invoke$arity$12 = G__4613__12;
  G__4613.cljs$core$IFn$_invoke$arity$13 = G__4613__13;
  G__4613.cljs$core$IFn$_invoke$arity$14 = G__4613__14;
  G__4613.cljs$core$IFn$_invoke$arity$15 = G__4613__15;
  G__4613.cljs$core$IFn$_invoke$arity$16 = G__4613__16;
  G__4613.cljs$core$IFn$_invoke$arity$17 = G__4613__17;
  G__4613.cljs$core$IFn$_invoke$arity$18 = G__4613__18;
  G__4613.cljs$core$IFn$_invoke$arity$19 = G__4613__19;
  G__4613.cljs$core$IFn$_invoke$arity$20 = G__4613__20;
  G__4613.cljs$core$IFn$_invoke$arity$21 = G__4613__21;
  G__4613.cljs$core$IFn$_invoke$arity$22 = G__4613__22;
  return G__4613;
}();
cljs.core.MultiFn.prototype.apply = function(self__, args4611) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args4611)));
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$0 = function() {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$0 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$0() : self__.dispatch_fn.call(null);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$0 ? target_fn.cljs$core$IFn$_invoke$arity$0() : target_fn.call(null);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$1 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$1(a) : self__.dispatch_fn.call(null, a);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$1 ? target_fn.cljs$core$IFn$_invoke$arity$1(a) : target_fn.call(null, a);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$2 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$2(a, b) : self__.dispatch_fn.call(null, a, b);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$2 ? target_fn.cljs$core$IFn$_invoke$arity$2(a, b) : target_fn.call(null, a, b);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$3 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$3(a, b, c) : self__.dispatch_fn.call(null, a, b, c);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$3 ? target_fn.cljs$core$IFn$_invoke$arity$3(a, b, c) : target_fn.call(null, a, b, c);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$4 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$4(a, b, c, d) : self__.dispatch_fn.call(null, a, b, c, d);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$4 ? target_fn.cljs$core$IFn$_invoke$arity$4(a, b, c, d) : target_fn.call(null, a, b, c, d);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$5 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$5(a, b, c, d, e) : self__.dispatch_fn.call(null, a, b, c, d, e);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$5 ? target_fn.cljs$core$IFn$_invoke$arity$5(a, b, c, d, e) : target_fn.call(null, a, b, c, d, e);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$6 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$6(a, b, c, d, e, f) : self__.dispatch_fn.call(null, a, b, c, d, e, f);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$6 ? target_fn.cljs$core$IFn$_invoke$arity$6(a, b, c, d, e, f) : target_fn.call(null, a, b, c, d, e, f);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$7 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$7(a, b, c, d, e, f, g) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$7 ? target_fn.cljs$core$IFn$_invoke$arity$7(a, b, c, d, e, f, g) : target_fn.call(null, a, b, c, d, e, f, g);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$8 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$8(a, b, c, d, e, f, g, h) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$8 ? target_fn.cljs$core$IFn$_invoke$arity$8(a, b, c, d, e, f, g, h) : target_fn.call(null, a, b, c, d, e, f, g, h);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$9 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$9(a, b, c, d, e, f, g, h, i) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$9 ? target_fn.cljs$core$IFn$_invoke$arity$9(a, b, c, d, e, f, g, h, i) : target_fn.call(null, a, b, c, d, e, f, g, h, i);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$10 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$10(a, b, c, d, e, f, g, h, i, j) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$10 ? target_fn.cljs$core$IFn$_invoke$arity$10(a, b, c, d, e, f, g, h, i, j) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$11 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$11(a, b, c, d, e, f, g, h, i, j, k) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$11 ? target_fn.cljs$core$IFn$_invoke$arity$11(a, b, c, d, e, f, g, h, i, j, k) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$12 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$12(a, b, c, d, e, f, g, h, i, j, k, l) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$12 ? target_fn.cljs$core$IFn$_invoke$arity$12(a, b, c, d, e, f, g, h, i, j, k, l) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$13 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$13(a, b, c, d, e, f, g, h, i, j, k, l, m) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$13 ? target_fn.cljs$core$IFn$_invoke$arity$13(a, b, c, d, e, f, g, h, i, j, k, l, m) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$14 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$14(a, b, c, d, e, f, g, h, i, j, k, l, m, n) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$14 ? target_fn.cljs$core$IFn$_invoke$arity$14(a, b, c, d, e, f, g, h, i, j, k, l, m, n) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$15 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$15(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$15 ? target_fn.cljs$core$IFn$_invoke$arity$15(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$16 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$16(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$16 ? target_fn.cljs$core$IFn$_invoke$arity$16(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$17 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$17(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$17 ? target_fn.cljs$core$IFn$_invoke$arity$17(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$18 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$18(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$18 ? target_fn.cljs$core$IFn$_invoke$arity$18(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$19 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$19(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$19 ? target_fn.cljs$core$IFn$_invoke$arity$19(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$20 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$20(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$20 ? target_fn.cljs$core$IFn$_invoke$arity$20(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  var self__ = this;
  var mf = this;
  var dispatch_val = cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(self__.dispatch_fn, a, b, c, d, cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest], 0));
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(target_fn, a, b, c, d, cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest], 0));
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefer_method$arity$3 = function(mf, dispatch_val_x, dispatch_val_y) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core.truth_(cljs.core.prefers_STAR_(dispatch_val_x, dispatch_val_y, self__.prefer_table))) {
    throw new Error(["Preference conflict in multimethod '", cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.name), "': ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(dispatch_val_y), " is already preferred to ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(dispatch_val_x)].join(""));
  } else {
  }
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.prefer_table, function(old) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(old, dispatch_val_x, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(old, dispatch_val_x, cljs.core.PersistentHashSet.EMPTY), dispatch_val_y));
  });
  return cljs.core.reset_cache(self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_default_dispatch_val$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return self__.default_dispatch_val;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_remove_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(self__.method_table, cljs.core.dissoc, dispatch_val);
  cljs.core.reset_cache(self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_methods$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.deref(self__.method_table);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefers$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.deref(self__.prefer_table);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_dispatch_fn$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return self__.dispatch_fn;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_add_method$arity$3 = function(mf, dispatch_val, method) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(self__.method_table, cljs.core.assoc, dispatch_val, method);
  cljs.core.reset_cache(self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_reset$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.method_table, function(mf__$2) {
    return cljs.core.PersistentArrayMap.EMPTY;
  });
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.method_cache, function(mf__$2) {
    return cljs.core.PersistentArrayMap.EMPTY;
  });
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.prefer_table, function(mf__$2) {
    return cljs.core.PersistentArrayMap.EMPTY;
  });
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.cached_hierarchy, function(mf__$2) {
    return null;
  });
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_get_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.deref(self__.cached_hierarchy), cljs.core.deref(self__.hierarchy))) {
  } else {
    cljs.core.reset_cache(self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  }
  var temp__5733__auto__ = function() {
    var fexpr__4612 = cljs.core.deref(self__.method_cache);
    return fexpr__4612.cljs$core$IFn$_invoke$arity$1 ? fexpr__4612.cljs$core$IFn$_invoke$arity$1(dispatch_val) : fexpr__4612.call(null, dispatch_val);
  }();
  if (cljs.core.truth_(temp__5733__auto__)) {
    var target_fn = temp__5733__auto__;
    return target_fn;
  } else {
    return cljs.core.find_and_cache_best_method(self__.name, dispatch_val, self__.hierarchy, self__.method_table, self__.prefer_table, self__.method_cache, self__.cached_hierarchy, self__.default_dispatch_val);
  }
};
cljs.core.MultiFn.prototype.cljs$core$INamed$_name$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._name(self__.name);
};
cljs.core.MultiFn.prototype.cljs$core$INamed$_namespace$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._namespace(self__.name);
};
cljs.core.MultiFn.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1);
};
cljs.core.MultiFn.getBasis = function() {
  return new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "name", "name", -810760592, null), new cljs.core.Symbol(null, "dispatch-fn", "dispatch-fn", -1401088155, null), new cljs.core.Symbol(null, "default-dispatch-val", "default-dispatch-val", -1231201266, null), new cljs.core.Symbol(null, "hierarchy", "hierarchy", 587061186, null), new cljs.core.Symbol(null, "method-table", "method-table", -1878263165, null), new cljs.core.Symbol(null, 
  "prefer-table", "prefer-table", 462168584, null), new cljs.core.Symbol(null, "method-cache", "method-cache", 1230193905, null), new cljs.core.Symbol(null, "cached-hierarchy", "cached-hierarchy", -1085460203, null)], null);
};
cljs.core.MultiFn.cljs$lang$type = true;
cljs.core.MultiFn.cljs$lang$ctorStr = "cljs.core/MultiFn";
cljs.core.MultiFn.cljs$lang$ctorPrWriter = function(this__4369__auto__, writer__4370__auto__, opt__4371__auto__) {
  return cljs.core._write(writer__4370__auto__, "cljs.core/MultiFn");
};
cljs.core.__GT_MultiFn = function cljs$core$__GT_MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  return new cljs.core.MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
};
cljs.core.remove_all_methods = function cljs$core$remove_all_methods(multifn) {
  return cljs.core._reset(multifn);
};
cljs.core.remove_method = function cljs$core$remove_method(multifn, dispatch_val) {
  return cljs.core._remove_method(multifn, dispatch_val);
};
cljs.core.prefer_method = function cljs$core$prefer_method(multifn, dispatch_val_x, dispatch_val_y) {
  return cljs.core._prefer_method(multifn, dispatch_val_x, dispatch_val_y);
};
cljs.core.methods$ = function cljs$core$methods(multifn) {
  return cljs.core._methods(multifn);
};
cljs.core.get_method = function cljs$core$get_method(multifn, dispatch_val) {
  return cljs.core._get_method(multifn, dispatch_val);
};
cljs.core.prefers = function cljs$core$prefers(multifn) {
  return cljs.core._prefers(multifn);
};
cljs.core.default_dispatch_val = function cljs$core$default_dispatch_val(multifn) {
  return cljs.core._default_dispatch_val(multifn);
};
cljs.core.dispatch_fn = function cljs$core$dispatch_fn(multifn) {
  return cljs.core._dispatch_fn(multifn);
};
cljs.core.IUUID = function() {
};
cljs.core.UUID = function(uuid, __hash) {
  this.uuid = uuid;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 2153775104;
  this.cljs$lang$protocol_mask$partition1$ = 2048;
};
cljs.core.UUID.prototype.cljs$core$IUUID$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.UUID.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return self__.uuid;
};
cljs.core.UUID.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.UUID.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  return other instanceof cljs.core.UUID && self__.uuid === other.uuid;
};
cljs.core.UUID.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(_, writer, ___$1) {
  var self__ = this;
  var ___$2 = this;
  return cljs.core._write(writer, ['#uuid "', cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.uuid), '"'].join(""));
};
cljs.core.UUID.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.__hash == null) {
    self__.__hash = cljs.core.hash(self__.uuid);
  } else {
  }
  return self__.__hash;
};
cljs.core.UUID.prototype.cljs$core$IComparable$_compare$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  return goog.array.defaultCompare(self__.uuid, other.uuid);
};
cljs.core.UUID.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "uuid", "uuid", -504564192, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.UUID.cljs$lang$type = true;
cljs.core.UUID.cljs$lang$ctorStr = "cljs.core/UUID";
cljs.core.UUID.cljs$lang$ctorPrWriter = function(this__4369__auto__, writer__4370__auto__, opt__4371__auto__) {
  return cljs.core._write(writer__4370__auto__, "cljs.core/UUID");
};
cljs.core.__GT_UUID = function cljs$core$__GT_UUID(uuid, __hash) {
  return new cljs.core.UUID(uuid, __hash);
};
cljs.core.uuid = function cljs$core$uuid(s) {
  if (typeof s === "string") {
  } else {
    throw new Error("Assert failed: (string? s)");
  }
  return new cljs.core.UUID(s.toLowerCase(), null);
};
cljs.core.random_uuid = function cljs$core$random_uuid() {
  var hex = function cljs$core$random_uuid_$_hex() {
    return cljs.core.rand_int(16).toString(16);
  };
  var rhex = (8 | 3 & cljs.core.rand_int(16)).toString(16);
  return cljs.core.uuid([cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()), cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()), cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()), cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()), cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()), cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()), cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()), cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()), "-", cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()), cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()), 
  cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()), cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()), "-", "4", cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()), cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()), cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()), "-", cljs.core.str.cljs$core$IFn$_invoke$arity$1(rhex), cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()), cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()), cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()), "-", cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()), 
  cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()), cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()), cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()), cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()), cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()), cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()), cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()), cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()), cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()), cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()), 
  cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex())].join(""));
};
cljs.core.uuid_QMARK_ = function cljs$core$uuid_QMARK_(x) {
  if (!(x == null)) {
    if (false || cljs.core.PROTOCOL_SENTINEL === x.cljs$core$IUUID$) {
      return true;
    } else {
      return false;
    }
  } else {
    return false;
  }
};
cljs.core.pr_writer_ex_info = function cljs$core$pr_writer_ex_info(obj, writer, opts) {
  cljs.core._write(writer, "#error {:message ");
  cljs.core.pr_writer(obj.message, writer, opts);
  if (cljs.core.truth_(obj.data)) {
    cljs.core._write(writer, ", :data ");
    cljs.core.pr_writer(obj.data, writer, opts);
  } else {
  }
  if (cljs.core.truth_(obj.cause)) {
    cljs.core._write(writer, ", :cause ");
    cljs.core.pr_writer(obj.cause, writer, opts);
  } else {
  }
  return cljs.core._write(writer, "}");
};
cljs.core.ExceptionInfo = function cljs$core$ExceptionInfo(message, data, cause) {
  var e = new Error(message);
  var this$ = this;
  this$.message = message;
  this$.data = data;
  this$.cause = cause;
  this$.name = e.name;
  this$.description = e.description;
  this$.number = e.number;
  this$.fileName = e.fileName;
  this$.lineNumber = e.lineNumber;
  this$.columnNumber = e.columnNumber;
  this$.stack = e.stack;
  return this$;
};
cljs.core.ExceptionInfo.prototype.__proto__ = Error.prototype;
cljs.core.ExceptionInfo.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.ExceptionInfo.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(obj, writer, opts) {
  var obj__$1 = this;
  return cljs.core.pr_writer_ex_info(obj__$1, writer, opts);
};
cljs.core.ExceptionInfo.prototype.toString = function() {
  var this$ = this;
  return cljs.core.pr_str_STAR_(this$);
};
cljs.core.ex_info = function cljs$core$ex_info(var_args) {
  var G__4616 = arguments.length;
  switch(G__4616) {
    case 2:
      return cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.ex_info.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2 = function(msg, data) {
  return cljs.core.ex_info.cljs$core$IFn$_invoke$arity$3(msg, data, null);
};
cljs.core.ex_info.cljs$core$IFn$_invoke$arity$3 = function(msg, data, cause) {
  return new cljs.core.ExceptionInfo(msg, data, cause);
};
cljs.core.ex_info.cljs$lang$maxFixedArity = 3;
cljs.core.ex_data = function cljs$core$ex_data(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.data;
  } else {
    return null;
  }
};
cljs.core.ex_message = function cljs$core$ex_message(ex) {
  if (ex instanceof Error) {
    return ex.message;
  } else {
    return null;
  }
};
cljs.core.ex_cause = function cljs$core$ex_cause(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.cause;
  } else {
    return null;
  }
};
cljs.core.comparator = function cljs$core$comparator(pred) {
  return function(x, y) {
    if (cljs.core.truth_(pred.cljs$core$IFn$_invoke$arity$2 ? pred.cljs$core$IFn$_invoke$arity$2(x, y) : pred.call(null, x, y))) {
      return -1;
    } else {
      if (cljs.core.truth_(pred.cljs$core$IFn$_invoke$arity$2 ? pred.cljs$core$IFn$_invoke$arity$2(y, x) : pred.call(null, y, x))) {
        return 1;
      } else {
        return 0;
      }
    }
  };
};
cljs.core.special_symbol_QMARK_ = function cljs$core$special_symbol_QMARK_(x) {
  return cljs.core.contains_QMARK_(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 24, [new cljs.core.Symbol(null, "\x26", "\x26", -2144855648, null), "null", new cljs.core.Symbol(null, "case*", "case*", -1938255072, null), "null", new cljs.core.Symbol(null, "defrecord*", "defrecord*", -1936366207, null), "null", new cljs.core.Symbol(null, "try", "try", -1273693247, null), "null", new cljs.core.Symbol(null, "ns*", "ns*", 1840949383, null), "null", new cljs.core.Symbol(null, 
  "finally", "finally", -1065347064, null), "null", new cljs.core.Symbol(null, "loop*", "loop*", 615029416, null), "null", new cljs.core.Symbol(null, "do", "do", 1686842252, null), "null", new cljs.core.Symbol(null, "letfn*", "letfn*", -110097810, null), "null", new cljs.core.Symbol(null, "if", "if", 1181717262, null), "null", new cljs.core.Symbol(null, "new", "new", -444906321, null), "null", new cljs.core.Symbol(null, "ns", "ns", 2082130287, null), "null", new cljs.core.Symbol(null, "deftype*", 
  "deftype*", 962659890, null), "null", new cljs.core.Symbol(null, "let*", "let*", 1920721458, null), "null", new cljs.core.Symbol(null, "js*", "js*", -1134233646, null), "null", new cljs.core.Symbol(null, "fn*", "fn*", -752876845, null), "null", new cljs.core.Symbol(null, "recur", "recur", 1202958259, null), "null", new cljs.core.Symbol(null, "set!", "set!", 250714521, null), "null", new cljs.core.Symbol(null, ".", ".", 1975675962, null), "null", new cljs.core.Symbol(null, "var", "var", 870848730, 
  null), "null", new cljs.core.Symbol(null, "quote", "quote", 1377916282, null), "null", new cljs.core.Symbol(null, "catch", "catch", -1616370245, null), "null", new cljs.core.Symbol(null, "throw", "throw", 595905694, null), "null", new cljs.core.Symbol(null, "def", "def", 597100991, null), "null"], null), null), x);
};
cljs.core.test = function cljs$core$test(v) {
  var f = v.cljs$lang$test;
  if (cljs.core.truth_(f)) {
    f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
    return new cljs.core.Keyword(null, "ok", "ok", 967785236);
  } else {
    return new cljs.core.Keyword(null, "no-test", "no-test", -1679482642);
  }
};
cljs.core.TaggedLiteral = function(tag, form) {
  this.tag = tag;
  this.form = form;
  this.cljs$lang$protocol_mask$partition0$ = 2153775360;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.TaggedLiteral.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.TaggedLiteral.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var self__ = this;
  var this$__$1 = this;
  return other instanceof cljs.core.TaggedLiteral && cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(self__.tag, other.tag) && cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(self__.form, other.form);
};
cljs.core.TaggedLiteral.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return 31 * cljs.core.hash(self__.tag) + cljs.core.hash(self__.form);
};
cljs.core.TaggedLiteral.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this$, v) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1.cljs$core$ILookup$_lookup$arity$3(null, v, null);
};
cljs.core.TaggedLiteral.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this$, v, not_found) {
  var self__ = this;
  var this$__$1 = this;
  var G__4618 = v;
  var G__4618__$1 = G__4618 instanceof cljs.core.Keyword ? G__4618.fqn : null;
  switch(G__4618__$1) {
    case "tag":
      return self__.tag;
      break;
    case "form":
      return self__.form;
      break;
    default:
      return not_found;
  }
};
cljs.core.TaggedLiteral.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, opts) {
  var self__ = this;
  var o__$1 = this;
  cljs.core._write(writer, ["#", cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.tag), " "].join(""));
  return cljs.core.pr_writer(self__.form, writer, opts);
};
cljs.core.TaggedLiteral.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "tag", "tag", 350170304, null), new cljs.core.Symbol(null, "form", "form", 16469056, null)], null);
};
cljs.core.TaggedLiteral.cljs$lang$type = true;
cljs.core.TaggedLiteral.cljs$lang$ctorStr = "cljs.core/TaggedLiteral";
cljs.core.TaggedLiteral.cljs$lang$ctorPrWriter = function(this__4369__auto__, writer__4370__auto__, opt__4371__auto__) {
  return cljs.core._write(writer__4370__auto__, "cljs.core/TaggedLiteral");
};
cljs.core.__GT_TaggedLiteral = function cljs$core$__GT_TaggedLiteral(tag, form) {
  return new cljs.core.TaggedLiteral(tag, form);
};
cljs.core.tagged_literal_QMARK_ = function cljs$core$tagged_literal_QMARK_(value) {
  return value instanceof cljs.core.TaggedLiteral;
};
cljs.core.tagged_literal = function cljs$core$tagged_literal(tag, form) {
  if (tag instanceof cljs.core.Symbol) {
  } else {
    throw new Error("Assert failed: (symbol? tag)");
  }
  return new cljs.core.TaggedLiteral(tag, form);
};
cljs.core.js_reserved_arr = ["arguments", "abstract", "await", "boolean", "break", "byte", "case", "catch", "char", "class", "const", "continue", "debugger", "default", "delete", "do", "double", "else", "enum", "export", "extends", "final", "finally", "float", "for", "function", "goto", "if", "implements", "import", "in", "instanceof", "int", "interface", "let", "long", "native", "new", "package", "private", "protected", "public", "return", "short", "static", "super", "switch", "synchronized", "this", 
"throw", "throws", "transient", "try", "typeof", "var", "void", "volatile", "while", "with", "yield", "methods", "null", "constructor"];
cljs.core.js_reserved = null;
cljs.core.js_reserved_QMARK_ = function cljs$core$js_reserved_QMARK_(x) {
  if (cljs.core.js_reserved == null) {
    cljs.core.js_reserved = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(p1__4620_SHARP_, p2__4621_SHARP_) {
      goog.object.set(p1__4620_SHARP_, p2__4621_SHARP_, true);
      return p1__4620_SHARP_;
    }, {}, cljs.core.js_reserved_arr);
  } else {
  }
  return cljs.core.js_reserved.hasOwnProperty(x);
};
cljs.core.demunge_pattern = function cljs$core$demunge_pattern() {
  if (cljs.core.truth_(cljs.core.DEMUNGE_PATTERN)) {
  } else {
    cljs.core.DEMUNGE_PATTERN = function() {
      var ks = cljs.core.sort.cljs$core$IFn$_invoke$arity$2(function(a, b) {
        return b.length - a.length;
      }, cljs.core.js_keys(cljs.core.DEMUNGE_MAP));
      var ks__$1 = ks;
      var ret = "";
      while (true) {
        if (cljs.core.seq(ks__$1)) {
          var G__4624 = cljs.core.next(ks__$1);
          var G__4625 = [function() {
            var G__4623 = ret;
            if (!(ret === "")) {
              return [G__4623, "|"].join("");
            } else {
              return G__4623;
            }
          }(), cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.first(ks__$1))].join("");
          ks__$1 = G__4624;
          ret = G__4625;
          continue;
        } else {
          return [ret, "|\\$"].join("");
        }
        break;
      }
    }();
  }
  return cljs.core.DEMUNGE_PATTERN;
};
cljs.core.munge_str = function cljs$core$munge_str(name) {
  var sb = new goog.string.StringBuffer;
  var i_4626 = 0;
  while (true) {
    if (i_4626 < name.length) {
      var c_4627 = name.charAt(i_4626);
      var sub_4628 = goog.object.get(cljs.core.CHAR_MAP, c_4627);
      if (!(sub_4628 == null)) {
        sb.append(sub_4628);
      } else {
        sb.append(c_4627);
      }
      var G__4629 = i_4626 + 1;
      i_4626 = G__4629;
      continue;
    } else {
    }
    break;
  }
  return sb.toString();
};
cljs.core.munge = function cljs$core$munge(name) {
  var name_SINGLEQUOTE_ = cljs.core.munge_str(cljs.core.str.cljs$core$IFn$_invoke$arity$1(name));
  var name_SINGLEQUOTE___$1 = name_SINGLEQUOTE_ === ".." ? "_DOT__DOT_" : cljs.core.truth_(cljs.core.js_reserved_QMARK_(name_SINGLEQUOTE_)) ? [name_SINGLEQUOTE_, "$"].join("") : name_SINGLEQUOTE_;
  if (name instanceof cljs.core.Symbol) {
    return cljs.core.symbol.cljs$core$IFn$_invoke$arity$1(name_SINGLEQUOTE___$1);
  } else {
    return name_SINGLEQUOTE___$1;
  }
};
cljs.core.demunge_str = function cljs$core$demunge_str(munged_name) {
  var r = new RegExp(cljs.core.demunge_pattern(), "g");
  var munged_name__$1 = goog.string.endsWith(munged_name, "$") ? munged_name.substring(0, munged_name.length - 1) : munged_name;
  var ret = "";
  var last_match_end = 0;
  while (true) {
    var temp__5733__auto__ = r.exec(munged_name__$1);
    if (cljs.core.truth_(temp__5733__auto__)) {
      var match = temp__5733__auto__;
      var vec__4633 = match;
      var x = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__4633, 0, null);
      var G__4636 = [ret, cljs.core.str.cljs$core$IFn$_invoke$arity$1(munged_name__$1.substring(last_match_end, r.lastIndex - x.length)), cljs.core.str.cljs$core$IFn$_invoke$arity$1(x === "$" ? "/" : goog.object.get(cljs.core.DEMUNGE_MAP, x))].join("");
      var G__4637 = r.lastIndex;
      ret = G__4636;
      last_match_end = G__4637;
      continue;
    } else {
      return [ret, cljs.core.str.cljs$core$IFn$_invoke$arity$1(munged_name__$1.substring(last_match_end, munged_name__$1.length))].join("");
    }
    break;
  }
};
cljs.core.demunge = function cljs$core$demunge(name) {
  var G__4639 = function() {
    var name_SINGLEQUOTE_ = cljs.core.str.cljs$core$IFn$_invoke$arity$1(name);
    if (name_SINGLEQUOTE_ === "_DOT__DOT_") {
      return "..";
    } else {
      return cljs.core.demunge_str(name_SINGLEQUOTE_);
    }
  }();
  var fexpr__4638 = name instanceof cljs.core.Symbol ? cljs.core.symbol : cljs.core.str;
  return fexpr__4638.cljs$core$IFn$_invoke$arity$1 ? fexpr__4638.cljs$core$IFn$_invoke$arity$1(G__4639) : fexpr__4638.call(null, G__4639);
};
if (typeof cljs !== "undefined" && typeof cljs.core !== "undefined" && typeof cljs.core.tapset !== "undefined") {
} else {
  cljs.core.tapset = null;
}
cljs.core.maybe_init_tapset = function cljs$core$maybe_init_tapset() {
  if (cljs.core.tapset == null) {
    return cljs.core.tapset = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentHashSet.EMPTY);
  } else {
    return null;
  }
};
cljs.core.add_tap = function cljs$core$add_tap(f) {
  cljs.core.maybe_init_tapset();
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(cljs.core.tapset, cljs.core.conj, f);
  return null;
};
cljs.core.remove_tap = function cljs$core$remove_tap(f) {
  cljs.core.maybe_init_tapset();
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(cljs.core.tapset, cljs.core.disj, f);
  return null;
};
cljs.core.tap_GT_ = function cljs$core$tap_GT_(x) {
  cljs.core.maybe_init_tapset();
  return cljs.core._STAR_exec_tap_fn_STAR_.cljs$core$IFn$_invoke$arity$1 ? cljs.core._STAR_exec_tap_fn_STAR_.cljs$core$IFn$_invoke$arity$1(function() {
    var seq__4640 = cljs.core.seq(cljs.core.deref(cljs.core.tapset));
    var chunk__4641 = null;
    var count__4642 = 0;
    var i__4643 = 0;
    while (true) {
      if (i__4643 < count__4642) {
        var tap = chunk__4641.cljs$core$IIndexed$_nth$arity$2(null, i__4643);
        try {
          tap.cljs$core$IFn$_invoke$arity$1 ? tap.cljs$core$IFn$_invoke$arity$1(x) : tap.call(null, x);
        } catch (e4646) {
          if (e4646 instanceof Error) {
            var ex_4648 = e4646;
          } else {
            throw e4646;
          }
        }
        var G__4649 = seq__4640;
        var G__4650 = chunk__4641;
        var G__4651 = count__4642;
        var G__4652 = i__4643 + 1;
        seq__4640 = G__4649;
        chunk__4641 = G__4650;
        count__4642 = G__4651;
        i__4643 = G__4652;
        continue;
      } else {
        var temp__5735__auto__ = cljs.core.seq(seq__4640);
        if (temp__5735__auto__) {
          var seq__4640__$1 = temp__5735__auto__;
          if (cljs.core.chunked_seq_QMARK_(seq__4640__$1)) {
            var c__4556__auto__ = cljs.core.chunk_first(seq__4640__$1);
            var G__4653 = cljs.core.chunk_rest(seq__4640__$1);
            var G__4654 = c__4556__auto__;
            var G__4655 = cljs.core.count(c__4556__auto__);
            var G__4656 = 0;
            seq__4640 = G__4653;
            chunk__4641 = G__4654;
            count__4642 = G__4655;
            i__4643 = G__4656;
            continue;
          } else {
            var tap = cljs.core.first(seq__4640__$1);
            try {
              tap.cljs$core$IFn$_invoke$arity$1 ? tap.cljs$core$IFn$_invoke$arity$1(x) : tap.call(null, x);
            } catch (e4647) {
              if (e4647 instanceof Error) {
                var ex_4657 = e4647;
              } else {
                throw e4647;
              }
            }
            var G__4658 = cljs.core.next(seq__4640__$1);
            var G__4659 = null;
            var G__4660 = 0;
            var G__4661 = 0;
            seq__4640 = G__4658;
            chunk__4641 = G__4659;
            count__4642 = G__4660;
            i__4643 = G__4661;
            continue;
          }
        } else {
          return null;
        }
      }
      break;
    }
  }) : cljs.core._STAR_exec_tap_fn_STAR_.call(null, function() {
    var seq__4640 = cljs.core.seq(cljs.core.deref(cljs.core.tapset));
    var chunk__4641 = null;
    var count__4642 = 0;
    var i__4643 = 0;
    while (true) {
      if (i__4643 < count__4642) {
        var tap = chunk__4641.cljs$core$IIndexed$_nth$arity$2(null, i__4643);
        try {
          tap.cljs$core$IFn$_invoke$arity$1 ? tap.cljs$core$IFn$_invoke$arity$1(x) : tap.call(null, x);
        } catch (e4646) {
          if (e4646 instanceof Error) {
            var ex_4662 = e4646;
          } else {
            throw e4646;
          }
        }
        var G__4663 = seq__4640;
        var G__4664 = chunk__4641;
        var G__4665 = count__4642;
        var G__4666 = i__4643 + 1;
        seq__4640 = G__4663;
        chunk__4641 = G__4664;
        count__4642 = G__4665;
        i__4643 = G__4666;
        continue;
      } else {
        var temp__5735__auto__ = cljs.core.seq(seq__4640);
        if (temp__5735__auto__) {
          var seq__4640__$1 = temp__5735__auto__;
          if (cljs.core.chunked_seq_QMARK_(seq__4640__$1)) {
            var c__4556__auto__ = cljs.core.chunk_first(seq__4640__$1);
            var G__4667 = cljs.core.chunk_rest(seq__4640__$1);
            var G__4668 = c__4556__auto__;
            var G__4669 = cljs.core.count(c__4556__auto__);
            var G__4670 = 0;
            seq__4640 = G__4667;
            chunk__4641 = G__4668;
            count__4642 = G__4669;
            i__4643 = G__4670;
            continue;
          } else {
            var tap = cljs.core.first(seq__4640__$1);
            try {
              tap.cljs$core$IFn$_invoke$arity$1 ? tap.cljs$core$IFn$_invoke$arity$1(x) : tap.call(null, x);
            } catch (e4647) {
              if (e4647 instanceof Error) {
                var ex_4671 = e4647;
              } else {
                throw e4647;
              }
            }
            var G__4672 = cljs.core.next(seq__4640__$1);
            var G__4673 = null;
            var G__4674 = 0;
            var G__4675 = 0;
            seq__4640 = G__4672;
            chunk__4641 = G__4673;
            count__4642 = G__4674;
            i__4643 = G__4675;
            continue;
          }
        } else {
          return null;
        }
      }
      break;
    }
  });
};
cljs.core.ns_lookup = function cljs$core$ns_lookup(ns_obj, k) {
  return function() {
    return goog.object.get(ns_obj, k);
  };
};
cljs.core.Namespace = function(obj, name) {
  this.obj = obj;
  this.name = name;
  this.cljs$lang$protocol_mask$partition0$ = 6291456;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.Namespace.prototype.findInternedVar = function(sym) {
  var self__ = this;
  var this$ = this;
  var k = cljs.core.munge(cljs.core.str.cljs$core$IFn$_invoke$arity$1(sym));
  if (goog.object.containsKey(self__.obj, k)) {
    var var_sym = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.name), cljs.core.str.cljs$core$IFn$_invoke$arity$1(sym));
    var var_meta = new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "ns", "ns", 441598760), this$], null);
    return new cljs.core.Var(cljs.core.ns_lookup(self__.obj, k), var_sym, var_meta);
  } else {
    return null;
  }
};
cljs.core.Namespace.prototype.getName = function() {
  var self__ = this;
  var _ = this;
  return self__.name;
};
cljs.core.Namespace.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.name);
};
cljs.core.Namespace.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Namespace) {
    return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(self__.name, other.name);
  } else {
    return false;
  }
};
cljs.core.Namespace.prototype.cljs$core$IHash$_hash$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.hash(self__.name);
};
cljs.core.Namespace.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "obj", "obj", -1672671807, null), new cljs.core.Symbol(null, "name", "name", -810760592, null)], null);
};
cljs.core.Namespace.cljs$lang$type = true;
cljs.core.Namespace.cljs$lang$ctorStr = "cljs.core/Namespace";
cljs.core.Namespace.cljs$lang$ctorPrWriter = function(this__4369__auto__, writer__4370__auto__, opt__4371__auto__) {
  return cljs.core._write(writer__4370__auto__, "cljs.core/Namespace");
};
cljs.core.__GT_Namespace = function cljs$core$__GT_Namespace(obj, name) {
  return new cljs.core.Namespace(obj, name);
};
cljs.core.NS_CACHE = null;
cljs.core.find_ns_obj_STAR_ = function cljs$core$find_ns_obj_STAR_(ctxt, xs) {
  while (true) {
    if (ctxt == null) {
      return null;
    } else {
      if (xs == null) {
        return ctxt;
      } else {
        var G__4676 = goog.object.get(ctxt, cljs.core.first(xs));
        var G__4677 = cljs.core.next(xs);
        ctxt = G__4676;
        xs = G__4677;
        continue;
      }
    }
    break;
  }
};
cljs.core.find_ns_obj = function cljs$core$find_ns_obj(ns) {
  var munged_ns = cljs.core.munge(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns));
  var segs = munged_ns.split(".");
  var G__4678 = cljs.core._STAR_target_STAR_;
  switch(G__4678) {
    case "nodejs":
      if (COMPILED) {
        return cljs.core.find_ns_obj_STAR_(function() {
          try {
            var ctxt = eval(cljs.core.first(segs));
            if (cljs.core.truth_(function() {
              var and__4115__auto__ = ctxt;
              if (cljs.core.truth_(and__4115__auto__)) {
                return cljs.core.object_QMARK_(ctxt);
              } else {
                return and__4115__auto__;
              }
            }())) {
              return ctxt;
            } else {
              return null;
            }
          } catch (e4679) {
            if (e4679 instanceof ReferenceError) {
              var e = e4679;
              return null;
            } else {
              throw e4679;
            }
          }
        }(), cljs.core.next(segs));
      } else {
        return cljs.core.find_ns_obj_STAR_(goog.global, segs);
      }
      break;
    case "default":
    case "webworker":
      return cljs.core.find_ns_obj_STAR_(goog.global, segs);
      break;
    default:
      throw new Error(["find-ns-obj not supported for target ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core._STAR_target_STAR_)].join(""));
  }
};
cljs.core.ns_interns_STAR_ = function cljs$core$ns_interns_STAR_(sym) {
  var ns_obj = cljs.core.find_ns_obj(sym);
  var ns = new cljs.core.Namespace(ns_obj, sym);
  var step = function cljs$core$ns_interns_STAR__$_step(ret, k) {
    var var_sym = cljs.core.symbol.cljs$core$IFn$_invoke$arity$1(cljs.core.demunge(k));
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(ret, var_sym, new cljs.core.Var(function() {
      return goog.object.get(ns_obj, k);
    }, cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(sym), cljs.core.str.cljs$core$IFn$_invoke$arity$1(var_sym)), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "ns", "ns", 441598760), ns], null)));
  };
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(step, cljs.core.PersistentArrayMap.EMPTY, cljs.core.js_keys(ns_obj));
};
cljs.core.create_ns = function cljs$core$create_ns(var_args) {
  var G__4682 = arguments.length;
  switch(G__4682) {
    case 1:
      return cljs.core.create_ns.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.create_ns.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
cljs.core.create_ns.cljs$core$IFn$_invoke$arity$1 = function(sym) {
  return cljs.core.create_ns.cljs$core$IFn$_invoke$arity$2(sym, cljs.core.find_ns_obj(sym));
};
cljs.core.create_ns.cljs$core$IFn$_invoke$arity$2 = function(sym, ns_obj) {
  return new cljs.core.Namespace(ns_obj, sym);
};
cljs.core.create_ns.cljs$lang$maxFixedArity = 2;
cljs.core.find_ns = function cljs$core$find_ns(ns) {
  if (cljs.core.NS_CACHE == null) {
    cljs.core.NS_CACHE = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);
  } else {
  }
  var the_ns = cljs.core.get.cljs$core$IFn$_invoke$arity$2(cljs.core.deref(cljs.core.NS_CACHE), ns);
  if (!(the_ns == null)) {
    return the_ns;
  } else {
    var ns_obj = cljs.core.find_ns_obj(ns);
    if (ns_obj == null) {
      return null;
    } else {
      var new_ns = cljs.core.create_ns.cljs$core$IFn$_invoke$arity$2(ns, ns_obj);
      cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(cljs.core.NS_CACHE, cljs.core.assoc, ns, new_ns);
      return new_ns;
    }
  }
};
cljs.core.find_macros_ns = function cljs$core$find_macros_ns(ns) {
  if (cljs.core.NS_CACHE == null) {
    cljs.core.NS_CACHE = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);
  } else {
  }
  var ns_str = cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns);
  var ns__$1 = !goog.string.contains(ns_str, "$macros") ? cljs.core.symbol.cljs$core$IFn$_invoke$arity$1([ns_str, "$macros"].join("")) : ns;
  var the_ns = cljs.core.get.cljs$core$IFn$_invoke$arity$2(cljs.core.deref(cljs.core.NS_CACHE), ns__$1);
  if (!(the_ns == null)) {
    return the_ns;
  } else {
    var ns_obj = cljs.core.find_ns_obj(ns__$1);
    if (ns_obj == null) {
      return null;
    } else {
      var new_ns = cljs.core.create_ns.cljs$core$IFn$_invoke$arity$2(ns__$1, ns_obj);
      cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(cljs.core.NS_CACHE, cljs.core.assoc, ns__$1, new_ns);
      return new_ns;
    }
  }
};
cljs.core.ns_name = function cljs$core$ns_name(ns_obj) {
  return ns_obj.name;
};
cljs.core.uri_QMARK_ = function cljs$core$uri_QMARK_(x) {
  return x instanceof goog.Uri;
};
cljs.core.maybe_enable_print_BANG_ = function cljs$core$maybe_enable_print_BANG_() {
  if (typeof console !== "undefined") {
    return cljs.core.enable_console_print_BANG_();
  } else {
    if (cljs.core._STAR_target_STAR_ === "nashorn" || cljs.core._STAR_target_STAR_ === "graaljs") {
      var system = Java.type("java.lang.System");
      cljs.core._STAR_print_newline_STAR_ = false;
      cljs.core.set_print_fn_BANG_(function() {
        var xs = arguments;
        var s = goog.array.clone(xs).join("");
        return system.out.println(s);
      });
      return cljs.core.set_print_err_fn_BANG_(function() {
        var xs = arguments;
        var s = goog.array.clone(xs).join("");
        return system.error.println(s);
      });
    } else {
      return null;
    }
  }
};
cljs.core.maybe_enable_print_BANG_();
if (typeof cljs !== "undefined" && typeof cljs.core !== "undefined" && typeof cljs.core._STAR_eval_STAR_ !== "undefined") {
} else {
  cljs.core._STAR_eval_STAR_ = function cljs$core$_STAR_eval_STAR_(_) {
    throw new Error("cljs.core/*eval* not bound");
  };
}
cljs.core.eval = function cljs$core$eval(form) {
  return cljs.core._STAR_eval_STAR_.cljs$core$IFn$_invoke$arity$1 ? cljs.core._STAR_eval_STAR_.cljs$core$IFn$_invoke$arity$1(form) : cljs.core._STAR_eval_STAR_.call(null, form);
};
if (COMPILED) {
  if ("nodejs" === cljs.core._STAR_target_STAR_) {
    goog.global = global;
  } else {
  }
  if ("window" === cljs.core._STAR_global_STAR_) {
    goog.global = window;
  } else {
    if ("self" === cljs.core._STAR_global_STAR_) {
      goog.global = self;
    } else {
      if ("global" === cljs.core._STAR_global_STAR_) {
        goog.global = global;
      } else {
      }
    }
  }
} else {
}
;goog.provide("process.env");
goog.require("cljs.core");
process.env.NODE_ENV = goog.define("process.env.NODE_ENV", "development");
goog.provide("hipo.interceptor");
goog.require("cljs.core");
hipo.interceptor.Interceptor = function() {
};
var hipo$interceptor$Interceptor$_intercept$dyn_2029 = function(this$, t, m, f) {
  var x__4428__auto__ = this$ == null ? null : this$;
  var m__4429__auto__ = hipo.interceptor._intercept[goog.typeOf(x__4428__auto__)];
  if (!(m__4429__auto__ == null)) {
    return m__4429__auto__.call(null, this$, t, m, f);
  } else {
    var m__4426__auto__ = hipo.interceptor._intercept["_"];
    if (!(m__4426__auto__ == null)) {
      return m__4426__auto__.call(null, this$, t, m, f);
    } else {
      throw cljs.core.missing_protocol.call(null, "Interceptor.-intercept", this$);
    }
  }
};
hipo.interceptor._intercept = function hipo$interceptor$_intercept(this$, t, m, f) {
  if (!(this$ == null) && !(this$.hipo$interceptor$Interceptor$_intercept$arity$4 == null)) {
    return this$.hipo$interceptor$Interceptor$_intercept$arity$4(this$, t, m, f);
  } else {
    return hipo$interceptor$Interceptor$_intercept$dyn_2029.call(null, this$, t, m, f);
  }
};
hipo.interceptor.call = function hipo$interceptor$call(f, v, t, m) {
  var i = cljs.core.first.call(null, v);
  return hipo.interceptor._intercept.call(null, i, t, m, function() {
    var s = cljs.core.rest.call(null, v);
    if (cljs.core.seq.call(null, s)) {
      return hipo.interceptor.call.call(null, f, s, t, m);
    } else {
      return f.call(null);
    }
  });
};
hipo.interceptor.LogInterceptor = function(b) {
  this.b = b;
};
hipo.interceptor.LogInterceptor.prototype.hipo$interceptor$Interceptor$ = cljs.core.PROTOCOL_SENTINEL;
hipo.interceptor.LogInterceptor.prototype.hipo$interceptor$Interceptor$_intercept$arity$4 = function(_, t, m, f) {
  var self__ = this;
  var ___$1 = this;
  if (cljs.core.not.call(null, self__.b) || cljs.core.not_EQ_.call(null, new cljs.core.Keyword(null, "reconciliate", "reconciliate", -527400739), t)) {
    console.log(cljs.core.name.call(null, t), " ", cljs.core.clj__GT_js.call(null, m));
  } else {
  }
  return f.call(null);
};
hipo.interceptor.LogInterceptor.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "b", "b", -1172211299, null)], null);
};
hipo.interceptor.LogInterceptor.cljs$lang$type = true;
hipo.interceptor.LogInterceptor.cljs$lang$ctorStr = "hipo.interceptor/LogInterceptor";
hipo.interceptor.LogInterceptor.cljs$lang$ctorPrWriter = function(this__4369__auto__, writer__4370__auto__, opt__4371__auto__) {
  return cljs.core._write.call(null, writer__4370__auto__, "hipo.interceptor/LogInterceptor");
};
hipo.interceptor.__GT_LogInterceptor = function hipo$interceptor$__GT_LogInterceptor(b) {
  return new hipo.interceptor.LogInterceptor(b);
};
hipo.interceptor.TimeInterceptor = function(s) {
  this.s = s;
};
hipo.interceptor.TimeInterceptor.prototype.hipo$interceptor$Interceptor$ = cljs.core.PROTOCOL_SENTINEL;
hipo.interceptor.TimeInterceptor.prototype.hipo$interceptor$Interceptor$_intercept$arity$4 = function(_, t, ___$1, f) {
  var self__ = this;
  var ___$2 = this;
  var label = [cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.s), "-", cljs.core.name.call(null, t)].join("");
  console.time(label);
  f.call(null);
  return console.timeEnd(label);
};
hipo.interceptor.TimeInterceptor.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "s", "s", -948495851, null)], null);
};
hipo.interceptor.TimeInterceptor.cljs$lang$type = true;
hipo.interceptor.TimeInterceptor.cljs$lang$ctorStr = "hipo.interceptor/TimeInterceptor";
hipo.interceptor.TimeInterceptor.cljs$lang$ctorPrWriter = function(this__4369__auto__, writer__4370__auto__, opt__4371__auto__) {
  return cljs.core._write.call(null, writer__4370__auto__, "hipo.interceptor/TimeInterceptor");
};
hipo.interceptor.__GT_TimeInterceptor = function hipo$interceptor$__GT_TimeInterceptor(s) {
  return new hipo.interceptor.TimeInterceptor(s);
};
hipo.interceptor.ProfileInterceptor = function(label) {
  this.label = label;
};
hipo.interceptor.ProfileInterceptor.prototype.hipo$interceptor$Interceptor$ = cljs.core.PROTOCOL_SENTINEL;
hipo.interceptor.ProfileInterceptor.prototype.hipo$interceptor$Interceptor$_intercept$arity$4 = function(_, t, ___$1, f) {
  var self__ = this;
  var ___$2 = this;
  if (cljs.core._EQ_.call(null, t, new cljs.core.Keyword(null, "reconciliate", "reconciliate", -527400739))) {
    console.profile(self__.label);
    f.call(null);
    console.profileEnd(self__.label);
  } else {
  }
  return f.call(null);
};
hipo.interceptor.ProfileInterceptor.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "label", "label", -936024965, null)], null);
};
hipo.interceptor.ProfileInterceptor.cljs$lang$type = true;
hipo.interceptor.ProfileInterceptor.cljs$lang$ctorStr = "hipo.interceptor/ProfileInterceptor";
hipo.interceptor.ProfileInterceptor.cljs$lang$ctorPrWriter = function(this__4369__auto__, writer__4370__auto__, opt__4371__auto__) {
  return cljs.core._write.call(null, writer__4370__auto__, "hipo.interceptor/ProfileInterceptor");
};
hipo.interceptor.__GT_ProfileInterceptor = function hipo$interceptor$__GT_ProfileInterceptor(label) {
  return new hipo.interceptor.ProfileInterceptor(label);
};
hipo.interceptor.PerformanceInterceptor = function(label) {
  this.label = label;
};
hipo.interceptor.PerformanceInterceptor.prototype.hipo$interceptor$Interceptor$ = cljs.core.PROTOCOL_SENTINEL;
hipo.interceptor.PerformanceInterceptor.prototype.hipo$interceptor$Interceptor$_intercept$arity$4 = function(_, t, ___$1, f) {
  var self__ = this;
  var ___$2 = this;
  var mark_begin = [cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.label), " begin ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(t)].join("");
  var mark_end = [cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.label), " end ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(t)].join("");
  performance.mark(mark_begin);
  f.call(null);
  performance.mark(mark_end);
  return performance.measure([cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.label), " ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(t)].join(""), mark_begin, mark_end);
};
hipo.interceptor.PerformanceInterceptor.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "label", "label", -936024965, null)], null);
};
hipo.interceptor.PerformanceInterceptor.cljs$lang$type = true;
hipo.interceptor.PerformanceInterceptor.cljs$lang$ctorStr = "hipo.interceptor/PerformanceInterceptor";
hipo.interceptor.PerformanceInterceptor.cljs$lang$ctorPrWriter = function(this__4369__auto__, writer__4370__auto__, opt__4371__auto__) {
  return cljs.core._write.call(null, writer__4370__auto__, "hipo.interceptor/PerformanceInterceptor");
};
hipo.interceptor.__GT_PerformanceInterceptor = function hipo$interceptor$__GT_PerformanceInterceptor(label) {
  return new hipo.interceptor.PerformanceInterceptor(label);
};
hipo.interceptor.StateInterceptor = function(a) {
  this.a = a;
};
hipo.interceptor.StateInterceptor.prototype.hipo$interceptor$Interceptor$ = cljs.core.PROTOCOL_SENTINEL;
hipo.interceptor.StateInterceptor.prototype.hipo$interceptor$Interceptor$_intercept$arity$4 = function(_, t, o, f) {
  var self__ = this;
  var ___$1 = this;
  cljs.core.swap_BANG_.call(null, self__.a, function(p1__2031_SHARP_, p2__2030_SHARP_) {
    return cljs.core.cons.call(null, p2__2030_SHARP_, p1__2031_SHARP_);
  }, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "type", "type", 1174270348), t, new cljs.core.Keyword(null, "value", "value", 305978217), o], null));
  return f.call(null);
};
hipo.interceptor.StateInterceptor.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "a", "a", -482876059, null)], null);
};
hipo.interceptor.StateInterceptor.cljs$lang$type = true;
hipo.interceptor.StateInterceptor.cljs$lang$ctorStr = "hipo.interceptor/StateInterceptor";
hipo.interceptor.StateInterceptor.cljs$lang$ctorPrWriter = function(this__4369__auto__, writer__4370__auto__, opt__4371__auto__) {
  return cljs.core._write.call(null, writer__4370__auto__, "hipo.interceptor/StateInterceptor");
};
hipo.interceptor.__GT_StateInterceptor = function hipo$interceptor$__GT_StateInterceptor(a) {
  return new hipo.interceptor.StateInterceptor(a);
};
hipo.interceptor.StaticReconciliationInterceptor = function() {
};
hipo.interceptor.StaticReconciliationInterceptor.prototype.hipo$interceptor$Interceptor$ = cljs.core.PROTOCOL_SENTINEL;
hipo.interceptor.StaticReconciliationInterceptor.prototype.hipo$interceptor$Interceptor$_intercept$arity$4 = function(_, t, o, f) {
  var self__ = this;
  var ___$1 = this;
  if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "reconciliate", "reconciliate", -527400739), t)) {
    if (!cljs.core.contains_QMARK_.call(null, cljs.core.meta.call(null, (new cljs.core.Keyword(null, "new-value", "new-value", 1087038368)).cljs$core$IFn$_invoke$arity$1(o)), new cljs.core.Keyword("hipo", "static", "hipo/static", 1217561835))) {
      return f.call(null);
    } else {
      return null;
    }
  } else {
    return f.call(null);
  }
};
hipo.interceptor.StaticReconciliationInterceptor.getBasis = function() {
  return cljs.core.PersistentVector.EMPTY;
};
hipo.interceptor.StaticReconciliationInterceptor.cljs$lang$type = true;
hipo.interceptor.StaticReconciliationInterceptor.cljs$lang$ctorStr = "hipo.interceptor/StaticReconciliationInterceptor";
hipo.interceptor.StaticReconciliationInterceptor.cljs$lang$ctorPrWriter = function(this__4369__auto__, writer__4370__auto__, opt__4371__auto__) {
  return cljs.core._write.call(null, writer__4370__auto__, "hipo.interceptor/StaticReconciliationInterceptor");
};
hipo.interceptor.__GT_StaticReconciliationInterceptor = function hipo$interceptor$__GT_StaticReconciliationInterceptor() {
  return new hipo.interceptor.StaticReconciliationInterceptor;
};
hipo.interceptor.IdentityReconciliationInterceptor = function() {
};
hipo.interceptor.IdentityReconciliationInterceptor.prototype.hipo$interceptor$Interceptor$ = cljs.core.PROTOCOL_SENTINEL;
hipo.interceptor.IdentityReconciliationInterceptor.prototype.hipo$interceptor$Interceptor$_intercept$arity$4 = function(_, t, o, f) {
  var self__ = this;
  var ___$1 = this;
  if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "reconciliate", "reconciliate", -527400739), t)) {
    if (!((new cljs.core.Keyword(null, "old-value", "old-value", 862546795)).cljs$core$IFn$_invoke$arity$1(o) === (new cljs.core.Keyword(null, "new-value", "new-value", 1087038368)).cljs$core$IFn$_invoke$arity$1(o))) {
      return f.call(null);
    } else {
      return null;
    }
  } else {
    return f.call(null);
  }
};
hipo.interceptor.IdentityReconciliationInterceptor.getBasis = function() {
  return cljs.core.PersistentVector.EMPTY;
};
hipo.interceptor.IdentityReconciliationInterceptor.cljs$lang$type = true;
hipo.interceptor.IdentityReconciliationInterceptor.cljs$lang$ctorStr = "hipo.interceptor/IdentityReconciliationInterceptor";
hipo.interceptor.IdentityReconciliationInterceptor.cljs$lang$ctorPrWriter = function(this__4369__auto__, writer__4370__auto__, opt__4371__auto__) {
  return cljs.core._write.call(null, writer__4370__auto__, "hipo.interceptor/IdentityReconciliationInterceptor");
};
hipo.interceptor.__GT_IdentityReconciliationInterceptor = function hipo$interceptor$__GT_IdentityReconciliationInterceptor() {
  return new hipo.interceptor.IdentityReconciliationInterceptor;
};
goog.provide("clojure.string");
goog.require("cljs.core");
goog.require("goog.string");
goog.require("goog.string.StringBuffer");
clojure.string.seq_reverse = function clojure$string$seq_reverse(coll) {
  return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, coll);
};
clojure.string.re_surrogate_pair = new RegExp("([\\uD800-\\uDBFF])([\\uDC00-\\uDFFF])", "g");
clojure.string.reverse = function clojure$string$reverse(s) {
  return s.replace(clojure.string.re_surrogate_pair, "$2$1").split("").reverse().join("");
};
clojure.string.replace_all = function clojure$string$replace_all(s, re, replacement) {
  var r = new RegExp(re.source, function() {
    var G__2006 = "g";
    var G__2006__$1 = cljs.core.truth_(re.ignoreCase) ? [G__2006, "i"].join("") : G__2006;
    var G__2006__$2 = cljs.core.truth_(re.multiline) ? [G__2006__$1, "m"].join("") : G__2006__$1;
    if (cljs.core.truth_(re.unicode)) {
      return [G__2006__$2, "u"].join("");
    } else {
      return G__2006__$2;
    }
  }());
  return s.replace(r, replacement);
};
clojure.string.replace_with = function clojure$string$replace_with(f) {
  return function() {
    var G__2007__delegate = function(args) {
      var matches = cljs.core.drop_last.call(null, 2, args);
      if (cljs.core._EQ_.call(null, cljs.core.count.call(null, matches), 1)) {
        return f.call(null, cljs.core.first.call(null, matches));
      } else {
        return f.call(null, cljs.core.vec.call(null, matches));
      }
    };
    var G__2007 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        var G__2008__i = 0, G__2008__a = new Array(arguments.length - 0);
        while (G__2008__i < G__2008__a.length) {
          G__2008__a[G__2008__i] = arguments[G__2008__i + 0];
          ++G__2008__i;
        }
        args = new cljs.core.IndexedSeq(G__2008__a, 0, null);
      }
      return G__2007__delegate.call(this, args);
    };
    G__2007.cljs$lang$maxFixedArity = 0;
    G__2007.cljs$lang$applyTo = function(arglist__2009) {
      var args = cljs.core.seq(arglist__2009);
      return G__2007__delegate(args);
    };
    G__2007.cljs$core$IFn$_invoke$arity$variadic = G__2007__delegate;
    return G__2007;
  }();
};
clojure.string.replace = function clojure$string$replace(s, match, replacement) {
  if (typeof match === "string") {
    return s.replace(new RegExp(goog.string.regExpEscape(match), "g"), replacement);
  } else {
    if (match instanceof RegExp) {
      if (typeof replacement === "string") {
        return clojure.string.replace_all.call(null, s, match, replacement);
      } else {
        return clojure.string.replace_all.call(null, s, match, clojure.string.replace_with.call(null, replacement));
      }
    } else {
      throw ["Invalid match arg: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(match)].join("");
    }
  }
};
clojure.string.replace_first = function clojure$string$replace_first(s, match, replacement) {
  return s.replace(match, replacement);
};
clojure.string.join = function clojure$string$join(var_args) {
  var G__2011 = arguments.length;
  switch(G__2011) {
    case 1:
      return clojure.string.join.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return clojure.string.join.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
clojure.string.join.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var sb = new goog.string.StringBuffer;
  var coll__$1 = cljs.core.seq.call(null, coll);
  while (true) {
    if (!(coll__$1 == null)) {
      var G__2013 = sb.append(cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.first.call(null, coll__$1)));
      var G__2014 = cljs.core.next.call(null, coll__$1);
      sb = G__2013;
      coll__$1 = G__2014;
      continue;
    } else {
      return sb.toString();
    }
    break;
  }
};
clojure.string.join.cljs$core$IFn$_invoke$arity$2 = function(separator, coll) {
  var sb = new goog.string.StringBuffer;
  var coll__$1 = cljs.core.seq.call(null, coll);
  while (true) {
    if (!(coll__$1 == null)) {
      sb.append(cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.first.call(null, coll__$1)));
      var coll__$2 = cljs.core.next.call(null, coll__$1);
      if (coll__$2 == null) {
      } else {
        sb.append(separator);
      }
      var G__2015 = sb;
      var G__2016 = coll__$2;
      sb = G__2015;
      coll__$1 = G__2016;
      continue;
    } else {
      return sb.toString();
    }
    break;
  }
};
clojure.string.join.cljs$lang$maxFixedArity = 2;
clojure.string.upper_case = function clojure$string$upper_case(s) {
  return s.toUpperCase();
};
clojure.string.lower_case = function clojure$string$lower_case(s) {
  return s.toLowerCase();
};
clojure.string.capitalize = function clojure$string$capitalize(s) {
  return goog.string.capitalize(s);
};
clojure.string.pop_last_while_empty = function clojure$string$pop_last_while_empty(v) {
  var v__$1 = v;
  while (true) {
    if ("" === cljs.core.peek.call(null, v__$1)) {
      var G__2017 = cljs.core.pop.call(null, v__$1);
      v__$1 = G__2017;
      continue;
    } else {
      return v__$1;
    }
    break;
  }
};
clojure.string.discard_trailing_if_needed = function clojure$string$discard_trailing_if_needed(limit, v) {
  if (0 === limit && 1 < cljs.core.count.call(null, v)) {
    return clojure.string.pop_last_while_empty.call(null, v);
  } else {
    return v;
  }
};
clojure.string.split_with_empty_regex = function clojure$string$split_with_empty_regex(s, limit) {
  if (limit <= 0 || limit >= 2 + cljs.core.count.call(null, s)) {
    return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s)))), "");
  } else {
    var pred__2018 = cljs.core._EQ__EQ_;
    var expr__2019 = limit;
    if (cljs.core.truth_(pred__2018.call(null, 1, expr__2019))) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [s], null);
    } else {
      if (cljs.core.truth_(pred__2018.call(null, 2, expr__2019))) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["", s], null);
      } else {
        var c = limit - 2;
        return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.subvec.call(null, cljs.core.vec.call(null, cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s))), 0, c))), cljs.core.subs.call(null, s, c));
      }
    }
  }
};
clojure.string.split = function clojure$string$split(var_args) {
  var G__2022 = arguments.length;
  switch(G__2022) {
    case 2:
      return clojure.string.split.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return clojure.string.split.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
clojure.string.split.cljs$core$IFn$_invoke$arity$2 = function(s, re) {
  return clojure.string.split.call(null, s, re, 0);
};
clojure.string.split.cljs$core$IFn$_invoke$arity$3 = function(s, re, limit) {
  return clojure.string.discard_trailing_if_needed.call(null, limit, "/(?:)/" === cljs.core.str.cljs$core$IFn$_invoke$arity$1(re) ? clojure.string.split_with_empty_regex.call(null, s, limit) : limit < 1 ? cljs.core.vec.call(null, cljs.core.str.cljs$core$IFn$_invoke$arity$1(s).split(re)) : function() {
    var s__$1 = s;
    var limit__$1 = limit;
    var parts = cljs.core.PersistentVector.EMPTY;
    while (true) {
      if (1 === limit__$1) {
        return cljs.core.conj.call(null, parts, s__$1);
      } else {
        var m = cljs.core.re_find.call(null, re, s__$1);
        if (!(m == null)) {
          var index = s__$1.indexOf(m);
          var G__2024 = s__$1.substring(index + cljs.core.count.call(null, m));
          var G__2025 = limit__$1 - 1;
          var G__2026 = cljs.core.conj.call(null, parts, s__$1.substring(0, index));
          s__$1 = G__2024;
          limit__$1 = G__2025;
          parts = G__2026;
          continue;
        } else {
          return cljs.core.conj.call(null, parts, s__$1);
        }
      }
      break;
    }
  }());
};
clojure.string.split.cljs$lang$maxFixedArity = 3;
clojure.string.split_lines = function clojure$string$split_lines(s) {
  return clojure.string.split.call(null, s, /\n|\r\n/);
};
clojure.string.trim = function clojure$string$trim(s) {
  return goog.string.trim(s);
};
clojure.string.triml = function clojure$string$triml(s) {
  return goog.string.trimLeft(s);
};
clojure.string.trimr = function clojure$string$trimr(s) {
  return goog.string.trimRight(s);
};
clojure.string.trim_newline = function clojure$string$trim_newline(s) {
  var index = s.length;
  while (true) {
    if (index === 0) {
      return "";
    } else {
      var ch = cljs.core.get.call(null, s, index - 1);
      if ("\n" === ch || "\r" === ch) {
        var G__2027 = index - 1;
        index = G__2027;
        continue;
      } else {
        return s.substring(0, index);
      }
    }
    break;
  }
};
clojure.string.blank_QMARK_ = function clojure$string$blank_QMARK_(s) {
  return goog.string.isEmptyOrWhitespace(goog.string.makeSafe(s));
};
clojure.string.escape = function clojure$string$escape(s, cmap) {
  var buffer = new goog.string.StringBuffer;
  var length = s.length;
  var index = 0;
  while (true) {
    if (length === index) {
      return buffer.toString();
    } else {
      var ch = s.charAt(index);
      var replacement = cljs.core.get.call(null, cmap, ch);
      if (!(replacement == null)) {
        buffer.append(cljs.core.str.cljs$core$IFn$_invoke$arity$1(replacement));
      } else {
        buffer.append(ch);
      }
      var G__2028 = index + 1;
      index = G__2028;
      continue;
    }
    break;
  }
};
clojure.string.index_of = function clojure$string$index_of(var_args) {
  var G__2030 = arguments.length;
  switch(G__2030) {
    case 2:
      return clojure.string.index_of.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return clojure.string.index_of.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
clojure.string.index_of.cljs$core$IFn$_invoke$arity$2 = function(s, value) {
  var result = s.indexOf(value);
  if (result < 0) {
    return null;
  } else {
    return result;
  }
};
clojure.string.index_of.cljs$core$IFn$_invoke$arity$3 = function(s, value, from_index) {
  var result = s.indexOf(value, from_index);
  if (result < 0) {
    return null;
  } else {
    return result;
  }
};
clojure.string.index_of.cljs$lang$maxFixedArity = 3;
clojure.string.last_index_of = function clojure$string$last_index_of(var_args) {
  var G__2033 = arguments.length;
  switch(G__2033) {
    case 2:
      return clojure.string.last_index_of.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return clojure.string.last_index_of.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
clojure.string.last_index_of.cljs$core$IFn$_invoke$arity$2 = function(s, value) {
  var result = s.lastIndexOf(value);
  if (result < 0) {
    return null;
  } else {
    return result;
  }
};
clojure.string.last_index_of.cljs$core$IFn$_invoke$arity$3 = function(s, value, from_index) {
  var result = s.lastIndexOf(value, from_index);
  if (result < 0) {
    return null;
  } else {
    return result;
  }
};
clojure.string.last_index_of.cljs$lang$maxFixedArity = 3;
clojure.string.starts_with_QMARK_ = function clojure$string$starts_with_QMARK_(s, substr) {
  return goog.string.startsWith(s, substr);
};
clojure.string.ends_with_QMARK_ = function clojure$string$ends_with_QMARK_(s, substr) {
  return goog.string.endsWith(s, substr);
};
clojure.string.includes_QMARK_ = function clojure$string$includes_QMARK_(s, substr) {
  return goog.string.contains(s, substr);
};
goog.provide("hipo.hiccup");
goog.require("cljs.core");
goog.require("clojure.string");
hipo.hiccup.id_separator = "#";
hipo.hiccup.class_separator = ".";
hipo.hiccup.default_namespaces = new cljs.core.PersistentArrayMap(null, 2, ["svg", "http://www.w3.org/2000/svg", "xlink", "http://www.w3.org/1999/xlink"], null);
hipo.hiccup.key__GT_namespace = function hipo$hiccup$key__GT_namespace(s, m) {
  if (cljs.core.truth_(s)) {
    var or__4126__auto__ = cljs.core.get.call(null, (new cljs.core.Keyword(null, "namespaces", "namespaces", -1444157469)).cljs$core$IFn$_invoke$arity$1(m), s);
    if (cljs.core.truth_(or__4126__auto__)) {
      return or__4126__auto__;
    } else {
      return cljs.core.get.call(null, hipo.hiccup.default_namespaces, s);
    }
  } else {
    return null;
  }
};
hipo.hiccup.parse_tag_name = function hipo$hiccup$parse_tag_name(s) {
  var i = s.indexOf(hipo.hiccup.id_separator);
  if (i > 0) {
    return cljs.core.subs.call(null, s, 0, i);
  } else {
    var j = s.indexOf(hipo.hiccup.class_separator);
    if (j > 0) {
      return cljs.core.subs.call(null, s, 0, j);
    } else {
      return s;
    }
  }
};
hipo.hiccup.parse_id = function hipo$hiccup$parse_id(s) {
  var i = s.indexOf(hipo.hiccup.id_separator);
  if (i > 0) {
    var j = s.indexOf(hipo.hiccup.class_separator);
    if (j > 0) {
      return cljs.core.subs.call(null, s, i + 1, j);
    } else {
      return cljs.core.subs.call(null, s, i + 1);
    }
  } else {
    return null;
  }
};
hipo.hiccup.parse_classes = function hipo$hiccup$parse_classes(s) {
  var i = s.indexOf(hipo.hiccup.class_separator);
  if (i > 0) {
    var cs = cljs.core.subs.call(null, s, i + 1);
    var s__$1 = cs;
    while (true) {
      var i__$1 = s__$1.indexOf(hipo.hiccup.class_separator);
      if (i__$1 > 0) {
        var G__2004 = s__$1.replace(hipo.hiccup.class_separator, " ");
        s__$1 = G__2004;
        continue;
      } else {
        return s__$1;
      }
      break;
    }
  } else {
    return null;
  }
};
hipo.hiccup.literal_QMARK_ = function hipo$hiccup$literal_QMARK_(o) {
  return typeof o === "string" || typeof o === "number" || o === true || o === false;
};
hipo.hiccup.node = function hipo$hiccup$node(v) {
  return cljs.core.nth.call(null, v, 0);
};
hipo.hiccup.keyns = function hipo$hiccup$keyns(h) {
  return cljs.core.namespace.call(null, hipo.hiccup.node.call(null, h));
};
hipo.hiccup.tag = function hipo$hiccup$tag(v) {
  return hipo.hiccup.parse_tag_name.call(null, cljs.core.name.call(null, hipo.hiccup.node.call(null, v)));
};
hipo.hiccup.attributes = function hipo$hiccup$attributes(v) {
  if (cljs.core.truth_(v)) {
    var n = cljs.core.name.call(null, hipo.hiccup.node.call(null, v));
    var id = hipo.hiccup.parse_id.call(null, n);
    var cs = hipo.hiccup.parse_classes.call(null, n);
    var m_QMARK_ = cljs.core.nth.call(null, v, 1, null);
    if (cljs.core.map_QMARK_.call(null, m_QMARK_)) {
      if (cljs.core.truth_(function() {
        var and__4115__auto__ = id;
        if (cljs.core.truth_(and__4115__auto__)) {
          return cljs.core.contains_QMARK_.call(null, m_QMARK_, new cljs.core.Keyword(null, "id", "id", -1388402092));
        } else {
          return and__4115__auto__;
        }
      }())) {
        throw cljs.core.ex_info.call(null, "Cannot define id multiple times", cljs.core.PersistentArrayMap.EMPTY);
      } else {
        if (cljs.core.truth_(function() {
          var or__4126__auto__ = id;
          if (cljs.core.truth_(or__4126__auto__)) {
            return or__4126__auto__;
          } else {
            return cs;
          }
        }())) {
          return cljs.core.merge.call(null, m_QMARK_, cljs.core.truth_(id) ? new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "id", "id", -1388402092), id], null) : null, cljs.core.truth_(cs) ? new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", -2030961996), function() {
            var temp__5733__auto__ = (new cljs.core.Keyword(null, "class", "class", -2030961996)).cljs$core$IFn$_invoke$arity$1(m_QMARK_);
            if (cljs.core.truth_(temp__5733__auto__)) {
              var c = temp__5733__auto__;
              if (cljs.core.truth_(cs)) {
                return [cljs.core.str.cljs$core$IFn$_invoke$arity$1(cs), " ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(c)].join("");
              } else {
                return cljs.core.str.cljs$core$IFn$_invoke$arity$1(c);
              }
            } else {
              return cs;
            }
          }()], null) : null);
        } else {
          return m_QMARK_;
        }
      }
    } else {
      if (cljs.core.truth_(function() {
        var or__4126__auto__ = id;
        if (cljs.core.truth_(or__4126__auto__)) {
          return or__4126__auto__;
        } else {
          return cs;
        }
      }())) {
        return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "id", "id", -1388402092), id, new cljs.core.Keyword(null, "class", "class", -2030961996), cs], null);
      } else {
        return null;
      }
    }
  } else {
    return null;
  }
};
hipo.hiccup.children = function hipo$hiccup$children(v) {
  var i = cljs.core.map_QMARK_.call(null, cljs.core.nth.call(null, v, 1, null)) ? 2 : 1;
  if (cljs.core.count.call(null, v) > i) {
    return cljs.core.subvec.call(null, v, i);
  } else {
    return null;
  }
};
hipo.hiccup.flattened_QMARK_ = function hipo$hiccup$flattened_QMARK_(v) {
  if (v == null || cljs.core.vector_QMARK_.call(null, v)) {
  } else {
    throw new Error("Assert failed: (or (nil? v) (vector? v))");
  }
  if (cljs.core.empty_QMARK_.call(null, v)) {
    return true;
  } else {
    var c = cljs.core.count.call(null, v) - 1;
    var i = 0;
    while (true) {
      var o = cljs.core.nth.call(null, v, i);
      if (hipo.hiccup.literal_QMARK_.call(null, o) || cljs.core.vector_QMARK_.call(null, o)) {
        if (cljs.core._EQ_.call(null, c, i)) {
          return true;
        } else {
          var G__2005 = i + 1;
          i = G__2005;
          continue;
        }
      } else {
        return false;
      }
      break;
    }
  }
};
hipo.hiccup.Sentinel = function() {
};
hipo.hiccup.Sentinel.getBasis = function() {
  return cljs.core.PersistentVector.EMPTY;
};
hipo.hiccup.Sentinel.cljs$lang$type = true;
hipo.hiccup.Sentinel.cljs$lang$ctorStr = "hipo.hiccup/Sentinel";
hipo.hiccup.Sentinel.cljs$lang$ctorPrWriter = function(this__4369__auto__, writer__4370__auto__, opt__4371__auto__) {
  return cljs.core._write.call(null, writer__4370__auto__, "hipo.hiccup/Sentinel");
};
hipo.hiccup.__GT_Sentinel = function hipo$hiccup$__GT_Sentinel() {
  return new hipo.hiccup.Sentinel;
};
hipo.hiccup.sentinel = new hipo.hiccup.Sentinel;
hipo.hiccup.conjs_BANG_ = function hipo$hiccup$conjs_BANG_(v, s) {
  while (true) {
    if (cljs.core.seq.call(null, s)) {
      var G__2006 = function() {
        var f = cljs.core.first.call(null, s);
        if (hipo.hiccup.literal_QMARK_.call(null, f) || cljs.core.vector_QMARK_.call(null, f)) {
          return cljs.core.conj_BANG_.call(null, v, f);
        } else {
          return hipo.hiccup.conjs_BANG_.call(null, v, f);
        }
      }();
      var G__2007 = cljs.core.rest.call(null, s);
      v = G__2006;
      s = G__2007;
      continue;
    } else {
      return v;
    }
    break;
  }
};
hipo.hiccup.flatten_children = function hipo$hiccup$flatten_children(v) {
  if (v == null || cljs.core.vector_QMARK_.call(null, v)) {
  } else {
    throw new Error("Assert failed: (or (nil? v) (vector? v))");
  }
  var _PERCENT_ = hipo.hiccup.flattened_QMARK_.call(null, v) ? v : function() {
    var acc = cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY);
    var v__$1 = v;
    while (true) {
      var f = cljs.core.nth.call(null, v__$1, 0, hipo.hiccup.sentinel);
      if (hipo.hiccup.sentinel === f) {
        return cljs.core.persistent_BANG_.call(null, acc);
      } else {
        var G__2008 = cljs.core.seq_QMARK_.call(null, f) ? hipo.hiccup.conjs_BANG_.call(null, acc, f) : !(f == null) ? cljs.core.conj_BANG_.call(null, acc, f) : acc;
        var G__2009 = cljs.core.subvec.call(null, v__$1, 1);
        acc = G__2008;
        v__$1 = G__2009;
        continue;
      }
      break;
    }
  }();
  if (v == null || cljs.core.vector_QMARK_.call(null, v)) {
  } else {
    throw new Error("Assert failed: (or (nil? v) (vector? v))");
  }
  return _PERCENT_;
};
hipo.hiccup.listener_name_QMARK_ = function hipo$hiccup$listener_name_QMARK_(s) {
  return 0 === s.indexOf("on-");
};
hipo.hiccup.listener_name__GT_event_name = function hipo$hiccup$listener_name__GT_event_name(s) {
  if (hipo.hiccup.listener_name_QMARK_.call(null, s)) {
    return cljs.core.subs.call(null, s, 3);
  } else {
    return null;
  }
};
hipo.hiccup.classes = function hipo$hiccup$classes(s) {
  var s__$1 = cljs.core.keep.call(null, cljs.core.identity, s);
  if (!cljs.core.empty_QMARK_.call(null, s__$1)) {
    return clojure.string.trim.call(null, clojure.string.join.call(null, " ", s__$1));
  } else {
    return null;
  }
};
goog.provide("hipo.attribute");
goog.require("cljs.core");
goog.require("hipo.hiccup");
hipo.attribute.style_handler = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "target", "target", 253001721), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "attr", "attr", -604132353), "style"], null), new cljs.core.Keyword(null, "fn", "fn", -1175266204), function(p1__2035_SHARP_, p2__2036_SHARP_, p3__2037_SHARP_, p4__2034_SHARP_) {
  var seq__2038 = cljs.core.seq.call(null, p4__2034_SHARP_);
  var chunk__2039 = null;
  var count__2040 = 0;
  var i__2041 = 0;
  while (true) {
    if (i__2041 < count__2040) {
      var vec__2048 = cljs.core._nth.call(null, chunk__2039, i__2041);
      var k = cljs.core.nth.call(null, vec__2048, 0, null);
      var v = cljs.core.nth.call(null, vec__2048, 1, null);
      p1__2035_SHARP_["style"][cljs.core.name.call(null, k)] = v;
      var G__2054 = seq__2038;
      var G__2055 = chunk__2039;
      var G__2056 = count__2040;
      var G__2057 = i__2041 + 1;
      seq__2038 = G__2054;
      chunk__2039 = G__2055;
      count__2040 = G__2056;
      i__2041 = G__2057;
      continue;
    } else {
      var temp__5735__auto__ = cljs.core.seq.call(null, seq__2038);
      if (temp__5735__auto__) {
        var seq__2038__$1 = temp__5735__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__2038__$1)) {
          var c__4556__auto__ = cljs.core.chunk_first.call(null, seq__2038__$1);
          var G__2058 = cljs.core.chunk_rest.call(null, seq__2038__$1);
          var G__2059 = c__4556__auto__;
          var G__2060 = cljs.core.count.call(null, c__4556__auto__);
          var G__2061 = 0;
          seq__2038 = G__2058;
          chunk__2039 = G__2059;
          count__2040 = G__2060;
          i__2041 = G__2061;
          continue;
        } else {
          var vec__2051 = cljs.core.first.call(null, seq__2038__$1);
          var k = cljs.core.nth.call(null, vec__2051, 0, null);
          var v = cljs.core.nth.call(null, vec__2051, 1, null);
          p1__2035_SHARP_["style"][cljs.core.name.call(null, k)] = v;
          var G__2062 = cljs.core.next.call(null, seq__2038__$1);
          var G__2063 = null;
          var G__2064 = 0;
          var G__2065 = 0;
          seq__2038 = G__2062;
          chunk__2039 = G__2063;
          count__2040 = G__2064;
          i__2041 = G__2065;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
}], null);
hipo.attribute.property_name__GT_js_property_name = function hipo$attribute$property_name__GT_js_property_name(n) {
  return n.replace("-", "_");
};
hipo.attribute.set_property_value = function hipo$attribute$set_property_value(el, k, v) {
  return el[hipo.attribute.property_name__GT_js_property_name.call(null, cljs.core.name.call(null, k))] = v;
};
hipo.attribute.set_attribute_BANG_ = function hipo$attribute$set_attribute_BANG_(el, k, v, m) {
  var temp__5733__auto__ = k instanceof cljs.core.Keyword ? hipo.hiccup.key__GT_namespace.call(null, cljs.core.namespace.call(null, k), m) : null;
  if (cljs.core.truth_(temp__5733__auto__)) {
    var nns = temp__5733__auto__;
    return el.setAttributeNS(nns, cljs.core.name.call(null, k), v);
  } else {
    return el.setAttribute(cljs.core.name.call(null, k), v);
  }
};
hipo.attribute.remove_attribute_BANG_ = function hipo$attribute$remove_attribute_BANG_(el, k, m) {
  var temp__5733__auto__ = k instanceof cljs.core.Keyword ? hipo.hiccup.key__GT_namespace.call(null, cljs.core.namespace.call(null, k), m) : null;
  if (cljs.core.truth_(temp__5733__auto__)) {
    var nns = temp__5733__auto__;
    return el.removeAttributeNS(nns, cljs.core.name.call(null, k));
  } else {
    return el.removeAttribute(cljs.core.name.call(null, k));
  }
};
hipo.attribute.default_handler_fns = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "prop", "prop", -515168332), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "fn", "fn", -1175266204), function(p1__2066_SHARP_, p2__2067_SHARP_, p3__2069_SHARP_, p4__2068_SHARP_) {
  return hipo.attribute.set_property_value.call(null, p1__2066_SHARP_, p2__2067_SHARP_, p4__2068_SHARP_);
}], null), new cljs.core.Keyword(null, "attr", "attr", -604132353), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "fn", "fn", -1175266204), function(p1__2071_SHARP_, p2__2072_SHARP_, p3__2074_SHARP_, p4__2070_SHARP_, p5__2073_SHARP_) {
  if (cljs.core.truth_(p4__2070_SHARP_)) {
    return hipo.attribute.set_attribute_BANG_.call(null, p1__2071_SHARP_, p2__2072_SHARP_, p4__2070_SHARP_, p5__2073_SHARP_);
  } else {
    return hipo.attribute.remove_attribute_BANG_.call(null, p1__2071_SHARP_, p2__2072_SHARP_, p5__2073_SHARP_);
  }
}], null)], null);
hipo.attribute.default_handlers = new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "target", "target", 253001721), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "ns", "ns", 441598760), "svg", new cljs.core.Keyword(null, "attr", "attr", -604132353), "class"], null), new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "attr", "attr", -604132353)], 
null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "target", "target", 253001721), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), "input", new cljs.core.Keyword(null, "attr", "attr", -604132353), new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, ["value", null, "checked", null], null), null)], null), new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "prop", 
"prop", -515168332)], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "target", "target", 253001721), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), "input", new cljs.core.Keyword(null, "attr", "attr", -604132353), "autofocus"], null), new cljs.core.Keyword(null, "fn", "fn", -1175266204), function(p1__2076_SHARP_, p2__2077_SHARP_, p3__2078_SHARP_, p4__2075_SHARP_) {
  if (cljs.core.truth_(p4__2075_SHARP_)) {
    p1__2076_SHARP_.focus();
    return p1__2076_SHARP_.setAttribute(p2__2077_SHARP_, p4__2075_SHARP_);
  } else {
    return null;
  }
}], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "target", "target", 253001721), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), "option", new cljs.core.Keyword(null, "attr", "attr", -604132353), new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, ["selected", null], null), null)], null), new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "prop", "prop", 
-515168332)], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "target", "target", 253001721), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), "select", new cljs.core.Keyword(null, "attr", "attr", -604132353), new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, ["value", null, "selectIndex", null], null), null)], null), new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, 
"prop", "prop", -515168332)], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "target", "target", 253001721), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), "textarea", new cljs.core.Keyword(null, "attr", "attr", -604132353), new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, ["value", null], null), null)], null), new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, 
"prop", "prop", -515168332)], null)], null);
hipo.attribute.matches_QMARK_ = function hipo$attribute$matches_QMARK_(expr, s) {
  if (cljs.core.truth_(expr)) {
    if (cljs.core.set_QMARK_.call(null, expr)) {
      return cljs.core.contains_QMARK_.call(null, expr, s);
    } else {
      return cljs.core._EQ_.call(null, s, expr);
    }
  } else {
    return true;
  }
};
hipo.attribute.target_matches_QMARK_ = function hipo$attribute$target_matches_QMARK_(m, ns, tag, attr) {
  return hipo.attribute.matches_QMARK_.call(null, (new cljs.core.Keyword(null, "ns", "ns", 441598760)).cljs$core$IFn$_invoke$arity$1(m), ns) && hipo.attribute.matches_QMARK_.call(null, (new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(m), tag) && hipo.attribute.matches_QMARK_.call(null, (new cljs.core.Keyword(null, "attr", "attr", -604132353)).cljs$core$IFn$_invoke$arity$1(m), attr);
};
hipo.attribute.handler = function hipo$attribute$handler(m, ns, tag, attr) {
  var v = cljs.core.concat.call(null, (new cljs.core.Keyword(null, "attribute-handlers", "attribute-handlers", 855454691)).cljs$core$IFn$_invoke$arity$1(m), hipo.attribute.default_handlers);
  var h = cljs.core.some.call(null, function(p1__2079_SHARP_) {
    var t = (new cljs.core.Keyword(null, "target", "target", 253001721)).cljs$core$IFn$_invoke$arity$1(p1__2079_SHARP_);
    if (hipo.attribute.target_matches_QMARK_.call(null, t, ns, tag, cljs.core.name.call(null, attr))) {
      return p1__2079_SHARP_;
    } else {
      return null;
    }
  }, v);
  if (cljs.core.contains_QMARK_.call(null, h, new cljs.core.Keyword(null, "type", "type", 1174270348))) {
    return (new cljs.core.Keyword(null, "type", "type", 1174270348)).cljs$core$IFn$_invoke$arity$1(h).call(null, hipo.attribute.default_handler_fns);
  } else {
    return h;
  }
};
hipo.attribute.default_set_value_BANG_ = function hipo$attribute$default_set_value_BANG_(el, attr, ov, nv, m) {
  if (hipo.hiccup.literal_QMARK_.call(null, ov) || hipo.hiccup.literal_QMARK_.call(null, nv)) {
    if (cljs.core.truth_(nv)) {
      return hipo.attribute.set_attribute_BANG_.call(null, el, attr, nv, m);
    } else {
      return hipo.attribute.remove_attribute_BANG_.call(null, el, attr, m);
    }
  } else {
    return el[attr] = hipo.attribute.set_property_value.call(null, el, attr, nv);
  }
};
hipo.attribute.set_value_BANG_ = function hipo$attribute$set_value_BANG_(el, m, ns, tag, attr, ov, nv) {
  var h = hipo.attribute.handler.call(null, m, ns, tag, attr);
  var f = function() {
    var or__4126__auto__ = (new cljs.core.Keyword(null, "fn", "fn", -1175266204)).cljs$core$IFn$_invoke$arity$1(h);
    if (cljs.core.truth_(or__4126__auto__)) {
      return or__4126__auto__;
    } else {
      return hipo.attribute.default_set_value_BANG_;
    }
  }();
  return f.call(null, el, attr, ov, nv, m);
};
goog.provide("clojure.set");
goog.require("cljs.core");
clojure.set.bubble_max_key = function clojure$set$bubble_max_key(k, coll) {
  var max = cljs.core.apply.call(null, cljs.core.max_key, k, coll);
  return cljs.core.cons.call(null, max, cljs.core.remove.call(null, function(p1__2082_SHARP_) {
    return max === p1__2082_SHARP_;
  }, coll));
};
clojure.set.union = function clojure$set$union(var_args) {
  var G__2087 = arguments.length;
  switch(G__2087) {
    case 0:
      return clojure.set.union.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return clojure.set.union.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return clojure.set.union.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var args_arr__4757__auto__ = [];
      var len__4736__auto___2089 = arguments.length;
      var i__4737__auto___2090 = 0;
      while (true) {
        if (i__4737__auto___2090 < len__4736__auto___2089) {
          args_arr__4757__auto__.push(arguments[i__4737__auto___2090]);
          var G__2091 = i__4737__auto___2090 + 1;
          i__4737__auto___2090 = G__2091;
          continue;
        } else {
        }
        break;
      }
      var argseq__4758__auto__ = new cljs.core.IndexedSeq(args_arr__4757__auto__.slice(2), 0, null);
      return clojure.set.union.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__4758__auto__);
  }
};
clojure.set.union.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.PersistentHashSet.EMPTY;
};
clojure.set.union.cljs$core$IFn$_invoke$arity$1 = function(s1) {
  return s1;
};
clojure.set.union.cljs$core$IFn$_invoke$arity$2 = function(s1, s2) {
  if (cljs.core.count.call(null, s1) < cljs.core.count.call(null, s2)) {
    return cljs.core.reduce.call(null, cljs.core.conj, s2, s1);
  } else {
    return cljs.core.reduce.call(null, cljs.core.conj, s1, s2);
  }
};
clojure.set.union.cljs$core$IFn$_invoke$arity$variadic = function(s1, s2, sets) {
  var bubbled_sets = clojure.set.bubble_max_key.call(null, cljs.core.count, cljs.core.conj.call(null, sets, s2, s1));
  return cljs.core.reduce.call(null, cljs.core.into, cljs.core.first.call(null, bubbled_sets), cljs.core.rest.call(null, bubbled_sets));
};
clojure.set.union.cljs$lang$applyTo = function(seq2084) {
  var G__2085 = cljs.core.first.call(null, seq2084);
  var seq2084__$1 = cljs.core.next.call(null, seq2084);
  var G__2086 = cljs.core.first.call(null, seq2084__$1);
  var seq2084__$2 = cljs.core.next.call(null, seq2084__$1);
  var self__4723__auto__ = this;
  return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__2085, G__2086, seq2084__$2);
};
clojure.set.union.cljs$lang$maxFixedArity = 2;
clojure.set.intersection = function clojure$set$intersection(var_args) {
  var G__2097 = arguments.length;
  switch(G__2097) {
    case 1:
      return clojure.set.intersection.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return clojure.set.intersection.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var args_arr__4757__auto__ = [];
      var len__4736__auto___2099 = arguments.length;
      var i__4737__auto___2100 = 0;
      while (true) {
        if (i__4737__auto___2100 < len__4736__auto___2099) {
          args_arr__4757__auto__.push(arguments[i__4737__auto___2100]);
          var G__2101 = i__4737__auto___2100 + 1;
          i__4737__auto___2100 = G__2101;
          continue;
        } else {
        }
        break;
      }
      var argseq__4758__auto__ = new cljs.core.IndexedSeq(args_arr__4757__auto__.slice(2), 0, null);
      return clojure.set.intersection.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__4758__auto__);
  }
};
clojure.set.intersection.cljs$core$IFn$_invoke$arity$1 = function(s1) {
  return s1;
};
clojure.set.intersection.cljs$core$IFn$_invoke$arity$2 = function(s1, s2) {
  while (true) {
    if (cljs.core.count.call(null, s2) < cljs.core.count.call(null, s1)) {
      var G__2102 = s2;
      var G__2103 = s1;
      s1 = G__2102;
      s2 = G__2103;
      continue;
    } else {
      return cljs.core.reduce.call(null, function(s1, s2) {
        return function(result, item) {
          if (cljs.core.contains_QMARK_.call(null, s2, item)) {
            return result;
          } else {
            return cljs.core.disj.call(null, result, item);
          }
        };
      }(s1, s2), s1, s1);
    }
    break;
  }
};
clojure.set.intersection.cljs$core$IFn$_invoke$arity$variadic = function(s1, s2, sets) {
  var bubbled_sets = clojure.set.bubble_max_key.call(null, function(p1__2092_SHARP_) {
    return -cljs.core.count.call(null, p1__2092_SHARP_);
  }, cljs.core.conj.call(null, sets, s2, s1));
  return cljs.core.reduce.call(null, clojure.set.intersection, cljs.core.first.call(null, bubbled_sets), cljs.core.rest.call(null, bubbled_sets));
};
clojure.set.intersection.cljs$lang$applyTo = function(seq2094) {
  var G__2095 = cljs.core.first.call(null, seq2094);
  var seq2094__$1 = cljs.core.next.call(null, seq2094);
  var G__2096 = cljs.core.first.call(null, seq2094__$1);
  var seq2094__$2 = cljs.core.next.call(null, seq2094__$1);
  var self__4723__auto__ = this;
  return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__2095, G__2096, seq2094__$2);
};
clojure.set.intersection.cljs$lang$maxFixedArity = 2;
clojure.set.difference = function clojure$set$difference(var_args) {
  var G__2108 = arguments.length;
  switch(G__2108) {
    case 1:
      return clojure.set.difference.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return clojure.set.difference.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var args_arr__4757__auto__ = [];
      var len__4736__auto___2110 = arguments.length;
      var i__4737__auto___2111 = 0;
      while (true) {
        if (i__4737__auto___2111 < len__4736__auto___2110) {
          args_arr__4757__auto__.push(arguments[i__4737__auto___2111]);
          var G__2112 = i__4737__auto___2111 + 1;
          i__4737__auto___2111 = G__2112;
          continue;
        } else {
        }
        break;
      }
      var argseq__4758__auto__ = new cljs.core.IndexedSeq(args_arr__4757__auto__.slice(2), 0, null);
      return clojure.set.difference.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__4758__auto__);
  }
};
clojure.set.difference.cljs$core$IFn$_invoke$arity$1 = function(s1) {
  return s1;
};
clojure.set.difference.cljs$core$IFn$_invoke$arity$2 = function(s1, s2) {
  if (cljs.core.count.call(null, s1) < cljs.core.count.call(null, s2)) {
    return cljs.core.reduce.call(null, function(result, item) {
      if (cljs.core.contains_QMARK_.call(null, s2, item)) {
        return cljs.core.disj.call(null, result, item);
      } else {
        return result;
      }
    }, s1, s1);
  } else {
    return cljs.core.reduce.call(null, cljs.core.disj, s1, s2);
  }
};
clojure.set.difference.cljs$core$IFn$_invoke$arity$variadic = function(s1, s2, sets) {
  return cljs.core.reduce.call(null, clojure.set.difference, s1, cljs.core.conj.call(null, sets, s2));
};
clojure.set.difference.cljs$lang$applyTo = function(seq2105) {
  var G__2106 = cljs.core.first.call(null, seq2105);
  var seq2105__$1 = cljs.core.next.call(null, seq2105);
  var G__2107 = cljs.core.first.call(null, seq2105__$1);
  var seq2105__$2 = cljs.core.next.call(null, seq2105__$1);
  var self__4723__auto__ = this;
  return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__2106, G__2107, seq2105__$2);
};
clojure.set.difference.cljs$lang$maxFixedArity = 2;
clojure.set.select = function clojure$set$select(pred, xset) {
  return cljs.core.reduce.call(null, function(s, k) {
    if (cljs.core.truth_(pred.call(null, k))) {
      return s;
    } else {
      return cljs.core.disj.call(null, s, k);
    }
  }, xset, xset);
};
clojure.set.project = function clojure$set$project(xrel, ks) {
  return cljs.core.set.call(null, cljs.core.map.call(null, function(p1__2113_SHARP_) {
    return cljs.core.select_keys.call(null, p1__2113_SHARP_, ks);
  }, xrel));
};
clojure.set.rename_keys = function clojure$set$rename_keys(map, kmap) {
  return cljs.core.reduce.call(null, function(m, p__2114) {
    var vec__2115 = p__2114;
    var old = cljs.core.nth.call(null, vec__2115, 0, null);
    var new$ = cljs.core.nth.call(null, vec__2115, 1, null);
    if (cljs.core.contains_QMARK_.call(null, map, old)) {
      return cljs.core.assoc.call(null, m, new$, cljs.core.get.call(null, map, old));
    } else {
      return m;
    }
  }, cljs.core.apply.call(null, cljs.core.dissoc, map, cljs.core.keys.call(null, kmap)), kmap);
};
clojure.set.rename = function clojure$set$rename(xrel, kmap) {
  return cljs.core.set.call(null, cljs.core.map.call(null, function(p1__2118_SHARP_) {
    return clojure.set.rename_keys.call(null, p1__2118_SHARP_, kmap);
  }, xrel));
};
clojure.set.index = function clojure$set$index(xrel, ks) {
  return cljs.core.reduce.call(null, function(m, x) {
    var ik = cljs.core.select_keys.call(null, x, ks);
    return cljs.core.assoc.call(null, m, ik, cljs.core.conj.call(null, cljs.core.get.call(null, m, ik, cljs.core.PersistentHashSet.EMPTY), x));
  }, cljs.core.PersistentArrayMap.EMPTY, xrel);
};
clojure.set.map_invert = function clojure$set$map_invert(m) {
  return cljs.core.reduce.call(null, function(m__$1, p__2119) {
    var vec__2120 = p__2119;
    var k = cljs.core.nth.call(null, vec__2120, 0, null);
    var v = cljs.core.nth.call(null, vec__2120, 1, null);
    return cljs.core.assoc.call(null, m__$1, v, k);
  }, cljs.core.PersistentArrayMap.EMPTY, m);
};
clojure.set.join = function clojure$set$join(var_args) {
  var G__2128 = arguments.length;
  switch(G__2128) {
    case 2:
      return clojure.set.join.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return clojure.set.join.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
clojure.set.join.cljs$core$IFn$_invoke$arity$2 = function(xrel, yrel) {
  if (cljs.core.seq.call(null, xrel) && cljs.core.seq.call(null, yrel)) {
    var ks = clojure.set.intersection.call(null, cljs.core.set.call(null, cljs.core.keys.call(null, cljs.core.first.call(null, xrel))), cljs.core.set.call(null, cljs.core.keys.call(null, cljs.core.first.call(null, yrel))));
    var vec__2129 = cljs.core.count.call(null, xrel) <= cljs.core.count.call(null, yrel) ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [xrel, yrel], null) : new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [yrel, xrel], null);
    var r = cljs.core.nth.call(null, vec__2129, 0, null);
    var s = cljs.core.nth.call(null, vec__2129, 1, null);
    var idx = clojure.set.index.call(null, r, ks);
    return cljs.core.reduce.call(null, function(ret, x) {
      var found = idx.call(null, cljs.core.select_keys.call(null, x, ks));
      if (cljs.core.truth_(found)) {
        return cljs.core.reduce.call(null, function(p1__2123_SHARP_, p2__2124_SHARP_) {
          return cljs.core.conj.call(null, p1__2123_SHARP_, cljs.core.merge.call(null, p2__2124_SHARP_, x));
        }, ret, found);
      } else {
        return ret;
      }
    }, cljs.core.PersistentHashSet.EMPTY, s);
  } else {
    return cljs.core.PersistentHashSet.EMPTY;
  }
};
clojure.set.join.cljs$core$IFn$_invoke$arity$3 = function(xrel, yrel, km) {
  var vec__2132 = cljs.core.count.call(null, xrel) <= cljs.core.count.call(null, yrel) ? new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [xrel, yrel, clojure.set.map_invert.call(null, km)], null) : new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [yrel, xrel, km], null);
  var r = cljs.core.nth.call(null, vec__2132, 0, null);
  var s = cljs.core.nth.call(null, vec__2132, 1, null);
  var k = cljs.core.nth.call(null, vec__2132, 2, null);
  var idx = clojure.set.index.call(null, r, cljs.core.vals.call(null, k));
  return cljs.core.reduce.call(null, function(ret, x) {
    var found = idx.call(null, clojure.set.rename_keys.call(null, cljs.core.select_keys.call(null, x, cljs.core.keys.call(null, k)), k));
    if (cljs.core.truth_(found)) {
      return cljs.core.reduce.call(null, function(p1__2125_SHARP_, p2__2126_SHARP_) {
        return cljs.core.conj.call(null, p1__2125_SHARP_, cljs.core.merge.call(null, p2__2126_SHARP_, x));
      }, ret, found);
    } else {
      return ret;
    }
  }, cljs.core.PersistentHashSet.EMPTY, s);
};
clojure.set.join.cljs$lang$maxFixedArity = 3;
clojure.set.subset_QMARK_ = function clojure$set$subset_QMARK_(set1, set2) {
  return cljs.core.count.call(null, set1) <= cljs.core.count.call(null, set2) && cljs.core.every_QMARK_.call(null, function(p1__2136_SHARP_) {
    return cljs.core.contains_QMARK_.call(null, set2, p1__2136_SHARP_);
  }, set1);
};
clojure.set.superset_QMARK_ = function clojure$set$superset_QMARK_(set1, set2) {
  return cljs.core.count.call(null, set1) >= cljs.core.count.call(null, set2) && cljs.core.every_QMARK_.call(null, function(p1__2137_SHARP_) {
    return cljs.core.contains_QMARK_.call(null, set1, p1__2137_SHARP_);
  }, set2);
};
goog.provide("hipo.dom");
goog.require("cljs.core");
hipo.dom.create_element = function hipo$dom$create_element(namespace_uri, tag) {
  if (cljs.core.truth_(namespace_uri)) {
    return document.createElementNS(namespace_uri, tag);
  } else {
    return document.createElement(tag);
  }
};
hipo.dom.node_QMARK_ = function hipo$dom$node_QMARK_(o) {
  return o instanceof Node;
};
hipo.dom.element_QMARK_ = function hipo$dom$element_QMARK_(el) {
  if (cljs.core.truth_(el)) {
    return 1 === el.nodeType;
  } else {
    return null;
  }
};
hipo.dom.text_element_QMARK_ = function hipo$dom$text_element_QMARK_(el) {
  if (cljs.core.truth_(el)) {
    return 3 === el.nodeType;
  } else {
    return null;
  }
};
hipo.dom.child = function hipo$dom$child(el, i) {
  if (hipo.dom.node_QMARK_.call(null, el)) {
  } else {
    throw new Error("Assert failed: (node? el)");
  }
  if (!(i < 0)) {
  } else {
    throw new Error("Assert failed: (not (neg? i))");
  }
  return el.childNodes[i];
};
hipo.dom.children = function hipo$dom$children(var_args) {
  var G__2141 = arguments.length;
  switch(G__2141) {
    case 1:
      return hipo.dom.children.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return hipo.dom.children.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
hipo.dom.children.cljs$core$IFn$_invoke$arity$1 = function(el) {
  return hipo.dom.children.call(null, el, 0);
};
hipo.dom.children.cljs$core$IFn$_invoke$arity$2 = function(el, i) {
  if (hipo.dom.node_QMARK_.call(null, el)) {
  } else {
    throw new Error("Assert failed: (node? el)");
  }
  if (!(i < 0)) {
  } else {
    throw new Error("Assert failed: (not (neg? i))");
  }
  var fel = el.firstChild;
  if (cljs.core.truth_(fel)) {
    var cel = fel;
    var acc = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cel], null);
    while (true) {
      var nel = cel.nextSibling;
      if (cljs.core.truth_(!(cljs.core.count.call(null, acc) - (i + 1) === 0) ? nel : false)) {
        var G__2143 = nel;
        var G__2144 = cljs.core.conj.call(null, acc, nel);
        cel = G__2143;
        acc = G__2144;
        continue;
      } else {
        return acc;
      }
      break;
    }
  } else {
    return null;
  }
};
hipo.dom.children.cljs$lang$maxFixedArity = 2;
hipo.dom.replace_BANG_ = function hipo$dom$replace_BANG_(el, nel) {
  if (hipo.dom.node_QMARK_.call(null, el)) {
  } else {
    throw new Error("Assert failed: (node? el)");
  }
  if (hipo.dom.node_QMARK_.call(null, nel)) {
  } else {
    throw new Error("Assert failed: (node? nel)");
  }
  if (!(el.parentElement == null)) {
  } else {
    throw new Error("Assert failed: (not (nil? (.-parentElement el)))");
  }
  return el.parentElement.replaceChild(nel, el);
};
hipo.dom.replace_text_BANG_ = function hipo$dom$replace_text_BANG_(el, s) {
  if (hipo.dom.node_QMARK_.call(null, el)) {
  } else {
    throw new Error("Assert failed: (node? el)");
  }
  if (typeof s === "string") {
  } else {
    throw new Error("Assert failed: (string? s)");
  }
  if (cljs.core.truth_(hipo.dom.text_element_QMARK_.call(null, el))) {
    return el.textContent = s;
  } else {
    return hipo.dom.replace_BANG_.call(null, el, document.createTextNode(s));
  }
};
hipo.dom.clear_BANG_ = function hipo$dom$clear_BANG_(el) {
  if (cljs.core.truth_(hipo.dom.element_QMARK_.call(null, el))) {
  } else {
    throw new Error("Assert failed: (element? el)");
  }
  return el.innerHTML = "";
};
hipo.dom.remove_trailing_children_BANG_ = function hipo$dom$remove_trailing_children_BANG_(el, n) {
  if (hipo.dom.node_QMARK_.call(null, el)) {
  } else {
    throw new Error("Assert failed: (node? el)");
  }
  if (!(n < 0)) {
  } else {
    throw new Error("Assert failed: (not (neg? n))");
  }
  var n__4613__auto__ = n;
  var _ = 0;
  while (true) {
    if (_ < n__4613__auto__) {
      el.removeChild(el.lastChild);
      var G__2145 = _ + 1;
      _ = G__2145;
      continue;
    } else {
      return null;
    }
    break;
  }
};
hipo.dom.insert_child_BANG_ = function hipo$dom$insert_child_BANG_(el, i, nel) {
  if (hipo.dom.node_QMARK_.call(null, el)) {
  } else {
    throw new Error("Assert failed: (node? el)");
  }
  if (!(i < 0)) {
  } else {
    throw new Error("Assert failed: (not (neg? i))");
  }
  if (hipo.dom.node_QMARK_.call(null, nel)) {
  } else {
    throw new Error("Assert failed: (node? nel)");
  }
  return el.insertBefore(nel, hipo.dom.child.call(null, el, i));
};
hipo.dom.remove_child_BANG_ = function hipo$dom$remove_child_BANG_(el, i) {
  if (hipo.dom.node_QMARK_.call(null, el)) {
  } else {
    throw new Error("Assert failed: (node? el)");
  }
  if (!(i < 0)) {
  } else {
    throw new Error("Assert failed: (not (neg? i))");
  }
  return el.removeChild(hipo.dom.child.call(null, el, i));
};
goog.provide("hipo.interpreter");
goog.require("cljs.core");
goog.require("clojure.set");
goog.require("hipo.attribute");
goog.require("hipo.dom");
goog.require("hipo.hiccup");
goog.require("hipo.interceptor");
hipo.interpreter.set_attribute_BANG_ = function hipo$interpreter$set_attribute_BANG_(el, ns, tag, sok, ov, nv, p__2148) {
  var map__2149 = p__2148;
  var map__2149__$1 = (!(map__2149 == null) ? map__2149.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === map__2149.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__2149) : map__2149;
  var m = map__2149__$1;
  var interceptors = cljs.core.get.call(null, map__2149__$1, new cljs.core.Keyword(null, "interceptors", "interceptors", -1546782951));
  if (!(ov === nv)) {
    var temp__5733__auto__ = hipo.hiccup.listener_name__GT_event_name.call(null, cljs.core.name.call(null, sok));
    if (cljs.core.truth_(temp__5733__auto__)) {
      var en = temp__5733__auto__;
      if (!(cljs.core.map_QMARK_.call(null, ov) && cljs.core.map_QMARK_.call(null, nv) && (new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1(ov) === (new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1(nv))) {
        var b__2020__auto__ = function() {
          var hn = ["hipo_listener_", en].join("");
          var temp__5733__auto___2151__$1 = el[hn];
          if (cljs.core.truth_(temp__5733__auto___2151__$1)) {
            var l_2152 = temp__5733__auto___2151__$1;
            el.removeEventListener(en, l_2152);
          } else {
          }
          var temp__5735__auto__ = function() {
            var or__4126__auto__ = (new cljs.core.Keyword(null, "fn", "fn", -1175266204)).cljs$core$IFn$_invoke$arity$1(nv);
            if (cljs.core.truth_(or__4126__auto__)) {
              return or__4126__auto__;
            } else {
              return nv;
            }
          }();
          if (cljs.core.truth_(temp__5735__auto__)) {
            var nv__$1 = temp__5735__auto__;
            el.addEventListener(en, nv__$1);
            return el[hn] = nv__$1;
          } else {
            return null;
          }
        };
        var v__2021__auto__ = interceptors;
        if (cljs.core.not.call(null, v__2021__auto__) || cljs.core.empty_QMARK_.call(null, v__2021__auto__)) {
          return b__2020__auto__.call(null);
        } else {
          return hipo.interceptor.call.call(null, b__2020__auto__, v__2021__auto__, cljs.core.truth_(nv) ? new cljs.core.Keyword(null, "update-handler", "update-handler", 1389859106) : new cljs.core.Keyword(null, "remove-handler", "remove-handler", 389960218), cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "target", "target", 253001721), el, new cljs.core.Keyword(null, "name", "name", 1843675177), sok, new cljs.core.Keyword(null, "old-value", "old-value", 
          862546795), ov], null), cljs.core.truth_(nv) ? new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "new-value", "new-value", 1087038368), nv], null) : null));
        }
      } else {
        return null;
      }
    } else {
      var b__2020__auto__ = function() {
        return hipo.attribute.set_value_BANG_.call(null, el, m, ns, tag, sok, ov, nv);
      };
      var v__2021__auto__ = interceptors;
      if (cljs.core.not.call(null, v__2021__auto__) || cljs.core.empty_QMARK_.call(null, v__2021__auto__)) {
        return b__2020__auto__.call(null);
      } else {
        return hipo.interceptor.call.call(null, b__2020__auto__, v__2021__auto__, cljs.core.truth_(nv) ? new cljs.core.Keyword(null, "update-attribute", "update-attribute", 102770530) : new cljs.core.Keyword(null, "remove-attribute", "remove-attribute", 552745626), cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "target", "target", 253001721), el, new cljs.core.Keyword(null, "name", "name", 1843675177), sok, new cljs.core.Keyword(null, "old-value", 
        "old-value", 862546795), ov], null), cljs.core.truth_(nv) ? new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "new-value", "new-value", 1087038368), nv], null) : null));
      }
    }
  } else {
    return null;
  }
};
hipo.interpreter.append_children_BANG_ = function hipo$interpreter$append_children_BANG_(el, v, m) {
  if (cljs.core.vector_QMARK_.call(null, v)) {
  } else {
    throw new Error("Assert failed: (vector? v)");
  }
  var v__$1 = hipo.hiccup.flatten_children.call(null, v);
  while (true) {
    if (cljs.core.empty_QMARK_.call(null, v__$1)) {
      return null;
    } else {
      var temp__5733__auto___2153 = cljs.core.nth.call(null, v__$1, 0);
      if (cljs.core.truth_(temp__5733__auto___2153)) {
        var h_2154 = temp__5733__auto___2153;
        el.appendChild(hipo.interpreter.create_child.call(null, h_2154, m));
      } else {
      }
      var G__2155 = cljs.core.rest.call(null, v__$1);
      v__$1 = G__2155;
      continue;
    }
    break;
  }
};
hipo.interpreter.default_create_element = function hipo$interpreter$default_create_element(ns, tag, attrs, m) {
  var el = hipo.dom.create_element.call(null, ns, tag);
  var seq__2156_2172 = cljs.core.seq.call(null, attrs);
  var chunk__2157_2173 = null;
  var count__2158_2174 = 0;
  var i__2159_2175 = 0;
  while (true) {
    if (i__2159_2175 < count__2158_2174) {
      var vec__2166_2176 = cljs.core._nth.call(null, chunk__2157_2173, i__2159_2175);
      var sok_2177 = cljs.core.nth.call(null, vec__2166_2176, 0, null);
      var v_2178 = cljs.core.nth.call(null, vec__2166_2176, 1, null);
      if (cljs.core.truth_(v_2178)) {
        hipo.interpreter.set_attribute_BANG_.call(null, el, ns, tag, sok_2177, null, v_2178, m);
      } else {
      }
      var G__2179 = seq__2156_2172;
      var G__2180 = chunk__2157_2173;
      var G__2181 = count__2158_2174;
      var G__2182 = i__2159_2175 + 1;
      seq__2156_2172 = G__2179;
      chunk__2157_2173 = G__2180;
      count__2158_2174 = G__2181;
      i__2159_2175 = G__2182;
      continue;
    } else {
      var temp__5735__auto___2183 = cljs.core.seq.call(null, seq__2156_2172);
      if (temp__5735__auto___2183) {
        var seq__2156_2184__$1 = temp__5735__auto___2183;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__2156_2184__$1)) {
          var c__4556__auto___2185 = cljs.core.chunk_first.call(null, seq__2156_2184__$1);
          var G__2186 = cljs.core.chunk_rest.call(null, seq__2156_2184__$1);
          var G__2187 = c__4556__auto___2185;
          var G__2188 = cljs.core.count.call(null, c__4556__auto___2185);
          var G__2189 = 0;
          seq__2156_2172 = G__2186;
          chunk__2157_2173 = G__2187;
          count__2158_2174 = G__2188;
          i__2159_2175 = G__2189;
          continue;
        } else {
          var vec__2169_2190 = cljs.core.first.call(null, seq__2156_2184__$1);
          var sok_2191 = cljs.core.nth.call(null, vec__2169_2190, 0, null);
          var v_2192 = cljs.core.nth.call(null, vec__2169_2190, 1, null);
          if (cljs.core.truth_(v_2192)) {
            hipo.interpreter.set_attribute_BANG_.call(null, el, ns, tag, sok_2191, null, v_2192, m);
          } else {
          }
          var G__2193 = cljs.core.next.call(null, seq__2156_2184__$1);
          var G__2194 = null;
          var G__2195 = 0;
          var G__2196 = 0;
          seq__2156_2172 = G__2193;
          chunk__2157_2173 = G__2194;
          count__2158_2174 = G__2195;
          i__2159_2175 = G__2196;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return el;
};
hipo.interpreter.create_element = function hipo$interpreter$create_element(ns, tag, attrs, m) {
  var temp__5733__auto__ = (new cljs.core.Keyword(null, "create-element-fn", "create-element-fn", 827380427)).cljs$core$IFn$_invoke$arity$1(m);
  if (cljs.core.truth_(temp__5733__auto__)) {
    var f = temp__5733__auto__;
    return f.call(null, ns, tag, attrs, m);
  } else {
    return hipo.interpreter.default_create_element.call(null, ns, tag, attrs, m);
  }
};
hipo.interpreter.create_vector = function hipo$interpreter$create_vector(h, m) {
  if (cljs.core.vector_QMARK_.call(null, h)) {
  } else {
    throw new Error("Assert failed: (vector? h)");
  }
  var key = hipo.hiccup.keyns.call(null, h);
  var tag = hipo.hiccup.tag.call(null, h);
  var attrs = hipo.hiccup.attributes.call(null, h);
  var children = hipo.hiccup.children.call(null, h);
  var el = hipo.interpreter.create_element.call(null, hipo.hiccup.key__GT_namespace.call(null, key, m), tag, attrs, m);
  if (cljs.core.truth_(children)) {
    hipo.interpreter.append_children_BANG_.call(null, el, children, m);
  } else {
  }
  return el;
};
hipo.interpreter.create_child = function hipo$interpreter$create_child(o, m) {
  if (hipo.hiccup.literal_QMARK_.call(null, o) || cljs.core.vector_QMARK_.call(null, o)) {
  } else {
    throw new Error("Assert failed: (or (hic/literal? o) (vector? o))");
  }
  if (hipo.hiccup.literal_QMARK_.call(null, o)) {
    return document.createTextNode(o);
  } else {
    return hipo.interpreter.create_vector.call(null, o, m);
  }
};
hipo.interpreter.append_to_parent = function hipo$interpreter$append_to_parent(el, o, m) {
  if (cljs.core.seq_QMARK_.call(null, o)) {
    return hipo.interpreter.append_children_BANG_.call(null, el, cljs.core.vec.call(null, o), m);
  } else {
    if (!(o == null)) {
      return el.appendChild(hipo.interpreter.create_child.call(null, o, m));
    } else {
      return null;
    }
  }
};
hipo.interpreter.create = function hipo$interpreter$create(o, m) {
  if (cljs.core.seq_QMARK_.call(null, o)) {
    var f = document.createDocumentFragment();
    hipo.interpreter.append_children_BANG_.call(null, f, cljs.core.vec.call(null, o), m);
    return f;
  } else {
    if (!(o == null)) {
      return hipo.interpreter.create_child.call(null, o, m);
    } else {
      return null;
    }
  }
};
hipo.interpreter.reconciliate_attributes_BANG_ = function hipo$interpreter$reconciliate_attributes_BANG_(el, ns, tag, om, nm, m) {
  var seq__2197_2219 = cljs.core.seq.call(null, nm);
  var chunk__2199_2220 = null;
  var count__2200_2221 = 0;
  var i__2201_2222 = 0;
  while (true) {
    if (i__2201_2222 < count__2200_2221) {
      var vec__2209_2223 = cljs.core._nth.call(null, chunk__2199_2220, i__2201_2222);
      var sok_2224 = cljs.core.nth.call(null, vec__2209_2223, 0, null);
      var nv_2225 = cljs.core.nth.call(null, vec__2209_2223, 1, null);
      var ov_2226 = cljs.core.get.call(null, om, sok_2224);
      hipo.interpreter.set_attribute_BANG_.call(null, el, ns, tag, sok_2224, ov_2226, nv_2225, m);
      var G__2227 = seq__2197_2219;
      var G__2228 = chunk__2199_2220;
      var G__2229 = count__2200_2221;
      var G__2230 = i__2201_2222 + 1;
      seq__2197_2219 = G__2227;
      chunk__2199_2220 = G__2228;
      count__2200_2221 = G__2229;
      i__2201_2222 = G__2230;
      continue;
    } else {
      var temp__5735__auto___2231 = cljs.core.seq.call(null, seq__2197_2219);
      if (temp__5735__auto___2231) {
        var seq__2197_2232__$1 = temp__5735__auto___2231;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__2197_2232__$1)) {
          var c__4556__auto___2233 = cljs.core.chunk_first.call(null, seq__2197_2232__$1);
          var G__2234 = cljs.core.chunk_rest.call(null, seq__2197_2232__$1);
          var G__2235 = c__4556__auto___2233;
          var G__2236 = cljs.core.count.call(null, c__4556__auto___2233);
          var G__2237 = 0;
          seq__2197_2219 = G__2234;
          chunk__2199_2220 = G__2235;
          count__2200_2221 = G__2236;
          i__2201_2222 = G__2237;
          continue;
        } else {
          var vec__2212_2238 = cljs.core.first.call(null, seq__2197_2232__$1);
          var sok_2239 = cljs.core.nth.call(null, vec__2212_2238, 0, null);
          var nv_2240 = cljs.core.nth.call(null, vec__2212_2238, 1, null);
          var ov_2241 = cljs.core.get.call(null, om, sok_2239);
          hipo.interpreter.set_attribute_BANG_.call(null, el, ns, tag, sok_2239, ov_2241, nv_2240, m);
          var G__2242 = cljs.core.next.call(null, seq__2197_2232__$1);
          var G__2243 = null;
          var G__2244 = 0;
          var G__2245 = 0;
          seq__2197_2219 = G__2242;
          chunk__2199_2220 = G__2243;
          count__2200_2221 = G__2244;
          i__2201_2222 = G__2245;
          continue;
        }
      } else {
      }
    }
    break;
  }
  var seq__2215 = cljs.core.seq.call(null, clojure.set.difference.call(null, cljs.core.set.call(null, cljs.core.keys.call(null, om)), cljs.core.set.call(null, cljs.core.keys.call(null, nm))));
  var chunk__2216 = null;
  var count__2217 = 0;
  var i__2218 = 0;
  while (true) {
    if (i__2218 < count__2217) {
      var sok = cljs.core._nth.call(null, chunk__2216, i__2218);
      hipo.interpreter.set_attribute_BANG_.call(null, el, ns, tag, sok, cljs.core.get.call(null, om, sok), null, m);
      var G__2246 = seq__2215;
      var G__2247 = chunk__2216;
      var G__2248 = count__2217;
      var G__2249 = i__2218 + 1;
      seq__2215 = G__2246;
      chunk__2216 = G__2247;
      count__2217 = G__2248;
      i__2218 = G__2249;
      continue;
    } else {
      var temp__5735__auto__ = cljs.core.seq.call(null, seq__2215);
      if (temp__5735__auto__) {
        var seq__2215__$1 = temp__5735__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__2215__$1)) {
          var c__4556__auto__ = cljs.core.chunk_first.call(null, seq__2215__$1);
          var G__2250 = cljs.core.chunk_rest.call(null, seq__2215__$1);
          var G__2251 = c__4556__auto__;
          var G__2252 = cljs.core.count.call(null, c__4556__auto__);
          var G__2253 = 0;
          seq__2215 = G__2250;
          chunk__2216 = G__2251;
          count__2217 = G__2252;
          i__2218 = G__2253;
          continue;
        } else {
          var sok = cljs.core.first.call(null, seq__2215__$1);
          hipo.interpreter.set_attribute_BANG_.call(null, el, ns, tag, sok, cljs.core.get.call(null, om, sok), null, m);
          var G__2254 = cljs.core.next.call(null, seq__2215__$1);
          var G__2255 = null;
          var G__2256 = 0;
          var G__2257 = 0;
          seq__2215 = G__2254;
          chunk__2216 = G__2255;
          count__2217 = G__2256;
          i__2218 = G__2257;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
hipo.interpreter.child_key = function hipo$interpreter$child_key(h) {
  return (new cljs.core.Keyword("hipo", "key", "hipo/key", -1519246363)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, h));
};
hipo.interpreter.keyed_children__GT_indexed_map = function hipo$interpreter$keyed_children__GT_indexed_map(v) {
  return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, function() {
    var iter__4529__auto__ = function hipo$interpreter$keyed_children__GT_indexed_map_$_iter__2258(s__2259) {
      return new cljs.core.LazySeq(null, function() {
        var s__2259__$1 = s__2259;
        while (true) {
          var temp__5735__auto__ = cljs.core.seq.call(null, s__2259__$1);
          if (temp__5735__auto__) {
            var s__2259__$2 = temp__5735__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, s__2259__$2)) {
              var c__4527__auto__ = cljs.core.chunk_first.call(null, s__2259__$2);
              var size__4528__auto__ = cljs.core.count.call(null, c__4527__auto__);
              var b__2261 = cljs.core.chunk_buffer.call(null, size__4528__auto__);
              if (function() {
                var i__2260 = 0;
                while (true) {
                  if (i__2260 < size__4528__auto__) {
                    var ih = cljs.core._nth.call(null, c__4527__auto__, i__2260);
                    cljs.core.chunk_append.call(null, b__2261, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [hipo.interpreter.child_key.call(null, cljs.core.nth.call(null, ih, 1)), ih], null));
                    var G__2262 = i__2260 + 1;
                    i__2260 = G__2262;
                    continue;
                  } else {
                    return true;
                  }
                  break;
                }
              }()) {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__2261), hipo$interpreter$keyed_children__GT_indexed_map_$_iter__2258.call(null, cljs.core.chunk_rest.call(null, s__2259__$2)));
              } else {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__2261), null);
              }
            } else {
              var ih = cljs.core.first.call(null, s__2259__$2);
              return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [hipo.interpreter.child_key.call(null, cljs.core.nth.call(null, ih, 1)), ih], null), hipo$interpreter$keyed_children__GT_indexed_map_$_iter__2258.call(null, cljs.core.rest.call(null, s__2259__$2)));
            }
          } else {
            return null;
          }
          break;
        }
      }, null, null);
    };
    return iter__4529__auto__.call(null, cljs.core.map_indexed.call(null, function(idx, itm) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [idx, itm], null);
    }, v));
  }());
};
hipo.interpreter.reconciliate_keyed_children_BANG_ = function hipo$interpreter$reconciliate_keyed_children_BANG_(el, och, nch, p__2263) {
  var map__2264 = p__2263;
  var map__2264__$1 = (!(map__2264 == null) ? map__2264.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === map__2264.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__2264) : map__2264;
  var m = map__2264__$1;
  var interceptors = cljs.core.get.call(null, map__2264__$1, new cljs.core.Keyword(null, "interceptors", "interceptors", -1546782951));
  var om = hipo.interpreter.keyed_children__GT_indexed_map.call(null, och);
  var nm = hipo.interpreter.keyed_children__GT_indexed_map.call(null, nch);
  var cs = hipo.dom.children.call(null, el, cljs.core.apply.call(null, cljs.core.max, clojure.set.intersection.call(null, cljs.core.set.call(null, cljs.core.keys.call(null, nm)), cljs.core.set.call(null, cljs.core.keys.call(null, om)))));
  var seq__2266_2306 = cljs.core.seq.call(null, nm);
  var chunk__2267_2307 = null;
  var count__2268_2308 = 0;
  var i__2269_2309 = 0;
  while (true) {
    if (i__2269_2309 < count__2268_2308) {
      var vec__2288_2310 = cljs.core._nth.call(null, chunk__2267_2307, i__2269_2309);
      var i_2311 = cljs.core.nth.call(null, vec__2288_2310, 0, null);
      var vec__2291_2312 = cljs.core.nth.call(null, vec__2288_2310, 1, null);
      var ii_2313 = cljs.core.nth.call(null, vec__2291_2312, 0, null);
      var h_2314 = cljs.core.nth.call(null, vec__2291_2312, 1, null);
      var temp__5733__auto___2315 = cljs.core.get.call(null, om, i_2311);
      if (cljs.core.truth_(temp__5733__auto___2315)) {
        var vec__2294_2316 = temp__5733__auto___2315;
        var iii_2317 = cljs.core.nth.call(null, vec__2294_2316, 0, null);
        var oh_2318 = cljs.core.nth.call(null, vec__2294_2316, 1, null);
        var cel_2319 = cljs.core.nth.call(null, cs, iii_2317);
        if (ii_2313 === iii_2317) {
          hipo.interpreter.reconciliate_BANG_.call(null, cel_2319, oh_2318, h_2314, m);
        } else {
          var b__2020__auto___2320 = function(seq__2266_2306, chunk__2267_2307, count__2268_2308, i__2269_2309, cel_2319, vec__2294_2316, iii_2317, oh_2318, temp__5733__auto___2315, vec__2288_2310, i_2311, vec__2291_2312, ii_2313, h_2314, om, nm, cs, map__2264, map__2264__$1, m, interceptors) {
            return function() {
              var ncel = el.removeChild(cel_2319);
              hipo.interpreter.reconciliate_BANG_.call(null, ncel, oh_2318, h_2314, m);
              return hipo.dom.insert_child_BANG_.call(null, el, ii_2313, ncel);
            };
          }(seq__2266_2306, chunk__2267_2307, count__2268_2308, i__2269_2309, cel_2319, vec__2294_2316, iii_2317, oh_2318, temp__5733__auto___2315, vec__2288_2310, i_2311, vec__2291_2312, ii_2313, h_2314, om, nm, cs, map__2264, map__2264__$1, m, interceptors);
          var v__2021__auto___2321 = interceptors;
          if (cljs.core.not.call(null, v__2021__auto___2321) || cljs.core.empty_QMARK_.call(null, v__2021__auto___2321)) {
            b__2020__auto___2320.call(null);
          } else {
            hipo.interceptor.call.call(null, b__2020__auto___2320, v__2021__auto___2321, new cljs.core.Keyword(null, "move", "move", -2110884309), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "target", "target", 253001721), el, new cljs.core.Keyword(null, "value", "value", 305978217), h_2314, new cljs.core.Keyword(null, "index", "index", -1531685915), ii_2313], null));
          }
        }
      } else {
        var b__2020__auto___2322 = function(seq__2266_2306, chunk__2267_2307, count__2268_2308, i__2269_2309, temp__5733__auto___2315, vec__2288_2310, i_2311, vec__2291_2312, ii_2313, h_2314, om, nm, cs, map__2264, map__2264__$1, m, interceptors) {
          return function() {
            return hipo.dom.insert_child_BANG_.call(null, el, ii_2313, hipo.interpreter.create_child.call(null, h_2314, m));
          };
        }(seq__2266_2306, chunk__2267_2307, count__2268_2308, i__2269_2309, temp__5733__auto___2315, vec__2288_2310, i_2311, vec__2291_2312, ii_2313, h_2314, om, nm, cs, map__2264, map__2264__$1, m, interceptors);
        var v__2021__auto___2323 = interceptors;
        if (cljs.core.not.call(null, v__2021__auto___2323) || cljs.core.empty_QMARK_.call(null, v__2021__auto___2323)) {
          b__2020__auto___2322.call(null);
        } else {
          hipo.interceptor.call.call(null, b__2020__auto___2322, v__2021__auto___2323, new cljs.core.Keyword(null, "insert", "insert", 1286475395), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "target", "target", 253001721), el, new cljs.core.Keyword(null, "value", "value", 305978217), h_2314, new cljs.core.Keyword(null, "index", "index", -1531685915), ii_2313], null));
        }
      }
      var G__2324 = seq__2266_2306;
      var G__2325 = chunk__2267_2307;
      var G__2326 = count__2268_2308;
      var G__2327 = i__2269_2309 + 1;
      seq__2266_2306 = G__2324;
      chunk__2267_2307 = G__2325;
      count__2268_2308 = G__2326;
      i__2269_2309 = G__2327;
      continue;
    } else {
      var temp__5735__auto___2328 = cljs.core.seq.call(null, seq__2266_2306);
      if (temp__5735__auto___2328) {
        var seq__2266_2329__$1 = temp__5735__auto___2328;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__2266_2329__$1)) {
          var c__4556__auto___2330 = cljs.core.chunk_first.call(null, seq__2266_2329__$1);
          var G__2331 = cljs.core.chunk_rest.call(null, seq__2266_2329__$1);
          var G__2332 = c__4556__auto___2330;
          var G__2333 = cljs.core.count.call(null, c__4556__auto___2330);
          var G__2334 = 0;
          seq__2266_2306 = G__2331;
          chunk__2267_2307 = G__2332;
          count__2268_2308 = G__2333;
          i__2269_2309 = G__2334;
          continue;
        } else {
          var vec__2297_2335 = cljs.core.first.call(null, seq__2266_2329__$1);
          var i_2336 = cljs.core.nth.call(null, vec__2297_2335, 0, null);
          var vec__2300_2337 = cljs.core.nth.call(null, vec__2297_2335, 1, null);
          var ii_2338 = cljs.core.nth.call(null, vec__2300_2337, 0, null);
          var h_2339 = cljs.core.nth.call(null, vec__2300_2337, 1, null);
          var temp__5733__auto___2340 = cljs.core.get.call(null, om, i_2336);
          if (cljs.core.truth_(temp__5733__auto___2340)) {
            var vec__2303_2341 = temp__5733__auto___2340;
            var iii_2342 = cljs.core.nth.call(null, vec__2303_2341, 0, null);
            var oh_2343 = cljs.core.nth.call(null, vec__2303_2341, 1, null);
            var cel_2344 = cljs.core.nth.call(null, cs, iii_2342);
            if (ii_2338 === iii_2342) {
              hipo.interpreter.reconciliate_BANG_.call(null, cel_2344, oh_2343, h_2339, m);
            } else {
              var b__2020__auto___2345 = function(seq__2266_2306, chunk__2267_2307, count__2268_2308, i__2269_2309, cel_2344, vec__2303_2341, iii_2342, oh_2343, temp__5733__auto___2340, vec__2297_2335, i_2336, vec__2300_2337, ii_2338, h_2339, seq__2266_2329__$1, temp__5735__auto___2328, om, nm, cs, map__2264, map__2264__$1, m, interceptors) {
                return function() {
                  var ncel = el.removeChild(cel_2344);
                  hipo.interpreter.reconciliate_BANG_.call(null, ncel, oh_2343, h_2339, m);
                  return hipo.dom.insert_child_BANG_.call(null, el, ii_2338, ncel);
                };
              }(seq__2266_2306, chunk__2267_2307, count__2268_2308, i__2269_2309, cel_2344, vec__2303_2341, iii_2342, oh_2343, temp__5733__auto___2340, vec__2297_2335, i_2336, vec__2300_2337, ii_2338, h_2339, seq__2266_2329__$1, temp__5735__auto___2328, om, nm, cs, map__2264, map__2264__$1, m, interceptors);
              var v__2021__auto___2346 = interceptors;
              if (cljs.core.not.call(null, v__2021__auto___2346) || cljs.core.empty_QMARK_.call(null, v__2021__auto___2346)) {
                b__2020__auto___2345.call(null);
              } else {
                hipo.interceptor.call.call(null, b__2020__auto___2345, v__2021__auto___2346, new cljs.core.Keyword(null, "move", "move", -2110884309), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "target", "target", 253001721), el, new cljs.core.Keyword(null, "value", "value", 305978217), h_2339, new cljs.core.Keyword(null, "index", "index", -1531685915), ii_2338], null));
              }
            }
          } else {
            var b__2020__auto___2347 = function(seq__2266_2306, chunk__2267_2307, count__2268_2308, i__2269_2309, temp__5733__auto___2340, vec__2297_2335, i_2336, vec__2300_2337, ii_2338, h_2339, seq__2266_2329__$1, temp__5735__auto___2328, om, nm, cs, map__2264, map__2264__$1, m, interceptors) {
              return function() {
                return hipo.dom.insert_child_BANG_.call(null, el, ii_2338, hipo.interpreter.create_child.call(null, h_2339, m));
              };
            }(seq__2266_2306, chunk__2267_2307, count__2268_2308, i__2269_2309, temp__5733__auto___2340, vec__2297_2335, i_2336, vec__2300_2337, ii_2338, h_2339, seq__2266_2329__$1, temp__5735__auto___2328, om, nm, cs, map__2264, map__2264__$1, m, interceptors);
            var v__2021__auto___2348 = interceptors;
            if (cljs.core.not.call(null, v__2021__auto___2348) || cljs.core.empty_QMARK_.call(null, v__2021__auto___2348)) {
              b__2020__auto___2347.call(null);
            } else {
              hipo.interceptor.call.call(null, b__2020__auto___2347, v__2021__auto___2348, new cljs.core.Keyword(null, "insert", "insert", 1286475395), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "target", "target", 253001721), el, new cljs.core.Keyword(null, "value", "value", 305978217), h_2339, new cljs.core.Keyword(null, "index", "index", -1531685915), ii_2338], null));
            }
          }
          var G__2349 = cljs.core.next.call(null, seq__2266_2329__$1);
          var G__2350 = null;
          var G__2351 = 0;
          var G__2352 = 0;
          seq__2266_2306 = G__2349;
          chunk__2267_2307 = G__2350;
          count__2268_2308 = G__2351;
          i__2269_2309 = G__2352;
          continue;
        }
      } else {
      }
    }
    break;
  }
  var d = cljs.core.count.call(null, clojure.set.difference.call(null, cljs.core.set.call(null, cljs.core.keys.call(null, om)), cljs.core.set.call(null, cljs.core.keys.call(null, nm))));
  if (d > 0) {
    var b__2020__auto__ = function() {
      return hipo.dom.remove_trailing_children_BANG_.call(null, el, d);
    };
    var v__2021__auto__ = interceptors;
    if (cljs.core.not.call(null, v__2021__auto__) || cljs.core.empty_QMARK_.call(null, v__2021__auto__)) {
      return b__2020__auto__.call(null);
    } else {
      return hipo.interceptor.call.call(null, b__2020__auto__, v__2021__auto__, new cljs.core.Keyword(null, "remove-trailing", "remove-trailing", -1590009193), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "target", "target", 253001721), el, new cljs.core.Keyword(null, "count", "count", 2139924085), d], null));
    }
  } else {
    return null;
  }
};
hipo.interpreter.reconciliate_non_keyed_children_BANG_ = function hipo$interpreter$reconciliate_non_keyed_children_BANG_(el, och, nch, p__2353) {
  var map__2354 = p__2353;
  var map__2354__$1 = (!(map__2354 == null) ? map__2354.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === map__2354.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__2354) : map__2354;
  var m = map__2354__$1;
  var interceptors = cljs.core.get.call(null, map__2354__$1, new cljs.core.Keyword(null, "interceptors", "interceptors", -1546782951));
  var oc = cljs.core.count.call(null, och);
  var nc = cljs.core.count.call(null, nch);
  var d = oc - nc;
  if (d > 0) {
    var b__2020__auto___2356 = function() {
      return hipo.dom.remove_trailing_children_BANG_.call(null, el, d);
    };
    var v__2021__auto___2357 = interceptors;
    if (cljs.core.not.call(null, v__2021__auto___2357) || cljs.core.empty_QMARK_.call(null, v__2021__auto___2357)) {
      b__2020__auto___2356.call(null);
    } else {
      hipo.interceptor.call.call(null, b__2020__auto___2356, v__2021__auto___2357, new cljs.core.Keyword(null, "remove-trailing", "remove-trailing", -1590009193), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "target", "target", 253001721), el, new cljs.core.Keyword(null, "count", "count", 2139924085), d], null));
    }
  } else {
  }
  var n__4613__auto___2358 = function() {
    var x__4217__auto__ = oc;
    var y__4218__auto__ = nc;
    return x__4217__auto__ < y__4218__auto__ ? x__4217__auto__ : y__4218__auto__;
  }();
  var i_2359 = 0;
  while (true) {
    if (i_2359 < n__4613__auto___2358) {
      var ov_2360 = cljs.core.nth.call(null, och, i_2359);
      var nv_2361 = cljs.core.nth.call(null, nch, i_2359);
      if (!(ov_2360 == null && nv_2361 == null)) {
        if (ov_2360 == null) {
          var b__2020__auto___2362 = function(i_2359, ov_2360, nv_2361, n__4613__auto___2358, oc, nc, d, map__2354, map__2354__$1, m, interceptors) {
            return function() {
              return hipo.dom.insert_child_BANG_.call(null, el, i_2359, hipo.interpreter.create_child.call(null, nv_2361, m));
            };
          }(i_2359, ov_2360, nv_2361, n__4613__auto___2358, oc, nc, d, map__2354, map__2354__$1, m, interceptors);
          var v__2021__auto___2363 = interceptors;
          if (cljs.core.not.call(null, v__2021__auto___2363) || cljs.core.empty_QMARK_.call(null, v__2021__auto___2363)) {
            b__2020__auto___2362.call(null);
          } else {
            hipo.interceptor.call.call(null, b__2020__auto___2362, v__2021__auto___2363, new cljs.core.Keyword(null, "insert", "insert", 1286475395), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "target", "target", 253001721), el, new cljs.core.Keyword(null, "value", "value", 305978217), nv_2361, new cljs.core.Keyword(null, "index", "index", -1531685915), i_2359], null));
          }
        } else {
          if (nv_2361 == null) {
            var b__2020__auto___2364 = function(i_2359, ov_2360, nv_2361, n__4613__auto___2358, oc, nc, d, map__2354, map__2354__$1, m, interceptors) {
              return function() {
                return hipo.dom.remove_child_BANG_.call(null, el, i_2359);
              };
            }(i_2359, ov_2360, nv_2361, n__4613__auto___2358, oc, nc, d, map__2354, map__2354__$1, m, interceptors);
            var v__2021__auto___2365 = interceptors;
            if (cljs.core.not.call(null, v__2021__auto___2365) || cljs.core.empty_QMARK_.call(null, v__2021__auto___2365)) {
              b__2020__auto___2364.call(null);
            } else {
              hipo.interceptor.call.call(null, b__2020__auto___2364, v__2021__auto___2365, new cljs.core.Keyword(null, "remove", "remove", -131428414), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "target", "target", 253001721), el, new cljs.core.Keyword(null, "index", "index", -1531685915), i_2359], null));
            }
          } else {
            var temp__5733__auto___2366 = hipo.dom.child.call(null, el, i_2359);
            if (cljs.core.truth_(temp__5733__auto___2366)) {
              var cel_2367 = temp__5733__auto___2366;
              hipo.interpreter.reconciliate_BANG_.call(null, cel_2367, ov_2360, nv_2361, m);
            } else {
            }
          }
        }
      } else {
      }
      var G__2368 = i_2359 + 1;
      i_2359 = G__2368;
      continue;
    } else {
    }
    break;
  }
  if (d < 0) {
    if (-1 === d) {
      var temp__5733__auto__ = cljs.core.nth.call(null, nch, oc);
      if (cljs.core.truth_(temp__5733__auto__)) {
        var h = temp__5733__auto__;
        var b__2020__auto__ = function() {
          return el.appendChild(hipo.interpreter.create_child.call(null, h, m));
        };
        var v__2021__auto__ = interceptors;
        if (cljs.core.not.call(null, v__2021__auto__) || cljs.core.empty_QMARK_.call(null, v__2021__auto__)) {
          return b__2020__auto__.call(null);
        } else {
          return hipo.interceptor.call.call(null, b__2020__auto__, v__2021__auto__, new cljs.core.Keyword(null, "append", "append", -291298229), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "target", "target", 253001721), el, new cljs.core.Keyword(null, "value", "value", 305978217), h], null));
        }
      } else {
        return null;
      }
    } else {
      var f = document.createDocumentFragment();
      var cs = 0 === oc ? nch : cljs.core.subvec.call(null, nch, oc);
      var b__2020__auto___2369 = function() {
        return hipo.interpreter.append_children_BANG_.call(null, f, cs, m);
      };
      var v__2021__auto___2370 = interceptors;
      if (cljs.core.not.call(null, v__2021__auto___2370) || cljs.core.empty_QMARK_.call(null, v__2021__auto___2370)) {
        b__2020__auto___2369.call(null);
      } else {
        hipo.interceptor.call.call(null, b__2020__auto___2369, v__2021__auto___2370, new cljs.core.Keyword(null, "append", "append", -291298229), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "target", "target", 253001721), el, new cljs.core.Keyword(null, "value", "value", 305978217), cs], null));
      }
      return el.appendChild(f);
    }
  } else {
    return null;
  }
};
hipo.interpreter.keyed_children_QMARK_ = function hipo$interpreter$keyed_children_QMARK_(v) {
  return !(hipo.interpreter.child_key.call(null, cljs.core.nth.call(null, v, 0)) == null);
};
hipo.interpreter.reconciliate_children_BANG_ = function hipo$interpreter$reconciliate_children_BANG_(el, och, nch, p__2371) {
  var map__2372 = p__2371;
  var map__2372__$1 = (!(map__2372 == null) ? map__2372.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === map__2372.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__2372) : map__2372;
  var m = map__2372__$1;
  var interceptors = cljs.core.get.call(null, map__2372__$1, new cljs.core.Keyword(null, "interceptors", "interceptors", -1546782951));
  if (cljs.core.empty_QMARK_.call(null, nch)) {
    if (!cljs.core.empty_QMARK_.call(null, och)) {
      var b__2020__auto__ = function() {
        return hipo.dom.clear_BANG_.call(null, el);
      };
      var v__2021__auto__ = interceptors;
      if (cljs.core.not.call(null, v__2021__auto__) || cljs.core.empty_QMARK_.call(null, v__2021__auto__)) {
        return b__2020__auto__.call(null);
      } else {
        return hipo.interceptor.call.call(null, b__2020__auto__, v__2021__auto__, new cljs.core.Keyword(null, "clear", "clear", 1877104959), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "target", "target", 253001721), el], null));
      }
    } else {
      return null;
    }
  } else {
    if (hipo.interpreter.keyed_children_QMARK_.call(null, nch)) {
      return hipo.interpreter.reconciliate_keyed_children_BANG_.call(null, el, och, nch, m);
    } else {
      return hipo.interpreter.reconciliate_non_keyed_children_BANG_.call(null, el, och, nch, m);
    }
  }
};
hipo.interpreter.reconciliate_vector_BANG_ = function hipo$interpreter$reconciliate_vector_BANG_(el, oh, nh, p__2374) {
  var map__2375 = p__2374;
  var map__2375__$1 = (!(map__2375 == null) ? map__2375.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === map__2375.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__2375) : map__2375;
  var m = map__2375__$1;
  var interceptors = cljs.core.get.call(null, map__2375__$1, new cljs.core.Keyword(null, "interceptors", "interceptors", -1546782951));
  if (cljs.core.vector_QMARK_.call(null, nh)) {
  } else {
    throw new Error("Assert failed: (vector? nh)");
  }
  if (hipo.hiccup.literal_QMARK_.call(null, oh) || !(hipo.hiccup.tag.call(null, nh) === hipo.hiccup.tag.call(null, oh))) {
    var nel = hipo.interpreter.create_child.call(null, nh, m);
    var b__2020__auto__ = function() {
      if (cljs.core.truth_(el.parentElement)) {
      } else {
        throw new Error(["Assert failed: ", "Can't replace root element. If you want to change root element's type it must be encapsulated in a static element.", "\n", "(.-parentElement el)"].join(""));
      }
      return hipo.dom.replace_BANG_.call(null, el, nel);
    };
    var v__2021__auto__ = interceptors;
    if (cljs.core.not.call(null, v__2021__auto__) || cljs.core.empty_QMARK_.call(null, v__2021__auto__)) {
      return b__2020__auto__.call(null);
    } else {
      return hipo.interceptor.call.call(null, b__2020__auto__, v__2021__auto__, new cljs.core.Keyword(null, "replace", "replace", -786587770), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "target", "target", 253001721), el, new cljs.core.Keyword(null, "value", "value", 305978217), nh], null));
    }
  } else {
    var om = hipo.hiccup.attributes.call(null, oh);
    var nm = hipo.hiccup.attributes.call(null, nh);
    var och = hipo.hiccup.children.call(null, oh);
    var nch = hipo.hiccup.children.call(null, nh);
    var b__2020__auto___2377 = function() {
      return hipo.interpreter.reconciliate_children_BANG_.call(null, el, hipo.hiccup.flatten_children.call(null, och), hipo.hiccup.flatten_children.call(null, nch), m);
    };
    var v__2021__auto___2378 = interceptors;
    if (cljs.core.not.call(null, v__2021__auto___2378) || cljs.core.empty_QMARK_.call(null, v__2021__auto___2378)) {
      b__2020__auto___2377.call(null);
    } else {
      hipo.interceptor.call.call(null, b__2020__auto___2377, v__2021__auto___2378, new cljs.core.Keyword(null, "reconciliate", "reconciliate", -527400739), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "target", "target", 253001721), el, new cljs.core.Keyword(null, "old-value", "old-value", 862546795), och, new cljs.core.Keyword(null, "new-value", "new-value", 1087038368), nch], null));
    }
    return hipo.interpreter.reconciliate_attributes_BANG_.call(null, el, hipo.hiccup.keyns.call(null, nh), hipo.hiccup.tag.call(null, nh), om, nm, m);
  }
};
hipo.interpreter.reconciliate_BANG_ = function hipo$interpreter$reconciliate_BANG_(el, oh, nh, p__2379) {
  var map__2380 = p__2379;
  var map__2380__$1 = (!(map__2380 == null) ? map__2380.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === map__2380.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__2380) : map__2380;
  var m = map__2380__$1;
  var interceptors = cljs.core.get.call(null, map__2380__$1, new cljs.core.Keyword(null, "interceptors", "interceptors", -1546782951));
  if (cljs.core.vector_QMARK_.call(null, nh) || hipo.hiccup.literal_QMARK_.call(null, nh)) {
  } else {
    throw new Error("Assert failed: (or (vector? nh) (hic/literal? nh))");
  }
  if (m == null || cljs.core.map_QMARK_.call(null, m)) {
  } else {
    throw new Error("Assert failed: (or (nil? m) (map? m))");
  }
  var b__2020__auto__ = function() {
    if (hipo.hiccup.literal_QMARK_.call(null, nh)) {
      if (!(oh === nh)) {
        var b__2020__auto__ = function() {
          if (cljs.core.truth_(el.parentElement)) {
          } else {
            throw new Error(["Assert failed: ", "Can't replace root element. If you want to change root element's type it must be encapsulated in a static element.", "\n", "(.-parentElement el)"].join(""));
          }
          return hipo.dom.replace_text_BANG_.call(null, el, cljs.core.str.cljs$core$IFn$_invoke$arity$1(nh));
        };
        var v__2021__auto__ = interceptors;
        if (cljs.core.not.call(null, v__2021__auto__) || cljs.core.empty_QMARK_.call(null, v__2021__auto__)) {
          return b__2020__auto__.call(null);
        } else {
          return hipo.interceptor.call.call(null, b__2020__auto__, v__2021__auto__, new cljs.core.Keyword(null, "replace", "replace", -786587770), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "target", "target", 253001721), el, new cljs.core.Keyword(null, "value", "value", 305978217), nh], null));
        }
      } else {
        return null;
      }
    } else {
      return hipo.interpreter.reconciliate_vector_BANG_.call(null, el, oh, nh, m);
    }
  };
  var v__2021__auto__ = interceptors;
  if (cljs.core.not.call(null, v__2021__auto__) || cljs.core.empty_QMARK_.call(null, v__2021__auto__)) {
    return b__2020__auto__.call(null);
  } else {
    return hipo.interceptor.call.call(null, b__2020__auto__, v__2021__auto__, new cljs.core.Keyword(null, "reconciliate", "reconciliate", -527400739), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "target", "target", 253001721), el, new cljs.core.Keyword(null, "old-value", "old-value", 862546795), oh, new cljs.core.Keyword(null, "new-value", "new-value", 1087038368), nh], null));
  }
};
goog.provide("hipo.core");
goog.require("cljs.core");
goog.require("hipo.interceptor");
goog.require("hipo.interpreter");
hipo.core.hiccup_property = "hipo_hiccup";
hipo.core.get_hiccup = function hipo$core$get_hiccup(el) {
  return el[hipo.core.hiccup_property];
};
hipo.core.set_hiccup_BANG_ = function hipo$core$set_hiccup_BANG_(el, h) {
  return el[hipo.core.hiccup_property] = h;
};
hipo.core.reconciliate_BANG_ = function hipo$core$reconciliate_BANG_(var_args) {
  var G__2622 = arguments.length;
  switch(G__2622) {
    case 2:
      return hipo.core.reconciliate_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return hipo.core.reconciliate_BANG_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return hipo.core.reconciliate_BANG_.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
hipo.core.reconciliate_BANG_.cljs$core$IFn$_invoke$arity$2 = function(el, nh) {
  return hipo.core.reconciliate_BANG_.call(null, el, nh, cljs.core.PersistentArrayMap.EMPTY);
};
hipo.core.reconciliate_BANG_.cljs$core$IFn$_invoke$arity$3 = function(el, nh, m) {
  return hipo.core.reconciliate_BANG_.call(null, el, hipo.core.get_hiccup.call(null, el), nh, m);
};
hipo.core.reconciliate_BANG_.cljs$core$IFn$_invoke$arity$4 = function(el, oh, nh, m) {
  if (!(oh == null)) {
  } else {
    throw new Error(["Assert failed: ", "Previous hiccup can't be nil", "\n", "(not (nil? oh))"].join(""));
  }
  hipo.core.set_hiccup_BANG_.call(null, el, nh);
  return hipo.interpreter.reconciliate_BANG_.call(null, el, oh, nh, m);
};
hipo.core.reconciliate_BANG_.cljs$lang$maxFixedArity = 4;
goog.provide("cljs.core.async.impl.protocols");
goog.require("cljs.core");
cljs.core.async.impl.protocols.MAX_QUEUE_SIZE = 1024;
cljs.core.async.impl.protocols.ReadPort = function() {
};
var cljs$core$async$impl$protocols$ReadPort$take_BANG_$dyn_4686 = function(port, fn1_handler) {
  var x__4428__auto__ = port == null ? null : port;
  var m__4429__auto__ = cljs.core.async.impl.protocols.take_BANG_[goog.typeOf(x__4428__auto__)];
  if (!(m__4429__auto__ == null)) {
    return m__4429__auto__.call(null, port, fn1_handler);
  } else {
    var m__4426__auto__ = cljs.core.async.impl.protocols.take_BANG_["_"];
    if (!(m__4426__auto__ == null)) {
      return m__4426__auto__.call(null, port, fn1_handler);
    } else {
      throw cljs.core.missing_protocol.call(null, "ReadPort.take!", port);
    }
  }
};
cljs.core.async.impl.protocols.take_BANG_ = function cljs$core$async$impl$protocols$take_BANG_(port, fn1_handler) {
  if (!(port == null) && !(port.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 == null)) {
    return port.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2(port, fn1_handler);
  } else {
    return cljs$core$async$impl$protocols$ReadPort$take_BANG_$dyn_4686.call(null, port, fn1_handler);
  }
};
cljs.core.async.impl.protocols.WritePort = function() {
};
var cljs$core$async$impl$protocols$WritePort$put_BANG_$dyn_4687 = function(port, val, fn1_handler) {
  var x__4428__auto__ = port == null ? null : port;
  var m__4429__auto__ = cljs.core.async.impl.protocols.put_BANG_[goog.typeOf(x__4428__auto__)];
  if (!(m__4429__auto__ == null)) {
    return m__4429__auto__.call(null, port, val, fn1_handler);
  } else {
    var m__4426__auto__ = cljs.core.async.impl.protocols.put_BANG_["_"];
    if (!(m__4426__auto__ == null)) {
      return m__4426__auto__.call(null, port, val, fn1_handler);
    } else {
      throw cljs.core.missing_protocol.call(null, "WritePort.put!", port);
    }
  }
};
cljs.core.async.impl.protocols.put_BANG_ = function cljs$core$async$impl$protocols$put_BANG_(port, val, fn1_handler) {
  if (!(port == null) && !(port.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 == null)) {
    return port.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3(port, val, fn1_handler);
  } else {
    return cljs$core$async$impl$protocols$WritePort$put_BANG_$dyn_4687.call(null, port, val, fn1_handler);
  }
};
cljs.core.async.impl.protocols.Channel = function() {
};
var cljs$core$async$impl$protocols$Channel$close_BANG_$dyn_4688 = function(chan) {
  var x__4428__auto__ = chan == null ? null : chan;
  var m__4429__auto__ = cljs.core.async.impl.protocols.close_BANG_[goog.typeOf(x__4428__auto__)];
  if (!(m__4429__auto__ == null)) {
    return m__4429__auto__.call(null, chan);
  } else {
    var m__4426__auto__ = cljs.core.async.impl.protocols.close_BANG_["_"];
    if (!(m__4426__auto__ == null)) {
      return m__4426__auto__.call(null, chan);
    } else {
      throw cljs.core.missing_protocol.call(null, "Channel.close!", chan);
    }
  }
};
cljs.core.async.impl.protocols.close_BANG_ = function cljs$core$async$impl$protocols$close_BANG_(chan) {
  if (!(chan == null) && !(chan.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 == null)) {
    return chan.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1(chan);
  } else {
    return cljs$core$async$impl$protocols$Channel$close_BANG_$dyn_4688.call(null, chan);
  }
};
var cljs$core$async$impl$protocols$Channel$closed_QMARK_$dyn_4689 = function(chan) {
  var x__4428__auto__ = chan == null ? null : chan;
  var m__4429__auto__ = cljs.core.async.impl.protocols.closed_QMARK_[goog.typeOf(x__4428__auto__)];
  if (!(m__4429__auto__ == null)) {
    return m__4429__auto__.call(null, chan);
  } else {
    var m__4426__auto__ = cljs.core.async.impl.protocols.closed_QMARK_["_"];
    if (!(m__4426__auto__ == null)) {
      return m__4426__auto__.call(null, chan);
    } else {
      throw cljs.core.missing_protocol.call(null, "Channel.closed?", chan);
    }
  }
};
cljs.core.async.impl.protocols.closed_QMARK_ = function cljs$core$async$impl$protocols$closed_QMARK_(chan) {
  if (!(chan == null) && !(chan.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1 == null)) {
    return chan.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1(chan);
  } else {
    return cljs$core$async$impl$protocols$Channel$closed_QMARK_$dyn_4689.call(null, chan);
  }
};
cljs.core.async.impl.protocols.Handler = function() {
};
var cljs$core$async$impl$protocols$Handler$active_QMARK_$dyn_4690 = function(h) {
  var x__4428__auto__ = h == null ? null : h;
  var m__4429__auto__ = cljs.core.async.impl.protocols.active_QMARK_[goog.typeOf(x__4428__auto__)];
  if (!(m__4429__auto__ == null)) {
    return m__4429__auto__.call(null, h);
  } else {
    var m__4426__auto__ = cljs.core.async.impl.protocols.active_QMARK_["_"];
    if (!(m__4426__auto__ == null)) {
      return m__4426__auto__.call(null, h);
    } else {
      throw cljs.core.missing_protocol.call(null, "Handler.active?", h);
    }
  }
};
cljs.core.async.impl.protocols.active_QMARK_ = function cljs$core$async$impl$protocols$active_QMARK_(h) {
  if (!(h == null) && !(h.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 == null)) {
    return h.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1(h);
  } else {
    return cljs$core$async$impl$protocols$Handler$active_QMARK_$dyn_4690.call(null, h);
  }
};
var cljs$core$async$impl$protocols$Handler$blockable_QMARK_$dyn_4691 = function(h) {
  var x__4428__auto__ = h == null ? null : h;
  var m__4429__auto__ = cljs.core.async.impl.protocols.blockable_QMARK_[goog.typeOf(x__4428__auto__)];
  if (!(m__4429__auto__ == null)) {
    return m__4429__auto__.call(null, h);
  } else {
    var m__4426__auto__ = cljs.core.async.impl.protocols.blockable_QMARK_["_"];
    if (!(m__4426__auto__ == null)) {
      return m__4426__auto__.call(null, h);
    } else {
      throw cljs.core.missing_protocol.call(null, "Handler.blockable?", h);
    }
  }
};
cljs.core.async.impl.protocols.blockable_QMARK_ = function cljs$core$async$impl$protocols$blockable_QMARK_(h) {
  if (!(h == null) && !(h.cljs$core$async$impl$protocols$Handler$blockable_QMARK_$arity$1 == null)) {
    return h.cljs$core$async$impl$protocols$Handler$blockable_QMARK_$arity$1(h);
  } else {
    return cljs$core$async$impl$protocols$Handler$blockable_QMARK_$dyn_4691.call(null, h);
  }
};
var cljs$core$async$impl$protocols$Handler$commit$dyn_4692 = function(h) {
  var x__4428__auto__ = h == null ? null : h;
  var m__4429__auto__ = cljs.core.async.impl.protocols.commit[goog.typeOf(x__4428__auto__)];
  if (!(m__4429__auto__ == null)) {
    return m__4429__auto__.call(null, h);
  } else {
    var m__4426__auto__ = cljs.core.async.impl.protocols.commit["_"];
    if (!(m__4426__auto__ == null)) {
      return m__4426__auto__.call(null, h);
    } else {
      throw cljs.core.missing_protocol.call(null, "Handler.commit", h);
    }
  }
};
cljs.core.async.impl.protocols.commit = function cljs$core$async$impl$protocols$commit(h) {
  if (!(h == null) && !(h.cljs$core$async$impl$protocols$Handler$commit$arity$1 == null)) {
    return h.cljs$core$async$impl$protocols$Handler$commit$arity$1(h);
  } else {
    return cljs$core$async$impl$protocols$Handler$commit$dyn_4692.call(null, h);
  }
};
cljs.core.async.impl.protocols.Buffer = function() {
};
var cljs$core$async$impl$protocols$Buffer$full_QMARK_$dyn_4693 = function(b) {
  var x__4428__auto__ = b == null ? null : b;
  var m__4429__auto__ = cljs.core.async.impl.protocols.full_QMARK_[goog.typeOf(x__4428__auto__)];
  if (!(m__4429__auto__ == null)) {
    return m__4429__auto__.call(null, b);
  } else {
    var m__4426__auto__ = cljs.core.async.impl.protocols.full_QMARK_["_"];
    if (!(m__4426__auto__ == null)) {
      return m__4426__auto__.call(null, b);
    } else {
      throw cljs.core.missing_protocol.call(null, "Buffer.full?", b);
    }
  }
};
cljs.core.async.impl.protocols.full_QMARK_ = function cljs$core$async$impl$protocols$full_QMARK_(b) {
  if (!(b == null) && !(b.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 == null)) {
    return b.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1(b);
  } else {
    return cljs$core$async$impl$protocols$Buffer$full_QMARK_$dyn_4693.call(null, b);
  }
};
var cljs$core$async$impl$protocols$Buffer$remove_BANG_$dyn_4694 = function(b) {
  var x__4428__auto__ = b == null ? null : b;
  var m__4429__auto__ = cljs.core.async.impl.protocols.remove_BANG_[goog.typeOf(x__4428__auto__)];
  if (!(m__4429__auto__ == null)) {
    return m__4429__auto__.call(null, b);
  } else {
    var m__4426__auto__ = cljs.core.async.impl.protocols.remove_BANG_["_"];
    if (!(m__4426__auto__ == null)) {
      return m__4426__auto__.call(null, b);
    } else {
      throw cljs.core.missing_protocol.call(null, "Buffer.remove!", b);
    }
  }
};
cljs.core.async.impl.protocols.remove_BANG_ = function cljs$core$async$impl$protocols$remove_BANG_(b) {
  if (!(b == null) && !(b.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 == null)) {
    return b.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1(b);
  } else {
    return cljs$core$async$impl$protocols$Buffer$remove_BANG_$dyn_4694.call(null, b);
  }
};
var cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$dyn_4695 = function(b, itm) {
  var x__4428__auto__ = b == null ? null : b;
  var m__4429__auto__ = cljs.core.async.impl.protocols.add_BANG__STAR_[goog.typeOf(x__4428__auto__)];
  if (!(m__4429__auto__ == null)) {
    return m__4429__auto__.call(null, b, itm);
  } else {
    var m__4426__auto__ = cljs.core.async.impl.protocols.add_BANG__STAR_["_"];
    if (!(m__4426__auto__ == null)) {
      return m__4426__auto__.call(null, b, itm);
    } else {
      throw cljs.core.missing_protocol.call(null, "Buffer.add!*", b);
    }
  }
};
cljs.core.async.impl.protocols.add_BANG__STAR_ = function cljs$core$async$impl$protocols$add_BANG__STAR_(b, itm) {
  if (!(b == null) && !(b.cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$arity$2 == null)) {
    return b.cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$arity$2(b, itm);
  } else {
    return cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$dyn_4695.call(null, b, itm);
  }
};
var cljs$core$async$impl$protocols$Buffer$close_buf_BANG_$dyn_4696 = function(b) {
  var x__4428__auto__ = b == null ? null : b;
  var m__4429__auto__ = cljs.core.async.impl.protocols.close_buf_BANG_[goog.typeOf(x__4428__auto__)];
  if (!(m__4429__auto__ == null)) {
    return m__4429__auto__.call(null, b);
  } else {
    var m__4426__auto__ = cljs.core.async.impl.protocols.close_buf_BANG_["_"];
    if (!(m__4426__auto__ == null)) {
      return m__4426__auto__.call(null, b);
    } else {
      throw cljs.core.missing_protocol.call(null, "Buffer.close-buf!", b);
    }
  }
};
cljs.core.async.impl.protocols.close_buf_BANG_ = function cljs$core$async$impl$protocols$close_buf_BANG_(b) {
  if (!(b == null) && !(b.cljs$core$async$impl$protocols$Buffer$close_buf_BANG_$arity$1 == null)) {
    return b.cljs$core$async$impl$protocols$Buffer$close_buf_BANG_$arity$1(b);
  } else {
    return cljs$core$async$impl$protocols$Buffer$close_buf_BANG_$dyn_4696.call(null, b);
  }
};
cljs.core.async.impl.protocols.add_BANG_ = function cljs$core$async$impl$protocols$add_BANG_(var_args) {
  var G__4698 = arguments.length;
  switch(G__4698) {
    case 1:
      return cljs.core.async.impl.protocols.add_BANG_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.async.impl.protocols.add_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
cljs.core.async.impl.protocols.add_BANG_.cljs$core$IFn$_invoke$arity$1 = function(b) {
  return b;
};
cljs.core.async.impl.protocols.add_BANG_.cljs$core$IFn$_invoke$arity$2 = function(b, itm) {
  if (!(itm == null)) {
  } else {
    throw new Error("Assert failed: (not (nil? itm))");
  }
  return cljs.core.async.impl.protocols.add_BANG__STAR_.call(null, b, itm);
};
cljs.core.async.impl.protocols.add_BANG_.cljs$lang$maxFixedArity = 2;
cljs.core.async.impl.protocols.UnblockingBuffer = function() {
};
goog.provide("cljs.core.async.impl.buffers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.buffers.acopy = function cljs$core$async$impl$buffers$acopy(src, src_start, dest, dest_start, len) {
  var cnt = 0;
  while (true) {
    if (cnt < len) {
      dest[dest_start + cnt] = src[src_start + cnt];
      var G__4702 = cnt + 1;
      cnt = G__4702;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.async.impl.buffers.RingBuffer = function(head, tail, length, arr) {
  this.head = head;
  this.tail = tail;
  this.length = length;
  this.arr = arr;
};
cljs.core.async.impl.buffers.RingBuffer.prototype.pop = function() {
  var self__ = this;
  var _ = this;
  if (self__.length === 0) {
    return null;
  } else {
    var x = self__.arr[self__.tail];
    self__.arr[self__.tail] = null;
    self__.tail = (self__.tail + 1) % self__.arr.length;
    self__.length = self__.length - 1;
    return x;
  }
};
cljs.core.async.impl.buffers.RingBuffer.prototype.unshift = function(x) {
  var self__ = this;
  var _ = this;
  self__.arr[self__.head] = x;
  self__.head = (self__.head + 1) % self__.arr.length;
  self__.length = self__.length + 1;
  return null;
};
cljs.core.async.impl.buffers.RingBuffer.prototype.unbounded_unshift = function(x) {
  var self__ = this;
  var this$ = this;
  if (self__.length + 1 === self__.arr.length) {
    this$.resize();
  } else {
  }
  return this$.unshift(x);
};
cljs.core.async.impl.buffers.RingBuffer.prototype.resize = function() {
  var self__ = this;
  var _ = this;
  var new_arr_size = self__.arr.length * 2;
  var new_arr = new Array(new_arr_size);
  if (self__.tail < self__.head) {
    cljs.core.async.impl.buffers.acopy.call(null, self__.arr, self__.tail, new_arr, 0, self__.length);
    self__.tail = 0;
    self__.head = self__.length;
    return self__.arr = new_arr;
  } else {
    if (self__.tail > self__.head) {
      cljs.core.async.impl.buffers.acopy.call(null, self__.arr, self__.tail, new_arr, 0, self__.arr.length - self__.tail);
      cljs.core.async.impl.buffers.acopy.call(null, self__.arr, 0, new_arr, self__.arr.length - self__.tail, self__.head);
      self__.tail = 0;
      self__.head = self__.length;
      return self__.arr = new_arr;
    } else {
      if (self__.tail === self__.head) {
        self__.tail = 0;
        self__.head = 0;
        return self__.arr = new_arr;
      } else {
        return null;
      }
    }
  }
};
cljs.core.async.impl.buffers.RingBuffer.prototype.cleanup = function(keep_QMARK_) {
  var self__ = this;
  var this$ = this;
  var n__4613__auto__ = self__.length;
  var x = 0;
  while (true) {
    if (x < n__4613__auto__) {
      var v_4703 = this$.pop();
      if (keep_QMARK_.call(null, v_4703)) {
        this$.unshift(v_4703);
      } else {
      }
      var G__4704 = x + 1;
      x = G__4704;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.async.impl.buffers.RingBuffer.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "head", "head", 869147608, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "tail", "tail", 494507963, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, 
  "length", "length", -2065447907, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/RingBuffer";
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$ctorPrWriter = function(this__4369__auto__, writer__4370__auto__, opt__4371__auto__) {
  return cljs.core._write.call(null, writer__4370__auto__, "cljs.core.async.impl.buffers/RingBuffer");
};
cljs.core.async.impl.buffers.__GT_RingBuffer = function cljs$core$async$impl$buffers$__GT_RingBuffer(head, tail, length, arr) {
  return new cljs.core.async.impl.buffers.RingBuffer(head, tail, length, arr);
};
cljs.core.async.impl.buffers.ring_buffer = function cljs$core$async$impl$buffers$ring_buffer(n) {
  if (n > 0) {
  } else {
    throw new Error(["Assert failed: ", "Can't create a ring buffer of size 0", "\n", "(\x3e n 0)"].join(""));
  }
  return new cljs.core.async.impl.buffers.RingBuffer(0, 0, 0, new Array(n));
};
cljs.core.async.impl.buffers.FixedBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition0$ = 2;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length >= self__.n;
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  self__.buf.unbounded_unshift(itm);
  return this$__$1;
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$close_buf_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return null;
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.FixedBuffer.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "buf", "buf", 1426618187, null), new cljs.core.Symbol(null, "n", "n", -2092305744, null)], null);
};
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/FixedBuffer";
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$ctorPrWriter = function(this__4369__auto__, writer__4370__auto__, opt__4371__auto__) {
  return cljs.core._write.call(null, writer__4370__auto__, "cljs.core.async.impl.buffers/FixedBuffer");
};
cljs.core.async.impl.buffers.__GT_FixedBuffer = function cljs$core$async$impl$buffers$__GT_FixedBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.FixedBuffer(buf, n);
};
cljs.core.async.impl.buffers.fixed_buffer = function cljs$core$async$impl$buffers$fixed_buffer(n) {
  return new cljs.core.async.impl.buffers.FixedBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
cljs.core.async.impl.buffers.DroppingBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition0$ = 2;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$UnblockingBuffer$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return false;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.buf.length === self__.n) {
  } else {
    self__.buf.unshift(itm);
  }
  return this$__$1;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$close_buf_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return null;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.DroppingBuffer.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "buf", "buf", 1426618187, null), new cljs.core.Symbol(null, "n", "n", -2092305744, null)], null);
};
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/DroppingBuffer";
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$ctorPrWriter = function(this__4369__auto__, writer__4370__auto__, opt__4371__auto__) {
  return cljs.core._write.call(null, writer__4370__auto__, "cljs.core.async.impl.buffers/DroppingBuffer");
};
cljs.core.async.impl.buffers.__GT_DroppingBuffer = function cljs$core$async$impl$buffers$__GT_DroppingBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.DroppingBuffer(buf, n);
};
cljs.core.async.impl.buffers.dropping_buffer = function cljs$core$async$impl$buffers$dropping_buffer(n) {
  return new cljs.core.async.impl.buffers.DroppingBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
cljs.core.async.impl.buffers.SlidingBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition0$ = 2;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$UnblockingBuffer$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return false;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.buf.length === self__.n) {
    cljs.core.async.impl.protocols.remove_BANG_.call(null, this$__$1);
  } else {
  }
  self__.buf.unshift(itm);
  return this$__$1;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$close_buf_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return null;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.SlidingBuffer.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "buf", "buf", 1426618187, null), new cljs.core.Symbol(null, "n", "n", -2092305744, null)], null);
};
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/SlidingBuffer";
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$ctorPrWriter = function(this__4369__auto__, writer__4370__auto__, opt__4371__auto__) {
  return cljs.core._write.call(null, writer__4370__auto__, "cljs.core.async.impl.buffers/SlidingBuffer");
};
cljs.core.async.impl.buffers.__GT_SlidingBuffer = function cljs$core$async$impl$buffers$__GT_SlidingBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.SlidingBuffer(buf, n);
};
cljs.core.async.impl.buffers.sliding_buffer = function cljs$core$async$impl$buffers$sliding_buffer(n) {
  return new cljs.core.async.impl.buffers.SlidingBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
if (typeof cljs !== "undefined" && typeof cljs.core !== "undefined" && typeof cljs.core.async !== "undefined" && typeof cljs.core.async.impl !== "undefined" && typeof cljs.core.async.impl.buffers !== "undefined" && typeof cljs.core.async.impl.buffers.NO_VAL !== "undefined") {
} else {
  cljs.core.async.impl.buffers.NO_VAL = new Object;
}
cljs.core.async.impl.buffers.undelivered_QMARK_ = function cljs$core$async$impl$buffers$undelivered_QMARK_(val) {
  return cljs.core.async.impl.buffers.NO_VAL === val;
};
cljs.core.async.impl.buffers.PromiseBuffer = function(val) {
  this.val = val;
  this.cljs$lang$protocol_mask$partition0$ = 2;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.async.impl.buffers.PromiseBuffer.prototype.cljs$core$async$impl$protocols$UnblockingBuffer$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.async.impl.buffers.PromiseBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.async.impl.buffers.PromiseBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return false;
};
cljs.core.async.impl.buffers.PromiseBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.val;
};
cljs.core.async.impl.buffers.PromiseBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (cljs.core.async.impl.buffers.undelivered_QMARK_.call(null, self__.val)) {
    self__.val = itm;
  } else {
  }
  return this$__$1;
};
cljs.core.async.impl.buffers.PromiseBuffer.prototype.cljs$core$async$impl$protocols$Buffer$close_buf_BANG_$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (cljs.core.async.impl.buffers.undelivered_QMARK_.call(null, self__.val)) {
    return self__.val = null;
  } else {
    return null;
  }
};
cljs.core.async.impl.buffers.PromiseBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (cljs.core.async.impl.buffers.undelivered_QMARK_.call(null, self__.val)) {
    return 0;
  } else {
    return 1;
  }
};
cljs.core.async.impl.buffers.PromiseBuffer.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "val", "val", 1769233139, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.async.impl.buffers.PromiseBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.PromiseBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/PromiseBuffer";
cljs.core.async.impl.buffers.PromiseBuffer.cljs$lang$ctorPrWriter = function(this__4369__auto__, writer__4370__auto__, opt__4371__auto__) {
  return cljs.core._write.call(null, writer__4370__auto__, "cljs.core.async.impl.buffers/PromiseBuffer");
};
cljs.core.async.impl.buffers.__GT_PromiseBuffer = function cljs$core$async$impl$buffers$__GT_PromiseBuffer(val) {
  return new cljs.core.async.impl.buffers.PromiseBuffer(val);
};
cljs.core.async.impl.buffers.promise_buffer = function cljs$core$async$impl$buffers$promise_buffer() {
  return new cljs.core.async.impl.buffers.PromiseBuffer(cljs.core.async.impl.buffers.NO_VAL);
};
goog.provide("goog.debug.EntryPointMonitor");
goog.provide("goog.debug.entryPointRegistry");
goog.require("goog.asserts");
goog.debug.EntryPointMonitor = function() {
};
goog.debug.EntryPointMonitor.prototype.wrap;
goog.debug.EntryPointMonitor.prototype.unwrap;
goog.debug.entryPointRegistry.refList_ = [];
goog.debug.entryPointRegistry.monitors_ = [];
goog.debug.entryPointRegistry.monitorsMayExist_ = false;
goog.debug.entryPointRegistry.register = function(callback) {
  goog.debug.entryPointRegistry.refList_[goog.debug.entryPointRegistry.refList_.length] = callback;
  if (goog.debug.entryPointRegistry.monitorsMayExist_) {
    var monitors = goog.debug.entryPointRegistry.monitors_;
    for (var i = 0; i < monitors.length; i++) {
      callback(goog.bind(monitors[i].wrap, monitors[i]));
    }
  }
};
goog.debug.entryPointRegistry.monitorAll = function(monitor) {
  goog.debug.entryPointRegistry.monitorsMayExist_ = true;
  var transformer = goog.bind(monitor.wrap, monitor);
  for (var i = 0; i < goog.debug.entryPointRegistry.refList_.length; i++) {
    goog.debug.entryPointRegistry.refList_[i](transformer);
  }
  goog.debug.entryPointRegistry.monitors_.push(monitor);
};
goog.debug.entryPointRegistry.unmonitorAllIfPossible = function(monitor) {
  var monitors = goog.debug.entryPointRegistry.monitors_;
  goog.asserts.assert(monitor == monitors[monitors.length - 1], "Only the most recent monitor can be unwrapped.");
  var transformer = goog.bind(monitor.unwrap, monitor);
  for (var i = 0; i < goog.debug.entryPointRegistry.refList_.length; i++) {
    goog.debug.entryPointRegistry.refList_[i](transformer);
  }
  monitors.length--;
};
goog.provide("goog.labs.userAgent.engine");
goog.require("goog.array");
goog.require("goog.labs.userAgent.util");
goog.require("goog.string");
goog.labs.userAgent.engine.isPresto = function() {
  return goog.labs.userAgent.util.matchUserAgent("Presto");
};
goog.labs.userAgent.engine.isTrident = function() {
  return goog.labs.userAgent.util.matchUserAgent("Trident") || goog.labs.userAgent.util.matchUserAgent("MSIE");
};
goog.labs.userAgent.engine.isEdge = function() {
  return goog.labs.userAgent.util.matchUserAgent("Edge");
};
goog.labs.userAgent.engine.isWebKit = function() {
  return goog.labs.userAgent.util.matchUserAgentIgnoreCase("WebKit") && !goog.labs.userAgent.engine.isEdge();
};
goog.labs.userAgent.engine.isGecko = function() {
  return goog.labs.userAgent.util.matchUserAgent("Gecko") && !goog.labs.userAgent.engine.isWebKit() && !goog.labs.userAgent.engine.isTrident() && !goog.labs.userAgent.engine.isEdge();
};
goog.labs.userAgent.engine.getVersion = function() {
  var userAgentString = goog.labs.userAgent.util.getUserAgent();
  if (userAgentString) {
    var tuples = goog.labs.userAgent.util.extractVersionTuples(userAgentString);
    var engineTuple = goog.labs.userAgent.engine.getEngineTuple_(tuples);
    if (engineTuple) {
      if (engineTuple[0] == "Gecko") {
        return goog.labs.userAgent.engine.getVersionForKey_(tuples, "Firefox");
      }
      return engineTuple[1];
    }
    var browserTuple = tuples[0];
    var info;
    if (browserTuple && (info = browserTuple[2])) {
      var match = /Trident\/([^\s;]+)/.exec(info);
      if (match) {
        return match[1];
      }
    }
  }
  return "";
};
goog.labs.userAgent.engine.getEngineTuple_ = function(tuples) {
  if (!goog.labs.userAgent.engine.isEdge()) {
    return tuples[1];
  }
  for (var i = 0; i < tuples.length; i++) {
    var tuple = tuples[i];
    if (tuple[0] == "Edge") {
      return tuple;
    }
  }
};
goog.labs.userAgent.engine.isVersionOrHigher = function(version) {
  return goog.string.compareVersions(goog.labs.userAgent.engine.getVersion(), version) >= 0;
};
goog.labs.userAgent.engine.getVersionForKey_ = function(tuples, key) {
  var pair = goog.array.find(tuples, function(pair) {
    return key == pair[0];
  });
  return pair && pair[1] || "";
};
goog.provide("goog.labs.userAgent.platform");
goog.require("goog.labs.userAgent.util");
goog.require("goog.string");
goog.labs.userAgent.platform.isAndroid = function() {
  return goog.labs.userAgent.util.matchUserAgent("Android");
};
goog.labs.userAgent.platform.isIpod = function() {
  return goog.labs.userAgent.util.matchUserAgent("iPod");
};
goog.labs.userAgent.platform.isIphone = function() {
  return goog.labs.userAgent.util.matchUserAgent("iPhone") && !goog.labs.userAgent.util.matchUserAgent("iPod") && !goog.labs.userAgent.util.matchUserAgent("iPad");
};
goog.labs.userAgent.platform.isIpad = function() {
  return goog.labs.userAgent.util.matchUserAgent("iPad");
};
goog.labs.userAgent.platform.isIos = function() {
  return goog.labs.userAgent.platform.isIphone() || goog.labs.userAgent.platform.isIpad() || goog.labs.userAgent.platform.isIpod();
};
goog.labs.userAgent.platform.isMacintosh = function() {
  return goog.labs.userAgent.util.matchUserAgent("Macintosh");
};
goog.labs.userAgent.platform.isLinux = function() {
  return goog.labs.userAgent.util.matchUserAgent("Linux");
};
goog.labs.userAgent.platform.isWindows = function() {
  return goog.labs.userAgent.util.matchUserAgent("Windows");
};
goog.labs.userAgent.platform.isChromeOS = function() {
  return goog.labs.userAgent.util.matchUserAgent("CrOS");
};
goog.labs.userAgent.platform.isChromecast = function() {
  return goog.labs.userAgent.util.matchUserAgent("CrKey");
};
goog.labs.userAgent.platform.isKaiOS = function() {
  return goog.labs.userAgent.util.matchUserAgentIgnoreCase("KaiOS");
};
goog.labs.userAgent.platform.isGo2Phone = function() {
  return goog.labs.userAgent.util.matchUserAgentIgnoreCase("GAFP");
};
goog.labs.userAgent.platform.getVersion = function() {
  var userAgentString = goog.labs.userAgent.util.getUserAgent();
  var version = "", re;
  if (goog.labs.userAgent.platform.isWindows()) {
    re = /Windows (?:NT|Phone) ([0-9.]+)/;
    var match = re.exec(userAgentString);
    if (match) {
      version = match[1];
    } else {
      version = "0.0";
    }
  } else {
    if (goog.labs.userAgent.platform.isIos()) {
      re = /(?:iPhone|iPod|iPad|CPU)\s+OS\s+(\S+)/;
      var match = re.exec(userAgentString);
      version = match && match[1].replace(/_/g, ".");
    } else {
      if (goog.labs.userAgent.platform.isMacintosh()) {
        re = /Mac OS X ([0-9_.]+)/;
        var match = re.exec(userAgentString);
        version = match ? match[1].replace(/_/g, ".") : "10";
      } else {
        if (goog.labs.userAgent.platform.isKaiOS()) {
          re = /(?:KaiOS)\/(\S+)/i;
          var match = re.exec(userAgentString);
          version = match && match[1];
        } else {
          if (goog.labs.userAgent.platform.isAndroid()) {
            re = /Android\s+([^\);]+)(\)|;)/;
            var match = re.exec(userAgentString);
            version = match && match[1];
          } else {
            if (goog.labs.userAgent.platform.isChromeOS()) {
              re = /(?:CrOS\s+(?:i686|x86_64)\s+([0-9.]+))/;
              var match = re.exec(userAgentString);
              version = match && match[1];
            }
          }
        }
      }
    }
  }
  return version || "";
};
goog.labs.userAgent.platform.isVersionOrHigher = function(version) {
  return goog.string.compareVersions(goog.labs.userAgent.platform.getVersion(), version) >= 0;
};
goog.provide("goog.userAgent");
goog.require("goog.labs.userAgent.browser");
goog.require("goog.labs.userAgent.engine");
goog.require("goog.labs.userAgent.platform");
goog.require("goog.labs.userAgent.util");
goog.require("goog.reflect");
goog.require("goog.string");
goog.userAgent.ASSUME_IE = goog.define("goog.userAgent.ASSUME_IE", false);
goog.userAgent.ASSUME_EDGE = goog.define("goog.userAgent.ASSUME_EDGE", false);
goog.userAgent.ASSUME_GECKO = goog.define("goog.userAgent.ASSUME_GECKO", false);
goog.userAgent.ASSUME_WEBKIT = goog.define("goog.userAgent.ASSUME_WEBKIT", false);
goog.userAgent.ASSUME_MOBILE_WEBKIT = goog.define("goog.userAgent.ASSUME_MOBILE_WEBKIT", false);
goog.userAgent.ASSUME_OPERA = goog.define("goog.userAgent.ASSUME_OPERA", false);
goog.userAgent.ASSUME_ANY_VERSION = goog.define("goog.userAgent.ASSUME_ANY_VERSION", false);
goog.userAgent.BROWSER_KNOWN_ = goog.userAgent.ASSUME_IE || goog.userAgent.ASSUME_EDGE || goog.userAgent.ASSUME_GECKO || goog.userAgent.ASSUME_MOBILE_WEBKIT || goog.userAgent.ASSUME_WEBKIT || goog.userAgent.ASSUME_OPERA;
goog.userAgent.getUserAgentString = function() {
  return goog.labs.userAgent.util.getUserAgent();
};
goog.userAgent.getNavigatorTyped = function() {
  return goog.global["navigator"] || null;
};
goog.userAgent.getNavigator = function() {
  return goog.userAgent.getNavigatorTyped();
};
goog.userAgent.OPERA = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_OPERA : goog.labs.userAgent.browser.isOpera();
goog.userAgent.IE = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_IE : goog.labs.userAgent.browser.isIE();
goog.userAgent.EDGE = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_EDGE : goog.labs.userAgent.engine.isEdge();
goog.userAgent.EDGE_OR_IE = goog.userAgent.EDGE || goog.userAgent.IE;
goog.userAgent.GECKO = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_GECKO : goog.labs.userAgent.engine.isGecko();
goog.userAgent.WEBKIT = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_WEBKIT || goog.userAgent.ASSUME_MOBILE_WEBKIT : goog.labs.userAgent.engine.isWebKit();
goog.userAgent.isMobile_ = function() {
  return goog.userAgent.WEBKIT && goog.labs.userAgent.util.matchUserAgent("Mobile");
};
goog.userAgent.MOBILE = goog.userAgent.ASSUME_MOBILE_WEBKIT || goog.userAgent.isMobile_();
goog.userAgent.SAFARI = goog.userAgent.WEBKIT;
goog.userAgent.determinePlatform_ = function() {
  var navigator = goog.userAgent.getNavigatorTyped();
  return navigator && navigator.platform || "";
};
goog.userAgent.PLATFORM = goog.userAgent.determinePlatform_();
goog.userAgent.ASSUME_MAC = goog.define("goog.userAgent.ASSUME_MAC", false);
goog.userAgent.ASSUME_WINDOWS = goog.define("goog.userAgent.ASSUME_WINDOWS", false);
goog.userAgent.ASSUME_LINUX = goog.define("goog.userAgent.ASSUME_LINUX", false);
goog.userAgent.ASSUME_X11 = goog.define("goog.userAgent.ASSUME_X11", false);
goog.userAgent.ASSUME_ANDROID = goog.define("goog.userAgent.ASSUME_ANDROID", false);
goog.userAgent.ASSUME_IPHONE = goog.define("goog.userAgent.ASSUME_IPHONE", false);
goog.userAgent.ASSUME_IPAD = goog.define("goog.userAgent.ASSUME_IPAD", false);
goog.userAgent.ASSUME_IPOD = goog.define("goog.userAgent.ASSUME_IPOD", false);
goog.userAgent.ASSUME_KAIOS = goog.define("goog.userAgent.ASSUME_KAIOS", false);
goog.userAgent.ASSUME_GO2PHONE = goog.define("goog.userAgent.ASSUME_GO2PHONE", false);
goog.userAgent.PLATFORM_KNOWN_ = goog.userAgent.ASSUME_MAC || goog.userAgent.ASSUME_WINDOWS || goog.userAgent.ASSUME_LINUX || goog.userAgent.ASSUME_X11 || goog.userAgent.ASSUME_ANDROID || goog.userAgent.ASSUME_IPHONE || goog.userAgent.ASSUME_IPAD || goog.userAgent.ASSUME_IPOD;
goog.userAgent.MAC = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_MAC : goog.labs.userAgent.platform.isMacintosh();
goog.userAgent.WINDOWS = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_WINDOWS : goog.labs.userAgent.platform.isWindows();
goog.userAgent.isLegacyLinux_ = function() {
  return goog.labs.userAgent.platform.isLinux() || goog.labs.userAgent.platform.isChromeOS();
};
goog.userAgent.LINUX = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_LINUX : goog.userAgent.isLegacyLinux_();
goog.userAgent.isX11_ = function() {
  var navigator = goog.userAgent.getNavigatorTyped();
  return !!navigator && goog.string.contains(navigator["appVersion"] || "", "X11");
};
goog.userAgent.X11 = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_X11 : goog.userAgent.isX11_();
goog.userAgent.ANDROID = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_ANDROID : goog.labs.userAgent.platform.isAndroid();
goog.userAgent.IPHONE = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_IPHONE : goog.labs.userAgent.platform.isIphone();
goog.userAgent.IPAD = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_IPAD : goog.labs.userAgent.platform.isIpad();
goog.userAgent.IPOD = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_IPOD : goog.labs.userAgent.platform.isIpod();
goog.userAgent.IOS = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_IPHONE || goog.userAgent.ASSUME_IPAD || goog.userAgent.ASSUME_IPOD : goog.labs.userAgent.platform.isIos();
goog.userAgent.KAIOS = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_KAIOS : goog.labs.userAgent.platform.isKaiOS();
goog.userAgent.GO2PHONE = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_GO2PHONE : goog.labs.userAgent.platform.isGo2Phone();
goog.userAgent.determineVersion_ = function() {
  var version = "";
  var arr = goog.userAgent.getVersionRegexResult_();
  if (arr) {
    version = arr ? arr[1] : "";
  }
  if (goog.userAgent.IE) {
    var docMode = goog.userAgent.getDocumentMode_();
    if (docMode != null && docMode > parseFloat(version)) {
      return String(docMode);
    }
  }
  return version;
};
goog.userAgent.getVersionRegexResult_ = function() {
  var userAgent = goog.userAgent.getUserAgentString();
  if (goog.userAgent.GECKO) {
    return /rv:([^\);]+)(\)|;)/.exec(userAgent);
  }
  if (goog.userAgent.EDGE) {
    return /Edge\/([\d\.]+)/.exec(userAgent);
  }
  if (goog.userAgent.IE) {
    return /\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(userAgent);
  }
  if (goog.userAgent.WEBKIT) {
    return /WebKit\/(\S+)/.exec(userAgent);
  }
  if (goog.userAgent.OPERA) {
    return /(?:Version)[ \/]?(\S+)/.exec(userAgent);
  }
  return undefined;
};
goog.userAgent.getDocumentMode_ = function() {
  var doc = goog.global["document"];
  return doc ? doc["documentMode"] : undefined;
};
goog.userAgent.VERSION = goog.userAgent.determineVersion_();
goog.userAgent.compare = function(v1, v2) {
  return goog.string.compareVersions(v1, v2);
};
goog.userAgent.isVersionOrHigherCache_ = {};
goog.userAgent.isVersionOrHigher = function(version) {
  return goog.userAgent.ASSUME_ANY_VERSION || goog.reflect.cache(goog.userAgent.isVersionOrHigherCache_, version, function() {
    return goog.string.compareVersions(goog.userAgent.VERSION, version) >= 0;
  });
};
goog.userAgent.isVersion = goog.userAgent.isVersionOrHigher;
goog.userAgent.isDocumentModeOrHigher = function(documentMode) {
  return Number(goog.userAgent.DOCUMENT_MODE) >= documentMode;
};
goog.userAgent.isDocumentMode = goog.userAgent.isDocumentModeOrHigher;
goog.userAgent.DOCUMENT_MODE = function() {
  var doc = goog.global["document"];
  if (!doc || !goog.userAgent.IE) {
    return undefined;
  }
  return goog.userAgent.getDocumentMode_();
}();
goog.provide("goog.dom.BrowserFeature");
goog.require("goog.userAgent");
goog.dom.BrowserFeature.ASSUME_NO_OFFSCREEN_CANVAS = goog.define("goog.dom.ASSUME_NO_OFFSCREEN_CANVAS", false);
goog.dom.BrowserFeature.ASSUME_OFFSCREEN_CANVAS = goog.define("goog.dom.ASSUME_OFFSCREEN_CANVAS", false);
goog.dom.BrowserFeature.detectOffscreenCanvas_ = function(contextName) {
  try {
    return Boolean((new self.OffscreenCanvas(0, 0)).getContext(contextName));
  } catch (ex) {
  }
  return false;
};
goog.dom.BrowserFeature.OFFSCREEN_CANVAS_2D = !goog.dom.BrowserFeature.ASSUME_NO_OFFSCREEN_CANVAS && (goog.dom.BrowserFeature.ASSUME_OFFSCREEN_CANVAS || goog.dom.BrowserFeature.detectOffscreenCanvas_("2d"));
goog.dom.BrowserFeature.CAN_ADD_NAME_OR_TYPE_ATTRIBUTES = !goog.userAgent.IE || goog.userAgent.isDocumentModeOrHigher(9);
goog.dom.BrowserFeature.CAN_USE_CHILDREN_ATTRIBUTE = !goog.userAgent.GECKO && !goog.userAgent.IE || goog.userAgent.IE && goog.userAgent.isDocumentModeOrHigher(9) || goog.userAgent.GECKO && goog.userAgent.isVersionOrHigher("1.9.1");
goog.dom.BrowserFeature.CAN_USE_INNER_TEXT = goog.userAgent.IE && !goog.userAgent.isVersionOrHigher("9");
goog.dom.BrowserFeature.CAN_USE_PARENT_ELEMENT_PROPERTY = goog.userAgent.IE || goog.userAgent.OPERA || goog.userAgent.WEBKIT;
goog.dom.BrowserFeature.INNER_HTML_NEEDS_SCOPED_ELEMENT = goog.userAgent.IE;
goog.dom.BrowserFeature.LEGACY_IE_RANGES = goog.userAgent.IE && !goog.userAgent.isDocumentModeOrHigher(9);
goog.provide("goog.math.Coordinate");
goog.require("goog.math");
goog.math.Coordinate = function(opt_x, opt_y) {
  this.x = opt_x !== undefined ? opt_x : 0;
  this.y = opt_y !== undefined ? opt_y : 0;
};
goog.math.Coordinate.prototype.clone = function() {
  return new goog.math.Coordinate(this.x, this.y);
};
if (goog.DEBUG) {
  goog.math.Coordinate.prototype.toString = function() {
    return "(" + this.x + ", " + this.y + ")";
  };
}
goog.math.Coordinate.prototype.equals = function(other) {
  return other instanceof goog.math.Coordinate && goog.math.Coordinate.equals(this, other);
};
goog.math.Coordinate.equals = function(a, b) {
  if (a == b) {
    return true;
  }
  if (!a || !b) {
    return false;
  }
  return a.x == b.x && a.y == b.y;
};
goog.math.Coordinate.distance = function(a, b) {
  var dx = a.x - b.x;
  var dy = a.y - b.y;
  return Math.sqrt(dx * dx + dy * dy);
};
goog.math.Coordinate.magnitude = function(a) {
  return Math.sqrt(a.x * a.x + a.y * a.y);
};
goog.math.Coordinate.azimuth = function(a) {
  return goog.math.angle(0, 0, a.x, a.y);
};
goog.math.Coordinate.squaredDistance = function(a, b) {
  var dx = a.x - b.x;
  var dy = a.y - b.y;
  return dx * dx + dy * dy;
};
goog.math.Coordinate.difference = function(a, b) {
  return new goog.math.Coordinate(a.x - b.x, a.y - b.y);
};
goog.math.Coordinate.sum = function(a, b) {
  return new goog.math.Coordinate(a.x + b.x, a.y + b.y);
};
goog.math.Coordinate.prototype.ceil = function() {
  this.x = Math.ceil(this.x);
  this.y = Math.ceil(this.y);
  return this;
};
goog.math.Coordinate.prototype.floor = function() {
  this.x = Math.floor(this.x);
  this.y = Math.floor(this.y);
  return this;
};
goog.math.Coordinate.prototype.round = function() {
  this.x = Math.round(this.x);
  this.y = Math.round(this.y);
  return this;
};
goog.math.Coordinate.prototype.translate = function(tx, opt_ty) {
  if (tx instanceof goog.math.Coordinate) {
    this.x += tx.x;
    this.y += tx.y;
  } else {
    this.x += Number(tx);
    if (typeof opt_ty === "number") {
      this.y += opt_ty;
    }
  }
  return this;
};
goog.math.Coordinate.prototype.scale = function(sx, opt_sy) {
  var sy = typeof opt_sy === "number" ? opt_sy : sx;
  this.x *= sx;
  this.y *= sy;
  return this;
};
goog.math.Coordinate.prototype.rotateRadians = function(radians, opt_center) {
  var center = opt_center || new goog.math.Coordinate(0, 0);
  var x = this.x;
  var y = this.y;
  var cos = Math.cos(radians);
  var sin = Math.sin(radians);
  this.x = (x - center.x) * cos - (y - center.y) * sin + center.x;
  this.y = (x - center.x) * sin + (y - center.y) * cos + center.y;
};
goog.math.Coordinate.prototype.rotateDegrees = function(degrees, opt_center) {
  this.rotateRadians(goog.math.toRadians(degrees), opt_center);
};
goog.provide("goog.math.Size");
goog.math.Size = function(width, height) {
  this.width = width;
  this.height = height;
};
goog.math.Size.equals = function(a, b) {
  if (a == b) {
    return true;
  }
  if (!a || !b) {
    return false;
  }
  return a.width == b.width && a.height == b.height;
};
goog.math.Size.prototype.clone = function() {
  return new goog.math.Size(this.width, this.height);
};
if (goog.DEBUG) {
  goog.math.Size.prototype.toString = function() {
    return "(" + this.width + " x " + this.height + ")";
  };
}
goog.math.Size.prototype.getLongest = function() {
  return Math.max(this.width, this.height);
};
goog.math.Size.prototype.getShortest = function() {
  return Math.min(this.width, this.height);
};
goog.math.Size.prototype.area = function() {
  return this.width * this.height;
};
goog.math.Size.prototype.perimeter = function() {
  return (this.width + this.height) * 2;
};
goog.math.Size.prototype.aspectRatio = function() {
  return this.width / this.height;
};
goog.math.Size.prototype.isEmpty = function() {
  return !this.area();
};
goog.math.Size.prototype.ceil = function() {
  this.width = Math.ceil(this.width);
  this.height = Math.ceil(this.height);
  return this;
};
goog.math.Size.prototype.fitsInside = function(target) {
  return this.width <= target.width && this.height <= target.height;
};
goog.math.Size.prototype.floor = function() {
  this.width = Math.floor(this.width);
  this.height = Math.floor(this.height);
  return this;
};
goog.math.Size.prototype.round = function() {
  this.width = Math.round(this.width);
  this.height = Math.round(this.height);
  return this;
};
goog.math.Size.prototype.scale = function(sx, opt_sy) {
  const sy = typeof opt_sy === "number" ? opt_sy : sx;
  this.width *= sx;
  this.height *= sy;
  return this;
};
goog.math.Size.prototype.scaleToCover = function(target) {
  const s = this.aspectRatio() <= target.aspectRatio() ? target.width / this.width : target.height / this.height;
  return this.scale(s);
};
goog.math.Size.prototype.scaleToFit = function(target) {
  const s = this.aspectRatio() > target.aspectRatio() ? target.width / this.width : target.height / this.height;
  return this.scale(s);
};
goog.provide("goog.dom");
goog.provide("goog.dom.Appendable");
goog.provide("goog.dom.DomHelper");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.dom.BrowserFeature");
goog.require("goog.dom.NodeType");
goog.require("goog.dom.TagName");
goog.require("goog.dom.safe");
goog.require("goog.html.SafeHtml");
goog.require("goog.html.uncheckedconversions");
goog.require("goog.math.Coordinate");
goog.require("goog.math.Size");
goog.require("goog.object");
goog.require("goog.string");
goog.require("goog.string.Unicode");
goog.require("goog.userAgent");
goog.dom.ASSUME_QUIRKS_MODE = goog.define("goog.dom.ASSUME_QUIRKS_MODE", false);
goog.dom.ASSUME_STANDARDS_MODE = goog.define("goog.dom.ASSUME_STANDARDS_MODE", false);
goog.dom.COMPAT_MODE_KNOWN_ = goog.dom.ASSUME_QUIRKS_MODE || goog.dom.ASSUME_STANDARDS_MODE;
goog.dom.getDomHelper = function(opt_element) {
  return opt_element ? new goog.dom.DomHelper(goog.dom.getOwnerDocument(opt_element)) : goog.dom.defaultDomHelper_ || (goog.dom.defaultDomHelper_ = new goog.dom.DomHelper);
};
goog.dom.defaultDomHelper_;
goog.dom.getDocument = function() {
  return document;
};
goog.dom.getElement = function(element) {
  return goog.dom.getElementHelper_(document, element);
};
goog.dom.getElementHelper_ = function(doc, element) {
  return typeof element === "string" ? doc.getElementById(element) : element;
};
goog.dom.getRequiredElement = function(id) {
  return goog.dom.getRequiredElementHelper_(document, id);
};
goog.dom.getRequiredElementHelper_ = function(doc, id) {
  goog.asserts.assertString(id);
  var element = goog.dom.getElementHelper_(doc, id);
  element = goog.asserts.assertElement(element, "No element found with id: " + id);
  return element;
};
goog.dom.$ = goog.dom.getElement;
goog.dom.getElementsByTagName = function(tagName, opt_parent) {
  var parent = opt_parent || document;
  return parent.getElementsByTagName(String(tagName));
};
goog.dom.getElementsByTagNameAndClass = function(opt_tag, opt_class, opt_el) {
  return goog.dom.getElementsByTagNameAndClass_(document, opt_tag, opt_class, opt_el);
};
goog.dom.getElementByTagNameAndClass = function(opt_tag, opt_class, opt_el) {
  return goog.dom.getElementByTagNameAndClass_(document, opt_tag, opt_class, opt_el);
};
goog.dom.getElementsByClass = function(className, opt_el) {
  var parent = opt_el || document;
  if (goog.dom.canUseQuerySelector_(parent)) {
    return parent.querySelectorAll("." + className);
  }
  return goog.dom.getElementsByTagNameAndClass_(document, "*", className, opt_el);
};
goog.dom.getElementByClass = function(className, opt_el) {
  var parent = opt_el || document;
  var retVal = null;
  if (parent.getElementsByClassName) {
    retVal = parent.getElementsByClassName(className)[0];
  } else {
    retVal = goog.dom.getElementByTagNameAndClass_(document, "*", className, opt_el);
  }
  return retVal || null;
};
goog.dom.getRequiredElementByClass = function(className, opt_root) {
  var retValue = goog.dom.getElementByClass(className, opt_root);
  return goog.asserts.assert(retValue, "No element found with className: " + className);
};
goog.dom.canUseQuerySelector_ = function(parent) {
  return !!(parent.querySelectorAll && parent.querySelector);
};
goog.dom.getElementsByTagNameAndClass_ = function(doc, opt_tag, opt_class, opt_el) {
  var parent = opt_el || doc;
  var tagName = opt_tag && opt_tag != "*" ? String(opt_tag).toUpperCase() : "";
  if (goog.dom.canUseQuerySelector_(parent) && (tagName || opt_class)) {
    var query = tagName + (opt_class ? "." + opt_class : "");
    return parent.querySelectorAll(query);
  }
  if (opt_class && parent.getElementsByClassName) {
    var els = parent.getElementsByClassName(opt_class);
    if (tagName) {
      var arrayLike = {};
      var len = 0;
      for (var i = 0, el; el = els[i]; i++) {
        if (tagName == el.nodeName) {
          arrayLike[len++] = el;
        }
      }
      arrayLike.length = len;
      return arrayLike;
    } else {
      return els;
    }
  }
  var els = parent.getElementsByTagName(tagName || "*");
  if (opt_class) {
    var arrayLike = {};
    var len = 0;
    for (var i = 0, el; el = els[i]; i++) {
      var className = el.className;
      if (typeof className.split == "function" && goog.array.contains(className.split(/\s+/), opt_class)) {
        arrayLike[len++] = el;
      }
    }
    arrayLike.length = len;
    return arrayLike;
  } else {
    return els;
  }
};
goog.dom.getElementByTagNameAndClass_ = function(doc, opt_tag, opt_class, opt_el) {
  var parent = opt_el || doc;
  var tag = opt_tag && opt_tag != "*" ? String(opt_tag).toUpperCase() : "";
  if (goog.dom.canUseQuerySelector_(parent) && (tag || opt_class)) {
    return parent.querySelector(tag + (opt_class ? "." + opt_class : ""));
  }
  var elements = goog.dom.getElementsByTagNameAndClass_(doc, opt_tag, opt_class, opt_el);
  return elements[0] || null;
};
goog.dom.$$ = goog.dom.getElementsByTagNameAndClass;
goog.dom.setProperties = function(element, properties) {
  goog.object.forEach(properties, function(val, key) {
    if (val && typeof val == "object" && val.implementsGoogStringTypedString) {
      val = val.getTypedStringValue();
    }
    if (key == "style") {
      element.style.cssText = val;
    } else {
      if (key == "class") {
        element.className = val;
      } else {
        if (key == "for") {
          element.htmlFor = val;
        } else {
          if (goog.dom.DIRECT_ATTRIBUTE_MAP_.hasOwnProperty(key)) {
            element.setAttribute(goog.dom.DIRECT_ATTRIBUTE_MAP_[key], val);
          } else {
            if (goog.string.startsWith(key, "aria-") || goog.string.startsWith(key, "data-")) {
              element.setAttribute(key, val);
            } else {
              element[key] = val;
            }
          }
        }
      }
    }
  });
};
goog.dom.DIRECT_ATTRIBUTE_MAP_ = {"cellpadding":"cellPadding", "cellspacing":"cellSpacing", "colspan":"colSpan", "frameborder":"frameBorder", "height":"height", "maxlength":"maxLength", "nonce":"nonce", "role":"role", "rowspan":"rowSpan", "type":"type", "usemap":"useMap", "valign":"vAlign", "width":"width"};
goog.dom.getViewportSize = function(opt_window) {
  return goog.dom.getViewportSize_(opt_window || window);
};
goog.dom.getViewportSize_ = function(win) {
  var doc = win.document;
  var el = goog.dom.isCss1CompatMode_(doc) ? doc.documentElement : doc.body;
  return new goog.math.Size(el.clientWidth, el.clientHeight);
};
goog.dom.getDocumentHeight = function() {
  return goog.dom.getDocumentHeight_(window);
};
goog.dom.getDocumentHeightForWindow = function(win) {
  return goog.dom.getDocumentHeight_(win);
};
goog.dom.getDocumentHeight_ = function(win) {
  var doc = win.document;
  var height = 0;
  if (doc) {
    var body = doc.body;
    var docEl = doc.documentElement;
    if (!(docEl && body)) {
      return 0;
    }
    var vh = goog.dom.getViewportSize_(win).height;
    if (goog.dom.isCss1CompatMode_(doc) && docEl.scrollHeight) {
      height = docEl.scrollHeight != vh ? docEl.scrollHeight : docEl.offsetHeight;
    } else {
      var sh = docEl.scrollHeight;
      var oh = docEl.offsetHeight;
      if (docEl.clientHeight != oh) {
        sh = body.scrollHeight;
        oh = body.offsetHeight;
      }
      if (sh > vh) {
        height = sh > oh ? sh : oh;
      } else {
        height = sh < oh ? sh : oh;
      }
    }
  }
  return height;
};
goog.dom.getPageScroll = function(opt_window) {
  var win = opt_window || goog.global || window;
  return goog.dom.getDomHelper(win.document).getDocumentScroll();
};
goog.dom.getDocumentScroll = function() {
  return goog.dom.getDocumentScroll_(document);
};
goog.dom.getDocumentScroll_ = function(doc) {
  var el = goog.dom.getDocumentScrollElement_(doc);
  var win = goog.dom.getWindow_(doc);
  if (goog.userAgent.IE && goog.userAgent.isVersionOrHigher("10") && win.pageYOffset != el.scrollTop) {
    return new goog.math.Coordinate(el.scrollLeft, el.scrollTop);
  }
  return new goog.math.Coordinate(win.pageXOffset || el.scrollLeft, win.pageYOffset || el.scrollTop);
};
goog.dom.getDocumentScrollElement = function() {
  return goog.dom.getDocumentScrollElement_(document);
};
goog.dom.getDocumentScrollElement_ = function(doc) {
  if (doc.scrollingElement) {
    return doc.scrollingElement;
  }
  if (!goog.userAgent.WEBKIT && goog.dom.isCss1CompatMode_(doc)) {
    return doc.documentElement;
  }
  return doc.body || doc.documentElement;
};
goog.dom.getWindow = function(opt_doc) {
  return opt_doc ? goog.dom.getWindow_(opt_doc) : window;
};
goog.dom.getWindow_ = function(doc) {
  return doc.parentWindow || doc.defaultView;
};
goog.dom.createDom = function(tagName, opt_attributes, var_args) {
  return goog.dom.createDom_(document, arguments);
};
goog.dom.createDom_ = function(doc, args) {
  var tagName = String(args[0]);
  var attributes = args[1];
  if (!goog.dom.BrowserFeature.CAN_ADD_NAME_OR_TYPE_ATTRIBUTES && attributes && (attributes.name || attributes.type)) {
    var tagNameArr = ["\x3c", tagName];
    if (attributes.name) {
      tagNameArr.push(' name\x3d"', goog.string.htmlEscape(attributes.name), '"');
    }
    if (attributes.type) {
      tagNameArr.push(' type\x3d"', goog.string.htmlEscape(attributes.type), '"');
      var clone = {};
      goog.object.extend(clone, attributes);
      delete clone["type"];
      attributes = clone;
    }
    tagNameArr.push("\x3e");
    tagName = tagNameArr.join("");
  }
  var element = goog.dom.createElement_(doc, tagName);
  if (attributes) {
    if (typeof attributes === "string") {
      element.className = attributes;
    } else {
      if (goog.isArray(attributes)) {
        element.className = attributes.join(" ");
      } else {
        goog.dom.setProperties(element, attributes);
      }
    }
  }
  if (args.length > 2) {
    goog.dom.append_(doc, element, args, 2);
  }
  return element;
};
goog.dom.append_ = function(doc, parent, args, startIndex) {
  function childHandler(child) {
    if (child) {
      parent.appendChild(typeof child === "string" ? doc.createTextNode(child) : child);
    }
  }
  for (var i = startIndex; i < args.length; i++) {
    var arg = args[i];
    if (goog.isArrayLike(arg) && !goog.dom.isNodeLike(arg)) {
      goog.array.forEach(goog.dom.isNodeList(arg) ? goog.array.toArray(arg) : arg, childHandler);
    } else {
      childHandler(arg);
    }
  }
};
goog.dom.$dom = goog.dom.createDom;
goog.dom.createElement = function(name) {
  return goog.dom.createElement_(document, name);
};
goog.dom.createElement_ = function(doc, name) {
  name = String(name);
  if (doc.contentType === "application/xhtml+xml") {
    name = name.toLowerCase();
  }
  return doc.createElement(name);
};
goog.dom.createTextNode = function(content) {
  return document.createTextNode(String(content));
};
goog.dom.createTable = function(rows, columns, opt_fillWithNbsp) {
  return goog.dom.createTable_(document, rows, columns, !!opt_fillWithNbsp);
};
goog.dom.createTable_ = function(doc, rows, columns, fillWithNbsp) {
  var table = goog.dom.createElement_(doc, goog.dom.TagName.TABLE);
  var tbody = table.appendChild(goog.dom.createElement_(doc, goog.dom.TagName.TBODY));
  for (var i = 0; i < rows; i++) {
    var tr = goog.dom.createElement_(doc, goog.dom.TagName.TR);
    for (var j = 0; j < columns; j++) {
      var td = goog.dom.createElement_(doc, goog.dom.TagName.TD);
      if (fillWithNbsp) {
        goog.dom.setTextContent(td, goog.string.Unicode.NBSP);
      }
      tr.appendChild(td);
    }
    tbody.appendChild(tr);
  }
  return table;
};
goog.dom.constHtmlToNode = function(var_args) {
  var stringArray = goog.array.map(arguments, goog.string.Const.unwrap);
  var safeHtml = goog.html.uncheckedconversions.safeHtmlFromStringKnownToSatisfyTypeContract(goog.string.Const.from("Constant HTML string, that gets turned into a " + "Node later, so it will be automatically balanced."), stringArray.join(""));
  return goog.dom.safeHtmlToNode(safeHtml);
};
goog.dom.safeHtmlToNode = function(html) {
  return goog.dom.safeHtmlToNode_(document, html);
};
goog.dom.safeHtmlToNode_ = function(doc, html) {
  var tempDiv = goog.dom.createElement_(doc, goog.dom.TagName.DIV);
  if (goog.dom.BrowserFeature.INNER_HTML_NEEDS_SCOPED_ELEMENT) {
    goog.dom.safe.setInnerHtml(tempDiv, goog.html.SafeHtml.concat(goog.html.SafeHtml.BR, html));
    tempDiv.removeChild(goog.asserts.assert(tempDiv.firstChild));
  } else {
    goog.dom.safe.setInnerHtml(tempDiv, html);
  }
  return goog.dom.childrenToNode_(doc, tempDiv);
};
goog.dom.childrenToNode_ = function(doc, tempDiv) {
  if (tempDiv.childNodes.length == 1) {
    return tempDiv.removeChild(goog.asserts.assert(tempDiv.firstChild));
  } else {
    var fragment = doc.createDocumentFragment();
    while (tempDiv.firstChild) {
      fragment.appendChild(tempDiv.firstChild);
    }
    return fragment;
  }
};
goog.dom.isCss1CompatMode = function() {
  return goog.dom.isCss1CompatMode_(document);
};
goog.dom.isCss1CompatMode_ = function(doc) {
  if (goog.dom.COMPAT_MODE_KNOWN_) {
    return goog.dom.ASSUME_STANDARDS_MODE;
  }
  return doc.compatMode == "CSS1Compat";
};
goog.dom.canHaveChildren = function(node) {
  if (node.nodeType != goog.dom.NodeType.ELEMENT) {
    return false;
  }
  switch(node.tagName) {
    case String(goog.dom.TagName.APPLET):
    case String(goog.dom.TagName.AREA):
    case String(goog.dom.TagName.BASE):
    case String(goog.dom.TagName.BR):
    case String(goog.dom.TagName.COL):
    case String(goog.dom.TagName.COMMAND):
    case String(goog.dom.TagName.EMBED):
    case String(goog.dom.TagName.FRAME):
    case String(goog.dom.TagName.HR):
    case String(goog.dom.TagName.IMG):
    case String(goog.dom.TagName.INPUT):
    case String(goog.dom.TagName.IFRAME):
    case String(goog.dom.TagName.ISINDEX):
    case String(goog.dom.TagName.KEYGEN):
    case String(goog.dom.TagName.LINK):
    case String(goog.dom.TagName.NOFRAMES):
    case String(goog.dom.TagName.NOSCRIPT):
    case String(goog.dom.TagName.META):
    case String(goog.dom.TagName.OBJECT):
    case String(goog.dom.TagName.PARAM):
    case String(goog.dom.TagName.SCRIPT):
    case String(goog.dom.TagName.SOURCE):
    case String(goog.dom.TagName.STYLE):
    case String(goog.dom.TagName.TRACK):
    case String(goog.dom.TagName.WBR):
      return false;
  }
  return true;
};
goog.dom.appendChild = function(parent, child) {
  goog.asserts.assert(parent != null && child != null, "goog.dom.appendChild expects non-null arguments");
  parent.appendChild(child);
};
goog.dom.append = function(parent, var_args) {
  goog.dom.append_(goog.dom.getOwnerDocument(parent), parent, arguments, 1);
};
goog.dom.removeChildren = function(node) {
  var child;
  while (child = node.firstChild) {
    node.removeChild(child);
  }
};
goog.dom.insertSiblingBefore = function(newNode, refNode) {
  goog.asserts.assert(newNode != null && refNode != null, "goog.dom.insertSiblingBefore expects non-null arguments");
  if (refNode.parentNode) {
    refNode.parentNode.insertBefore(newNode, refNode);
  }
};
goog.dom.insertSiblingAfter = function(newNode, refNode) {
  goog.asserts.assert(newNode != null && refNode != null, "goog.dom.insertSiblingAfter expects non-null arguments");
  if (refNode.parentNode) {
    refNode.parentNode.insertBefore(newNode, refNode.nextSibling);
  }
};
goog.dom.insertChildAt = function(parent, child, index) {
  goog.asserts.assert(parent != null, "goog.dom.insertChildAt expects a non-null parent");
  parent.insertBefore(child, parent.childNodes[index] || null);
};
goog.dom.removeNode = function(node) {
  return node && node.parentNode ? node.parentNode.removeChild(node) : null;
};
goog.dom.replaceNode = function(newNode, oldNode) {
  goog.asserts.assert(newNode != null && oldNode != null, "goog.dom.replaceNode expects non-null arguments");
  var parent = oldNode.parentNode;
  if (parent) {
    parent.replaceChild(newNode, oldNode);
  }
};
goog.dom.flattenElement = function(element) {
  var child, parent = element.parentNode;
  if (parent && parent.nodeType != goog.dom.NodeType.DOCUMENT_FRAGMENT) {
    if (element.removeNode) {
      return element.removeNode(false);
    } else {
      while (child = element.firstChild) {
        parent.insertBefore(child, element);
      }
      return goog.dom.removeNode(element);
    }
  }
};
goog.dom.getChildren = function(element) {
  if (goog.dom.BrowserFeature.CAN_USE_CHILDREN_ATTRIBUTE && element.children != undefined) {
    return element.children;
  }
  return goog.array.filter(element.childNodes, function(node) {
    return node.nodeType == goog.dom.NodeType.ELEMENT;
  });
};
goog.dom.getFirstElementChild = function(node) {
  if (node.firstElementChild !== undefined) {
    return node.firstElementChild;
  }
  return goog.dom.getNextElementNode_(node.firstChild, true);
};
goog.dom.getLastElementChild = function(node) {
  if (node.lastElementChild !== undefined) {
    return node.lastElementChild;
  }
  return goog.dom.getNextElementNode_(node.lastChild, false);
};
goog.dom.getNextElementSibling = function(node) {
  if (node.nextElementSibling !== undefined) {
    return node.nextElementSibling;
  }
  return goog.dom.getNextElementNode_(node.nextSibling, true);
};
goog.dom.getPreviousElementSibling = function(node) {
  if (node.previousElementSibling !== undefined) {
    return node.previousElementSibling;
  }
  return goog.dom.getNextElementNode_(node.previousSibling, false);
};
goog.dom.getNextElementNode_ = function(node, forward) {
  while (node && node.nodeType != goog.dom.NodeType.ELEMENT) {
    node = forward ? node.nextSibling : node.previousSibling;
  }
  return node;
};
goog.dom.getNextNode = function(node) {
  if (!node) {
    return null;
  }
  if (node.firstChild) {
    return node.firstChild;
  }
  while (node && !node.nextSibling) {
    node = node.parentNode;
  }
  return node ? node.nextSibling : null;
};
goog.dom.getPreviousNode = function(node) {
  if (!node) {
    return null;
  }
  if (!node.previousSibling) {
    return node.parentNode;
  }
  node = node.previousSibling;
  while (node && node.lastChild) {
    node = node.lastChild;
  }
  return node;
};
goog.dom.isNodeLike = function(obj) {
  return goog.isObject(obj) && obj.nodeType > 0;
};
goog.dom.isElement = function(obj) {
  return goog.isObject(obj) && obj.nodeType == goog.dom.NodeType.ELEMENT;
};
goog.dom.isWindow = function(obj) {
  return goog.isObject(obj) && obj["window"] == obj;
};
goog.dom.getParentElement = function(element) {
  var parent;
  if (goog.dom.BrowserFeature.CAN_USE_PARENT_ELEMENT_PROPERTY) {
    var isIe9 = goog.userAgent.IE && goog.userAgent.isVersionOrHigher("9") && !goog.userAgent.isVersionOrHigher("10");
    if (!(isIe9 && goog.global["SVGElement"] && element instanceof goog.global["SVGElement"])) {
      parent = element.parentElement;
      if (parent) {
        return parent;
      }
    }
  }
  parent = element.parentNode;
  return goog.dom.isElement(parent) ? parent : null;
};
goog.dom.contains = function(parent, descendant) {
  if (!parent || !descendant) {
    return false;
  }
  if (parent.contains && descendant.nodeType == goog.dom.NodeType.ELEMENT) {
    return parent == descendant || parent.contains(descendant);
  }
  if (typeof parent.compareDocumentPosition != "undefined") {
    return parent == descendant || Boolean(parent.compareDocumentPosition(descendant) & 16);
  }
  while (descendant && parent != descendant) {
    descendant = descendant.parentNode;
  }
  return descendant == parent;
};
goog.dom.compareNodeOrder = function(node1, node2) {
  if (node1 == node2) {
    return 0;
  }
  if (node1.compareDocumentPosition) {
    return node1.compareDocumentPosition(node2) & 2 ? 1 : -1;
  }
  if (goog.userAgent.IE && !goog.userAgent.isDocumentModeOrHigher(9)) {
    if (node1.nodeType == goog.dom.NodeType.DOCUMENT) {
      return -1;
    }
    if (node2.nodeType == goog.dom.NodeType.DOCUMENT) {
      return 1;
    }
  }
  if ("sourceIndex" in node1 || node1.parentNode && "sourceIndex" in node1.parentNode) {
    var isElement1 = node1.nodeType == goog.dom.NodeType.ELEMENT;
    var isElement2 = node2.nodeType == goog.dom.NodeType.ELEMENT;
    if (isElement1 && isElement2) {
      return node1.sourceIndex - node2.sourceIndex;
    } else {
      var parent1 = node1.parentNode;
      var parent2 = node2.parentNode;
      if (parent1 == parent2) {
        return goog.dom.compareSiblingOrder_(node1, node2);
      }
      if (!isElement1 && goog.dom.contains(parent1, node2)) {
        return -1 * goog.dom.compareParentsDescendantNodeIe_(node1, node2);
      }
      if (!isElement2 && goog.dom.contains(parent2, node1)) {
        return goog.dom.compareParentsDescendantNodeIe_(node2, node1);
      }
      return (isElement1 ? node1.sourceIndex : parent1.sourceIndex) - (isElement2 ? node2.sourceIndex : parent2.sourceIndex);
    }
  }
  var doc = goog.dom.getOwnerDocument(node1);
  var range1, range2;
  range1 = doc.createRange();
  range1.selectNode(node1);
  range1.collapse(true);
  range2 = doc.createRange();
  range2.selectNode(node2);
  range2.collapse(true);
  return range1.compareBoundaryPoints(goog.global["Range"].START_TO_END, range2);
};
goog.dom.compareParentsDescendantNodeIe_ = function(textNode, node) {
  var parent = textNode.parentNode;
  if (parent == node) {
    return -1;
  }
  var sibling = node;
  while (sibling.parentNode != parent) {
    sibling = sibling.parentNode;
  }
  return goog.dom.compareSiblingOrder_(sibling, textNode);
};
goog.dom.compareSiblingOrder_ = function(node1, node2) {
  var s = node2;
  while (s = s.previousSibling) {
    if (s == node1) {
      return -1;
    }
  }
  return 1;
};
goog.dom.findCommonAncestor = function(var_args) {
  var i, count = arguments.length;
  if (!count) {
    return null;
  } else {
    if (count == 1) {
      return arguments[0];
    }
  }
  var paths = [];
  var minLength = Infinity;
  for (i = 0; i < count; i++) {
    var ancestors = [];
    var node = arguments[i];
    while (node) {
      ancestors.unshift(node);
      node = node.parentNode;
    }
    paths.push(ancestors);
    minLength = Math.min(minLength, ancestors.length);
  }
  var output = null;
  for (i = 0; i < minLength; i++) {
    var first = paths[0][i];
    for (var j = 1; j < count; j++) {
      if (first != paths[j][i]) {
        return output;
      }
    }
    output = first;
  }
  return output;
};
goog.dom.isInDocument = function(node) {
  return (node.ownerDocument.compareDocumentPosition(node) & 16) == 16;
};
goog.dom.getOwnerDocument = function(node) {
  goog.asserts.assert(node, "Node cannot be null or undefined.");
  return node.nodeType == goog.dom.NodeType.DOCUMENT ? node : node.ownerDocument || node.document;
};
goog.dom.getFrameContentDocument = function(frame) {
  return frame.contentDocument || frame.contentWindow.document;
};
goog.dom.getFrameContentWindow = function(frame) {
  try {
    return frame.contentWindow || (frame.contentDocument ? goog.dom.getWindow(frame.contentDocument) : null);
  } catch (e) {
  }
  return null;
};
goog.dom.setTextContent = function(node, text) {
  goog.asserts.assert(node != null, "goog.dom.setTextContent expects a non-null value for node");
  if ("textContent" in node) {
    node.textContent = text;
  } else {
    if (node.nodeType == goog.dom.NodeType.TEXT) {
      node.data = String(text);
    } else {
      if (node.firstChild && node.firstChild.nodeType == goog.dom.NodeType.TEXT) {
        while (node.lastChild != node.firstChild) {
          node.removeChild(goog.asserts.assert(node.lastChild));
        }
        node.firstChild.data = String(text);
      } else {
        goog.dom.removeChildren(node);
        var doc = goog.dom.getOwnerDocument(node);
        node.appendChild(doc.createTextNode(String(text)));
      }
    }
  }
};
goog.dom.getOuterHtml = function(element) {
  goog.asserts.assert(element !== null, "goog.dom.getOuterHtml expects a non-null value for element");
  if ("outerHTML" in element) {
    return element.outerHTML;
  } else {
    var doc = goog.dom.getOwnerDocument(element);
    var div = goog.dom.createElement_(doc, goog.dom.TagName.DIV);
    div.appendChild(element.cloneNode(true));
    return div.innerHTML;
  }
};
goog.dom.findNode = function(root, p) {
  var rv = [];
  var found = goog.dom.findNodes_(root, p, rv, true);
  return found ? rv[0] : undefined;
};
goog.dom.findNodes = function(root, p) {
  var rv = [];
  goog.dom.findNodes_(root, p, rv, false);
  return rv;
};
goog.dom.findNodes_ = function(root, p, rv, findOne) {
  if (root != null) {
    var child = root.firstChild;
    while (child) {
      if (p(child)) {
        rv.push(child);
        if (findOne) {
          return true;
        }
      }
      if (goog.dom.findNodes_(child, p, rv, findOne)) {
        return true;
      }
      child = child.nextSibling;
    }
  }
  return false;
};
goog.dom.findElement = function(root, pred) {
  var stack = goog.dom.getChildrenReverse_(root);
  while (stack.length > 0) {
    var next = stack.pop();
    if (pred(next)) {
      return next;
    }
    for (var c = next.lastElementChild; c; c = c.previousElementSibling) {
      stack.push(c);
    }
  }
  return null;
};
goog.dom.findElements = function(root, pred) {
  var result = [], stack = goog.dom.getChildrenReverse_(root);
  while (stack.length > 0) {
    var next = stack.pop();
    if (pred(next)) {
      result.push(next);
    }
    for (var c = next.lastElementChild; c; c = c.previousElementSibling) {
      stack.push(c);
    }
  }
  return result;
};
goog.dom.getChildrenReverse_ = function(node) {
  if (node.nodeType == goog.dom.NodeType.DOCUMENT) {
    return [node.documentElement];
  } else {
    var children = [];
    for (var c = node.lastElementChild; c; c = c.previousElementSibling) {
      children.push(c);
    }
    return children;
  }
};
goog.dom.TAGS_TO_IGNORE_ = {"SCRIPT":1, "STYLE":1, "HEAD":1, "IFRAME":1, "OBJECT":1};
goog.dom.PREDEFINED_TAG_VALUES_ = {"IMG":" ", "BR":"\n"};
goog.dom.isFocusableTabIndex = function(element) {
  return goog.dom.hasSpecifiedTabIndex_(element) && goog.dom.isTabIndexFocusable_(element);
};
goog.dom.setFocusableTabIndex = function(element, enable) {
  if (enable) {
    element.tabIndex = 0;
  } else {
    element.tabIndex = -1;
    element.removeAttribute("tabIndex");
  }
};
goog.dom.isFocusable = function(element) {
  var focusable;
  if (goog.dom.nativelySupportsFocus_(element)) {
    focusable = !element.disabled && (!goog.dom.hasSpecifiedTabIndex_(element) || goog.dom.isTabIndexFocusable_(element));
  } else {
    focusable = goog.dom.isFocusableTabIndex(element);
  }
  return focusable && goog.userAgent.IE ? goog.dom.hasNonZeroBoundingRect_(element) : focusable;
};
goog.dom.hasSpecifiedTabIndex_ = function(element) {
  if (goog.userAgent.IE && !goog.userAgent.isVersionOrHigher("9")) {
    var attrNode = element.getAttributeNode("tabindex");
    return attrNode != null && attrNode.specified;
  } else {
    return element.hasAttribute("tabindex");
  }
};
goog.dom.isTabIndexFocusable_ = function(element) {
  var index = element.tabIndex;
  return typeof index === "number" && index >= 0 && index < 32768;
};
goog.dom.nativelySupportsFocus_ = function(element) {
  return element.tagName == goog.dom.TagName.A && element.hasAttribute("href") || element.tagName == goog.dom.TagName.INPUT || element.tagName == goog.dom.TagName.TEXTAREA || element.tagName == goog.dom.TagName.SELECT || element.tagName == goog.dom.TagName.BUTTON;
};
goog.dom.hasNonZeroBoundingRect_ = function(element) {
  var rect;
  if (!goog.isFunction(element["getBoundingClientRect"]) || goog.userAgent.IE && element.parentElement == null) {
    rect = {"height":element.offsetHeight, "width":element.offsetWidth};
  } else {
    rect = element.getBoundingClientRect();
  }
  return rect != null && rect.height > 0 && rect.width > 0;
};
goog.dom.getTextContent = function(node) {
  var textContent;
  if (goog.dom.BrowserFeature.CAN_USE_INNER_TEXT && node !== null && "innerText" in node) {
    textContent = goog.string.canonicalizeNewlines(node.innerText);
  } else {
    var buf = [];
    goog.dom.getTextContent_(node, buf, true);
    textContent = buf.join("");
  }
  textContent = textContent.replace(/ \xAD /g, " ").replace(/\xAD/g, "");
  textContent = textContent.replace(/\u200B/g, "");
  if (!goog.dom.BrowserFeature.CAN_USE_INNER_TEXT) {
    textContent = textContent.replace(/ +/g, " ");
  }
  if (textContent != " ") {
    textContent = textContent.replace(/^\s*/, "");
  }
  return textContent;
};
goog.dom.getRawTextContent = function(node) {
  var buf = [];
  goog.dom.getTextContent_(node, buf, false);
  return buf.join("");
};
goog.dom.getTextContent_ = function(node, buf, normalizeWhitespace) {
  if (node.nodeName in goog.dom.TAGS_TO_IGNORE_) {
  } else {
    if (node.nodeType == goog.dom.NodeType.TEXT) {
      if (normalizeWhitespace) {
        buf.push(String(node.nodeValue).replace(/(\r\n|\r|\n)/g, ""));
      } else {
        buf.push(node.nodeValue);
      }
    } else {
      if (node.nodeName in goog.dom.PREDEFINED_TAG_VALUES_) {
        buf.push(goog.dom.PREDEFINED_TAG_VALUES_[node.nodeName]);
      } else {
        var child = node.firstChild;
        while (child) {
          goog.dom.getTextContent_(child, buf, normalizeWhitespace);
          child = child.nextSibling;
        }
      }
    }
  }
};
goog.dom.getNodeTextLength = function(node) {
  return goog.dom.getTextContent(node).length;
};
goog.dom.getNodeTextOffset = function(node, opt_offsetParent) {
  var root = opt_offsetParent || goog.dom.getOwnerDocument(node).body;
  var buf = [];
  while (node && node != root) {
    var cur = node;
    while (cur = cur.previousSibling) {
      buf.unshift(goog.dom.getTextContent(cur));
    }
    node = node.parentNode;
  }
  return goog.string.trimLeft(buf.join("")).replace(/ +/g, " ").length;
};
goog.dom.getNodeAtOffset = function(parent, offset, opt_result) {
  var stack = [parent], pos = 0, cur = null;
  while (stack.length > 0 && pos < offset) {
    cur = stack.pop();
    if (cur.nodeName in goog.dom.TAGS_TO_IGNORE_) {
    } else {
      if (cur.nodeType == goog.dom.NodeType.TEXT) {
        var text = cur.nodeValue.replace(/(\r\n|\r|\n)/g, "").replace(/ +/g, " ");
        pos += text.length;
      } else {
        if (cur.nodeName in goog.dom.PREDEFINED_TAG_VALUES_) {
          pos += goog.dom.PREDEFINED_TAG_VALUES_[cur.nodeName].length;
        } else {
          for (var i = cur.childNodes.length - 1; i >= 0; i--) {
            stack.push(cur.childNodes[i]);
          }
        }
      }
    }
  }
  if (goog.isObject(opt_result)) {
    opt_result.remainder = cur ? cur.nodeValue.length + offset - pos - 1 : 0;
    opt_result.node = cur;
  }
  return cur;
};
goog.dom.isNodeList = function(val) {
  if (val && typeof val.length == "number") {
    if (goog.isObject(val)) {
      return typeof val.item == "function" || typeof val.item == "string";
    } else {
      if (goog.isFunction(val)) {
        return typeof val.item == "function";
      }
    }
  }
  return false;
};
goog.dom.getAncestorByTagNameAndClass = function(element, opt_tag, opt_class, opt_maxSearchSteps) {
  if (!opt_tag && !opt_class) {
    return null;
  }
  var tagName = opt_tag ? String(opt_tag).toUpperCase() : null;
  return goog.dom.getAncestor(element, function(node) {
    return (!tagName || node.nodeName == tagName) && (!opt_class || typeof node.className === "string" && goog.array.contains(node.className.split(/\s+/), opt_class));
  }, true, opt_maxSearchSteps);
};
goog.dom.getAncestorByClass = function(element, className, opt_maxSearchSteps) {
  return goog.dom.getAncestorByTagNameAndClass(element, null, className, opt_maxSearchSteps);
};
goog.dom.getAncestor = function(element, matcher, opt_includeNode, opt_maxSearchSteps) {
  if (element && !opt_includeNode) {
    element = element.parentNode;
  }
  var steps = 0;
  while (element && (opt_maxSearchSteps == null || steps <= opt_maxSearchSteps)) {
    goog.asserts.assert(element.name != "parentNode");
    if (matcher(element)) {
      return element;
    }
    element = element.parentNode;
    steps++;
  }
  return null;
};
goog.dom.getActiveElement = function(doc) {
  try {
    var activeElement = doc && doc.activeElement;
    return activeElement && activeElement.nodeName ? activeElement : null;
  } catch (e) {
    return null;
  }
};
goog.dom.getPixelRatio = function() {
  var win = goog.dom.getWindow();
  if (win.devicePixelRatio !== undefined) {
    return win.devicePixelRatio;
  } else {
    if (win.matchMedia) {
      return goog.dom.matchesPixelRatio_(3) || goog.dom.matchesPixelRatio_(2) || goog.dom.matchesPixelRatio_(1.5) || goog.dom.matchesPixelRatio_(1) || .75;
    }
  }
  return 1;
};
goog.dom.matchesPixelRatio_ = function(pixelRatio) {
  var win = goog.dom.getWindow();
  var dpiPerDppx = 96;
  var query = "(min-resolution: " + pixelRatio + "dppx)," + "(min--moz-device-pixel-ratio: " + pixelRatio + ")," + "(min-resolution: " + pixelRatio * dpiPerDppx + "dpi)";
  return win.matchMedia(query).matches ? pixelRatio : 0;
};
goog.dom.getCanvasContext2D = function(canvas) {
  return canvas.getContext("2d");
};
goog.dom.DomHelper = function(opt_document) {
  this.document_ = opt_document || goog.global.document || document;
};
goog.dom.DomHelper.prototype.getDomHelper = goog.dom.getDomHelper;
goog.dom.DomHelper.prototype.setDocument = function(document) {
  this.document_ = document;
};
goog.dom.DomHelper.prototype.getDocument = function() {
  return this.document_;
};
goog.dom.DomHelper.prototype.getElement = function(element) {
  return goog.dom.getElementHelper_(this.document_, element);
};
goog.dom.DomHelper.prototype.getRequiredElement = function(id) {
  return goog.dom.getRequiredElementHelper_(this.document_, id);
};
goog.dom.DomHelper.prototype.$ = goog.dom.DomHelper.prototype.getElement;
goog.dom.DomHelper.prototype.getElementsByTagName = function(tagName, opt_parent) {
  var parent = opt_parent || this.document_;
  return parent.getElementsByTagName(String(tagName));
};
goog.dom.DomHelper.prototype.getElementsByTagNameAndClass = function(opt_tag, opt_class, opt_el) {
  return goog.dom.getElementsByTagNameAndClass_(this.document_, opt_tag, opt_class, opt_el);
};
goog.dom.DomHelper.prototype.getElementByTagNameAndClass = function(opt_tag, opt_class, opt_el) {
  return goog.dom.getElementByTagNameAndClass_(this.document_, opt_tag, opt_class, opt_el);
};
goog.dom.DomHelper.prototype.getElementsByClass = function(className, opt_el) {
  var doc = opt_el || this.document_;
  return goog.dom.getElementsByClass(className, doc);
};
goog.dom.DomHelper.prototype.getElementByClass = function(className, opt_el) {
  var doc = opt_el || this.document_;
  return goog.dom.getElementByClass(className, doc);
};
goog.dom.DomHelper.prototype.getRequiredElementByClass = function(className, opt_root) {
  var root = opt_root || this.document_;
  return goog.dom.getRequiredElementByClass(className, root);
};
goog.dom.DomHelper.prototype.$$ = goog.dom.DomHelper.prototype.getElementsByTagNameAndClass;
goog.dom.DomHelper.prototype.setProperties = goog.dom.setProperties;
goog.dom.DomHelper.prototype.getViewportSize = function(opt_window) {
  return goog.dom.getViewportSize(opt_window || this.getWindow());
};
goog.dom.DomHelper.prototype.getDocumentHeight = function() {
  return goog.dom.getDocumentHeight_(this.getWindow());
};
goog.dom.Appendable;
goog.dom.DomHelper.prototype.createDom = function(tagName, opt_attributes, var_args) {
  return goog.dom.createDom_(this.document_, arguments);
};
goog.dom.DomHelper.prototype.$dom = goog.dom.DomHelper.prototype.createDom;
goog.dom.DomHelper.prototype.createElement = function(name) {
  return goog.dom.createElement_(this.document_, name);
};
goog.dom.DomHelper.prototype.createTextNode = function(content) {
  return this.document_.createTextNode(String(content));
};
goog.dom.DomHelper.prototype.createTable = function(rows, columns, opt_fillWithNbsp) {
  return goog.dom.createTable_(this.document_, rows, columns, !!opt_fillWithNbsp);
};
goog.dom.DomHelper.prototype.safeHtmlToNode = function(html) {
  return goog.dom.safeHtmlToNode_(this.document_, html);
};
goog.dom.DomHelper.prototype.isCss1CompatMode = function() {
  return goog.dom.isCss1CompatMode_(this.document_);
};
goog.dom.DomHelper.prototype.getWindow = function() {
  return goog.dom.getWindow_(this.document_);
};
goog.dom.DomHelper.prototype.getDocumentScrollElement = function() {
  return goog.dom.getDocumentScrollElement_(this.document_);
};
goog.dom.DomHelper.prototype.getDocumentScroll = function() {
  return goog.dom.getDocumentScroll_(this.document_);
};
goog.dom.DomHelper.prototype.getActiveElement = function(opt_doc) {
  return goog.dom.getActiveElement(opt_doc || this.document_);
};
goog.dom.DomHelper.prototype.appendChild = goog.dom.appendChild;
goog.dom.DomHelper.prototype.append = goog.dom.append;
goog.dom.DomHelper.prototype.canHaveChildren = goog.dom.canHaveChildren;
goog.dom.DomHelper.prototype.removeChildren = goog.dom.removeChildren;
goog.dom.DomHelper.prototype.insertSiblingBefore = goog.dom.insertSiblingBefore;
goog.dom.DomHelper.prototype.insertSiblingAfter = goog.dom.insertSiblingAfter;
goog.dom.DomHelper.prototype.insertChildAt = goog.dom.insertChildAt;
goog.dom.DomHelper.prototype.removeNode = goog.dom.removeNode;
goog.dom.DomHelper.prototype.replaceNode = goog.dom.replaceNode;
goog.dom.DomHelper.prototype.flattenElement = goog.dom.flattenElement;
goog.dom.DomHelper.prototype.getChildren = goog.dom.getChildren;
goog.dom.DomHelper.prototype.getFirstElementChild = goog.dom.getFirstElementChild;
goog.dom.DomHelper.prototype.getLastElementChild = goog.dom.getLastElementChild;
goog.dom.DomHelper.prototype.getNextElementSibling = goog.dom.getNextElementSibling;
goog.dom.DomHelper.prototype.getPreviousElementSibling = goog.dom.getPreviousElementSibling;
goog.dom.DomHelper.prototype.getNextNode = goog.dom.getNextNode;
goog.dom.DomHelper.prototype.getPreviousNode = goog.dom.getPreviousNode;
goog.dom.DomHelper.prototype.isNodeLike = goog.dom.isNodeLike;
goog.dom.DomHelper.prototype.isElement = goog.dom.isElement;
goog.dom.DomHelper.prototype.isWindow = goog.dom.isWindow;
goog.dom.DomHelper.prototype.getParentElement = goog.dom.getParentElement;
goog.dom.DomHelper.prototype.contains = goog.dom.contains;
goog.dom.DomHelper.prototype.compareNodeOrder = goog.dom.compareNodeOrder;
goog.dom.DomHelper.prototype.findCommonAncestor = goog.dom.findCommonAncestor;
goog.dom.DomHelper.prototype.getOwnerDocument = goog.dom.getOwnerDocument;
goog.dom.DomHelper.prototype.getFrameContentDocument = goog.dom.getFrameContentDocument;
goog.dom.DomHelper.prototype.getFrameContentWindow = goog.dom.getFrameContentWindow;
goog.dom.DomHelper.prototype.setTextContent = goog.dom.setTextContent;
goog.dom.DomHelper.prototype.getOuterHtml = goog.dom.getOuterHtml;
goog.dom.DomHelper.prototype.findNode = goog.dom.findNode;
goog.dom.DomHelper.prototype.findNodes = goog.dom.findNodes;
goog.dom.DomHelper.prototype.isFocusableTabIndex = goog.dom.isFocusableTabIndex;
goog.dom.DomHelper.prototype.setFocusableTabIndex = goog.dom.setFocusableTabIndex;
goog.dom.DomHelper.prototype.isFocusable = goog.dom.isFocusable;
goog.dom.DomHelper.prototype.getTextContent = goog.dom.getTextContent;
goog.dom.DomHelper.prototype.getNodeTextLength = goog.dom.getNodeTextLength;
goog.dom.DomHelper.prototype.getNodeTextOffset = goog.dom.getNodeTextOffset;
goog.dom.DomHelper.prototype.getNodeAtOffset = goog.dom.getNodeAtOffset;
goog.dom.DomHelper.prototype.isNodeList = goog.dom.isNodeList;
goog.dom.DomHelper.prototype.getAncestorByTagNameAndClass = goog.dom.getAncestorByTagNameAndClass;
goog.dom.DomHelper.prototype.getAncestorByClass = goog.dom.getAncestorByClass;
goog.dom.DomHelper.prototype.getAncestor = goog.dom.getAncestor;
goog.dom.DomHelper.prototype.getCanvasContext2D = goog.dom.getCanvasContext2D;
goog.provide("goog.async.nextTick");
goog.provide("goog.async.throwException");
goog.require("goog.debug.entryPointRegistry");
goog.require("goog.dom");
goog.require("goog.dom.TagName");
goog.require("goog.dom.safe");
goog.require("goog.functions");
goog.require("goog.html.SafeHtml");
goog.require("goog.html.TrustedResourceUrl");
goog.require("goog.labs.userAgent.browser");
goog.require("goog.labs.userAgent.engine");
goog.require("goog.string.Const");
goog.async.throwException = function(exception) {
  goog.global.setTimeout(function() {
    throw exception;
  }, 0);
};
goog.async.nextTick = function(callback, opt_context, opt_useSetImmediate) {
  var cb = callback;
  if (opt_context) {
    cb = goog.bind(callback, opt_context);
  }
  cb = goog.async.nextTick.wrapCallback_(cb);
  if (goog.isFunction(goog.global.setImmediate) && (opt_useSetImmediate || goog.async.nextTick.useSetImmediate_())) {
    goog.global.setImmediate(cb);
    return;
  }
  if (!goog.async.nextTick.setImmediate_) {
    goog.async.nextTick.setImmediate_ = goog.async.nextTick.getSetImmediateEmulator_();
  }
  goog.async.nextTick.setImmediate_(cb);
};
goog.async.nextTick.useSetImmediate_ = function() {
  if (!goog.global.Window || !goog.global.Window.prototype) {
    return true;
  }
  if (goog.labs.userAgent.browser.isEdge() || goog.global.Window.prototype.setImmediate != goog.global.setImmediate) {
    return true;
  }
  return false;
};
goog.async.nextTick.setImmediate_;
goog.async.nextTick.getSetImmediateEmulator_ = function() {
  var Channel = goog.global["MessageChannel"];
  if (typeof Channel === "undefined" && typeof window !== "undefined" && window.postMessage && window.addEventListener && !goog.labs.userAgent.engine.isPresto()) {
    Channel = function() {
      var iframe = goog.dom.createElement(goog.dom.TagName.IFRAME);
      iframe.style.display = "none";
      goog.dom.safe.setIframeSrc(iframe, goog.html.TrustedResourceUrl.fromConstant(goog.string.Const.EMPTY));
      document.documentElement.appendChild(iframe);
      var win = iframe.contentWindow;
      var doc = win.document;
      doc.open();
      goog.dom.safe.documentWrite(doc, goog.html.SafeHtml.EMPTY);
      doc.close();
      var message = "callImmediate" + Math.random();
      var origin = win.location.protocol == "file:" ? "*" : win.location.protocol + "//" + win.location.host;
      var onmessage = goog.bind(function(e) {
        if (origin != "*" && e.origin != origin || e.data != message) {
          return;
        }
        this["port1"].onmessage();
      }, this);
      win.addEventListener("message", onmessage, false);
      this["port1"] = {};
      this["port2"] = {postMessage:function() {
        win.postMessage(message, origin);
      }};
    };
  }
  if (typeof Channel !== "undefined" && !goog.labs.userAgent.browser.isIE()) {
    var channel = new Channel;
    var head = {};
    var tail = head;
    channel["port1"].onmessage = function() {
      if (head.next !== undefined) {
        head = head.next;
        var cb = head.cb;
        head.cb = null;
        cb();
      }
    };
    return function(cb) {
      tail.next = {cb:cb};
      tail = tail.next;
      channel["port2"].postMessage(0);
    };
  }
  if (typeof document !== "undefined" && "onreadystatechange" in goog.dom.createElement(goog.dom.TagName.SCRIPT)) {
    return function(cb) {
      var script = goog.dom.createElement(goog.dom.TagName.SCRIPT);
      script.onreadystatechange = function() {
        script.onreadystatechange = null;
        script.parentNode.removeChild(script);
        script = null;
        cb();
        cb = null;
      };
      document.documentElement.appendChild(script);
    };
  }
  return function(cb) {
    goog.global.setTimeout(cb, 0);
  };
};
goog.async.nextTick.wrapCallback_ = goog.functions.identity;
goog.debug.entryPointRegistry.register(function(transformer) {
  goog.async.nextTick.wrapCallback_ = transformer;
});
goog.provide("cljs.core.async.impl.dispatch");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.buffers");
goog.require("goog.async.nextTick");
cljs.core.async.impl.dispatch.tasks = cljs.core.async.impl.buffers.ring_buffer.call(null, 32);
cljs.core.async.impl.dispatch.running_QMARK_ = false;
cljs.core.async.impl.dispatch.queued_QMARK_ = false;
cljs.core.async.impl.dispatch.TASK_BATCH_SIZE = 1024;
cljs.core.async.impl.dispatch.process_messages = function cljs$core$async$impl$dispatch$process_messages() {
  cljs.core.async.impl.dispatch.running_QMARK_ = true;
  cljs.core.async.impl.dispatch.queued_QMARK_ = false;
  var count_4707 = 0;
  while (true) {
    var m_4708 = cljs.core.async.impl.dispatch.tasks.pop();
    if (m_4708 == null) {
    } else {
      m_4708.call(null);
      if (count_4707 < cljs.core.async.impl.dispatch.TASK_BATCH_SIZE) {
        var G__4709 = count_4707 + 1;
        count_4707 = G__4709;
        continue;
      } else {
      }
    }
    break;
  }
  cljs.core.async.impl.dispatch.running_QMARK_ = false;
  if (cljs.core.async.impl.dispatch.tasks.length > 0) {
    return cljs.core.async.impl.dispatch.queue_dispatcher.call(null);
  } else {
    return null;
  }
};
cljs.core.async.impl.dispatch.queue_dispatcher = function cljs$core$async$impl$dispatch$queue_dispatcher() {
  if (cljs.core.async.impl.dispatch.queued_QMARK_ && cljs.core.async.impl.dispatch.running_QMARK_) {
    return null;
  } else {
    cljs.core.async.impl.dispatch.queued_QMARK_ = true;
    return goog.async.nextTick(cljs.core.async.impl.dispatch.process_messages);
  }
};
cljs.core.async.impl.dispatch.run = function cljs$core$async$impl$dispatch$run(f) {
  cljs.core.async.impl.dispatch.tasks.unbounded_unshift(f);
  return cljs.core.async.impl.dispatch.queue_dispatcher.call(null);
};
cljs.core.async.impl.dispatch.queue_delay = function cljs$core$async$impl$dispatch$queue_delay(f, delay) {
  return setTimeout(f, delay);
};
goog.provide("cljs.core.async.impl.channels");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.buffers");
cljs.core.async.impl.channels.box = function cljs$core$async$impl$channels$box(val) {
  if (typeof cljs !== "undefined" && typeof cljs.core !== "undefined" && typeof cljs.core.async !== "undefined" && typeof cljs.core.async.impl !== "undefined" && typeof cljs.core.async.impl.channels !== "undefined" && typeof cljs.core.async.impl.channels.t_cljs$core$async$impl$channels4712 !== "undefined") {
  } else {
    cljs.core.async.impl.channels.t_cljs$core$async$impl$channels4712 = function(val, meta4713) {
      this.val = val;
      this.meta4713 = meta4713;
      this.cljs$lang$protocol_mask$partition0$ = 425984;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.core.async.impl.channels.t_cljs$core$async$impl$channels4712.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_4714, meta4713__$1) {
      var self__ = this;
      var _4714__$1 = this;
      return new cljs.core.async.impl.channels.t_cljs$core$async$impl$channels4712(self__.val, meta4713__$1);
    };
    cljs.core.async.impl.channels.t_cljs$core$async$impl$channels4712.prototype.cljs$core$IMeta$_meta$arity$1 = function(_4714) {
      var self__ = this;
      var _4714__$1 = this;
      return self__.meta4713;
    };
    cljs.core.async.impl.channels.t_cljs$core$async$impl$channels4712.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.val;
    };
    cljs.core.async.impl.channels.t_cljs$core$async$impl$channels4712.getBasis = function() {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "val", "val", 1769233139, null), new cljs.core.Symbol(null, "meta4713", "meta4713", -1099274832, null)], null);
    };
    cljs.core.async.impl.channels.t_cljs$core$async$impl$channels4712.cljs$lang$type = true;
    cljs.core.async.impl.channels.t_cljs$core$async$impl$channels4712.cljs$lang$ctorStr = "cljs.core.async.impl.channels/t_cljs$core$async$impl$channels4712";
    cljs.core.async.impl.channels.t_cljs$core$async$impl$channels4712.cljs$lang$ctorPrWriter = function(this__4369__auto__, writer__4370__auto__, opt__4371__auto__) {
      return cljs.core._write.call(null, writer__4370__auto__, "cljs.core.async.impl.channels/t_cljs$core$async$impl$channels4712");
    };
    cljs.core.async.impl.channels.__GT_t_cljs$core$async$impl$channels4712 = function cljs$core$async$impl$channels$box_$___GT_t_cljs$core$async$impl$channels4712(val__$1, meta4713) {
      return new cljs.core.async.impl.channels.t_cljs$core$async$impl$channels4712(val__$1, meta4713);
    };
  }
  return new cljs.core.async.impl.channels.t_cljs$core$async$impl$channels4712(val, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.impl.channels.PutBox = function(handler, val) {
  this.handler = handler;
  this.val = val;
};
cljs.core.async.impl.channels.PutBox.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "handler", "handler", 1444934915, null), new cljs.core.Symbol(null, "val", "val", 1769233139, null)], null);
};
cljs.core.async.impl.channels.PutBox.cljs$lang$type = true;
cljs.core.async.impl.channels.PutBox.cljs$lang$ctorStr = "cljs.core.async.impl.channels/PutBox";
cljs.core.async.impl.channels.PutBox.cljs$lang$ctorPrWriter = function(this__4369__auto__, writer__4370__auto__, opt__4371__auto__) {
  return cljs.core._write.call(null, writer__4370__auto__, "cljs.core.async.impl.channels/PutBox");
};
cljs.core.async.impl.channels.__GT_PutBox = function cljs$core$async$impl$channels$__GT_PutBox(handler, val) {
  return new cljs.core.async.impl.channels.PutBox(handler, val);
};
cljs.core.async.impl.channels.put_active_QMARK_ = function cljs$core$async$impl$channels$put_active_QMARK_(box) {
  return cljs.core.async.impl.protocols.active_QMARK_.call(null, box.handler);
};
cljs.core.async.impl.channels.MAX_DIRTY = 64;
cljs.core.async.impl.channels.MMC = function() {
};
var cljs$core$async$impl$channels$MMC$abort$dyn_4715 = function(this$) {
  var x__4428__auto__ = this$ == null ? null : this$;
  var m__4429__auto__ = cljs.core.async.impl.channels.abort[goog.typeOf(x__4428__auto__)];
  if (!(m__4429__auto__ == null)) {
    return m__4429__auto__.call(null, this$);
  } else {
    var m__4426__auto__ = cljs.core.async.impl.channels.abort["_"];
    if (!(m__4426__auto__ == null)) {
      return m__4426__auto__.call(null, this$);
    } else {
      throw cljs.core.missing_protocol.call(null, "MMC.abort", this$);
    }
  }
};
cljs.core.async.impl.channels.abort = function cljs$core$async$impl$channels$abort(this$) {
  if (!(this$ == null) && !(this$.cljs$core$async$impl$channels$MMC$abort$arity$1 == null)) {
    return this$.cljs$core$async$impl$channels$MMC$abort$arity$1(this$);
  } else {
    return cljs$core$async$impl$channels$MMC$abort$dyn_4715.call(null, this$);
  }
};
cljs.core.async.impl.channels.ManyToManyChannel = function(takes, dirty_takes, puts, dirty_puts, buf, closed, add_BANG_) {
  this.takes = takes;
  this.dirty_takes = dirty_takes;
  this.puts = puts;
  this.dirty_puts = dirty_puts;
  this.buf = buf;
  this.closed = closed;
  this.add_BANG_ = add_BANG_;
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$channels$MMC$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$channels$MMC$abort$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  while (true) {
    var putter_4727 = self__.puts.pop();
    if (putter_4727 == null) {
    } else {
      var put_handler_4728 = putter_4727.handler;
      var val_4729 = putter_4727.val;
      if (cljs.core.async.impl.protocols.active_QMARK_.call(null, put_handler_4728)) {
        var put_cb_4730 = cljs.core.async.impl.protocols.commit.call(null, put_handler_4728);
        cljs.core.async.impl.dispatch.run.call(null, function(put_cb_4730, put_handler_4728, val_4729, putter_4727, this$__$1) {
          return function() {
            return put_cb_4730.call(null, true);
          };
        }(put_cb_4730, put_handler_4728, val_4729, putter_4727, this$__$1));
      } else {
        continue;
      }
    }
    break;
  }
  self__.puts.cleanup(cljs.core.constantly.call(null, false));
  return cljs.core.async.impl.protocols.close_BANG_.call(null, this$__$1);
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$WritePort$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(this$, val, handler) {
  var self__ = this;
  var this$__$1 = this;
  if (!(val == null)) {
  } else {
    throw new Error(["Assert failed: ", "Can't put nil on a channel", "\n", "(not (nil? val))"].join(""));
  }
  var closed__$1 = self__.closed;
  if (closed__$1 || !cljs.core.async.impl.protocols.active_QMARK_.call(null, handler)) {
    return cljs.core.async.impl.channels.box.call(null, !closed__$1);
  } else {
    if (cljs.core.truth_(function() {
      var and__4115__auto__ = self__.buf;
      if (cljs.core.truth_(and__4115__auto__)) {
        return cljs.core.not.call(null, cljs.core.async.impl.protocols.full_QMARK_.call(null, self__.buf));
      } else {
        return and__4115__auto__;
      }
    }())) {
      cljs.core.async.impl.protocols.commit.call(null, handler);
      var done_QMARK_ = cljs.core.reduced_QMARK_.call(null, self__.add_BANG_.call(null, self__.buf, val));
      var take_cbs = function() {
        var takers = cljs.core.PersistentVector.EMPTY;
        while (true) {
          if (self__.takes.length > 0 && cljs.core.count.call(null, self__.buf) > 0) {
            var taker = self__.takes.pop();
            if (cljs.core.async.impl.protocols.active_QMARK_.call(null, taker)) {
              var ret = cljs.core.async.impl.protocols.commit.call(null, taker);
              var val__$1 = cljs.core.async.impl.protocols.remove_BANG_.call(null, self__.buf);
              var G__4731 = cljs.core.conj.call(null, takers, function(takers, ret, val__$1, taker, done_QMARK_, closed__$1, this$__$1) {
                return function() {
                  return ret.call(null, val__$1);
                };
              }(takers, ret, val__$1, taker, done_QMARK_, closed__$1, this$__$1));
              takers = G__4731;
              continue;
            } else {
              var G__4732 = takers;
              takers = G__4732;
              continue;
            }
          } else {
            return takers;
          }
          break;
        }
      }();
      if (done_QMARK_) {
        cljs.core.async.impl.channels.abort.call(null, this$__$1);
      } else {
      }
      if (cljs.core.seq.call(null, take_cbs)) {
        var seq__4716_4733 = cljs.core.seq.call(null, take_cbs);
        var chunk__4717_4734 = null;
        var count__4718_4735 = 0;
        var i__4719_4736 = 0;
        while (true) {
          if (i__4719_4736 < count__4718_4735) {
            var f_4737 = cljs.core._nth.call(null, chunk__4717_4734, i__4719_4736);
            cljs.core.async.impl.dispatch.run.call(null, f_4737);
            var G__4738 = seq__4716_4733;
            var G__4739 = chunk__4717_4734;
            var G__4740 = count__4718_4735;
            var G__4741 = i__4719_4736 + 1;
            seq__4716_4733 = G__4738;
            chunk__4717_4734 = G__4739;
            count__4718_4735 = G__4740;
            i__4719_4736 = G__4741;
            continue;
          } else {
            var temp__5735__auto___4742 = cljs.core.seq.call(null, seq__4716_4733);
            if (temp__5735__auto___4742) {
              var seq__4716_4743__$1 = temp__5735__auto___4742;
              if (cljs.core.chunked_seq_QMARK_.call(null, seq__4716_4743__$1)) {
                var c__4556__auto___4744 = cljs.core.chunk_first.call(null, seq__4716_4743__$1);
                var G__4745 = cljs.core.chunk_rest.call(null, seq__4716_4743__$1);
                var G__4746 = c__4556__auto___4744;
                var G__4747 = cljs.core.count.call(null, c__4556__auto___4744);
                var G__4748 = 0;
                seq__4716_4733 = G__4745;
                chunk__4717_4734 = G__4746;
                count__4718_4735 = G__4747;
                i__4719_4736 = G__4748;
                continue;
              } else {
                var f_4749 = cljs.core.first.call(null, seq__4716_4743__$1);
                cljs.core.async.impl.dispatch.run.call(null, f_4749);
                var G__4750 = cljs.core.next.call(null, seq__4716_4743__$1);
                var G__4751 = null;
                var G__4752 = 0;
                var G__4753 = 0;
                seq__4716_4733 = G__4750;
                chunk__4717_4734 = G__4751;
                count__4718_4735 = G__4752;
                i__4719_4736 = G__4753;
                continue;
              }
            } else {
            }
          }
          break;
        }
      } else {
      }
      return cljs.core.async.impl.channels.box.call(null, true);
    } else {
      var taker = function() {
        while (true) {
          var taker = self__.takes.pop();
          if (cljs.core.truth_(taker)) {
            if (cljs.core.truth_(cljs.core.async.impl.protocols.active_QMARK_.call(null, taker))) {
              return taker;
            } else {
              continue;
            }
          } else {
            return null;
          }
          break;
        }
      }();
      if (cljs.core.truth_(taker)) {
        var take_cb = cljs.core.async.impl.protocols.commit.call(null, taker);
        cljs.core.async.impl.protocols.commit.call(null, handler);
        cljs.core.async.impl.dispatch.run.call(null, function() {
          return take_cb.call(null, val);
        });
        return cljs.core.async.impl.channels.box.call(null, true);
      } else {
        if (self__.dirty_puts > 64) {
          self__.dirty_puts = 0;
          self__.puts.cleanup(cljs.core.async.impl.channels.put_active_QMARK_);
        } else {
          self__.dirty_puts = self__.dirty_puts + 1;
        }
        if (cljs.core.truth_(cljs.core.async.impl.protocols.blockable_QMARK_.call(null, handler))) {
          if (self__.puts.length < 1024) {
          } else {
            throw new Error(["Assert failed: ", ["No more than ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(1024), " pending puts are allowed on a single channel.", " Consider using a windowed buffer."].join(""), "\n", "(\x3c (.-length puts) impl/MAX-QUEUE-SIZE)"].join(""));
          }
          self__.puts.unbounded_unshift(new cljs.core.async.impl.channels.PutBox(handler, val));
        } else {
        }
        return null;
      }
    }
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$ReadPort$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(this$, handler) {
  var self__ = this;
  var this$__$1 = this;
  if (!cljs.core.async.impl.protocols.active_QMARK_.call(null, handler)) {
    return null;
  } else {
    if (!(self__.buf == null) && cljs.core.count.call(null, self__.buf) > 0) {
      var temp__5733__auto__ = cljs.core.async.impl.protocols.commit.call(null, handler);
      if (cljs.core.truth_(temp__5733__auto__)) {
        var take_cb = temp__5733__auto__;
        var val = cljs.core.async.impl.protocols.remove_BANG_.call(null, self__.buf);
        var vec__4720 = cljs.core.not.call(null, cljs.core.async.impl.protocols.full_QMARK_.call(null, self__.buf)) && self__.puts.length > 0 ? function() {
          var cbs = cljs.core.PersistentVector.EMPTY;
          while (true) {
            var putter = self__.puts.pop();
            var put_handler = putter.handler;
            var val__$1 = putter.val;
            var cb = cljs.core.async.impl.protocols.active_QMARK_.call(null, put_handler) ? cljs.core.async.impl.protocols.commit.call(null, put_handler) : false;
            var cbs__$1 = cljs.core.truth_(cb) ? cljs.core.conj.call(null, cbs, cb) : cbs;
            var done_QMARK_ = cljs.core.truth_(cb) ? cljs.core.reduced_QMARK_.call(null, self__.add_BANG_.call(null, self__.buf, val__$1)) : null;
            if (cljs.core.not.call(null, done_QMARK_) && cljs.core.not.call(null, cljs.core.async.impl.protocols.full_QMARK_.call(null, self__.buf)) && self__.puts.length > 0) {
              var G__4754 = cbs__$1;
              cbs = G__4754;
              continue;
            } else {
              return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [done_QMARK_, cbs__$1], null);
            }
            break;
          }
        }() : null;
        var done_QMARK_ = cljs.core.nth.call(null, vec__4720, 0, null);
        var cbs = cljs.core.nth.call(null, vec__4720, 1, null);
        if (cljs.core.truth_(done_QMARK_)) {
          cljs.core.async.impl.channels.abort.call(null, this$__$1);
        } else {
        }
        var seq__4723_4755 = cljs.core.seq.call(null, cbs);
        var chunk__4724_4756 = null;
        var count__4725_4757 = 0;
        var i__4726_4758 = 0;
        while (true) {
          if (i__4726_4758 < count__4725_4757) {
            var cb_4759 = cljs.core._nth.call(null, chunk__4724_4756, i__4726_4758);
            cljs.core.async.impl.dispatch.run.call(null, function(seq__4723_4755, chunk__4724_4756, count__4725_4757, i__4726_4758, cb_4759, val, vec__4720, done_QMARK_, cbs, take_cb, temp__5733__auto__, this$__$1) {
              return function() {
                return cb_4759.call(null, true);
              };
            }(seq__4723_4755, chunk__4724_4756, count__4725_4757, i__4726_4758, cb_4759, val, vec__4720, done_QMARK_, cbs, take_cb, temp__5733__auto__, this$__$1));
            var G__4760 = seq__4723_4755;
            var G__4761 = chunk__4724_4756;
            var G__4762 = count__4725_4757;
            var G__4763 = i__4726_4758 + 1;
            seq__4723_4755 = G__4760;
            chunk__4724_4756 = G__4761;
            count__4725_4757 = G__4762;
            i__4726_4758 = G__4763;
            continue;
          } else {
            var temp__5735__auto___4764 = cljs.core.seq.call(null, seq__4723_4755);
            if (temp__5735__auto___4764) {
              var seq__4723_4765__$1 = temp__5735__auto___4764;
              if (cljs.core.chunked_seq_QMARK_.call(null, seq__4723_4765__$1)) {
                var c__4556__auto___4766 = cljs.core.chunk_first.call(null, seq__4723_4765__$1);
                var G__4767 = cljs.core.chunk_rest.call(null, seq__4723_4765__$1);
                var G__4768 = c__4556__auto___4766;
                var G__4769 = cljs.core.count.call(null, c__4556__auto___4766);
                var G__4770 = 0;
                seq__4723_4755 = G__4767;
                chunk__4724_4756 = G__4768;
                count__4725_4757 = G__4769;
                i__4726_4758 = G__4770;
                continue;
              } else {
                var cb_4771 = cljs.core.first.call(null, seq__4723_4765__$1);
                cljs.core.async.impl.dispatch.run.call(null, function(seq__4723_4755, chunk__4724_4756, count__4725_4757, i__4726_4758, cb_4771, seq__4723_4765__$1, temp__5735__auto___4764, val, vec__4720, done_QMARK_, cbs, take_cb, temp__5733__auto__, this$__$1) {
                  return function() {
                    return cb_4771.call(null, true);
                  };
                }(seq__4723_4755, chunk__4724_4756, count__4725_4757, i__4726_4758, cb_4771, seq__4723_4765__$1, temp__5735__auto___4764, val, vec__4720, done_QMARK_, cbs, take_cb, temp__5733__auto__, this$__$1));
                var G__4772 = cljs.core.next.call(null, seq__4723_4765__$1);
                var G__4773 = null;
                var G__4774 = 0;
                var G__4775 = 0;
                seq__4723_4755 = G__4772;
                chunk__4724_4756 = G__4773;
                count__4725_4757 = G__4774;
                i__4726_4758 = G__4775;
                continue;
              }
            } else {
            }
          }
          break;
        }
        return cljs.core.async.impl.channels.box.call(null, val);
      } else {
        return null;
      }
    } else {
      var putter = function() {
        while (true) {
          var putter = self__.puts.pop();
          if (cljs.core.truth_(putter)) {
            if (cljs.core.async.impl.protocols.active_QMARK_.call(null, putter.handler)) {
              return putter;
            } else {
              continue;
            }
          } else {
            return null;
          }
          break;
        }
      }();
      if (cljs.core.truth_(putter)) {
        var put_cb = cljs.core.async.impl.protocols.commit.call(null, putter.handler);
        cljs.core.async.impl.protocols.commit.call(null, handler);
        cljs.core.async.impl.dispatch.run.call(null, function() {
          return put_cb.call(null, true);
        });
        return cljs.core.async.impl.channels.box.call(null, putter.val);
      } else {
        if (cljs.core.truth_(self__.closed)) {
          if (cljs.core.truth_(self__.buf)) {
            self__.add_BANG_.call(null, self__.buf);
          } else {
          }
          if (cljs.core.truth_(function() {
            var and__4115__auto__ = cljs.core.async.impl.protocols.active_QMARK_.call(null, handler);
            if (cljs.core.truth_(and__4115__auto__)) {
              return cljs.core.async.impl.protocols.commit.call(null, handler);
            } else {
              return and__4115__auto__;
            }
          }())) {
            var has_val = function() {
              var and__4115__auto__ = self__.buf;
              if (cljs.core.truth_(and__4115__auto__)) {
                return cljs.core.count.call(null, self__.buf) > 0;
              } else {
                return and__4115__auto__;
              }
            }();
            var val = cljs.core.truth_(has_val) ? cljs.core.async.impl.protocols.remove_BANG_.call(null, self__.buf) : null;
            return cljs.core.async.impl.channels.box.call(null, val);
          } else {
            return null;
          }
        } else {
          if (self__.dirty_takes > 64) {
            self__.dirty_takes = 0;
            self__.takes.cleanup(cljs.core.async.impl.protocols.active_QMARK_);
          } else {
            self__.dirty_takes = self__.dirty_takes + 1;
          }
          if (cljs.core.truth_(cljs.core.async.impl.protocols.blockable_QMARK_.call(null, handler))) {
            if (self__.takes.length < 1024) {
            } else {
              throw new Error(["Assert failed: ", ["No more than ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(1024), " pending takes are allowed on a single channel."].join(""), "\n", "(\x3c (.-length takes) impl/MAX-QUEUE-SIZE)"].join(""));
            }
            self__.takes.unbounded_unshift(handler);
          } else {
          }
          return null;
        }
      }
    }
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.closed;
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.closed) {
    return null;
  } else {
    self__.closed = true;
    if (cljs.core.truth_(function() {
      var and__4115__auto__ = self__.buf;
      if (cljs.core.truth_(and__4115__auto__)) {
        return self__.puts.length === 0;
      } else {
        return and__4115__auto__;
      }
    }())) {
      self__.add_BANG_.call(null, self__.buf);
    } else {
    }
    while (true) {
      var taker_4776 = self__.takes.pop();
      if (taker_4776 == null) {
      } else {
        if (cljs.core.async.impl.protocols.active_QMARK_.call(null, taker_4776)) {
          var take_cb_4777 = cljs.core.async.impl.protocols.commit.call(null, taker_4776);
          var val_4778 = cljs.core.truth_(function() {
            var and__4115__auto__ = self__.buf;
            if (cljs.core.truth_(and__4115__auto__)) {
              return cljs.core.count.call(null, self__.buf) > 0;
            } else {
              return and__4115__auto__;
            }
          }()) ? cljs.core.async.impl.protocols.remove_BANG_.call(null, self__.buf) : null;
          cljs.core.async.impl.dispatch.run.call(null, function(take_cb_4777, val_4778, taker_4776, this$__$1) {
            return function() {
              return take_cb_4777.call(null, val_4778);
            };
          }(take_cb_4777, val_4778, taker_4776, this$__$1));
        } else {
        }
        continue;
      }
      break;
    }
    if (cljs.core.truth_(self__.buf)) {
      cljs.core.async.impl.protocols.close_buf_BANG_.call(null, self__.buf);
    } else {
    }
    return null;
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.getBasis = function() {
  return new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "takes", "takes", 298247964, null), cljs.core.with_meta(new cljs.core.Symbol(null, "dirty-takes", "dirty-takes", 575642138, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), new cljs.core.Symbol(null, "puts", "puts", -1883877054, null), cljs.core.with_meta(new cljs.core.Symbol(null, "dirty-puts", "dirty-puts", 
  57041148, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "buf", "buf", 1426618187, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Symbol(null, "not-native", "not-native", -236392494, null)], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "closed", "closed", 720856168, null), new cljs.core.PersistentArrayMap(null, 
  1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), new cljs.core.Symbol(null, "add!", "add!", 2046056845, null)], null);
};
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$type = true;
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$ctorStr = "cljs.core.async.impl.channels/ManyToManyChannel";
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$ctorPrWriter = function(this__4369__auto__, writer__4370__auto__, opt__4371__auto__) {
  return cljs.core._write.call(null, writer__4370__auto__, "cljs.core.async.impl.channels/ManyToManyChannel");
};
cljs.core.async.impl.channels.__GT_ManyToManyChannel = function cljs$core$async$impl$channels$__GT_ManyToManyChannel(takes, dirty_takes, puts, dirty_puts, buf, closed, add_BANG_) {
  return new cljs.core.async.impl.channels.ManyToManyChannel(takes, dirty_takes, puts, dirty_puts, buf, closed, add_BANG_);
};
cljs.core.async.impl.channels.ex_handler = function cljs$core$async$impl$channels$ex_handler(ex) {
  console.log(ex);
  return null;
};
cljs.core.async.impl.channels.handle = function cljs$core$async$impl$channels$handle(buf, exh, t) {
  var else$ = function() {
    var or__4126__auto__ = exh;
    if (cljs.core.truth_(or__4126__auto__)) {
      return or__4126__auto__;
    } else {
      return cljs.core.async.impl.channels.ex_handler;
    }
  }().call(null, t);
  if (else$ == null) {
    return buf;
  } else {
    return cljs.core.async.impl.protocols.add_BANG_.call(null, buf, else$);
  }
};
cljs.core.async.impl.channels.chan = function cljs$core$async$impl$channels$chan(var_args) {
  var G__4780 = arguments.length;
  switch(G__4780) {
    case 1:
      return cljs.core.async.impl.channels.chan.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.async.impl.channels.chan.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.impl.channels.chan.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
cljs.core.async.impl.channels.chan.cljs$core$IFn$_invoke$arity$1 = function(buf) {
  return cljs.core.async.impl.channels.chan.call(null, buf, null);
};
cljs.core.async.impl.channels.chan.cljs$core$IFn$_invoke$arity$2 = function(buf, xform) {
  return cljs.core.async.impl.channels.chan.call(null, buf, xform, null);
};
cljs.core.async.impl.channels.chan.cljs$core$IFn$_invoke$arity$3 = function(buf, xform, exh) {
  return new cljs.core.async.impl.channels.ManyToManyChannel(cljs.core.async.impl.buffers.ring_buffer.call(null, 32), 0, cljs.core.async.impl.buffers.ring_buffer.call(null, 32), 0, buf, false, function() {
    var add_BANG_ = cljs.core.truth_(xform) ? xform.call(null, cljs.core.async.impl.protocols.add_BANG_) : cljs.core.async.impl.protocols.add_BANG_;
    return function() {
      var G__4784 = null;
      var G__4784__1 = function(buf__$1) {
        try {
          return add_BANG_.call(null, buf__$1);
        } catch (e4781) {
          var t = e4781;
          return cljs.core.async.impl.channels.handle.call(null, buf__$1, exh, t);
        }
      };
      var G__4784__2 = function(buf__$1, val) {
        try {
          return add_BANG_.call(null, buf__$1, val);
        } catch (e4782) {
          var t = e4782;
          return cljs.core.async.impl.channels.handle.call(null, buf__$1, exh, t);
        }
      };
      G__4784 = function(buf__$1, val) {
        switch(arguments.length) {
          case 1:
            return G__4784__1.call(this, buf__$1);
          case 2:
            return G__4784__2.call(this, buf__$1, val);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__4784.cljs$core$IFn$_invoke$arity$1 = G__4784__1;
      G__4784.cljs$core$IFn$_invoke$arity$2 = G__4784__2;
      return G__4784;
    }();
  }());
};
cljs.core.async.impl.channels.chan.cljs$lang$maxFixedArity = 3;
goog.provide("cljs.core.async.impl.ioc_helpers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.ioc_helpers.FN_IDX = 0;
cljs.core.async.impl.ioc_helpers.STATE_IDX = 1;
cljs.core.async.impl.ioc_helpers.VALUE_IDX = 2;
cljs.core.async.impl.ioc_helpers.BINDINGS_IDX = 3;
cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES = 4;
cljs.core.async.impl.ioc_helpers.CURRENT_EXCEPTION = 5;
cljs.core.async.impl.ioc_helpers.USER_START_IDX = 6;
cljs.core.async.impl.ioc_helpers.aset_object = function cljs$core$async$impl$ioc_helpers$aset_object(arr, idx, o) {
  return arr[idx][o];
};
cljs.core.async.impl.ioc_helpers.aget_object = function cljs$core$async$impl$ioc_helpers$aget_object(arr, idx) {
  return arr[idx];
};
cljs.core.async.impl.ioc_helpers.finished_QMARK_ = function cljs$core$async$impl$ioc_helpers$finished_QMARK_(state_array) {
  return cljs.core.keyword_identical_QMARK_.call(null, state_array[1], new cljs.core.Keyword(null, "finished", "finished", -1018867731));
};
cljs.core.async.impl.ioc_helpers.fn_handler = function cljs$core$async$impl$ioc_helpers$fn_handler(f) {
  if (typeof cljs !== "undefined" && typeof cljs.core !== "undefined" && typeof cljs.core.async !== "undefined" && typeof cljs.core.async.impl !== "undefined" && typeof cljs.core.async.impl.ioc_helpers !== "undefined" && typeof cljs.core.async.impl.ioc_helpers.t_cljs$core$async$impl$ioc_helpers4717 !== "undefined") {
  } else {
    cljs.core.async.impl.ioc_helpers.t_cljs$core$async$impl$ioc_helpers4717 = function(f, meta4718) {
      this.f = f;
      this.meta4718 = meta4718;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.core.async.impl.ioc_helpers.t_cljs$core$async$impl$ioc_helpers4717.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_4719, meta4718__$1) {
      var self__ = this;
      var _4719__$1 = this;
      return new cljs.core.async.impl.ioc_helpers.t_cljs$core$async$impl$ioc_helpers4717(self__.f, meta4718__$1);
    };
    cljs.core.async.impl.ioc_helpers.t_cljs$core$async$impl$ioc_helpers4717.prototype.cljs$core$IMeta$_meta$arity$1 = function(_4719) {
      var self__ = this;
      var _4719__$1 = this;
      return self__.meta4718;
    };
    cljs.core.async.impl.ioc_helpers.t_cljs$core$async$impl$ioc_helpers4717.prototype.cljs$core$async$impl$protocols$Handler$ = cljs.core.PROTOCOL_SENTINEL;
    cljs.core.async.impl.ioc_helpers.t_cljs$core$async$impl$ioc_helpers4717.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return true;
    };
    cljs.core.async.impl.ioc_helpers.t_cljs$core$async$impl$ioc_helpers4717.prototype.cljs$core$async$impl$protocols$Handler$blockable_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return true;
    };
    cljs.core.async.impl.ioc_helpers.t_cljs$core$async$impl$ioc_helpers4717.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.f;
    };
    cljs.core.async.impl.ioc_helpers.t_cljs$core$async$impl$ioc_helpers4717.getBasis = function() {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "f", "f", 43394975, null), new cljs.core.Symbol(null, "meta4718", "meta4718", -264998321, null)], null);
    };
    cljs.core.async.impl.ioc_helpers.t_cljs$core$async$impl$ioc_helpers4717.cljs$lang$type = true;
    cljs.core.async.impl.ioc_helpers.t_cljs$core$async$impl$ioc_helpers4717.cljs$lang$ctorStr = "cljs.core.async.impl.ioc-helpers/t_cljs$core$async$impl$ioc_helpers4717";
    cljs.core.async.impl.ioc_helpers.t_cljs$core$async$impl$ioc_helpers4717.cljs$lang$ctorPrWriter = function(this__4369__auto__, writer__4370__auto__, opt__4371__auto__) {
      return cljs.core._write.call(null, writer__4370__auto__, "cljs.core.async.impl.ioc-helpers/t_cljs$core$async$impl$ioc_helpers4717");
    };
    cljs.core.async.impl.ioc_helpers.__GT_t_cljs$core$async$impl$ioc_helpers4717 = function cljs$core$async$impl$ioc_helpers$fn_handler_$___GT_t_cljs$core$async$impl$ioc_helpers4717(f__$1, meta4718) {
      return new cljs.core.async.impl.ioc_helpers.t_cljs$core$async$impl$ioc_helpers4717(f__$1, meta4718);
    };
  }
  return new cljs.core.async.impl.ioc_helpers.t_cljs$core$async$impl$ioc_helpers4717(f, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.impl.ioc_helpers.run_state_machine = function cljs$core$async$impl$ioc_helpers$run_state_machine(state) {
  return cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, 0).call(null, state);
};
cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped = function cljs$core$async$impl$ioc_helpers$run_state_machine_wrapped(state) {
  try {
    return cljs.core.async.impl.ioc_helpers.run_state_machine.call(null, state);
  } catch (e4720) {
    if (e4720 instanceof Object) {
      var ex = e4720;
      cljs.core.async.impl.protocols.close_BANG_.call(null, cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, 6));
      throw ex;
    } else {
      throw e4720;
    }
  }
};
cljs.core.async.impl.ioc_helpers.take_BANG_ = function cljs$core$async$impl$ioc_helpers$take_BANG_(state, blk, c) {
  var temp__5733__auto__ = cljs.core.async.impl.protocols.take_BANG_.call(null, c, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function(x) {
    var statearr_4721_4723 = state;
    statearr_4721_4723[2] = x;
    statearr_4721_4723[1] = blk;
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
  }));
  if (cljs.core.truth_(temp__5733__auto__)) {
    var cb = temp__5733__auto__;
    var statearr_4722_4724 = state;
    statearr_4722_4724[2] = cljs.core.deref.call(null, cb);
    statearr_4722_4724[1] = blk;
    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
  } else {
    return null;
  }
};
cljs.core.async.impl.ioc_helpers.put_BANG_ = function cljs$core$async$impl$ioc_helpers$put_BANG_(state, blk, c, val) {
  var temp__5733__auto__ = cljs.core.async.impl.protocols.put_BANG_.call(null, c, val, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function(ret_val) {
    var statearr_4725_4727 = state;
    statearr_4725_4727[2] = ret_val;
    statearr_4725_4727[1] = blk;
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
  }));
  if (cljs.core.truth_(temp__5733__auto__)) {
    var cb = temp__5733__auto__;
    var statearr_4726_4728 = state;
    statearr_4726_4728[2] = cljs.core.deref.call(null, cb);
    statearr_4726_4728[1] = blk;
    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
  } else {
    return null;
  }
};
cljs.core.async.impl.ioc_helpers.return_chan = function cljs$core$async$impl$ioc_helpers$return_chan(state, value) {
  var c = state[6];
  if (value == null) {
  } else {
    cljs.core.async.impl.protocols.put_BANG_.call(null, c, value, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function() {
      return null;
    }));
  }
  cljs.core.async.impl.protocols.close_BANG_.call(null, c);
  return c;
};
goog.provide("cljs.core.async.impl.timers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.dispatch");
cljs.core.async.impl.timers.MAX_LEVEL = 15;
cljs.core.async.impl.timers.P = 1 / 2;
cljs.core.async.impl.timers.random_level = function cljs$core$async$impl$timers$random_level(var_args) {
  var G__4750 = arguments.length;
  switch(G__4750) {
    case 0:
      return cljs.core.async.impl.timers.random_level.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.async.impl.timers.random_level.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
cljs.core.async.impl.timers.random_level.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.async.impl.timers.random_level.call(null, 0);
};
cljs.core.async.impl.timers.random_level.cljs$core$IFn$_invoke$arity$1 = function(level) {
  while (true) {
    if (Math.random() < cljs.core.async.impl.timers.P && level < cljs.core.async.impl.timers.MAX_LEVEL) {
      var G__4752 = level + 1;
      level = G__4752;
      continue;
    } else {
      return level;
    }
    break;
  }
};
cljs.core.async.impl.timers.random_level.cljs$lang$maxFixedArity = 1;
cljs.core.async.impl.timers.SkipListNode = function(key, val, forward) {
  this.key = key;
  this.val = val;
  this.forward = forward;
  this.cljs$lang$protocol_mask$partition0$ = 2155872256;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.async.impl.timers.SkipListNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(null, self__.key, new cljs.core.List(null, self__.val, null, 1, null), 2, null);
};
cljs.core.async.impl.timers.SkipListNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.async.impl.timers.SkipListNode.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "key", "key", 124488940, null), cljs.core.with_meta(new cljs.core.Symbol(null, "val", "val", 1769233139, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), new cljs.core.Symbol(null, "forward", "forward", 1083186224, null)], null);
};
cljs.core.async.impl.timers.SkipListNode.cljs$lang$type = true;
cljs.core.async.impl.timers.SkipListNode.cljs$lang$ctorStr = "cljs.core.async.impl.timers/SkipListNode";
cljs.core.async.impl.timers.SkipListNode.cljs$lang$ctorPrWriter = function(this__4369__auto__, writer__4370__auto__, opt__4371__auto__) {
  return cljs.core._write.call(null, writer__4370__auto__, "cljs.core.async.impl.timers/SkipListNode");
};
cljs.core.async.impl.timers.__GT_SkipListNode = function cljs$core$async$impl$timers$__GT_SkipListNode(key, val, forward) {
  return new cljs.core.async.impl.timers.SkipListNode(key, val, forward);
};
cljs.core.async.impl.timers.skip_list_node = function cljs$core$async$impl$timers$skip_list_node(var_args) {
  var G__4754 = arguments.length;
  switch(G__4754) {
    case 1:
      return cljs.core.async.impl.timers.skip_list_node.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 3:
      return cljs.core.async.impl.timers.skip_list_node.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
cljs.core.async.impl.timers.skip_list_node.cljs$core$IFn$_invoke$arity$1 = function(level) {
  return cljs.core.async.impl.timers.skip_list_node.call(null, null, null, level);
};
cljs.core.async.impl.timers.skip_list_node.cljs$core$IFn$_invoke$arity$3 = function(k, v, level) {
  var arr = new Array(level + 1);
  var i_4756 = 0;
  while (true) {
    if (i_4756 < arr.length) {
      arr[i_4756] = null;
      var G__4757 = i_4756 + 1;
      i_4756 = G__4757;
      continue;
    } else {
    }
    break;
  }
  return new cljs.core.async.impl.timers.SkipListNode(k, v, arr);
};
cljs.core.async.impl.timers.skip_list_node.cljs$lang$maxFixedArity = 3;
cljs.core.async.impl.timers.least_greater_node = function cljs$core$async$impl$timers$least_greater_node(var_args) {
  var G__4759 = arguments.length;
  switch(G__4759) {
    case 3:
      return cljs.core.async.impl.timers.least_greater_node.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.async.impl.timers.least_greater_node.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
cljs.core.async.impl.timers.least_greater_node.cljs$core$IFn$_invoke$arity$3 = function(x, k, level) {
  return cljs.core.async.impl.timers.least_greater_node.call(null, x, k, level, null);
};
cljs.core.async.impl.timers.least_greater_node.cljs$core$IFn$_invoke$arity$4 = function(x, k, level, update) {
  while (true) {
    if (!(level < 0)) {
      var x__$1 = function() {
        var x__$1 = x;
        while (true) {
          var temp__5733__auto__ = level < x__$1.forward.length ? x__$1.forward[level] : null;
          if (cljs.core.truth_(temp__5733__auto__)) {
            var x_SINGLEQUOTE_ = temp__5733__auto__;
            if (x_SINGLEQUOTE_.key < k) {
              var G__4761 = x_SINGLEQUOTE_;
              x__$1 = G__4761;
              continue;
            } else {
              return x__$1;
            }
          } else {
            return x__$1;
          }
          break;
        }
      }();
      if (update == null) {
      } else {
        update[level] = x__$1;
      }
      var G__4762 = x__$1;
      var G__4763 = k;
      var G__4764 = level - 1;
      var G__4765 = update;
      x = G__4762;
      k = G__4763;
      level = G__4764;
      update = G__4765;
      continue;
    } else {
      return x;
    }
    break;
  }
};
cljs.core.async.impl.timers.least_greater_node.cljs$lang$maxFixedArity = 4;
cljs.core.async.impl.timers.SkipList = function(header, level) {
  this.header = header;
  this.level = level;
  this.cljs$lang$protocol_mask$partition0$ = 2155872256;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.async.impl.timers.SkipList.prototype.put = function(k, v) {
  var self__ = this;
  var coll = this;
  var update = new Array(cljs.core.async.impl.timers.MAX_LEVEL);
  var x = cljs.core.async.impl.timers.least_greater_node.call(null, self__.header, k, self__.level, update);
  var x__$1 = x.forward[0];
  if (!(x__$1 == null) && x__$1.key === k) {
    return x__$1.val = v;
  } else {
    var new_level = cljs.core.async.impl.timers.random_level.call(null);
    if (new_level > self__.level) {
      var i_4766 = self__.level + 1;
      while (true) {
        if (i_4766 <= new_level + 1) {
          update[i_4766] = self__.header;
          var G__4767 = i_4766 + 1;
          i_4766 = G__4767;
          continue;
        } else {
        }
        break;
      }
      self__.level = new_level;
    } else {
    }
    var x__$2 = cljs.core.async.impl.timers.skip_list_node.call(null, k, v, new Array(new_level));
    var i = 0;
    while (true) {
      if (i <= self__.level) {
        var links_4768 = update[i].forward;
        x__$2.forward[i] = links_4768[i];
        links_4768[i] = x__$2;
        var G__4769 = i + 1;
        i = G__4769;
        continue;
      } else {
        return null;
      }
      break;
    }
  }
};
cljs.core.async.impl.timers.SkipList.prototype.remove = function(k) {
  var self__ = this;
  var coll = this;
  var update = new Array(cljs.core.async.impl.timers.MAX_LEVEL);
  var x = cljs.core.async.impl.timers.least_greater_node.call(null, self__.header, k, self__.level, update);
  var x__$1 = x.forward.length === 0 ? null : x.forward[0];
  if (!(x__$1 == null) && x__$1.key === k) {
    var i_4770 = 0;
    while (true) {
      if (i_4770 <= self__.level) {
        var links_4771 = update[i_4770].forward;
        if (x__$1 === (i_4770 < links_4771.length ? links_4771[i_4770] : null)) {
          links_4771[i_4770] = x__$1.forward[i_4770];
          var G__4772 = i_4770 + 1;
          i_4770 = G__4772;
          continue;
        } else {
          var G__4773 = i_4770 + 1;
          i_4770 = G__4773;
          continue;
        }
      } else {
      }
      break;
    }
    while (true) {
      if (0 < self__.level && self__.level < self__.header.forward.length && self__.header.forward[self__.level] == null) {
        self__.level = self__.level - 1;
        continue;
      } else {
        return null;
      }
      break;
    }
  } else {
    return null;
  }
};
cljs.core.async.impl.timers.SkipList.prototype.ceilingEntry = function(k) {
  var self__ = this;
  var coll = this;
  var x = self__.header;
  var level__$1 = self__.level;
  while (true) {
    if (!(level__$1 < 0)) {
      var nx = function() {
        var x__$1 = x;
        while (true) {
          var x_SINGLEQUOTE_ = level__$1 < x__$1.forward.length ? x__$1.forward[level__$1] : null;
          if (!(x_SINGLEQUOTE_ == null)) {
            if (x_SINGLEQUOTE_.key > k) {
              return x__$1;
            } else {
              var G__4774 = x_SINGLEQUOTE_;
              x__$1 = G__4774;
              continue;
            }
          } else {
            if (level__$1 === 0) {
              return x__$1;
            } else {
              return null;
            }
          }
          break;
        }
      }();
      if (cljs.core.truth_(nx)) {
        var G__4775 = nx;
        var G__4776 = level__$1 - 1;
        x = G__4775;
        level__$1 = G__4776;
        continue;
      } else {
        var G__4777 = x;
        var G__4778 = level__$1 - 1;
        x = G__4777;
        level__$1 = G__4778;
        continue;
      }
    } else {
      if (cljs.core._EQ_.call(null, x.key, k)) {
        return x;
      } else {
        return x.forward[0];
      }
    }
    break;
  }
};
cljs.core.async.impl.timers.SkipList.prototype.floorEntry = function(k) {
  var self__ = this;
  var coll = this;
  var x = self__.header;
  var level__$1 = self__.level;
  while (true) {
    if (!(level__$1 < 0)) {
      var nx = function() {
        var x__$1 = x;
        while (true) {
          var x_SINGLEQUOTE_ = level__$1 < x__$1.forward.length ? x__$1.forward[level__$1] : null;
          if (!(x_SINGLEQUOTE_ == null)) {
            if (x_SINGLEQUOTE_.key > k) {
              return x__$1;
            } else {
              var G__4779 = x_SINGLEQUOTE_;
              x__$1 = G__4779;
              continue;
            }
          } else {
            if (level__$1 === 0) {
              return x__$1;
            } else {
              return null;
            }
          }
          break;
        }
      }();
      if (cljs.core.truth_(nx)) {
        var G__4780 = nx;
        var G__4781 = level__$1 - 1;
        x = G__4780;
        level__$1 = G__4781;
        continue;
      } else {
        var G__4782 = x;
        var G__4783 = level__$1 - 1;
        x = G__4782;
        level__$1 = G__4783;
        continue;
      }
    } else {
      if (x === self__.header) {
        return null;
      } else {
        return x;
      }
    }
    break;
  }
};
cljs.core.async.impl.timers.SkipList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var iter = function cljs$core$async$impl$timers$iter(node) {
    return new cljs.core.LazySeq(null, function() {
      if (node == null) {
        return null;
      } else {
        return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [node.key, node.val], null), cljs$core$async$impl$timers$iter.call(null, node.forward[0]));
      }
    }, null, null);
  };
  return iter.call(null, self__.header.forward[0]);
};
cljs.core.async.impl.timers.SkipList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var self__ = this;
  var coll__$1 = this;
  var pr_pair = function(keyval) {
    return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "", " ", "", opts, keyval);
  };
  return cljs.core.pr_sequential_writer.call(null, writer, pr_pair, "{", ", ", "}", opts, coll__$1);
};
cljs.core.async.impl.timers.SkipList.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "header", "header", 1759972661, null), cljs.core.with_meta(new cljs.core.Symbol(null, "level", "level", -1363938217, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.async.impl.timers.SkipList.cljs$lang$type = true;
cljs.core.async.impl.timers.SkipList.cljs$lang$ctorStr = "cljs.core.async.impl.timers/SkipList";
cljs.core.async.impl.timers.SkipList.cljs$lang$ctorPrWriter = function(this__4369__auto__, writer__4370__auto__, opt__4371__auto__) {
  return cljs.core._write.call(null, writer__4370__auto__, "cljs.core.async.impl.timers/SkipList");
};
cljs.core.async.impl.timers.__GT_SkipList = function cljs$core$async$impl$timers$__GT_SkipList(header, level) {
  return new cljs.core.async.impl.timers.SkipList(header, level);
};
cljs.core.async.impl.timers.skip_list = function cljs$core$async$impl$timers$skip_list() {
  return new cljs.core.async.impl.timers.SkipList(cljs.core.async.impl.timers.skip_list_node.call(null, 0), 0);
};
cljs.core.async.impl.timers.timeouts_map = cljs.core.async.impl.timers.skip_list.call(null);
cljs.core.async.impl.timers.TIMEOUT_RESOLUTION_MS = 10;
cljs.core.async.impl.timers.timeout = function cljs$core$async$impl$timers$timeout(msecs) {
  var timeout = (new Date).valueOf() + msecs;
  var me = cljs.core.async.impl.timers.timeouts_map.ceilingEntry(timeout);
  var or__4126__auto__ = cljs.core.truth_(function() {
    var and__4115__auto__ = me;
    if (cljs.core.truth_(and__4115__auto__)) {
      return me.key < timeout + cljs.core.async.impl.timers.TIMEOUT_RESOLUTION_MS;
    } else {
      return and__4115__auto__;
    }
  }()) ? me.val : null;
  if (cljs.core.truth_(or__4126__auto__)) {
    return or__4126__auto__;
  } else {
    var timeout_channel = cljs.core.async.impl.channels.chan.call(null, null);
    cljs.core.async.impl.timers.timeouts_map.put(timeout, timeout_channel);
    cljs.core.async.impl.dispatch.queue_delay.call(null, function() {
      cljs.core.async.impl.timers.timeouts_map.remove(timeout);
      return cljs.core.async.impl.protocols.close_BANG_.call(null, timeout_channel);
    }, msecs);
    return timeout_channel;
  }
};
goog.provide("cljs.core.async");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.timers");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.ioc_helpers");
goog.require("goog.array");
cljs.core.async.fn_handler = function cljs$core$async$fn_handler(var_args) {
  var G__4854 = arguments.length;
  switch(G__4854) {
    case 1:
      return cljs.core.async.fn_handler.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.async.fn_handler.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
cljs.core.async.fn_handler.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return cljs.core.async.fn_handler.call(null, f, true);
};
cljs.core.async.fn_handler.cljs$core$IFn$_invoke$arity$2 = function(f, blockable) {
  if (typeof cljs !== "undefined" && typeof cljs.core !== "undefined" && typeof cljs.core.async !== "undefined" && typeof cljs.core.async.t_cljs$core$async4855 !== "undefined") {
  } else {
    cljs.core.async.t_cljs$core$async4855 = function(f, blockable, meta4856) {
      this.f = f;
      this.blockable = blockable;
      this.meta4856 = meta4856;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.core.async.t_cljs$core$async4855.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_4857, meta4856__$1) {
      var self__ = this;
      var _4857__$1 = this;
      return new cljs.core.async.t_cljs$core$async4855(self__.f, self__.blockable, meta4856__$1);
    };
    cljs.core.async.t_cljs$core$async4855.prototype.cljs$core$IMeta$_meta$arity$1 = function(_4857) {
      var self__ = this;
      var _4857__$1 = this;
      return self__.meta4856;
    };
    cljs.core.async.t_cljs$core$async4855.prototype.cljs$core$async$impl$protocols$Handler$ = cljs.core.PROTOCOL_SENTINEL;
    cljs.core.async.t_cljs$core$async4855.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return true;
    };
    cljs.core.async.t_cljs$core$async4855.prototype.cljs$core$async$impl$protocols$Handler$blockable_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.blockable;
    };
    cljs.core.async.t_cljs$core$async4855.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.f;
    };
    cljs.core.async.t_cljs$core$async4855.getBasis = function() {
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "f", "f", 43394975, null), new cljs.core.Symbol(null, "blockable", "blockable", -28395259, null), new cljs.core.Symbol(null, "meta4856", "meta4856", -221095595, null)], null);
    };
    cljs.core.async.t_cljs$core$async4855.cljs$lang$type = true;
    cljs.core.async.t_cljs$core$async4855.cljs$lang$ctorStr = "cljs.core.async/t_cljs$core$async4855";
    cljs.core.async.t_cljs$core$async4855.cljs$lang$ctorPrWriter = function(this__4369__auto__, writer__4370__auto__, opt__4371__auto__) {
      return cljs.core._write.call(null, writer__4370__auto__, "cljs.core.async/t_cljs$core$async4855");
    };
    cljs.core.async.__GT_t_cljs$core$async4855 = function cljs$core$async$__GT_t_cljs$core$async4855(f__$1, blockable__$1, meta4856) {
      return new cljs.core.async.t_cljs$core$async4855(f__$1, blockable__$1, meta4856);
    };
  }
  return new cljs.core.async.t_cljs$core$async4855(f, blockable, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.fn_handler.cljs$lang$maxFixedArity = 2;
cljs.core.async.buffer = function cljs$core$async$buffer(n) {
  return cljs.core.async.impl.buffers.fixed_buffer.call(null, n);
};
cljs.core.async.dropping_buffer = function cljs$core$async$dropping_buffer(n) {
  return cljs.core.async.impl.buffers.dropping_buffer.call(null, n);
};
cljs.core.async.sliding_buffer = function cljs$core$async$sliding_buffer(n) {
  return cljs.core.async.impl.buffers.sliding_buffer.call(null, n);
};
cljs.core.async.unblocking_buffer_QMARK_ = function cljs$core$async$unblocking_buffer_QMARK_(buff) {
  if (!(buff == null)) {
    if (false || cljs.core.PROTOCOL_SENTINEL === buff.cljs$core$async$impl$protocols$UnblockingBuffer$) {
      return true;
    } else {
      if (!buff.cljs$lang$protocol_mask$partition$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.async.impl.protocols.UnblockingBuffer, buff);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.async.impl.protocols.UnblockingBuffer, buff);
  }
};
cljs.core.async.chan = function cljs$core$async$chan(var_args) {
  var G__4861 = arguments.length;
  switch(G__4861) {
    case 0:
      return cljs.core.async.chan.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.async.chan.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.async.chan.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.chan.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
cljs.core.async.chan.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.async.chan.call(null, null);
};
cljs.core.async.chan.cljs$core$IFn$_invoke$arity$1 = function(buf_or_n) {
  return cljs.core.async.chan.call(null, buf_or_n, null, null);
};
cljs.core.async.chan.cljs$core$IFn$_invoke$arity$2 = function(buf_or_n, xform) {
  return cljs.core.async.chan.call(null, buf_or_n, xform, null);
};
cljs.core.async.chan.cljs$core$IFn$_invoke$arity$3 = function(buf_or_n, xform, ex_handler) {
  var buf_or_n__$1 = cljs.core._EQ_.call(null, buf_or_n, 0) ? null : buf_or_n;
  if (cljs.core.truth_(xform)) {
    if (cljs.core.truth_(buf_or_n__$1)) {
    } else {
      throw new Error(["Assert failed: ", "buffer must be supplied when transducer is", "\n", "buf-or-n"].join(""));
    }
  } else {
  }
  return cljs.core.async.impl.channels.chan.call(null, typeof buf_or_n__$1 === "number" ? cljs.core.async.buffer.call(null, buf_or_n__$1) : buf_or_n__$1, xform, ex_handler);
};
cljs.core.async.chan.cljs$lang$maxFixedArity = 3;
cljs.core.async.promise_chan = function cljs$core$async$promise_chan(var_args) {
  var G__4864 = arguments.length;
  switch(G__4864) {
    case 0:
      return cljs.core.async.promise_chan.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.async.promise_chan.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.async.promise_chan.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
cljs.core.async.promise_chan.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.async.promise_chan.call(null, null);
};
cljs.core.async.promise_chan.cljs$core$IFn$_invoke$arity$1 = function(xform) {
  return cljs.core.async.promise_chan.call(null, xform, null);
};
cljs.core.async.promise_chan.cljs$core$IFn$_invoke$arity$2 = function(xform, ex_handler) {
  return cljs.core.async.chan.call(null, cljs.core.async.impl.buffers.promise_buffer.call(null), xform, ex_handler);
};
cljs.core.async.promise_chan.cljs$lang$maxFixedArity = 2;
cljs.core.async.timeout = function cljs$core$async$timeout(msecs) {
  return cljs.core.async.impl.timers.timeout.call(null, msecs);
};
cljs.core.async._LT__BANG_ = function cljs$core$async$_LT__BANG_(port) {
  throw new Error("\x3c! used not in (go ...) block");
};
cljs.core.async.take_BANG_ = function cljs$core$async$take_BANG_(var_args) {
  var G__4867 = arguments.length;
  switch(G__4867) {
    case 2:
      return cljs.core.async.take_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.take_BANG_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
cljs.core.async.take_BANG_.cljs$core$IFn$_invoke$arity$2 = function(port, fn1) {
  return cljs.core.async.take_BANG_.call(null, port, fn1, true);
};
cljs.core.async.take_BANG_.cljs$core$IFn$_invoke$arity$3 = function(port, fn1, on_caller_QMARK_) {
  var ret = cljs.core.async.impl.protocols.take_BANG_.call(null, port, cljs.core.async.fn_handler.call(null, fn1));
  if (cljs.core.truth_(ret)) {
    var val_4869 = cljs.core.deref.call(null, ret);
    if (cljs.core.truth_(on_caller_QMARK_)) {
      fn1.call(null, val_4869);
    } else {
      cljs.core.async.impl.dispatch.run.call(null, function() {
        return fn1.call(null, val_4869);
      });
    }
  } else {
  }
  return null;
};
cljs.core.async.take_BANG_.cljs$lang$maxFixedArity = 3;
cljs.core.async.nop = function cljs$core$async$nop(_) {
  return null;
};
cljs.core.async.fhnop = cljs.core.async.fn_handler.call(null, cljs.core.async.nop);
cljs.core.async._GT__BANG_ = function cljs$core$async$_GT__BANG_(port, val) {
  throw new Error("\x3e! used not in (go ...) block");
};
cljs.core.async.put_BANG_ = function cljs$core$async$put_BANG_(var_args) {
  var G__4871 = arguments.length;
  switch(G__4871) {
    case 2:
      return cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$2 = function(port, val) {
  var temp__5733__auto__ = cljs.core.async.impl.protocols.put_BANG_.call(null, port, val, cljs.core.async.fhnop);
  if (cljs.core.truth_(temp__5733__auto__)) {
    var ret = temp__5733__auto__;
    return cljs.core.deref.call(null, ret);
  } else {
    return true;
  }
};
cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$3 = function(port, val, fn1) {
  return cljs.core.async.put_BANG_.call(null, port, val, fn1, true);
};
cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$4 = function(port, val, fn1, on_caller_QMARK_) {
  var temp__5733__auto__ = cljs.core.async.impl.protocols.put_BANG_.call(null, port, val, cljs.core.async.fn_handler.call(null, fn1));
  if (cljs.core.truth_(temp__5733__auto__)) {
    var retb = temp__5733__auto__;
    var ret = cljs.core.deref.call(null, retb);
    if (cljs.core.truth_(on_caller_QMARK_)) {
      fn1.call(null, ret);
    } else {
      cljs.core.async.impl.dispatch.run.call(null, function() {
        return fn1.call(null, ret);
      });
    }
    return ret;
  } else {
    return true;
  }
};
cljs.core.async.put_BANG_.cljs$lang$maxFixedArity = 4;
cljs.core.async.close_BANG_ = function cljs$core$async$close_BANG_(port) {
  return cljs.core.async.impl.protocols.close_BANG_.call(null, port);
};
cljs.core.async.random_array = function cljs$core$async$random_array(n) {
  var a = new Array(n);
  var n__4613__auto___4873 = n;
  var x_4874 = 0;
  while (true) {
    if (x_4874 < n__4613__auto___4873) {
      a[x_4874] = x_4874;
      var G__4875 = x_4874 + 1;
      x_4874 = G__4875;
      continue;
    } else {
    }
    break;
  }
  goog.array.shuffle(a);
  return a;
};
cljs.core.async.alt_flag = function cljs$core$async$alt_flag() {
  var flag = cljs.core.atom.call(null, true);
  if (typeof cljs !== "undefined" && typeof cljs.core !== "undefined" && typeof cljs.core.async !== "undefined" && typeof cljs.core.async.t_cljs$core$async4876 !== "undefined") {
  } else {
    cljs.core.async.t_cljs$core$async4876 = function(flag, meta4877) {
      this.flag = flag;
      this.meta4877 = meta4877;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.core.async.t_cljs$core$async4876.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_4878, meta4877__$1) {
      var self__ = this;
      var _4878__$1 = this;
      return new cljs.core.async.t_cljs$core$async4876(self__.flag, meta4877__$1);
    };
    cljs.core.async.t_cljs$core$async4876.prototype.cljs$core$IMeta$_meta$arity$1 = function(_4878) {
      var self__ = this;
      var _4878__$1 = this;
      return self__.meta4877;
    };
    cljs.core.async.t_cljs$core$async4876.prototype.cljs$core$async$impl$protocols$Handler$ = cljs.core.PROTOCOL_SENTINEL;
    cljs.core.async.t_cljs$core$async4876.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.deref.call(null, self__.flag);
    };
    cljs.core.async.t_cljs$core$async4876.prototype.cljs$core$async$impl$protocols$Handler$blockable_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return true;
    };
    cljs.core.async.t_cljs$core$async4876.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      cljs.core.reset_BANG_.call(null, self__.flag, null);
      return true;
    };
    cljs.core.async.t_cljs$core$async4876.getBasis = function() {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "flag", "flag", -1565787888, null), new cljs.core.Symbol(null, "meta4877", "meta4877", 1736514930, null)], null);
    };
    cljs.core.async.t_cljs$core$async4876.cljs$lang$type = true;
    cljs.core.async.t_cljs$core$async4876.cljs$lang$ctorStr = "cljs.core.async/t_cljs$core$async4876";
    cljs.core.async.t_cljs$core$async4876.cljs$lang$ctorPrWriter = function(this__4369__auto__, writer__4370__auto__, opt__4371__auto__) {
      return cljs.core._write.call(null, writer__4370__auto__, "cljs.core.async/t_cljs$core$async4876");
    };
    cljs.core.async.__GT_t_cljs$core$async4876 = function cljs$core$async$alt_flag_$___GT_t_cljs$core$async4876(flag__$1, meta4877) {
      return new cljs.core.async.t_cljs$core$async4876(flag__$1, meta4877);
    };
  }
  return new cljs.core.async.t_cljs$core$async4876(flag, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.alt_handler = function cljs$core$async$alt_handler(flag, cb) {
  if (typeof cljs !== "undefined" && typeof cljs.core !== "undefined" && typeof cljs.core.async !== "undefined" && typeof cljs.core.async.t_cljs$core$async4879 !== "undefined") {
  } else {
    cljs.core.async.t_cljs$core$async4879 = function(flag, cb, meta4880) {
      this.flag = flag;
      this.cb = cb;
      this.meta4880 = meta4880;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.core.async.t_cljs$core$async4879.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_4881, meta4880__$1) {
      var self__ = this;
      var _4881__$1 = this;
      return new cljs.core.async.t_cljs$core$async4879(self__.flag, self__.cb, meta4880__$1);
    };
    cljs.core.async.t_cljs$core$async4879.prototype.cljs$core$IMeta$_meta$arity$1 = function(_4881) {
      var self__ = this;
      var _4881__$1 = this;
      return self__.meta4880;
    };
    cljs.core.async.t_cljs$core$async4879.prototype.cljs$core$async$impl$protocols$Handler$ = cljs.core.PROTOCOL_SENTINEL;
    cljs.core.async.t_cljs$core$async4879.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.active_QMARK_.call(null, self__.flag);
    };
    cljs.core.async.t_cljs$core$async4879.prototype.cljs$core$async$impl$protocols$Handler$blockable_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return true;
    };
    cljs.core.async.t_cljs$core$async4879.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      cljs.core.async.impl.protocols.commit.call(null, self__.flag);
      return self__.cb;
    };
    cljs.core.async.t_cljs$core$async4879.getBasis = function() {
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "flag", "flag", -1565787888, null), new cljs.core.Symbol(null, "cb", "cb", -2064487928, null), new cljs.core.Symbol(null, "meta4880", "meta4880", -2001085633, null)], null);
    };
    cljs.core.async.t_cljs$core$async4879.cljs$lang$type = true;
    cljs.core.async.t_cljs$core$async4879.cljs$lang$ctorStr = "cljs.core.async/t_cljs$core$async4879";
    cljs.core.async.t_cljs$core$async4879.cljs$lang$ctorPrWriter = function(this__4369__auto__, writer__4370__auto__, opt__4371__auto__) {
      return cljs.core._write.call(null, writer__4370__auto__, "cljs.core.async/t_cljs$core$async4879");
    };
    cljs.core.async.__GT_t_cljs$core$async4879 = function cljs$core$async$alt_handler_$___GT_t_cljs$core$async4879(flag__$1, cb__$1, meta4880) {
      return new cljs.core.async.t_cljs$core$async4879(flag__$1, cb__$1, meta4880);
    };
  }
  return new cljs.core.async.t_cljs$core$async4879(flag, cb, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.do_alts = function cljs$core$async$do_alts(fret, ports, opts) {
  if (cljs.core.count.call(null, ports) > 0) {
  } else {
    throw new Error(["Assert failed: ", "alts must have at least one channel operation", "\n", "(pos? (count ports))"].join(""));
  }
  var flag = cljs.core.async.alt_flag.call(null);
  var n = cljs.core.count.call(null, ports);
  var idxs = cljs.core.async.random_array.call(null, n);
  var priority = (new cljs.core.Keyword(null, "priority", "priority", 1431093715)).cljs$core$IFn$_invoke$arity$1(opts);
  var ret = function() {
    var i = 0;
    while (true) {
      if (i < n) {
        var idx = cljs.core.truth_(priority) ? i : idxs[i];
        var port = cljs.core.nth.call(null, ports, idx);
        var wport = cljs.core.vector_QMARK_.call(null, port) ? port.call(null, 0) : null;
        var vbox = cljs.core.truth_(wport) ? function() {
          var val = port.call(null, 1);
          return cljs.core.async.impl.protocols.put_BANG_.call(null, wport, val, cljs.core.async.alt_handler.call(null, flag, function(i, val, idx, port, wport, flag, n, idxs, priority) {
            return function(p1__4882_SHARP_) {
              return fret.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__4882_SHARP_, wport], null));
            };
          }(i, val, idx, port, wport, flag, n, idxs, priority)));
        }() : cljs.core.async.impl.protocols.take_BANG_.call(null, port, cljs.core.async.alt_handler.call(null, flag, function(i, idx, port, wport, flag, n, idxs, priority) {
          return function(p1__4883_SHARP_) {
            return fret.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__4883_SHARP_, port], null));
          };
        }(i, idx, port, wport, flag, n, idxs, priority)));
        if (cljs.core.truth_(vbox)) {
          return cljs.core.async.impl.channels.box.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.deref.call(null, vbox), function() {
            var or__4126__auto__ = wport;
            if (cljs.core.truth_(or__4126__auto__)) {
              return or__4126__auto__;
            } else {
              return port;
            }
          }()], null));
        } else {
          var G__4884 = i + 1;
          i = G__4884;
          continue;
        }
      } else {
        return null;
      }
      break;
    }
  }();
  var or__4126__auto__ = ret;
  if (cljs.core.truth_(or__4126__auto__)) {
    return or__4126__auto__;
  } else {
    if (cljs.core.contains_QMARK_.call(null, opts, new cljs.core.Keyword(null, "default", "default", -1987822328))) {
      var temp__5735__auto__ = function() {
        var and__4115__auto__ = cljs.core.async.impl.protocols.active_QMARK_.call(null, flag);
        if (cljs.core.truth_(and__4115__auto__)) {
          return cljs.core.async.impl.protocols.commit.call(null, flag);
        } else {
          return and__4115__auto__;
        }
      }();
      if (cljs.core.truth_(temp__5735__auto__)) {
        var got = temp__5735__auto__;
        return cljs.core.async.impl.channels.box.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.Keyword(null, "default", "default", -1987822328)).cljs$core$IFn$_invoke$arity$1(opts), new cljs.core.Keyword(null, "default", "default", -1987822328)], null));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }
};
cljs.core.async.alts_BANG_ = function cljs$core$async$alts_BANG_(var_args) {
  var args__4742__auto__ = [];
  var len__4736__auto___4890 = arguments.length;
  var i__4737__auto___4891 = 0;
  while (true) {
    if (i__4737__auto___4891 < len__4736__auto___4890) {
      args__4742__auto__.push(arguments[i__4737__auto___4891]);
      var G__4892 = i__4737__auto___4891 + 1;
      i__4737__auto___4891 = G__4892;
      continue;
    } else {
    }
    break;
  }
  var argseq__4743__auto__ = 1 < args__4742__auto__.length ? new cljs.core.IndexedSeq(args__4742__auto__.slice(1), 0, null) : null;
  return cljs.core.async.alts_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__4743__auto__);
};
cljs.core.async.alts_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(ports, p__4887) {
  var map__4888 = p__4887;
  var map__4888__$1 = (!(map__4888 == null) ? map__4888.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === map__4888.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__4888) : map__4888;
  var opts = map__4888__$1;
  throw new Error("alts! used not in (go ...) block");
};
cljs.core.async.alts_BANG_.cljs$lang$maxFixedArity = 1;
cljs.core.async.alts_BANG_.cljs$lang$applyTo = function(seq4885) {
  var G__4886 = cljs.core.first.call(null, seq4885);
  var seq4885__$1 = cljs.core.next.call(null, seq4885);
  var self__4723__auto__ = this;
  return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__4886, seq4885__$1);
};
cljs.core.async.offer_BANG_ = function cljs$core$async$offer_BANG_(port, val) {
  var ret = cljs.core.async.impl.protocols.put_BANG_.call(null, port, val, cljs.core.async.fn_handler.call(null, cljs.core.async.nop, false));
  if (cljs.core.truth_(ret)) {
    return cljs.core.deref.call(null, ret);
  } else {
    return null;
  }
};
cljs.core.async.poll_BANG_ = function cljs$core$async$poll_BANG_(port) {
  var ret = cljs.core.async.impl.protocols.take_BANG_.call(null, port, cljs.core.async.fn_handler.call(null, cljs.core.async.nop, false));
  if (cljs.core.truth_(ret)) {
    return cljs.core.deref.call(null, ret);
  } else {
    return null;
  }
};
cljs.core.async.pipe = function cljs$core$async$pipe(var_args) {
  var G__4894 = arguments.length;
  switch(G__4894) {
    case 2:
      return cljs.core.async.pipe.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.pipe.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
cljs.core.async.pipe.cljs$core$IFn$_invoke$arity$2 = function(from, to) {
  return cljs.core.async.pipe.call(null, from, to, true);
};
cljs.core.async.pipe.cljs$core$IFn$_invoke$arity$3 = function(from, to, close_QMARK_) {
  var c__4794__auto___4941 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function() {
    var f__4795__auto__ = function() {
      var switch__4702__auto__ = function(state_4918) {
        var state_val_4919 = state_4918[1];
        if (state_val_4919 === 7) {
          var inst_4914 = state_4918[2];
          var state_4918__$1 = state_4918;
          var statearr_4920_4942 = state_4918__$1;
          statearr_4920_4942[2] = inst_4914;
          statearr_4920_4942[1] = 3;
          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
        } else {
          if (state_val_4919 === 1) {
            var state_4918__$1 = state_4918;
            var statearr_4921_4943 = state_4918__$1;
            statearr_4921_4943[2] = null;
            statearr_4921_4943[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
          } else {
            if (state_val_4919 === 4) {
              var inst_4897 = state_4918[7];
              var inst_4897__$1 = state_4918[2];
              var inst_4898 = inst_4897__$1 == null;
              var state_4918__$1 = function() {
                var statearr_4922 = state_4918;
                statearr_4922[7] = inst_4897__$1;
                return statearr_4922;
              }();
              if (cljs.core.truth_(inst_4898)) {
                var statearr_4923_4944 = state_4918__$1;
                statearr_4923_4944[1] = 5;
              } else {
                var statearr_4924_4945 = state_4918__$1;
                statearr_4924_4945[1] = 6;
              }
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_4919 === 13) {
                var state_4918__$1 = state_4918;
                var statearr_4925_4946 = state_4918__$1;
                statearr_4925_4946[2] = null;
                statearr_4925_4946[1] = 14;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_4919 === 6) {
                  var inst_4897 = state_4918[7];
                  var state_4918__$1 = state_4918;
                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_4918__$1, 11, to, inst_4897);
                } else {
                  if (state_val_4919 === 3) {
                    var inst_4916 = state_4918[2];
                    var state_4918__$1 = state_4918;
                    return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_4918__$1, inst_4916);
                  } else {
                    if (state_val_4919 === 12) {
                      var state_4918__$1 = state_4918;
                      var statearr_4926_4947 = state_4918__$1;
                      statearr_4926_4947[2] = null;
                      statearr_4926_4947[1] = 2;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_4919 === 2) {
                        var state_4918__$1 = state_4918;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_4918__$1, 4, from);
                      } else {
                        if (state_val_4919 === 11) {
                          var inst_4907 = state_4918[2];
                          var state_4918__$1 = state_4918;
                          if (cljs.core.truth_(inst_4907)) {
                            var statearr_4927_4948 = state_4918__$1;
                            statearr_4927_4948[1] = 12;
                          } else {
                            var statearr_4928_4949 = state_4918__$1;
                            statearr_4928_4949[1] = 13;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_4919 === 9) {
                            var state_4918__$1 = state_4918;
                            var statearr_4929_4950 = state_4918__$1;
                            statearr_4929_4950[2] = null;
                            statearr_4929_4950[1] = 10;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_4919 === 5) {
                              var state_4918__$1 = state_4918;
                              if (cljs.core.truth_(close_QMARK_)) {
                                var statearr_4930_4951 = state_4918__$1;
                                statearr_4930_4951[1] = 8;
                              } else {
                                var statearr_4931_4952 = state_4918__$1;
                                statearr_4931_4952[1] = 9;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_4919 === 14) {
                                var inst_4912 = state_4918[2];
                                var state_4918__$1 = state_4918;
                                var statearr_4932_4953 = state_4918__$1;
                                statearr_4932_4953[2] = inst_4912;
                                statearr_4932_4953[1] = 7;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_4919 === 10) {
                                  var inst_4904 = state_4918[2];
                                  var state_4918__$1 = state_4918;
                                  var statearr_4933_4954 = state_4918__$1;
                                  statearr_4933_4954[2] = inst_4904;
                                  statearr_4933_4954[1] = 7;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_4919 === 8) {
                                    var inst_4901 = cljs.core.async.close_BANG_.call(null, to);
                                    var state_4918__$1 = state_4918;
                                    var statearr_4934_4955 = state_4918__$1;
                                    statearr_4934_4955[2] = inst_4901;
                                    statearr_4934_4955[1] = 10;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      return function() {
        var cljs$core$async$state_machine__4703__auto__ = null;
        var cljs$core$async$state_machine__4703__auto____0 = function() {
          var statearr_4935 = [null, null, null, null, null, null, null, null];
          statearr_4935[0] = cljs$core$async$state_machine__4703__auto__;
          statearr_4935[1] = 1;
          return statearr_4935;
        };
        var cljs$core$async$state_machine__4703__auto____1 = function(state_4918) {
          while (true) {
            var ret_value__4704__auto__ = function() {
              try {
                while (true) {
                  var result__4705__auto__ = switch__4702__auto__.call(null, state_4918);
                  if (cljs.core.keyword_identical_QMARK_.call(null, result__4705__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    continue;
                  } else {
                    return result__4705__auto__;
                  }
                  break;
                }
              } catch (e4936) {
                var ex__4706__auto__ = e4936;
                var statearr_4937_4956 = state_4918;
                statearr_4937_4956[2] = ex__4706__auto__;
                if (cljs.core.seq.call(null, state_4918[4])) {
                  var statearr_4938_4957 = state_4918;
                  statearr_4938_4957[1] = cljs.core.first.call(null, state_4918[4]);
                } else {
                  throw ex__4706__auto__;
                }
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              }
            }();
            if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__4704__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
              var G__4958 = state_4918;
              state_4918 = G__4958;
              continue;
            } else {
              return ret_value__4704__auto__;
            }
            break;
          }
        };
        cljs$core$async$state_machine__4703__auto__ = function(state_4918) {
          switch(arguments.length) {
            case 0:
              return cljs$core$async$state_machine__4703__auto____0.call(this);
            case 1:
              return cljs$core$async$state_machine__4703__auto____1.call(this, state_4918);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        cljs$core$async$state_machine__4703__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__4703__auto____0;
        cljs$core$async$state_machine__4703__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__4703__auto____1;
        return cljs$core$async$state_machine__4703__auto__;
      }();
    }();
    var state__4796__auto__ = function() {
      var statearr_4939 = f__4795__auto__.call(null);
      statearr_4939[6] = c__4794__auto___4941;
      return statearr_4939;
    }();
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__4796__auto__);
  });
  return to;
};
cljs.core.async.pipe.cljs$lang$maxFixedArity = 3;
cljs.core.async.pipeline_STAR_ = function cljs$core$async$pipeline_STAR_(n, to, xf, from, close_QMARK_, ex_handler, type) {
  if (n > 0) {
  } else {
    throw new Error("Assert failed: (pos? n)");
  }
  var jobs = cljs.core.async.chan.call(null, n);
  var results = cljs.core.async.chan.call(null, n);
  var process = function(p__4959) {
    var vec__4960 = p__4959;
    var v = cljs.core.nth.call(null, vec__4960, 0, null);
    var p = cljs.core.nth.call(null, vec__4960, 1, null);
    var job = vec__4960;
    if (job == null) {
      cljs.core.async.close_BANG_.call(null, results);
      return null;
    } else {
      var res = cljs.core.async.chan.call(null, 1, xf, ex_handler);
      var c__4794__auto___5136 = cljs.core.async.chan.call(null, 1);
      cljs.core.async.impl.dispatch.run.call(null, function() {
        var f__4795__auto__ = function() {
          var switch__4702__auto__ = function(state_4967) {
            var state_val_4968 = state_4967[1];
            if (state_val_4968 === 1) {
              var state_4967__$1 = state_4967;
              return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_4967__$1, 2, res, v);
            } else {
              if (state_val_4968 === 2) {
                var inst_4964 = state_4967[2];
                var inst_4965 = cljs.core.async.close_BANG_.call(null, res);
                var state_4967__$1 = function() {
                  var statearr_4969 = state_4967;
                  statearr_4969[7] = inst_4964;
                  return statearr_4969;
                }();
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_4967__$1, inst_4965);
              } else {
                return null;
              }
            }
          };
          return function() {
            var cljs$core$async$pipeline_STAR__$_state_machine__4703__auto__ = null;
            var cljs$core$async$pipeline_STAR__$_state_machine__4703__auto____0 = function() {
              var statearr_4970 = [null, null, null, null, null, null, null, null];
              statearr_4970[0] = cljs$core$async$pipeline_STAR__$_state_machine__4703__auto__;
              statearr_4970[1] = 1;
              return statearr_4970;
            };
            var cljs$core$async$pipeline_STAR__$_state_machine__4703__auto____1 = function(state_4967) {
              while (true) {
                var ret_value__4704__auto__ = function() {
                  try {
                    while (true) {
                      var result__4705__auto__ = switch__4702__auto__.call(null, state_4967);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__4705__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__4705__auto__;
                      }
                      break;
                    }
                  } catch (e4971) {
                    var ex__4706__auto__ = e4971;
                    var statearr_4972_5137 = state_4967;
                    statearr_4972_5137[2] = ex__4706__auto__;
                    if (cljs.core.seq.call(null, state_4967[4])) {
                      var statearr_4973_5138 = state_4967;
                      statearr_4973_5138[1] = cljs.core.first.call(null, state_4967[4]);
                    } else {
                      throw ex__4706__auto__;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__4704__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__5139 = state_4967;
                  state_4967 = G__5139;
                  continue;
                } else {
                  return ret_value__4704__auto__;
                }
                break;
              }
            };
            cljs$core$async$pipeline_STAR__$_state_machine__4703__auto__ = function(state_4967) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$pipeline_STAR__$_state_machine__4703__auto____0.call(this);
                case 1:
                  return cljs$core$async$pipeline_STAR__$_state_machine__4703__auto____1.call(this, state_4967);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$pipeline_STAR__$_state_machine__4703__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$pipeline_STAR__$_state_machine__4703__auto____0;
            cljs$core$async$pipeline_STAR__$_state_machine__4703__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$pipeline_STAR__$_state_machine__4703__auto____1;
            return cljs$core$async$pipeline_STAR__$_state_machine__4703__auto__;
          }();
        }();
        var state__4796__auto__ = function() {
          var statearr_4974 = f__4795__auto__.call(null);
          statearr_4974[6] = c__4794__auto___5136;
          return statearr_4974;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__4796__auto__);
      });
      cljs.core.async.put_BANG_.call(null, p, res);
      return true;
    }
  };
  var async = function(p__4975) {
    var vec__4976 = p__4975;
    var v = cljs.core.nth.call(null, vec__4976, 0, null);
    var p = cljs.core.nth.call(null, vec__4976, 1, null);
    var job = vec__4976;
    if (job == null) {
      cljs.core.async.close_BANG_.call(null, results);
      return null;
    } else {
      var res = cljs.core.async.chan.call(null, 1);
      xf.call(null, v, res);
      cljs.core.async.put_BANG_.call(null, p, res);
      return true;
    }
  };
  var n__4613__auto___5140 = n;
  var __5141 = 0;
  while (true) {
    if (__5141 < n__4613__auto___5140) {
      var G__4979_5142 = type;
      var G__4979_5143__$1 = G__4979_5142 instanceof cljs.core.Keyword ? G__4979_5142.fqn : null;
      switch(G__4979_5143__$1) {
        case "compute":
          var c__4794__auto___5145 = cljs.core.async.chan.call(null, 1);
          cljs.core.async.impl.dispatch.run.call(null, function(__5141, c__4794__auto___5145, G__4979_5142, G__4979_5143__$1, n__4613__auto___5140, jobs, results, process, async) {
            return function() {
              var f__4795__auto__ = function() {
                var switch__4702__auto__ = function(__5141, c__4794__auto___5145, G__4979_5142, G__4979_5143__$1, n__4613__auto___5140, jobs, results, process, async) {
                  return function(state_4992) {
                    var state_val_4993 = state_4992[1];
                    if (state_val_4993 === 1) {
                      var state_4992__$1 = state_4992;
                      var statearr_4994_5146 = state_4992__$1;
                      statearr_4994_5146[2] = null;
                      statearr_4994_5146[1] = 2;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_4993 === 2) {
                        var state_4992__$1 = state_4992;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_4992__$1, 4, jobs);
                      } else {
                        if (state_val_4993 === 3) {
                          var inst_4990 = state_4992[2];
                          var state_4992__$1 = state_4992;
                          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_4992__$1, inst_4990);
                        } else {
                          if (state_val_4993 === 4) {
                            var inst_4982 = state_4992[2];
                            var inst_4983 = process.call(null, inst_4982);
                            var state_4992__$1 = state_4992;
                            if (cljs.core.truth_(inst_4983)) {
                              var statearr_4995_5147 = state_4992__$1;
                              statearr_4995_5147[1] = 5;
                            } else {
                              var statearr_4996_5148 = state_4992__$1;
                              statearr_4996_5148[1] = 6;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_4993 === 5) {
                              var state_4992__$1 = state_4992;
                              var statearr_4997_5149 = state_4992__$1;
                              statearr_4997_5149[2] = null;
                              statearr_4997_5149[1] = 2;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_4993 === 6) {
                                var state_4992__$1 = state_4992;
                                var statearr_4998_5150 = state_4992__$1;
                                statearr_4998_5150[2] = null;
                                statearr_4998_5150[1] = 7;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_4993 === 7) {
                                  var inst_4988 = state_4992[2];
                                  var state_4992__$1 = state_4992;
                                  var statearr_4999_5151 = state_4992__$1;
                                  statearr_4999_5151[2] = inst_4988;
                                  statearr_4999_5151[1] = 3;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  };
                }(__5141, c__4794__auto___5145, G__4979_5142, G__4979_5143__$1, n__4613__auto___5140, jobs, results, process, async);
                return function(__5141, switch__4702__auto__, c__4794__auto___5145, G__4979_5142, G__4979_5143__$1, n__4613__auto___5140, jobs, results, process, async) {
                  return function() {
                    var cljs$core$async$pipeline_STAR__$_state_machine__4703__auto__ = null;
                    var cljs$core$async$pipeline_STAR__$_state_machine__4703__auto____0 = function() {
                      var statearr_5000 = [null, null, null, null, null, null, null];
                      statearr_5000[0] = cljs$core$async$pipeline_STAR__$_state_machine__4703__auto__;
                      statearr_5000[1] = 1;
                      return statearr_5000;
                    };
                    var cljs$core$async$pipeline_STAR__$_state_machine__4703__auto____1 = function(state_4992) {
                      while (true) {
                        var ret_value__4704__auto__ = function() {
                          try {
                            while (true) {
                              var result__4705__auto__ = switch__4702__auto__.call(null, state_4992);
                              if (cljs.core.keyword_identical_QMARK_.call(null, result__4705__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                                continue;
                              } else {
                                return result__4705__auto__;
                              }
                              break;
                            }
                          } catch (e5001) {
                            var ex__4706__auto__ = e5001;
                            var statearr_5002_5152 = state_4992;
                            statearr_5002_5152[2] = ex__4706__auto__;
                            if (cljs.core.seq.call(null, state_4992[4])) {
                              var statearr_5003_5153 = state_4992;
                              statearr_5003_5153[1] = cljs.core.first.call(null, state_4992[4]);
                            } else {
                              throw ex__4706__auto__;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          }
                        }();
                        if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__4704__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          var G__5154 = state_4992;
                          state_4992 = G__5154;
                          continue;
                        } else {
                          return ret_value__4704__auto__;
                        }
                        break;
                      }
                    };
                    cljs$core$async$pipeline_STAR__$_state_machine__4703__auto__ = function(state_4992) {
                      switch(arguments.length) {
                        case 0:
                          return cljs$core$async$pipeline_STAR__$_state_machine__4703__auto____0.call(this);
                        case 1:
                          return cljs$core$async$pipeline_STAR__$_state_machine__4703__auto____1.call(this, state_4992);
                      }
                      throw new Error("Invalid arity: " + arguments.length);
                    };
                    cljs$core$async$pipeline_STAR__$_state_machine__4703__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$pipeline_STAR__$_state_machine__4703__auto____0;
                    cljs$core$async$pipeline_STAR__$_state_machine__4703__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$pipeline_STAR__$_state_machine__4703__auto____1;
                    return cljs$core$async$pipeline_STAR__$_state_machine__4703__auto__;
                  }();
                }(__5141, switch__4702__auto__, c__4794__auto___5145, G__4979_5142, G__4979_5143__$1, n__4613__auto___5140, jobs, results, process, async);
              }();
              var state__4796__auto__ = function() {
                var statearr_5004 = f__4795__auto__.call(null);
                statearr_5004[6] = c__4794__auto___5145;
                return statearr_5004;
              }();
              return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__4796__auto__);
            };
          }(__5141, c__4794__auto___5145, G__4979_5142, G__4979_5143__$1, n__4613__auto___5140, jobs, results, process, async));
          break;
        case "async":
          var c__4794__auto___5155 = cljs.core.async.chan.call(null, 1);
          cljs.core.async.impl.dispatch.run.call(null, function(__5141, c__4794__auto___5155, G__4979_5142, G__4979_5143__$1, n__4613__auto___5140, jobs, results, process, async) {
            return function() {
              var f__4795__auto__ = function() {
                var switch__4702__auto__ = function(__5141, c__4794__auto___5155, G__4979_5142, G__4979_5143__$1, n__4613__auto___5140, jobs, results, process, async) {
                  return function(state_5017) {
                    var state_val_5018 = state_5017[1];
                    if (state_val_5018 === 1) {
                      var state_5017__$1 = state_5017;
                      var statearr_5019_5156 = state_5017__$1;
                      statearr_5019_5156[2] = null;
                      statearr_5019_5156[1] = 2;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_5018 === 2) {
                        var state_5017__$1 = state_5017;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_5017__$1, 4, jobs);
                      } else {
                        if (state_val_5018 === 3) {
                          var inst_5015 = state_5017[2];
                          var state_5017__$1 = state_5017;
                          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_5017__$1, inst_5015);
                        } else {
                          if (state_val_5018 === 4) {
                            var inst_5007 = state_5017[2];
                            var inst_5008 = async.call(null, inst_5007);
                            var state_5017__$1 = state_5017;
                            if (cljs.core.truth_(inst_5008)) {
                              var statearr_5020_5157 = state_5017__$1;
                              statearr_5020_5157[1] = 5;
                            } else {
                              var statearr_5021_5158 = state_5017__$1;
                              statearr_5021_5158[1] = 6;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_5018 === 5) {
                              var state_5017__$1 = state_5017;
                              var statearr_5022_5159 = state_5017__$1;
                              statearr_5022_5159[2] = null;
                              statearr_5022_5159[1] = 2;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_5018 === 6) {
                                var state_5017__$1 = state_5017;
                                var statearr_5023_5160 = state_5017__$1;
                                statearr_5023_5160[2] = null;
                                statearr_5023_5160[1] = 7;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_5018 === 7) {
                                  var inst_5013 = state_5017[2];
                                  var state_5017__$1 = state_5017;
                                  var statearr_5024_5161 = state_5017__$1;
                                  statearr_5024_5161[2] = inst_5013;
                                  statearr_5024_5161[1] = 3;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  };
                }(__5141, c__4794__auto___5155, G__4979_5142, G__4979_5143__$1, n__4613__auto___5140, jobs, results, process, async);
                return function(__5141, switch__4702__auto__, c__4794__auto___5155, G__4979_5142, G__4979_5143__$1, n__4613__auto___5140, jobs, results, process, async) {
                  return function() {
                    var cljs$core$async$pipeline_STAR__$_state_machine__4703__auto__ = null;
                    var cljs$core$async$pipeline_STAR__$_state_machine__4703__auto____0 = function() {
                      var statearr_5025 = [null, null, null, null, null, null, null];
                      statearr_5025[0] = cljs$core$async$pipeline_STAR__$_state_machine__4703__auto__;
                      statearr_5025[1] = 1;
                      return statearr_5025;
                    };
                    var cljs$core$async$pipeline_STAR__$_state_machine__4703__auto____1 = function(state_5017) {
                      while (true) {
                        var ret_value__4704__auto__ = function() {
                          try {
                            while (true) {
                              var result__4705__auto__ = switch__4702__auto__.call(null, state_5017);
                              if (cljs.core.keyword_identical_QMARK_.call(null, result__4705__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                                continue;
                              } else {
                                return result__4705__auto__;
                              }
                              break;
                            }
                          } catch (e5026) {
                            var ex__4706__auto__ = e5026;
                            var statearr_5027_5162 = state_5017;
                            statearr_5027_5162[2] = ex__4706__auto__;
                            if (cljs.core.seq.call(null, state_5017[4])) {
                              var statearr_5028_5163 = state_5017;
                              statearr_5028_5163[1] = cljs.core.first.call(null, state_5017[4]);
                            } else {
                              throw ex__4706__auto__;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          }
                        }();
                        if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__4704__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          var G__5164 = state_5017;
                          state_5017 = G__5164;
                          continue;
                        } else {
                          return ret_value__4704__auto__;
                        }
                        break;
                      }
                    };
                    cljs$core$async$pipeline_STAR__$_state_machine__4703__auto__ = function(state_5017) {
                      switch(arguments.length) {
                        case 0:
                          return cljs$core$async$pipeline_STAR__$_state_machine__4703__auto____0.call(this);
                        case 1:
                          return cljs$core$async$pipeline_STAR__$_state_machine__4703__auto____1.call(this, state_5017);
                      }
                      throw new Error("Invalid arity: " + arguments.length);
                    };
                    cljs$core$async$pipeline_STAR__$_state_machine__4703__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$pipeline_STAR__$_state_machine__4703__auto____0;
                    cljs$core$async$pipeline_STAR__$_state_machine__4703__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$pipeline_STAR__$_state_machine__4703__auto____1;
                    return cljs$core$async$pipeline_STAR__$_state_machine__4703__auto__;
                  }();
                }(__5141, switch__4702__auto__, c__4794__auto___5155, G__4979_5142, G__4979_5143__$1, n__4613__auto___5140, jobs, results, process, async);
              }();
              var state__4796__auto__ = function() {
                var statearr_5029 = f__4795__auto__.call(null);
                statearr_5029[6] = c__4794__auto___5155;
                return statearr_5029;
              }();
              return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__4796__auto__);
            };
          }(__5141, c__4794__auto___5155, G__4979_5142, G__4979_5143__$1, n__4613__auto___5140, jobs, results, process, async));
          break;
        default:
          throw new Error(["No matching clause: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(G__4979_5143__$1)].join(""));
      }
      var G__5165 = __5141 + 1;
      __5141 = G__5165;
      continue;
    } else {
    }
    break;
  }
  var c__4794__auto___5166 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function() {
    var f__4795__auto__ = function() {
      var switch__4702__auto__ = function(state_5051) {
        var state_val_5052 = state_5051[1];
        if (state_val_5052 === 7) {
          var inst_5047 = state_5051[2];
          var state_5051__$1 = state_5051;
          var statearr_5053_5167 = state_5051__$1;
          statearr_5053_5167[2] = inst_5047;
          statearr_5053_5167[1] = 3;
          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
        } else {
          if (state_val_5052 === 1) {
            var state_5051__$1 = state_5051;
            var statearr_5054_5168 = state_5051__$1;
            statearr_5054_5168[2] = null;
            statearr_5054_5168[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
          } else {
            if (state_val_5052 === 4) {
              var inst_5032 = state_5051[7];
              var inst_5032__$1 = state_5051[2];
              var inst_5033 = inst_5032__$1 == null;
              var state_5051__$1 = function() {
                var statearr_5055 = state_5051;
                statearr_5055[7] = inst_5032__$1;
                return statearr_5055;
              }();
              if (cljs.core.truth_(inst_5033)) {
                var statearr_5056_5169 = state_5051__$1;
                statearr_5056_5169[1] = 5;
              } else {
                var statearr_5057_5170 = state_5051__$1;
                statearr_5057_5170[1] = 6;
              }
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_5052 === 6) {
                var inst_5032 = state_5051[7];
                var inst_5037 = state_5051[8];
                var inst_5037__$1 = cljs.core.async.chan.call(null, 1);
                var inst_5038 = cljs.core.PersistentVector.EMPTY_NODE;
                var inst_5039 = [inst_5032, inst_5037__$1];
                var inst_5040 = new cljs.core.PersistentVector(null, 2, 5, inst_5038, inst_5039, null);
                var state_5051__$1 = function() {
                  var statearr_5058 = state_5051;
                  statearr_5058[8] = inst_5037__$1;
                  return statearr_5058;
                }();
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_5051__$1, 8, jobs, inst_5040);
              } else {
                if (state_val_5052 === 3) {
                  var inst_5049 = state_5051[2];
                  var state_5051__$1 = state_5051;
                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_5051__$1, inst_5049);
                } else {
                  if (state_val_5052 === 2) {
                    var state_5051__$1 = state_5051;
                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_5051__$1, 4, from);
                  } else {
                    if (state_val_5052 === 9) {
                      var inst_5044 = state_5051[2];
                      var state_5051__$1 = function() {
                        var statearr_5059 = state_5051;
                        statearr_5059[9] = inst_5044;
                        return statearr_5059;
                      }();
                      var statearr_5060_5171 = state_5051__$1;
                      statearr_5060_5171[2] = null;
                      statearr_5060_5171[1] = 2;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_5052 === 5) {
                        var inst_5035 = cljs.core.async.close_BANG_.call(null, jobs);
                        var state_5051__$1 = state_5051;
                        var statearr_5061_5172 = state_5051__$1;
                        statearr_5061_5172[2] = inst_5035;
                        statearr_5061_5172[1] = 7;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_5052 === 8) {
                          var inst_5037 = state_5051[8];
                          var inst_5042 = state_5051[2];
                          var state_5051__$1 = function() {
                            var statearr_5062 = state_5051;
                            statearr_5062[10] = inst_5042;
                            return statearr_5062;
                          }();
                          return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_5051__$1, 9, results, inst_5037);
                        } else {
                          return null;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      return function() {
        var cljs$core$async$pipeline_STAR__$_state_machine__4703__auto__ = null;
        var cljs$core$async$pipeline_STAR__$_state_machine__4703__auto____0 = function() {
          var statearr_5063 = [null, null, null, null, null, null, null, null, null, null, null];
          statearr_5063[0] = cljs$core$async$pipeline_STAR__$_state_machine__4703__auto__;
          statearr_5063[1] = 1;
          return statearr_5063;
        };
        var cljs$core$async$pipeline_STAR__$_state_machine__4703__auto____1 = function(state_5051) {
          while (true) {
            var ret_value__4704__auto__ = function() {
              try {
                while (true) {
                  var result__4705__auto__ = switch__4702__auto__.call(null, state_5051);
                  if (cljs.core.keyword_identical_QMARK_.call(null, result__4705__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    continue;
                  } else {
                    return result__4705__auto__;
                  }
                  break;
                }
              } catch (e5064) {
                var ex__4706__auto__ = e5064;
                var statearr_5065_5173 = state_5051;
                statearr_5065_5173[2] = ex__4706__auto__;
                if (cljs.core.seq.call(null, state_5051[4])) {
                  var statearr_5066_5174 = state_5051;
                  statearr_5066_5174[1] = cljs.core.first.call(null, state_5051[4]);
                } else {
                  throw ex__4706__auto__;
                }
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              }
            }();
            if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__4704__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
              var G__5175 = state_5051;
              state_5051 = G__5175;
              continue;
            } else {
              return ret_value__4704__auto__;
            }
            break;
          }
        };
        cljs$core$async$pipeline_STAR__$_state_machine__4703__auto__ = function(state_5051) {
          switch(arguments.length) {
            case 0:
              return cljs$core$async$pipeline_STAR__$_state_machine__4703__auto____0.call(this);
            case 1:
              return cljs$core$async$pipeline_STAR__$_state_machine__4703__auto____1.call(this, state_5051);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        cljs$core$async$pipeline_STAR__$_state_machine__4703__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$pipeline_STAR__$_state_machine__4703__auto____0;
        cljs$core$async$pipeline_STAR__$_state_machine__4703__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$pipeline_STAR__$_state_machine__4703__auto____1;
        return cljs$core$async$pipeline_STAR__$_state_machine__4703__auto__;
      }();
    }();
    var state__4796__auto__ = function() {
      var statearr_5067 = f__4795__auto__.call(null);
      statearr_5067[6] = c__4794__auto___5166;
      return statearr_5067;
    }();
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__4796__auto__);
  });
  var c__4794__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function() {
    var f__4795__auto__ = function() {
      var switch__4702__auto__ = function(state_5105) {
        var state_val_5106 = state_5105[1];
        if (state_val_5106 === 7) {
          var inst_5101 = state_5105[2];
          var state_5105__$1 = state_5105;
          var statearr_5107_5176 = state_5105__$1;
          statearr_5107_5176[2] = inst_5101;
          statearr_5107_5176[1] = 3;
          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
        } else {
          if (state_val_5106 === 20) {
            var state_5105__$1 = state_5105;
            var statearr_5108_5177 = state_5105__$1;
            statearr_5108_5177[2] = null;
            statearr_5108_5177[1] = 21;
            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
          } else {
            if (state_val_5106 === 1) {
              var state_5105__$1 = state_5105;
              var statearr_5109_5178 = state_5105__$1;
              statearr_5109_5178[2] = null;
              statearr_5109_5178[1] = 2;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_5106 === 4) {
                var inst_5070 = state_5105[7];
                var inst_5070__$1 = state_5105[2];
                var inst_5071 = inst_5070__$1 == null;
                var state_5105__$1 = function() {
                  var statearr_5110 = state_5105;
                  statearr_5110[7] = inst_5070__$1;
                  return statearr_5110;
                }();
                if (cljs.core.truth_(inst_5071)) {
                  var statearr_5111_5179 = state_5105__$1;
                  statearr_5111_5179[1] = 5;
                } else {
                  var statearr_5112_5180 = state_5105__$1;
                  statearr_5112_5180[1] = 6;
                }
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_5106 === 15) {
                  var inst_5083 = state_5105[8];
                  var state_5105__$1 = state_5105;
                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_5105__$1, 18, to, inst_5083);
                } else {
                  if (state_val_5106 === 21) {
                    var inst_5096 = state_5105[2];
                    var state_5105__$1 = state_5105;
                    var statearr_5113_5181 = state_5105__$1;
                    statearr_5113_5181[2] = inst_5096;
                    statearr_5113_5181[1] = 13;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_5106 === 13) {
                      var inst_5098 = state_5105[2];
                      var state_5105__$1 = function() {
                        var statearr_5114 = state_5105;
                        statearr_5114[9] = inst_5098;
                        return statearr_5114;
                      }();
                      var statearr_5115_5182 = state_5105__$1;
                      statearr_5115_5182[2] = null;
                      statearr_5115_5182[1] = 2;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_5106 === 6) {
                        var inst_5070 = state_5105[7];
                        var state_5105__$1 = state_5105;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_5105__$1, 11, inst_5070);
                      } else {
                        if (state_val_5106 === 17) {
                          var inst_5091 = state_5105[2];
                          var state_5105__$1 = state_5105;
                          if (cljs.core.truth_(inst_5091)) {
                            var statearr_5116_5183 = state_5105__$1;
                            statearr_5116_5183[1] = 19;
                          } else {
                            var statearr_5117_5184 = state_5105__$1;
                            statearr_5117_5184[1] = 20;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_5106 === 3) {
                            var inst_5103 = state_5105[2];
                            var state_5105__$1 = state_5105;
                            return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_5105__$1, inst_5103);
                          } else {
                            if (state_val_5106 === 12) {
                              var inst_5080 = state_5105[10];
                              var state_5105__$1 = state_5105;
                              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_5105__$1, 14, inst_5080);
                            } else {
                              if (state_val_5106 === 2) {
                                var state_5105__$1 = state_5105;
                                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_5105__$1, 4, results);
                              } else {
                                if (state_val_5106 === 19) {
                                  var state_5105__$1 = state_5105;
                                  var statearr_5118_5185 = state_5105__$1;
                                  statearr_5118_5185[2] = null;
                                  statearr_5118_5185[1] = 12;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_5106 === 11) {
                                    var inst_5080 = state_5105[2];
                                    var state_5105__$1 = function() {
                                      var statearr_5119 = state_5105;
                                      statearr_5119[10] = inst_5080;
                                      return statearr_5119;
                                    }();
                                    var statearr_5120_5186 = state_5105__$1;
                                    statearr_5120_5186[2] = null;
                                    statearr_5120_5186[1] = 12;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_5106 === 9) {
                                      var state_5105__$1 = state_5105;
                                      var statearr_5121_5187 = state_5105__$1;
                                      statearr_5121_5187[2] = null;
                                      statearr_5121_5187[1] = 10;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_5106 === 5) {
                                        var state_5105__$1 = state_5105;
                                        if (cljs.core.truth_(close_QMARK_)) {
                                          var statearr_5122_5188 = state_5105__$1;
                                          statearr_5122_5188[1] = 8;
                                        } else {
                                          var statearr_5123_5189 = state_5105__$1;
                                          statearr_5123_5189[1] = 9;
                                        }
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_5106 === 14) {
                                          var inst_5083 = state_5105[8];
                                          var inst_5083__$1 = state_5105[2];
                                          var inst_5084 = inst_5083__$1 == null;
                                          var inst_5085 = cljs.core.not.call(null, inst_5084);
                                          var state_5105__$1 = function() {
                                            var statearr_5124 = state_5105;
                                            statearr_5124[8] = inst_5083__$1;
                                            return statearr_5124;
                                          }();
                                          if (inst_5085) {
                                            var statearr_5125_5190 = state_5105__$1;
                                            statearr_5125_5190[1] = 15;
                                          } else {
                                            var statearr_5126_5191 = state_5105__$1;
                                            statearr_5126_5191[1] = 16;
                                          }
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_5106 === 16) {
                                            var state_5105__$1 = state_5105;
                                            var statearr_5127_5192 = state_5105__$1;
                                            statearr_5127_5192[2] = false;
                                            statearr_5127_5192[1] = 17;
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_5106 === 10) {
                                              var inst_5077 = state_5105[2];
                                              var state_5105__$1 = state_5105;
                                              var statearr_5128_5193 = state_5105__$1;
                                              statearr_5128_5193[2] = inst_5077;
                                              statearr_5128_5193[1] = 7;
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_5106 === 18) {
                                                var inst_5088 = state_5105[2];
                                                var state_5105__$1 = state_5105;
                                                var statearr_5129_5194 = state_5105__$1;
                                                statearr_5129_5194[2] = inst_5088;
                                                statearr_5129_5194[1] = 17;
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_5106 === 8) {
                                                  var inst_5074 = cljs.core.async.close_BANG_.call(null, to);
                                                  var state_5105__$1 = state_5105;
                                                  var statearr_5130_5195 = state_5105__$1;
                                                  statearr_5130_5195[2] = inst_5074;
                                                  statearr_5130_5195[1] = 10;
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  return null;
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      return function() {
        var cljs$core$async$pipeline_STAR__$_state_machine__4703__auto__ = null;
        var cljs$core$async$pipeline_STAR__$_state_machine__4703__auto____0 = function() {
          var statearr_5131 = [null, null, null, null, null, null, null, null, null, null, null];
          statearr_5131[0] = cljs$core$async$pipeline_STAR__$_state_machine__4703__auto__;
          statearr_5131[1] = 1;
          return statearr_5131;
        };
        var cljs$core$async$pipeline_STAR__$_state_machine__4703__auto____1 = function(state_5105) {
          while (true) {
            var ret_value__4704__auto__ = function() {
              try {
                while (true) {
                  var result__4705__auto__ = switch__4702__auto__.call(null, state_5105);
                  if (cljs.core.keyword_identical_QMARK_.call(null, result__4705__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    continue;
                  } else {
                    return result__4705__auto__;
                  }
                  break;
                }
              } catch (e5132) {
                var ex__4706__auto__ = e5132;
                var statearr_5133_5196 = state_5105;
                statearr_5133_5196[2] = ex__4706__auto__;
                if (cljs.core.seq.call(null, state_5105[4])) {
                  var statearr_5134_5197 = state_5105;
                  statearr_5134_5197[1] = cljs.core.first.call(null, state_5105[4]);
                } else {
                  throw ex__4706__auto__;
                }
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              }
            }();
            if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__4704__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
              var G__5198 = state_5105;
              state_5105 = G__5198;
              continue;
            } else {
              return ret_value__4704__auto__;
            }
            break;
          }
        };
        cljs$core$async$pipeline_STAR__$_state_machine__4703__auto__ = function(state_5105) {
          switch(arguments.length) {
            case 0:
              return cljs$core$async$pipeline_STAR__$_state_machine__4703__auto____0.call(this);
            case 1:
              return cljs$core$async$pipeline_STAR__$_state_machine__4703__auto____1.call(this, state_5105);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        cljs$core$async$pipeline_STAR__$_state_machine__4703__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$pipeline_STAR__$_state_machine__4703__auto____0;
        cljs$core$async$pipeline_STAR__$_state_machine__4703__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$pipeline_STAR__$_state_machine__4703__auto____1;
        return cljs$core$async$pipeline_STAR__$_state_machine__4703__auto__;
      }();
    }();
    var state__4796__auto__ = function() {
      var statearr_5135 = f__4795__auto__.call(null);
      statearr_5135[6] = c__4794__auto__;
      return statearr_5135;
    }();
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__4796__auto__);
  });
  return c__4794__auto__;
};
cljs.core.async.pipeline_async = function cljs$core$async$pipeline_async(var_args) {
  var G__5200 = arguments.length;
  switch(G__5200) {
    case 4:
      return cljs.core.async.pipeline_async.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core.async.pipeline_async.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
cljs.core.async.pipeline_async.cljs$core$IFn$_invoke$arity$4 = function(n, to, af, from) {
  return cljs.core.async.pipeline_async.call(null, n, to, af, from, true);
};
cljs.core.async.pipeline_async.cljs$core$IFn$_invoke$arity$5 = function(n, to, af, from, close_QMARK_) {
  return cljs.core.async.pipeline_STAR_.call(null, n, to, af, from, close_QMARK_, null, new cljs.core.Keyword(null, "async", "async", 1050769601));
};
cljs.core.async.pipeline_async.cljs$lang$maxFixedArity = 5;
cljs.core.async.pipeline = function cljs$core$async$pipeline(var_args) {
  var G__5203 = arguments.length;
  switch(G__5203) {
    case 4:
      return cljs.core.async.pipeline.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core.async.pipeline.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    case 6:
      return cljs.core.async.pipeline.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
cljs.core.async.pipeline.cljs$core$IFn$_invoke$arity$4 = function(n, to, xf, from) {
  return cljs.core.async.pipeline.call(null, n, to, xf, from, true);
};
cljs.core.async.pipeline.cljs$core$IFn$_invoke$arity$5 = function(n, to, xf, from, close_QMARK_) {
  return cljs.core.async.pipeline.call(null, n, to, xf, from, close_QMARK_, null);
};
cljs.core.async.pipeline.cljs$core$IFn$_invoke$arity$6 = function(n, to, xf, from, close_QMARK_, ex_handler) {
  return cljs.core.async.pipeline_STAR_.call(null, n, to, xf, from, close_QMARK_, ex_handler, new cljs.core.Keyword(null, "compute", "compute", 1555393130));
};
cljs.core.async.pipeline.cljs$lang$maxFixedArity = 6;
cljs.core.async.split = function cljs$core$async$split(var_args) {
  var G__5206 = arguments.length;
  switch(G__5206) {
    case 2:
      return cljs.core.async.split.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 4:
      return cljs.core.async.split.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
cljs.core.async.split.cljs$core$IFn$_invoke$arity$2 = function(p, ch) {
  return cljs.core.async.split.call(null, p, ch, null, null);
};
cljs.core.async.split.cljs$core$IFn$_invoke$arity$4 = function(p, ch, t_buf_or_n, f_buf_or_n) {
  var tc = cljs.core.async.chan.call(null, t_buf_or_n);
  var fc = cljs.core.async.chan.call(null, f_buf_or_n);
  var c__4794__auto___5256 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function() {
    var f__4795__auto__ = function() {
      var switch__4702__auto__ = function(state_5232) {
        var state_val_5233 = state_5232[1];
        if (state_val_5233 === 7) {
          var inst_5228 = state_5232[2];
          var state_5232__$1 = state_5232;
          var statearr_5234_5257 = state_5232__$1;
          statearr_5234_5257[2] = inst_5228;
          statearr_5234_5257[1] = 3;
          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
        } else {
          if (state_val_5233 === 1) {
            var state_5232__$1 = state_5232;
            var statearr_5235_5258 = state_5232__$1;
            statearr_5235_5258[2] = null;
            statearr_5235_5258[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
          } else {
            if (state_val_5233 === 4) {
              var inst_5209 = state_5232[7];
              var inst_5209__$1 = state_5232[2];
              var inst_5210 = inst_5209__$1 == null;
              var state_5232__$1 = function() {
                var statearr_5236 = state_5232;
                statearr_5236[7] = inst_5209__$1;
                return statearr_5236;
              }();
              if (cljs.core.truth_(inst_5210)) {
                var statearr_5237_5259 = state_5232__$1;
                statearr_5237_5259[1] = 5;
              } else {
                var statearr_5238_5260 = state_5232__$1;
                statearr_5238_5260[1] = 6;
              }
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_5233 === 13) {
                var state_5232__$1 = state_5232;
                var statearr_5239_5261 = state_5232__$1;
                statearr_5239_5261[2] = null;
                statearr_5239_5261[1] = 14;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_5233 === 6) {
                  var inst_5209 = state_5232[7];
                  var inst_5215 = p.call(null, inst_5209);
                  var state_5232__$1 = state_5232;
                  if (cljs.core.truth_(inst_5215)) {
                    var statearr_5240_5262 = state_5232__$1;
                    statearr_5240_5262[1] = 9;
                  } else {
                    var statearr_5241_5263 = state_5232__$1;
                    statearr_5241_5263[1] = 10;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_5233 === 3) {
                    var inst_5230 = state_5232[2];
                    var state_5232__$1 = state_5232;
                    return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_5232__$1, inst_5230);
                  } else {
                    if (state_val_5233 === 12) {
                      var state_5232__$1 = state_5232;
                      var statearr_5242_5264 = state_5232__$1;
                      statearr_5242_5264[2] = null;
                      statearr_5242_5264[1] = 2;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_5233 === 2) {
                        var state_5232__$1 = state_5232;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_5232__$1, 4, ch);
                      } else {
                        if (state_val_5233 === 11) {
                          var inst_5209 = state_5232[7];
                          var inst_5219 = state_5232[2];
                          var state_5232__$1 = state_5232;
                          return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_5232__$1, 8, inst_5219, inst_5209);
                        } else {
                          if (state_val_5233 === 9) {
                            var state_5232__$1 = state_5232;
                            var statearr_5243_5265 = state_5232__$1;
                            statearr_5243_5265[2] = tc;
                            statearr_5243_5265[1] = 11;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_5233 === 5) {
                              var inst_5212 = cljs.core.async.close_BANG_.call(null, tc);
                              var inst_5213 = cljs.core.async.close_BANG_.call(null, fc);
                              var state_5232__$1 = function() {
                                var statearr_5244 = state_5232;
                                statearr_5244[8] = inst_5212;
                                return statearr_5244;
                              }();
                              var statearr_5245_5266 = state_5232__$1;
                              statearr_5245_5266[2] = inst_5213;
                              statearr_5245_5266[1] = 7;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_5233 === 14) {
                                var inst_5226 = state_5232[2];
                                var state_5232__$1 = state_5232;
                                var statearr_5246_5267 = state_5232__$1;
                                statearr_5246_5267[2] = inst_5226;
                                statearr_5246_5267[1] = 7;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_5233 === 10) {
                                  var state_5232__$1 = state_5232;
                                  var statearr_5247_5268 = state_5232__$1;
                                  statearr_5247_5268[2] = fc;
                                  statearr_5247_5268[1] = 11;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_5233 === 8) {
                                    var inst_5221 = state_5232[2];
                                    var state_5232__$1 = state_5232;
                                    if (cljs.core.truth_(inst_5221)) {
                                      var statearr_5248_5269 = state_5232__$1;
                                      statearr_5248_5269[1] = 12;
                                    } else {
                                      var statearr_5249_5270 = state_5232__$1;
                                      statearr_5249_5270[1] = 13;
                                    }
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      return function() {
        var cljs$core$async$state_machine__4703__auto__ = null;
        var cljs$core$async$state_machine__4703__auto____0 = function() {
          var statearr_5250 = [null, null, null, null, null, null, null, null, null];
          statearr_5250[0] = cljs$core$async$state_machine__4703__auto__;
          statearr_5250[1] = 1;
          return statearr_5250;
        };
        var cljs$core$async$state_machine__4703__auto____1 = function(state_5232) {
          while (true) {
            var ret_value__4704__auto__ = function() {
              try {
                while (true) {
                  var result__4705__auto__ = switch__4702__auto__.call(null, state_5232);
                  if (cljs.core.keyword_identical_QMARK_.call(null, result__4705__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    continue;
                  } else {
                    return result__4705__auto__;
                  }
                  break;
                }
              } catch (e5251) {
                var ex__4706__auto__ = e5251;
                var statearr_5252_5271 = state_5232;
                statearr_5252_5271[2] = ex__4706__auto__;
                if (cljs.core.seq.call(null, state_5232[4])) {
                  var statearr_5253_5272 = state_5232;
                  statearr_5253_5272[1] = cljs.core.first.call(null, state_5232[4]);
                } else {
                  throw ex__4706__auto__;
                }
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              }
            }();
            if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__4704__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
              var G__5273 = state_5232;
              state_5232 = G__5273;
              continue;
            } else {
              return ret_value__4704__auto__;
            }
            break;
          }
        };
        cljs$core$async$state_machine__4703__auto__ = function(state_5232) {
          switch(arguments.length) {
            case 0:
              return cljs$core$async$state_machine__4703__auto____0.call(this);
            case 1:
              return cljs$core$async$state_machine__4703__auto____1.call(this, state_5232);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        cljs$core$async$state_machine__4703__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__4703__auto____0;
        cljs$core$async$state_machine__4703__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__4703__auto____1;
        return cljs$core$async$state_machine__4703__auto__;
      }();
    }();
    var state__4796__auto__ = function() {
      var statearr_5254 = f__4795__auto__.call(null);
      statearr_5254[6] = c__4794__auto___5256;
      return statearr_5254;
    }();
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__4796__auto__);
  });
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tc, fc], null);
};
cljs.core.async.split.cljs$lang$maxFixedArity = 4;
cljs.core.async.reduce = function cljs$core$async$reduce(f, init, ch) {
  var c__4794__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function() {
    var f__4795__auto__ = function() {
      var switch__4702__auto__ = function(state_5295) {
        var state_val_5296 = state_5295[1];
        if (state_val_5296 === 7) {
          var inst_5291 = state_5295[2];
          var state_5295__$1 = state_5295;
          var statearr_5297_5316 = state_5295__$1;
          statearr_5297_5316[2] = inst_5291;
          statearr_5297_5316[1] = 3;
          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
        } else {
          if (state_val_5296 === 1) {
            var inst_5274 = init;
            var inst_5275 = inst_5274;
            var state_5295__$1 = function() {
              var statearr_5298 = state_5295;
              statearr_5298[7] = inst_5275;
              return statearr_5298;
            }();
            var statearr_5299_5317 = state_5295__$1;
            statearr_5299_5317[2] = null;
            statearr_5299_5317[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
          } else {
            if (state_val_5296 === 4) {
              var inst_5278 = state_5295[8];
              var inst_5278__$1 = state_5295[2];
              var inst_5279 = inst_5278__$1 == null;
              var state_5295__$1 = function() {
                var statearr_5300 = state_5295;
                statearr_5300[8] = inst_5278__$1;
                return statearr_5300;
              }();
              if (cljs.core.truth_(inst_5279)) {
                var statearr_5301_5318 = state_5295__$1;
                statearr_5301_5318[1] = 5;
              } else {
                var statearr_5302_5319 = state_5295__$1;
                statearr_5302_5319[1] = 6;
              }
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_5296 === 6) {
                var inst_5275 = state_5295[7];
                var inst_5278 = state_5295[8];
                var inst_5282 = state_5295[9];
                var inst_5282__$1 = f.call(null, inst_5275, inst_5278);
                var inst_5283 = cljs.core.reduced_QMARK_.call(null, inst_5282__$1);
                var state_5295__$1 = function() {
                  var statearr_5303 = state_5295;
                  statearr_5303[9] = inst_5282__$1;
                  return statearr_5303;
                }();
                if (inst_5283) {
                  var statearr_5304_5320 = state_5295__$1;
                  statearr_5304_5320[1] = 8;
                } else {
                  var statearr_5305_5321 = state_5295__$1;
                  statearr_5305_5321[1] = 9;
                }
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_5296 === 3) {
                  var inst_5293 = state_5295[2];
                  var state_5295__$1 = state_5295;
                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_5295__$1, inst_5293);
                } else {
                  if (state_val_5296 === 2) {
                    var state_5295__$1 = state_5295;
                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_5295__$1, 4, ch);
                  } else {
                    if (state_val_5296 === 9) {
                      var inst_5282 = state_5295[9];
                      var inst_5275 = inst_5282;
                      var state_5295__$1 = function() {
                        var statearr_5306 = state_5295;
                        statearr_5306[7] = inst_5275;
                        return statearr_5306;
                      }();
                      var statearr_5307_5322 = state_5295__$1;
                      statearr_5307_5322[2] = null;
                      statearr_5307_5322[1] = 2;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_5296 === 5) {
                        var inst_5275 = state_5295[7];
                        var state_5295__$1 = state_5295;
                        var statearr_5308_5323 = state_5295__$1;
                        statearr_5308_5323[2] = inst_5275;
                        statearr_5308_5323[1] = 7;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_5296 === 10) {
                          var inst_5289 = state_5295[2];
                          var state_5295__$1 = state_5295;
                          var statearr_5309_5324 = state_5295__$1;
                          statearr_5309_5324[2] = inst_5289;
                          statearr_5309_5324[1] = 7;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_5296 === 8) {
                            var inst_5282 = state_5295[9];
                            var inst_5285 = cljs.core.deref.call(null, inst_5282);
                            var state_5295__$1 = state_5295;
                            var statearr_5310_5325 = state_5295__$1;
                            statearr_5310_5325[2] = inst_5285;
                            statearr_5310_5325[1] = 10;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            return null;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      return function() {
        var cljs$core$async$reduce_$_state_machine__4703__auto__ = null;
        var cljs$core$async$reduce_$_state_machine__4703__auto____0 = function() {
          var statearr_5311 = [null, null, null, null, null, null, null, null, null, null];
          statearr_5311[0] = cljs$core$async$reduce_$_state_machine__4703__auto__;
          statearr_5311[1] = 1;
          return statearr_5311;
        };
        var cljs$core$async$reduce_$_state_machine__4703__auto____1 = function(state_5295) {
          while (true) {
            var ret_value__4704__auto__ = function() {
              try {
                while (true) {
                  var result__4705__auto__ = switch__4702__auto__.call(null, state_5295);
                  if (cljs.core.keyword_identical_QMARK_.call(null, result__4705__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    continue;
                  } else {
                    return result__4705__auto__;
                  }
                  break;
                }
              } catch (e5312) {
                var ex__4706__auto__ = e5312;
                var statearr_5313_5326 = state_5295;
                statearr_5313_5326[2] = ex__4706__auto__;
                if (cljs.core.seq.call(null, state_5295[4])) {
                  var statearr_5314_5327 = state_5295;
                  statearr_5314_5327[1] = cljs.core.first.call(null, state_5295[4]);
                } else {
                  throw ex__4706__auto__;
                }
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              }
            }();
            if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__4704__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
              var G__5328 = state_5295;
              state_5295 = G__5328;
              continue;
            } else {
              return ret_value__4704__auto__;
            }
            break;
          }
        };
        cljs$core$async$reduce_$_state_machine__4703__auto__ = function(state_5295) {
          switch(arguments.length) {
            case 0:
              return cljs$core$async$reduce_$_state_machine__4703__auto____0.call(this);
            case 1:
              return cljs$core$async$reduce_$_state_machine__4703__auto____1.call(this, state_5295);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        cljs$core$async$reduce_$_state_machine__4703__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$reduce_$_state_machine__4703__auto____0;
        cljs$core$async$reduce_$_state_machine__4703__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$reduce_$_state_machine__4703__auto____1;
        return cljs$core$async$reduce_$_state_machine__4703__auto__;
      }();
    }();
    var state__4796__auto__ = function() {
      var statearr_5315 = f__4795__auto__.call(null);
      statearr_5315[6] = c__4794__auto__;
      return statearr_5315;
    }();
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__4796__auto__);
  });
  return c__4794__auto__;
};
cljs.core.async.transduce = function cljs$core$async$transduce(xform, f, init, ch) {
  var f__$1 = xform.call(null, f);
  var c__4794__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function() {
    var f__4795__auto__ = function() {
      var switch__4702__auto__ = function(state_5334) {
        var state_val_5335 = state_5334[1];
        if (state_val_5335 === 1) {
          var inst_5329 = cljs.core.async.reduce.call(null, f__$1, init, ch);
          var state_5334__$1 = state_5334;
          return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_5334__$1, 2, inst_5329);
        } else {
          if (state_val_5335 === 2) {
            var inst_5331 = state_5334[2];
            var inst_5332 = f__$1.call(null, inst_5331);
            var state_5334__$1 = state_5334;
            return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_5334__$1, inst_5332);
          } else {
            return null;
          }
        }
      };
      return function() {
        var cljs$core$async$transduce_$_state_machine__4703__auto__ = null;
        var cljs$core$async$transduce_$_state_machine__4703__auto____0 = function() {
          var statearr_5336 = [null, null, null, null, null, null, null];
          statearr_5336[0] = cljs$core$async$transduce_$_state_machine__4703__auto__;
          statearr_5336[1] = 1;
          return statearr_5336;
        };
        var cljs$core$async$transduce_$_state_machine__4703__auto____1 = function(state_5334) {
          while (true) {
            var ret_value__4704__auto__ = function() {
              try {
                while (true) {
                  var result__4705__auto__ = switch__4702__auto__.call(null, state_5334);
                  if (cljs.core.keyword_identical_QMARK_.call(null, result__4705__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    continue;
                  } else {
                    return result__4705__auto__;
                  }
                  break;
                }
              } catch (e5337) {
                var ex__4706__auto__ = e5337;
                var statearr_5338_5341 = state_5334;
                statearr_5338_5341[2] = ex__4706__auto__;
                if (cljs.core.seq.call(null, state_5334[4])) {
                  var statearr_5339_5342 = state_5334;
                  statearr_5339_5342[1] = cljs.core.first.call(null, state_5334[4]);
                } else {
                  throw ex__4706__auto__;
                }
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              }
            }();
            if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__4704__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
              var G__5343 = state_5334;
              state_5334 = G__5343;
              continue;
            } else {
              return ret_value__4704__auto__;
            }
            break;
          }
        };
        cljs$core$async$transduce_$_state_machine__4703__auto__ = function(state_5334) {
          switch(arguments.length) {
            case 0:
              return cljs$core$async$transduce_$_state_machine__4703__auto____0.call(this);
            case 1:
              return cljs$core$async$transduce_$_state_machine__4703__auto____1.call(this, state_5334);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        cljs$core$async$transduce_$_state_machine__4703__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$transduce_$_state_machine__4703__auto____0;
        cljs$core$async$transduce_$_state_machine__4703__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$transduce_$_state_machine__4703__auto____1;
        return cljs$core$async$transduce_$_state_machine__4703__auto__;
      }();
    }();
    var state__4796__auto__ = function() {
      var statearr_5340 = f__4795__auto__.call(null);
      statearr_5340[6] = c__4794__auto__;
      return statearr_5340;
    }();
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__4796__auto__);
  });
  return c__4794__auto__;
};
cljs.core.async.onto_chan_BANG_ = function cljs$core$async$onto_chan_BANG_(var_args) {
  var G__5345 = arguments.length;
  switch(G__5345) {
    case 2:
      return cljs.core.async.onto_chan_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.onto_chan_BANG_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
cljs.core.async.onto_chan_BANG_.cljs$core$IFn$_invoke$arity$2 = function(ch, coll) {
  return cljs.core.async.onto_chan_BANG_.call(null, ch, coll, true);
};
cljs.core.async.onto_chan_BANG_.cljs$core$IFn$_invoke$arity$3 = function(ch, coll, close_QMARK_) {
  var c__4794__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function() {
    var f__4795__auto__ = function() {
      var switch__4702__auto__ = function(state_5370) {
        var state_val_5371 = state_5370[1];
        if (state_val_5371 === 7) {
          var inst_5352 = state_5370[2];
          var state_5370__$1 = state_5370;
          var statearr_5372_5394 = state_5370__$1;
          statearr_5372_5394[2] = inst_5352;
          statearr_5372_5394[1] = 6;
          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
        } else {
          if (state_val_5371 === 1) {
            var inst_5346 = cljs.core.seq.call(null, coll);
            var inst_5347 = inst_5346;
            var state_5370__$1 = function() {
              var statearr_5373 = state_5370;
              statearr_5373[7] = inst_5347;
              return statearr_5373;
            }();
            var statearr_5374_5395 = state_5370__$1;
            statearr_5374_5395[2] = null;
            statearr_5374_5395[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
          } else {
            if (state_val_5371 === 4) {
              var inst_5347 = state_5370[7];
              var inst_5350 = cljs.core.first.call(null, inst_5347);
              var state_5370__$1 = state_5370;
              return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_5370__$1, 7, ch, inst_5350);
            } else {
              if (state_val_5371 === 13) {
                var inst_5364 = state_5370[2];
                var state_5370__$1 = state_5370;
                var statearr_5375_5396 = state_5370__$1;
                statearr_5375_5396[2] = inst_5364;
                statearr_5375_5396[1] = 10;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_5371 === 6) {
                  var inst_5355 = state_5370[2];
                  var state_5370__$1 = state_5370;
                  if (cljs.core.truth_(inst_5355)) {
                    var statearr_5376_5397 = state_5370__$1;
                    statearr_5376_5397[1] = 8;
                  } else {
                    var statearr_5377_5398 = state_5370__$1;
                    statearr_5377_5398[1] = 9;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_5371 === 3) {
                    var inst_5368 = state_5370[2];
                    var state_5370__$1 = state_5370;
                    return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_5370__$1, inst_5368);
                  } else {
                    if (state_val_5371 === 12) {
                      var state_5370__$1 = state_5370;
                      var statearr_5378_5399 = state_5370__$1;
                      statearr_5378_5399[2] = null;
                      statearr_5378_5399[1] = 13;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_5371 === 2) {
                        var inst_5347 = state_5370[7];
                        var state_5370__$1 = state_5370;
                        if (cljs.core.truth_(inst_5347)) {
                          var statearr_5379_5400 = state_5370__$1;
                          statearr_5379_5400[1] = 4;
                        } else {
                          var statearr_5380_5401 = state_5370__$1;
                          statearr_5380_5401[1] = 5;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_5371 === 11) {
                          var inst_5361 = cljs.core.async.close_BANG_.call(null, ch);
                          var state_5370__$1 = state_5370;
                          var statearr_5381_5402 = state_5370__$1;
                          statearr_5381_5402[2] = inst_5361;
                          statearr_5381_5402[1] = 13;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_5371 === 9) {
                            var state_5370__$1 = state_5370;
                            if (cljs.core.truth_(close_QMARK_)) {
                              var statearr_5382_5403 = state_5370__$1;
                              statearr_5382_5403[1] = 11;
                            } else {
                              var statearr_5383_5404 = state_5370__$1;
                              statearr_5383_5404[1] = 12;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_5371 === 5) {
                              var inst_5347 = state_5370[7];
                              var state_5370__$1 = state_5370;
                              var statearr_5384_5405 = state_5370__$1;
                              statearr_5384_5405[2] = inst_5347;
                              statearr_5384_5405[1] = 6;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_5371 === 10) {
                                var inst_5366 = state_5370[2];
                                var state_5370__$1 = state_5370;
                                var statearr_5385_5406 = state_5370__$1;
                                statearr_5385_5406[2] = inst_5366;
                                statearr_5385_5406[1] = 3;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_5371 === 8) {
                                  var inst_5347 = state_5370[7];
                                  var inst_5357 = cljs.core.next.call(null, inst_5347);
                                  var inst_5347__$1 = inst_5357;
                                  var state_5370__$1 = function() {
                                    var statearr_5386 = state_5370;
                                    statearr_5386[7] = inst_5347__$1;
                                    return statearr_5386;
                                  }();
                                  var statearr_5387_5407 = state_5370__$1;
                                  statearr_5387_5407[2] = null;
                                  statearr_5387_5407[1] = 2;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      return function() {
        var cljs$core$async$state_machine__4703__auto__ = null;
        var cljs$core$async$state_machine__4703__auto____0 = function() {
          var statearr_5388 = [null, null, null, null, null, null, null, null];
          statearr_5388[0] = cljs$core$async$state_machine__4703__auto__;
          statearr_5388[1] = 1;
          return statearr_5388;
        };
        var cljs$core$async$state_machine__4703__auto____1 = function(state_5370) {
          while (true) {
            var ret_value__4704__auto__ = function() {
              try {
                while (true) {
                  var result__4705__auto__ = switch__4702__auto__.call(null, state_5370);
                  if (cljs.core.keyword_identical_QMARK_.call(null, result__4705__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    continue;
                  } else {
                    return result__4705__auto__;
                  }
                  break;
                }
              } catch (e5389) {
                var ex__4706__auto__ = e5389;
                var statearr_5390_5408 = state_5370;
                statearr_5390_5408[2] = ex__4706__auto__;
                if (cljs.core.seq.call(null, state_5370[4])) {
                  var statearr_5391_5409 = state_5370;
                  statearr_5391_5409[1] = cljs.core.first.call(null, state_5370[4]);
                } else {
                  throw ex__4706__auto__;
                }
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              }
            }();
            if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__4704__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
              var G__5410 = state_5370;
              state_5370 = G__5410;
              continue;
            } else {
              return ret_value__4704__auto__;
            }
            break;
          }
        };
        cljs$core$async$state_machine__4703__auto__ = function(state_5370) {
          switch(arguments.length) {
            case 0:
              return cljs$core$async$state_machine__4703__auto____0.call(this);
            case 1:
              return cljs$core$async$state_machine__4703__auto____1.call(this, state_5370);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        cljs$core$async$state_machine__4703__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__4703__auto____0;
        cljs$core$async$state_machine__4703__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__4703__auto____1;
        return cljs$core$async$state_machine__4703__auto__;
      }();
    }();
    var state__4796__auto__ = function() {
      var statearr_5392 = f__4795__auto__.call(null);
      statearr_5392[6] = c__4794__auto__;
      return statearr_5392;
    }();
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__4796__auto__);
  });
  return c__4794__auto__;
};
cljs.core.async.onto_chan_BANG_.cljs$lang$maxFixedArity = 3;
cljs.core.async.to_chan_BANG_ = function cljs$core$async$to_chan_BANG_(coll) {
  var ch = cljs.core.async.chan.call(null, cljs.core.bounded_count.call(null, 100, coll));
  cljs.core.async.onto_chan_BANG_.call(null, ch, coll);
  return ch;
};
cljs.core.async.onto_chan = function cljs$core$async$onto_chan(var_args) {
  var G__5412 = arguments.length;
  switch(G__5412) {
    case 2:
      return cljs.core.async.onto_chan.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.onto_chan.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
cljs.core.async.onto_chan.cljs$core$IFn$_invoke$arity$2 = function(ch, coll) {
  return cljs.core.async.onto_chan_BANG_.call(null, ch, coll, true);
};
cljs.core.async.onto_chan.cljs$core$IFn$_invoke$arity$3 = function(ch, coll, close_QMARK_) {
  return cljs.core.async.onto_chan_BANG_.call(null, ch, coll, close_QMARK_);
};
cljs.core.async.onto_chan.cljs$lang$maxFixedArity = 3;
cljs.core.async.to_chan = function cljs$core$async$to_chan(coll) {
  return cljs.core.async.to_chan_BANG_.call(null, coll);
};
cljs.core.async.Mux = function() {
};
var cljs$core$async$Mux$muxch_STAR_$dyn_5414 = function(_) {
  var x__4428__auto__ = _ == null ? null : _;
  var m__4429__auto__ = cljs.core.async.muxch_STAR_[goog.typeOf(x__4428__auto__)];
  if (!(m__4429__auto__ == null)) {
    return m__4429__auto__.call(null, _);
  } else {
    var m__4426__auto__ = cljs.core.async.muxch_STAR_["_"];
    if (!(m__4426__auto__ == null)) {
      return m__4426__auto__.call(null, _);
    } else {
      throw cljs.core.missing_protocol.call(null, "Mux.muxch*", _);
    }
  }
};
cljs.core.async.muxch_STAR_ = function cljs$core$async$muxch_STAR_(_) {
  if (!(_ == null) && !(_.cljs$core$async$Mux$muxch_STAR_$arity$1 == null)) {
    return _.cljs$core$async$Mux$muxch_STAR_$arity$1(_);
  } else {
    return cljs$core$async$Mux$muxch_STAR_$dyn_5414.call(null, _);
  }
};
cljs.core.async.Mult = function() {
};
var cljs$core$async$Mult$tap_STAR_$dyn_5415 = function(m, ch, close_QMARK_) {
  var x__4428__auto__ = m == null ? null : m;
  var m__4429__auto__ = cljs.core.async.tap_STAR_[goog.typeOf(x__4428__auto__)];
  if (!(m__4429__auto__ == null)) {
    return m__4429__auto__.call(null, m, ch, close_QMARK_);
  } else {
    var m__4426__auto__ = cljs.core.async.tap_STAR_["_"];
    if (!(m__4426__auto__ == null)) {
      return m__4426__auto__.call(null, m, ch, close_QMARK_);
    } else {
      throw cljs.core.missing_protocol.call(null, "Mult.tap*", m);
    }
  }
};
cljs.core.async.tap_STAR_ = function cljs$core$async$tap_STAR_(m, ch, close_QMARK_) {
  if (!(m == null) && !(m.cljs$core$async$Mult$tap_STAR_$arity$3 == null)) {
    return m.cljs$core$async$Mult$tap_STAR_$arity$3(m, ch, close_QMARK_);
  } else {
    return cljs$core$async$Mult$tap_STAR_$dyn_5415.call(null, m, ch, close_QMARK_);
  }
};
var cljs$core$async$Mult$untap_STAR_$dyn_5416 = function(m, ch) {
  var x__4428__auto__ = m == null ? null : m;
  var m__4429__auto__ = cljs.core.async.untap_STAR_[goog.typeOf(x__4428__auto__)];
  if (!(m__4429__auto__ == null)) {
    return m__4429__auto__.call(null, m, ch);
  } else {
    var m__4426__auto__ = cljs.core.async.untap_STAR_["_"];
    if (!(m__4426__auto__ == null)) {
      return m__4426__auto__.call(null, m, ch);
    } else {
      throw cljs.core.missing_protocol.call(null, "Mult.untap*", m);
    }
  }
};
cljs.core.async.untap_STAR_ = function cljs$core$async$untap_STAR_(m, ch) {
  if (!(m == null) && !(m.cljs$core$async$Mult$untap_STAR_$arity$2 == null)) {
    return m.cljs$core$async$Mult$untap_STAR_$arity$2(m, ch);
  } else {
    return cljs$core$async$Mult$untap_STAR_$dyn_5416.call(null, m, ch);
  }
};
var cljs$core$async$Mult$untap_all_STAR_$dyn_5417 = function(m) {
  var x__4428__auto__ = m == null ? null : m;
  var m__4429__auto__ = cljs.core.async.untap_all_STAR_[goog.typeOf(x__4428__auto__)];
  if (!(m__4429__auto__ == null)) {
    return m__4429__auto__.call(null, m);
  } else {
    var m__4426__auto__ = cljs.core.async.untap_all_STAR_["_"];
    if (!(m__4426__auto__ == null)) {
      return m__4426__auto__.call(null, m);
    } else {
      throw cljs.core.missing_protocol.call(null, "Mult.untap-all*", m);
    }
  }
};
cljs.core.async.untap_all_STAR_ = function cljs$core$async$untap_all_STAR_(m) {
  if (!(m == null) && !(m.cljs$core$async$Mult$untap_all_STAR_$arity$1 == null)) {
    return m.cljs$core$async$Mult$untap_all_STAR_$arity$1(m);
  } else {
    return cljs$core$async$Mult$untap_all_STAR_$dyn_5417.call(null, m);
  }
};
cljs.core.async.mult = function cljs$core$async$mult(ch) {
  var cs = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var m = function() {
    if (typeof cljs !== "undefined" && typeof cljs.core !== "undefined" && typeof cljs.core.async !== "undefined" && typeof cljs.core.async.t_cljs$core$async5418 !== "undefined") {
    } else {
      cljs.core.async.t_cljs$core$async5418 = function(ch, cs, meta5419) {
        this.ch = ch;
        this.cs = cs;
        this.meta5419 = meta5419;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
        this.cljs$lang$protocol_mask$partition1$ = 0;
      };
      cljs.core.async.t_cljs$core$async5418.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_5420, meta5419__$1) {
        var self__ = this;
        var _5420__$1 = this;
        return new cljs.core.async.t_cljs$core$async5418(self__.ch, self__.cs, meta5419__$1);
      };
      cljs.core.async.t_cljs$core$async5418.prototype.cljs$core$IMeta$_meta$arity$1 = function(_5420) {
        var self__ = this;
        var _5420__$1 = this;
        return self__.meta5419;
      };
      cljs.core.async.t_cljs$core$async5418.prototype.cljs$core$async$Mux$ = cljs.core.PROTOCOL_SENTINEL;
      cljs.core.async.t_cljs$core$async5418.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(_) {
        var self__ = this;
        var ___$1 = this;
        return self__.ch;
      };
      cljs.core.async.t_cljs$core$async5418.prototype.cljs$core$async$Mult$ = cljs.core.PROTOCOL_SENTINEL;
      cljs.core.async.t_cljs$core$async5418.prototype.cljs$core$async$Mult$tap_STAR_$arity$3 = function(_, ch__$1, close_QMARK_) {
        var self__ = this;
        var ___$1 = this;
        cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.assoc, ch__$1, close_QMARK_);
        return null;
      };
      cljs.core.async.t_cljs$core$async5418.prototype.cljs$core$async$Mult$untap_STAR_$arity$2 = function(_, ch__$1) {
        var self__ = this;
        var ___$1 = this;
        cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.dissoc, ch__$1);
        return null;
      };
      cljs.core.async.t_cljs$core$async5418.prototype.cljs$core$async$Mult$untap_all_STAR_$arity$1 = function(_) {
        var self__ = this;
        var ___$1 = this;
        cljs.core.reset_BANG_.call(null, self__.cs, cljs.core.PersistentArrayMap.EMPTY);
        return null;
      };
      cljs.core.async.t_cljs$core$async5418.getBasis = function() {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "ch", "ch", 1085813622, null), new cljs.core.Symbol(null, "cs", "cs", -117024463, null), new cljs.core.Symbol(null, "meta5419", "meta5419", -201594410, null)], null);
      };
      cljs.core.async.t_cljs$core$async5418.cljs$lang$type = true;
      cljs.core.async.t_cljs$core$async5418.cljs$lang$ctorStr = "cljs.core.async/t_cljs$core$async5418";
      cljs.core.async.t_cljs$core$async5418.cljs$lang$ctorPrWriter = function(this__4369__auto__, writer__4370__auto__, opt__4371__auto__) {
        return cljs.core._write.call(null, writer__4370__auto__, "cljs.core.async/t_cljs$core$async5418");
      };
      cljs.core.async.__GT_t_cljs$core$async5418 = function cljs$core$async$mult_$___GT_t_cljs$core$async5418(ch__$1, cs__$1, meta5419) {
        return new cljs.core.async.t_cljs$core$async5418(ch__$1, cs__$1, meta5419);
      };
    }
    return new cljs.core.async.t_cljs$core$async5418(ch, cs, cljs.core.PersistentArrayMap.EMPTY);
  }();
  var dchan = cljs.core.async.chan.call(null, 1);
  var dctr = cljs.core.atom.call(null, null);
  var done = function(_) {
    if (cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec) === 0) {
      return cljs.core.async.put_BANG_.call(null, dchan, true);
    } else {
      return null;
    }
  };
  var c__4794__auto___5637 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function() {
    var f__4795__auto__ = function() {
      var switch__4702__auto__ = function(state_5553) {
        var state_val_5554 = state_5553[1];
        if (state_val_5554 === 7) {
          var inst_5549 = state_5553[2];
          var state_5553__$1 = state_5553;
          var statearr_5555_5638 = state_5553__$1;
          statearr_5555_5638[2] = inst_5549;
          statearr_5555_5638[1] = 3;
          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
        } else {
          if (state_val_5554 === 20) {
            var inst_5454 = state_5553[7];
            var inst_5466 = cljs.core.first.call(null, inst_5454);
            var inst_5467 = cljs.core.nth.call(null, inst_5466, 0, null);
            var inst_5468 = cljs.core.nth.call(null, inst_5466, 1, null);
            var state_5553__$1 = function() {
              var statearr_5556 = state_5553;
              statearr_5556[8] = inst_5467;
              return statearr_5556;
            }();
            if (cljs.core.truth_(inst_5468)) {
              var statearr_5557_5639 = state_5553__$1;
              statearr_5557_5639[1] = 22;
            } else {
              var statearr_5558_5640 = state_5553__$1;
              statearr_5558_5640[1] = 23;
            }
            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
          } else {
            if (state_val_5554 === 27) {
              var inst_5423 = state_5553[9];
              var inst_5496 = state_5553[10];
              var inst_5503 = state_5553[11];
              var inst_5498 = state_5553[12];
              var inst_5503__$1 = cljs.core._nth.call(null, inst_5496, inst_5498);
              var inst_5504 = cljs.core.async.put_BANG_.call(null, inst_5503__$1, inst_5423, done);
              var state_5553__$1 = function() {
                var statearr_5559 = state_5553;
                statearr_5559[11] = inst_5503__$1;
                return statearr_5559;
              }();
              if (cljs.core.truth_(inst_5504)) {
                var statearr_5560_5641 = state_5553__$1;
                statearr_5560_5641[1] = 30;
              } else {
                var statearr_5561_5642 = state_5553__$1;
                statearr_5561_5642[1] = 31;
              }
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_5554 === 1) {
                var state_5553__$1 = state_5553;
                var statearr_5562_5643 = state_5553__$1;
                statearr_5562_5643[2] = null;
                statearr_5562_5643[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_5554 === 24) {
                  var inst_5454 = state_5553[7];
                  var inst_5473 = state_5553[2];
                  var inst_5474 = cljs.core.next.call(null, inst_5454);
                  var inst_5432 = inst_5474;
                  var inst_5433 = null;
                  var inst_5434 = 0;
                  var inst_5435 = 0;
                  var state_5553__$1 = function() {
                    var statearr_5563 = state_5553;
                    statearr_5563[13] = inst_5473;
                    statearr_5563[14] = inst_5433;
                    statearr_5563[15] = inst_5432;
                    statearr_5563[16] = inst_5434;
                    statearr_5563[17] = inst_5435;
                    return statearr_5563;
                  }();
                  var statearr_5564_5644 = state_5553__$1;
                  statearr_5564_5644[2] = null;
                  statearr_5564_5644[1] = 8;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_5554 === 39) {
                    var state_5553__$1 = state_5553;
                    var statearr_5568_5645 = state_5553__$1;
                    statearr_5568_5645[2] = null;
                    statearr_5568_5645[1] = 41;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_5554 === 4) {
                      var inst_5423 = state_5553[9];
                      var inst_5423__$1 = state_5553[2];
                      var inst_5424 = inst_5423__$1 == null;
                      var state_5553__$1 = function() {
                        var statearr_5569 = state_5553;
                        statearr_5569[9] = inst_5423__$1;
                        return statearr_5569;
                      }();
                      if (cljs.core.truth_(inst_5424)) {
                        var statearr_5570_5646 = state_5553__$1;
                        statearr_5570_5646[1] = 5;
                      } else {
                        var statearr_5571_5647 = state_5553__$1;
                        statearr_5571_5647[1] = 6;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_5554 === 15) {
                        var inst_5433 = state_5553[14];
                        var inst_5432 = state_5553[15];
                        var inst_5434 = state_5553[16];
                        var inst_5435 = state_5553[17];
                        var inst_5450 = state_5553[2];
                        var inst_5451 = inst_5435 + 1;
                        var tmp5565 = inst_5433;
                        var tmp5566 = inst_5432;
                        var tmp5567 = inst_5434;
                        var inst_5432__$1 = tmp5566;
                        var inst_5433__$1 = tmp5565;
                        var inst_5434__$1 = tmp5567;
                        var inst_5435__$1 = inst_5451;
                        var state_5553__$1 = function() {
                          var statearr_5572 = state_5553;
                          statearr_5572[18] = inst_5450;
                          statearr_5572[14] = inst_5433__$1;
                          statearr_5572[15] = inst_5432__$1;
                          statearr_5572[16] = inst_5434__$1;
                          statearr_5572[17] = inst_5435__$1;
                          return statearr_5572;
                        }();
                        var statearr_5573_5648 = state_5553__$1;
                        statearr_5573_5648[2] = null;
                        statearr_5573_5648[1] = 8;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_5554 === 21) {
                          var inst_5477 = state_5553[2];
                          var state_5553__$1 = state_5553;
                          var statearr_5577_5649 = state_5553__$1;
                          statearr_5577_5649[2] = inst_5477;
                          statearr_5577_5649[1] = 18;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_5554 === 31) {
                            var inst_5503 = state_5553[11];
                            var inst_5507 = cljs.core.async.untap_STAR_.call(null, m, inst_5503);
                            var state_5553__$1 = state_5553;
                            var statearr_5578_5650 = state_5553__$1;
                            statearr_5578_5650[2] = inst_5507;
                            statearr_5578_5650[1] = 32;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_5554 === 32) {
                              var inst_5496 = state_5553[10];
                              var inst_5497 = state_5553[19];
                              var inst_5498 = state_5553[12];
                              var inst_5495 = state_5553[20];
                              var inst_5509 = state_5553[2];
                              var inst_5510 = inst_5498 + 1;
                              var tmp5574 = inst_5496;
                              var tmp5575 = inst_5497;
                              var tmp5576 = inst_5495;
                              var inst_5495__$1 = tmp5576;
                              var inst_5496__$1 = tmp5574;
                              var inst_5497__$1 = tmp5575;
                              var inst_5498__$1 = inst_5510;
                              var state_5553__$1 = function() {
                                var statearr_5579 = state_5553;
                                statearr_5579[10] = inst_5496__$1;
                                statearr_5579[19] = inst_5497__$1;
                                statearr_5579[12] = inst_5498__$1;
                                statearr_5579[20] = inst_5495__$1;
                                statearr_5579[21] = inst_5509;
                                return statearr_5579;
                              }();
                              var statearr_5580_5651 = state_5553__$1;
                              statearr_5580_5651[2] = null;
                              statearr_5580_5651[1] = 25;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_5554 === 40) {
                                var inst_5522 = state_5553[22];
                                var inst_5526 = cljs.core.async.untap_STAR_.call(null, m, inst_5522);
                                var state_5553__$1 = state_5553;
                                var statearr_5581_5652 = state_5553__$1;
                                statearr_5581_5652[2] = inst_5526;
                                statearr_5581_5652[1] = 41;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_5554 === 33) {
                                  var inst_5513 = state_5553[23];
                                  var inst_5515 = cljs.core.chunked_seq_QMARK_.call(null, inst_5513);
                                  var state_5553__$1 = state_5553;
                                  if (inst_5515) {
                                    var statearr_5582_5653 = state_5553__$1;
                                    statearr_5582_5653[1] = 36;
                                  } else {
                                    var statearr_5583_5654 = state_5553__$1;
                                    statearr_5583_5654[1] = 37;
                                  }
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_5554 === 13) {
                                    var inst_5444 = state_5553[24];
                                    var inst_5447 = cljs.core.async.close_BANG_.call(null, inst_5444);
                                    var state_5553__$1 = state_5553;
                                    var statearr_5584_5655 = state_5553__$1;
                                    statearr_5584_5655[2] = inst_5447;
                                    statearr_5584_5655[1] = 15;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_5554 === 22) {
                                      var inst_5467 = state_5553[8];
                                      var inst_5470 = cljs.core.async.close_BANG_.call(null, inst_5467);
                                      var state_5553__$1 = state_5553;
                                      var statearr_5585_5656 = state_5553__$1;
                                      statearr_5585_5656[2] = inst_5470;
                                      statearr_5585_5656[1] = 24;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_5554 === 36) {
                                        var inst_5513 = state_5553[23];
                                        var inst_5517 = cljs.core.chunk_first.call(null, inst_5513);
                                        var inst_5518 = cljs.core.chunk_rest.call(null, inst_5513);
                                        var inst_5519 = cljs.core.count.call(null, inst_5517);
                                        var inst_5495 = inst_5518;
                                        var inst_5496 = inst_5517;
                                        var inst_5497 = inst_5519;
                                        var inst_5498 = 0;
                                        var state_5553__$1 = function() {
                                          var statearr_5586 = state_5553;
                                          statearr_5586[10] = inst_5496;
                                          statearr_5586[19] = inst_5497;
                                          statearr_5586[12] = inst_5498;
                                          statearr_5586[20] = inst_5495;
                                          return statearr_5586;
                                        }();
                                        var statearr_5587_5657 = state_5553__$1;
                                        statearr_5587_5657[2] = null;
                                        statearr_5587_5657[1] = 25;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_5554 === 41) {
                                          var inst_5513 = state_5553[23];
                                          var inst_5528 = state_5553[2];
                                          var inst_5529 = cljs.core.next.call(null, inst_5513);
                                          var inst_5495 = inst_5529;
                                          var inst_5496 = null;
                                          var inst_5497 = 0;
                                          var inst_5498 = 0;
                                          var state_5553__$1 = function() {
                                            var statearr_5588 = state_5553;
                                            statearr_5588[25] = inst_5528;
                                            statearr_5588[10] = inst_5496;
                                            statearr_5588[19] = inst_5497;
                                            statearr_5588[12] = inst_5498;
                                            statearr_5588[20] = inst_5495;
                                            return statearr_5588;
                                          }();
                                          var statearr_5589_5658 = state_5553__$1;
                                          statearr_5589_5658[2] = null;
                                          statearr_5589_5658[1] = 25;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_5554 === 43) {
                                            var state_5553__$1 = state_5553;
                                            var statearr_5590_5659 = state_5553__$1;
                                            statearr_5590_5659[2] = null;
                                            statearr_5590_5659[1] = 44;
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_5554 === 29) {
                                              var inst_5537 = state_5553[2];
                                              var state_5553__$1 = state_5553;
                                              var statearr_5591_5660 = state_5553__$1;
                                              statearr_5591_5660[2] = inst_5537;
                                              statearr_5591_5660[1] = 26;
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_5554 === 44) {
                                                var inst_5546 = state_5553[2];
                                                var state_5553__$1 = function() {
                                                  var statearr_5592 = state_5553;
                                                  statearr_5592[26] = inst_5546;
                                                  return statearr_5592;
                                                }();
                                                var statearr_5593_5661 = state_5553__$1;
                                                statearr_5593_5661[2] = null;
                                                statearr_5593_5661[1] = 2;
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_5554 === 6) {
                                                  var inst_5487 = state_5553[27];
                                                  var inst_5486 = cljs.core.deref.call(null, cs);
                                                  var inst_5487__$1 = cljs.core.keys.call(null, inst_5486);
                                                  var inst_5488 = cljs.core.count.call(null, inst_5487__$1);
                                                  var inst_5489 = cljs.core.reset_BANG_.call(null, dctr, inst_5488);
                                                  var inst_5494 = cljs.core.seq.call(null, inst_5487__$1);
                                                  var inst_5495 = inst_5494;
                                                  var inst_5496 = null;
                                                  var inst_5497 = 0;
                                                  var inst_5498 = 0;
                                                  var state_5553__$1 = function() {
                                                    var statearr_5594 = state_5553;
                                                    statearr_5594[10] = inst_5496;
                                                    statearr_5594[19] = inst_5497;
                                                    statearr_5594[28] = inst_5489;
                                                    statearr_5594[12] = inst_5498;
                                                    statearr_5594[20] = inst_5495;
                                                    statearr_5594[27] = inst_5487__$1;
                                                    return statearr_5594;
                                                  }();
                                                  var statearr_5595_5662 = state_5553__$1;
                                                  statearr_5595_5662[2] = null;
                                                  statearr_5595_5662[1] = 25;
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_5554 === 28) {
                                                    var inst_5513 = state_5553[23];
                                                    var inst_5495 = state_5553[20];
                                                    var inst_5513__$1 = cljs.core.seq.call(null, inst_5495);
                                                    var state_5553__$1 = function() {
                                                      var statearr_5596 = state_5553;
                                                      statearr_5596[23] = inst_5513__$1;
                                                      return statearr_5596;
                                                    }();
                                                    if (inst_5513__$1) {
                                                      var statearr_5597_5663 = state_5553__$1;
                                                      statearr_5597_5663[1] = 33;
                                                    } else {
                                                      var statearr_5598_5664 = state_5553__$1;
                                                      statearr_5598_5664[1] = 34;
                                                    }
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_5554 === 25) {
                                                      var inst_5497 = state_5553[19];
                                                      var inst_5498 = state_5553[12];
                                                      var inst_5500 = inst_5498 < inst_5497;
                                                      var inst_5501 = inst_5500;
                                                      var state_5553__$1 = state_5553;
                                                      if (cljs.core.truth_(inst_5501)) {
                                                        var statearr_5599_5665 = state_5553__$1;
                                                        statearr_5599_5665[1] = 27;
                                                      } else {
                                                        var statearr_5600_5666 = state_5553__$1;
                                                        statearr_5600_5666[1] = 28;
                                                      }
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      if (state_val_5554 === 34) {
                                                        var state_5553__$1 = state_5553;
                                                        var statearr_5601_5667 = state_5553__$1;
                                                        statearr_5601_5667[2] = null;
                                                        statearr_5601_5667[1] = 35;
                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                      } else {
                                                        if (state_val_5554 === 17) {
                                                          var state_5553__$1 = state_5553;
                                                          var statearr_5602_5668 = state_5553__$1;
                                                          statearr_5602_5668[2] = null;
                                                          statearr_5602_5668[1] = 18;
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          if (state_val_5554 === 3) {
                                                            var inst_5551 = state_5553[2];
                                                            var state_5553__$1 = state_5553;
                                                            return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_5553__$1, inst_5551);
                                                          } else {
                                                            if (state_val_5554 === 12) {
                                                              var inst_5482 = state_5553[2];
                                                              var state_5553__$1 = state_5553;
                                                              var statearr_5603_5669 = state_5553__$1;
                                                              statearr_5603_5669[2] = inst_5482;
                                                              statearr_5603_5669[1] = 9;
                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                            } else {
                                                              if (state_val_5554 === 2) {
                                                                var state_5553__$1 = state_5553;
                                                                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_5553__$1, 4, ch);
                                                              } else {
                                                                if (state_val_5554 === 23) {
                                                                  var state_5553__$1 = state_5553;
                                                                  var statearr_5604_5670 = state_5553__$1;
                                                                  statearr_5604_5670[2] = null;
                                                                  statearr_5604_5670[1] = 24;
                                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                } else {
                                                                  if (state_val_5554 === 35) {
                                                                    var inst_5535 = state_5553[2];
                                                                    var state_5553__$1 = state_5553;
                                                                    var statearr_5605_5671 = state_5553__$1;
                                                                    statearr_5605_5671[2] = inst_5535;
                                                                    statearr_5605_5671[1] = 29;
                                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                  } else {
                                                                    if (state_val_5554 === 19) {
                                                                      var inst_5454 = state_5553[7];
                                                                      var inst_5458 = cljs.core.chunk_first.call(null, inst_5454);
                                                                      var inst_5459 = cljs.core.chunk_rest.call(null, inst_5454);
                                                                      var inst_5460 = cljs.core.count.call(null, inst_5458);
                                                                      var inst_5432 = inst_5459;
                                                                      var inst_5433 = inst_5458;
                                                                      var inst_5434 = inst_5460;
                                                                      var inst_5435 = 0;
                                                                      var state_5553__$1 = function() {
                                                                        var statearr_5606 = state_5553;
                                                                        statearr_5606[14] = inst_5433;
                                                                        statearr_5606[15] = inst_5432;
                                                                        statearr_5606[16] = inst_5434;
                                                                        statearr_5606[17] = inst_5435;
                                                                        return statearr_5606;
                                                                      }();
                                                                      var statearr_5607_5672 = state_5553__$1;
                                                                      statearr_5607_5672[2] = null;
                                                                      statearr_5607_5672[1] = 8;
                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                    } else {
                                                                      if (state_val_5554 === 11) {
                                                                        var inst_5454 = state_5553[7];
                                                                        var inst_5432 = state_5553[15];
                                                                        var inst_5454__$1 = cljs.core.seq.call(null, inst_5432);
                                                                        var state_5553__$1 = function() {
                                                                          var statearr_5608 = state_5553;
                                                                          statearr_5608[7] = inst_5454__$1;
                                                                          return statearr_5608;
                                                                        }();
                                                                        if (inst_5454__$1) {
                                                                          var statearr_5609_5673 = state_5553__$1;
                                                                          statearr_5609_5673[1] = 16;
                                                                        } else {
                                                                          var statearr_5610_5674 = state_5553__$1;
                                                                          statearr_5610_5674[1] = 17;
                                                                        }
                                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                      } else {
                                                                        if (state_val_5554 === 9) {
                                                                          var inst_5484 = state_5553[2];
                                                                          var state_5553__$1 = state_5553;
                                                                          var statearr_5611_5675 = state_5553__$1;
                                                                          statearr_5611_5675[2] = inst_5484;
                                                                          statearr_5611_5675[1] = 7;
                                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                        } else {
                                                                          if (state_val_5554 === 5) {
                                                                            var inst_5430 = cljs.core.deref.call(null, cs);
                                                                            var inst_5431 = cljs.core.seq.call(null, inst_5430);
                                                                            var inst_5432 = inst_5431;
                                                                            var inst_5433 = null;
                                                                            var inst_5434 = 0;
                                                                            var inst_5435 = 0;
                                                                            var state_5553__$1 = function() {
                                                                              var statearr_5612 = state_5553;
                                                                              statearr_5612[14] = inst_5433;
                                                                              statearr_5612[15] = inst_5432;
                                                                              statearr_5612[16] = inst_5434;
                                                                              statearr_5612[17] = inst_5435;
                                                                              return statearr_5612;
                                                                            }();
                                                                            var statearr_5613_5676 = state_5553__$1;
                                                                            statearr_5613_5676[2] = null;
                                                                            statearr_5613_5676[1] = 8;
                                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                          } else {
                                                                            if (state_val_5554 === 14) {
                                                                              var state_5553__$1 = state_5553;
                                                                              var statearr_5614_5677 = state_5553__$1;
                                                                              statearr_5614_5677[2] = null;
                                                                              statearr_5614_5677[1] = 15;
                                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                            } else {
                                                                              if (state_val_5554 === 45) {
                                                                                var inst_5543 = state_5553[2];
                                                                                var state_5553__$1 = state_5553;
                                                                                var statearr_5615_5678 = state_5553__$1;
                                                                                statearr_5615_5678[2] = inst_5543;
                                                                                statearr_5615_5678[1] = 44;
                                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                              } else {
                                                                                if (state_val_5554 === 26) {
                                                                                  var inst_5487 = state_5553[27];
                                                                                  var inst_5539 = state_5553[2];
                                                                                  var inst_5540 = cljs.core.seq.call(null, inst_5487);
                                                                                  var state_5553__$1 = function() {
                                                                                    var statearr_5616 = state_5553;
                                                                                    statearr_5616[29] = inst_5539;
                                                                                    return statearr_5616;
                                                                                  }();
                                                                                  if (inst_5540) {
                                                                                    var statearr_5617_5679 = state_5553__$1;
                                                                                    statearr_5617_5679[1] = 42;
                                                                                  } else {
                                                                                    var statearr_5618_5680 = state_5553__$1;
                                                                                    statearr_5618_5680[1] = 43;
                                                                                  }
                                                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                } else {
                                                                                  if (state_val_5554 === 16) {
                                                                                    var inst_5454 = state_5553[7];
                                                                                    var inst_5456 = cljs.core.chunked_seq_QMARK_.call(null, inst_5454);
                                                                                    var state_5553__$1 = state_5553;
                                                                                    if (inst_5456) {
                                                                                      var statearr_5619_5681 = state_5553__$1;
                                                                                      statearr_5619_5681[1] = 19;
                                                                                    } else {
                                                                                      var statearr_5620_5682 = state_5553__$1;
                                                                                      statearr_5620_5682[1] = 20;
                                                                                    }
                                                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                  } else {
                                                                                    if (state_val_5554 === 38) {
                                                                                      var inst_5532 = state_5553[2];
                                                                                      var state_5553__$1 = state_5553;
                                                                                      var statearr_5621_5683 = state_5553__$1;
                                                                                      statearr_5621_5683[2] = inst_5532;
                                                                                      statearr_5621_5683[1] = 35;
                                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                    } else {
                                                                                      if (state_val_5554 === 30) {
                                                                                        var state_5553__$1 = state_5553;
                                                                                        var statearr_5622_5684 = state_5553__$1;
                                                                                        statearr_5622_5684[2] = null;
                                                                                        statearr_5622_5684[1] = 32;
                                                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                      } else {
                                                                                        if (state_val_5554 === 10) {
                                                                                          var inst_5433 = state_5553[14];
                                                                                          var inst_5435 = state_5553[17];
                                                                                          var inst_5443 = cljs.core._nth.call(null, inst_5433, inst_5435);
                                                                                          var inst_5444 = cljs.core.nth.call(null, inst_5443, 0, null);
                                                                                          var inst_5445 = cljs.core.nth.call(null, inst_5443, 1, null);
                                                                                          var state_5553__$1 = function() {
                                                                                            var statearr_5623 = state_5553;
                                                                                            statearr_5623[24] = inst_5444;
                                                                                            return statearr_5623;
                                                                                          }();
                                                                                          if (cljs.core.truth_(inst_5445)) {
                                                                                            var statearr_5624_5685 = state_5553__$1;
                                                                                            statearr_5624_5685[1] = 13;
                                                                                          } else {
                                                                                            var statearr_5625_5686 = state_5553__$1;
                                                                                            statearr_5625_5686[1] = 14;
                                                                                          }
                                                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                        } else {
                                                                                          if (state_val_5554 === 18) {
                                                                                            var inst_5480 = state_5553[2];
                                                                                            var state_5553__$1 = state_5553;
                                                                                            var statearr_5626_5687 = state_5553__$1;
                                                                                            statearr_5626_5687[2] = inst_5480;
                                                                                            statearr_5626_5687[1] = 12;
                                                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                          } else {
                                                                                            if (state_val_5554 === 42) {
                                                                                              var state_5553__$1 = state_5553;
                                                                                              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_5553__$1, 45, dchan);
                                                                                            } else {
                                                                                              if (state_val_5554 === 37) {
                                                                                                var inst_5423 = state_5553[9];
                                                                                                var inst_5513 = state_5553[23];
                                                                                                var inst_5522 = state_5553[22];
                                                                                                var inst_5522__$1 = cljs.core.first.call(null, inst_5513);
                                                                                                var inst_5523 = cljs.core.async.put_BANG_.call(null, inst_5522__$1, inst_5423, done);
                                                                                                var state_5553__$1 = function() {
                                                                                                  var statearr_5627 = state_5553;
                                                                                                  statearr_5627[22] = inst_5522__$1;
                                                                                                  return statearr_5627;
                                                                                                }();
                                                                                                if (cljs.core.truth_(inst_5523)) {
                                                                                                  var statearr_5628_5688 = state_5553__$1;
                                                                                                  statearr_5628_5688[1] = 39;
                                                                                                } else {
                                                                                                  var statearr_5629_5689 = state_5553__$1;
                                                                                                  statearr_5629_5689[1] = 40;
                                                                                                }
                                                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                              } else {
                                                                                                if (state_val_5554 === 8) {
                                                                                                  var inst_5434 = state_5553[16];
                                                                                                  var inst_5435 = state_5553[17];
                                                                                                  var inst_5437 = inst_5435 < inst_5434;
                                                                                                  var inst_5438 = inst_5437;
                                                                                                  var state_5553__$1 = state_5553;
                                                                                                  if (cljs.core.truth_(inst_5438)) {
                                                                                                    var statearr_5630_5690 = state_5553__$1;
                                                                                                    statearr_5630_5690[1] = 10;
                                                                                                  } else {
                                                                                                    var statearr_5631_5691 = state_5553__$1;
                                                                                                    statearr_5631_5691[1] = 11;
                                                                                                  }
                                                                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                } else {
                                                                                                  return null;
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      return function() {
        var cljs$core$async$mult_$_state_machine__4703__auto__ = null;
        var cljs$core$async$mult_$_state_machine__4703__auto____0 = function() {
          var statearr_5632 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
          statearr_5632[0] = cljs$core$async$mult_$_state_machine__4703__auto__;
          statearr_5632[1] = 1;
          return statearr_5632;
        };
        var cljs$core$async$mult_$_state_machine__4703__auto____1 = function(state_5553) {
          while (true) {
            var ret_value__4704__auto__ = function() {
              try {
                while (true) {
                  var result__4705__auto__ = switch__4702__auto__.call(null, state_5553);
                  if (cljs.core.keyword_identical_QMARK_.call(null, result__4705__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    continue;
                  } else {
                    return result__4705__auto__;
                  }
                  break;
                }
              } catch (e5633) {
                var ex__4706__auto__ = e5633;
                var statearr_5634_5692 = state_5553;
                statearr_5634_5692[2] = ex__4706__auto__;
                if (cljs.core.seq.call(null, state_5553[4])) {
                  var statearr_5635_5693 = state_5553;
                  statearr_5635_5693[1] = cljs.core.first.call(null, state_5553[4]);
                } else {
                  throw ex__4706__auto__;
                }
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              }
            }();
            if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__4704__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
              var G__5694 = state_5553;
              state_5553 = G__5694;
              continue;
            } else {
              return ret_value__4704__auto__;
            }
            break;
          }
        };
        cljs$core$async$mult_$_state_machine__4703__auto__ = function(state_5553) {
          switch(arguments.length) {
            case 0:
              return cljs$core$async$mult_$_state_machine__4703__auto____0.call(this);
            case 1:
              return cljs$core$async$mult_$_state_machine__4703__auto____1.call(this, state_5553);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        cljs$core$async$mult_$_state_machine__4703__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$mult_$_state_machine__4703__auto____0;
        cljs$core$async$mult_$_state_machine__4703__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$mult_$_state_machine__4703__auto____1;
        return cljs$core$async$mult_$_state_machine__4703__auto__;
      }();
    }();
    var state__4796__auto__ = function() {
      var statearr_5636 = f__4795__auto__.call(null);
      statearr_5636[6] = c__4794__auto___5637;
      return statearr_5636;
    }();
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__4796__auto__);
  });
  return m;
};
cljs.core.async.tap = function cljs$core$async$tap(var_args) {
  var G__5696 = arguments.length;
  switch(G__5696) {
    case 2:
      return cljs.core.async.tap.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.tap.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
cljs.core.async.tap.cljs$core$IFn$_invoke$arity$2 = function(mult, ch) {
  return cljs.core.async.tap.call(null, mult, ch, true);
};
cljs.core.async.tap.cljs$core$IFn$_invoke$arity$3 = function(mult, ch, close_QMARK_) {
  cljs.core.async.tap_STAR_.call(null, mult, ch, close_QMARK_);
  return ch;
};
cljs.core.async.tap.cljs$lang$maxFixedArity = 3;
cljs.core.async.untap = function cljs$core$async$untap(mult, ch) {
  return cljs.core.async.untap_STAR_.call(null, mult, ch);
};
cljs.core.async.untap_all = function cljs$core$async$untap_all(mult) {
  return cljs.core.async.untap_all_STAR_.call(null, mult);
};
cljs.core.async.Mix = function() {
};
var cljs$core$async$Mix$admix_STAR_$dyn_5698 = function(m, ch) {
  var x__4428__auto__ = m == null ? null : m;
  var m__4429__auto__ = cljs.core.async.admix_STAR_[goog.typeOf(x__4428__auto__)];
  if (!(m__4429__auto__ == null)) {
    return m__4429__auto__.call(null, m, ch);
  } else {
    var m__4426__auto__ = cljs.core.async.admix_STAR_["_"];
    if (!(m__4426__auto__ == null)) {
      return m__4426__auto__.call(null, m, ch);
    } else {
      throw cljs.core.missing_protocol.call(null, "Mix.admix*", m);
    }
  }
};
cljs.core.async.admix_STAR_ = function cljs$core$async$admix_STAR_(m, ch) {
  if (!(m == null) && !(m.cljs$core$async$Mix$admix_STAR_$arity$2 == null)) {
    return m.cljs$core$async$Mix$admix_STAR_$arity$2(m, ch);
  } else {
    return cljs$core$async$Mix$admix_STAR_$dyn_5698.call(null, m, ch);
  }
};
var cljs$core$async$Mix$unmix_STAR_$dyn_5699 = function(m, ch) {
  var x__4428__auto__ = m == null ? null : m;
  var m__4429__auto__ = cljs.core.async.unmix_STAR_[goog.typeOf(x__4428__auto__)];
  if (!(m__4429__auto__ == null)) {
    return m__4429__auto__.call(null, m, ch);
  } else {
    var m__4426__auto__ = cljs.core.async.unmix_STAR_["_"];
    if (!(m__4426__auto__ == null)) {
      return m__4426__auto__.call(null, m, ch);
    } else {
      throw cljs.core.missing_protocol.call(null, "Mix.unmix*", m);
    }
  }
};
cljs.core.async.unmix_STAR_ = function cljs$core$async$unmix_STAR_(m, ch) {
  if (!(m == null) && !(m.cljs$core$async$Mix$unmix_STAR_$arity$2 == null)) {
    return m.cljs$core$async$Mix$unmix_STAR_$arity$2(m, ch);
  } else {
    return cljs$core$async$Mix$unmix_STAR_$dyn_5699.call(null, m, ch);
  }
};
var cljs$core$async$Mix$unmix_all_STAR_$dyn_5700 = function(m) {
  var x__4428__auto__ = m == null ? null : m;
  var m__4429__auto__ = cljs.core.async.unmix_all_STAR_[goog.typeOf(x__4428__auto__)];
  if (!(m__4429__auto__ == null)) {
    return m__4429__auto__.call(null, m);
  } else {
    var m__4426__auto__ = cljs.core.async.unmix_all_STAR_["_"];
    if (!(m__4426__auto__ == null)) {
      return m__4426__auto__.call(null, m);
    } else {
      throw cljs.core.missing_protocol.call(null, "Mix.unmix-all*", m);
    }
  }
};
cljs.core.async.unmix_all_STAR_ = function cljs$core$async$unmix_all_STAR_(m) {
  if (!(m == null) && !(m.cljs$core$async$Mix$unmix_all_STAR_$arity$1 == null)) {
    return m.cljs$core$async$Mix$unmix_all_STAR_$arity$1(m);
  } else {
    return cljs$core$async$Mix$unmix_all_STAR_$dyn_5700.call(null, m);
  }
};
var cljs$core$async$Mix$toggle_STAR_$dyn_5701 = function(m, state_map) {
  var x__4428__auto__ = m == null ? null : m;
  var m__4429__auto__ = cljs.core.async.toggle_STAR_[goog.typeOf(x__4428__auto__)];
  if (!(m__4429__auto__ == null)) {
    return m__4429__auto__.call(null, m, state_map);
  } else {
    var m__4426__auto__ = cljs.core.async.toggle_STAR_["_"];
    if (!(m__4426__auto__ == null)) {
      return m__4426__auto__.call(null, m, state_map);
    } else {
      throw cljs.core.missing_protocol.call(null, "Mix.toggle*", m);
    }
  }
};
cljs.core.async.toggle_STAR_ = function cljs$core$async$toggle_STAR_(m, state_map) {
  if (!(m == null) && !(m.cljs$core$async$Mix$toggle_STAR_$arity$2 == null)) {
    return m.cljs$core$async$Mix$toggle_STAR_$arity$2(m, state_map);
  } else {
    return cljs$core$async$Mix$toggle_STAR_$dyn_5701.call(null, m, state_map);
  }
};
var cljs$core$async$Mix$solo_mode_STAR_$dyn_5702 = function(m, mode) {
  var x__4428__auto__ = m == null ? null : m;
  var m__4429__auto__ = cljs.core.async.solo_mode_STAR_[goog.typeOf(x__4428__auto__)];
  if (!(m__4429__auto__ == null)) {
    return m__4429__auto__.call(null, m, mode);
  } else {
    var m__4426__auto__ = cljs.core.async.solo_mode_STAR_["_"];
    if (!(m__4426__auto__ == null)) {
      return m__4426__auto__.call(null, m, mode);
    } else {
      throw cljs.core.missing_protocol.call(null, "Mix.solo-mode*", m);
    }
  }
};
cljs.core.async.solo_mode_STAR_ = function cljs$core$async$solo_mode_STAR_(m, mode) {
  if (!(m == null) && !(m.cljs$core$async$Mix$solo_mode_STAR_$arity$2 == null)) {
    return m.cljs$core$async$Mix$solo_mode_STAR_$arity$2(m, mode);
  } else {
    return cljs$core$async$Mix$solo_mode_STAR_$dyn_5702.call(null, m, mode);
  }
};
cljs.core.async.ioc_alts_BANG_ = function cljs$core$async$ioc_alts_BANG_(var_args) {
  var args__4742__auto__ = [];
  var len__4736__auto___5713 = arguments.length;
  var i__4737__auto___5714 = 0;
  while (true) {
    if (i__4737__auto___5714 < len__4736__auto___5713) {
      args__4742__auto__.push(arguments[i__4737__auto___5714]);
      var G__5715 = i__4737__auto___5714 + 1;
      i__4737__auto___5714 = G__5715;
      continue;
    } else {
    }
    break;
  }
  var argseq__4743__auto__ = 3 < args__4742__auto__.length ? new cljs.core.IndexedSeq(args__4742__auto__.slice(3), 0, null) : null;
  return cljs.core.async.ioc_alts_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__4743__auto__);
};
cljs.core.async.ioc_alts_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(state, cont_block, ports, p__5707) {
  var map__5708 = p__5707;
  var map__5708__$1 = (!(map__5708 == null) ? map__5708.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === map__5708.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__5708) : map__5708;
  var opts = map__5708__$1;
  var statearr_5710_5716 = state;
  statearr_5710_5716[1] = cont_block;
  var temp__5735__auto__ = cljs.core.async.do_alts.call(null, function(val) {
    var statearr_5711_5717 = state;
    statearr_5711_5717[2] = val;
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
  }, ports, opts);
  if (cljs.core.truth_(temp__5735__auto__)) {
    var cb = temp__5735__auto__;
    var statearr_5712_5718 = state;
    statearr_5712_5718[2] = cljs.core.deref.call(null, cb);
    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
  } else {
    return null;
  }
};
cljs.core.async.ioc_alts_BANG_.cljs$lang$maxFixedArity = 3;
cljs.core.async.ioc_alts_BANG_.cljs$lang$applyTo = function(seq5703) {
  var G__5704 = cljs.core.first.call(null, seq5703);
  var seq5703__$1 = cljs.core.next.call(null, seq5703);
  var G__5705 = cljs.core.first.call(null, seq5703__$1);
  var seq5703__$2 = cljs.core.next.call(null, seq5703__$1);
  var G__5706 = cljs.core.first.call(null, seq5703__$2);
  var seq5703__$3 = cljs.core.next.call(null, seq5703__$2);
  var self__4723__auto__ = this;
  return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__5704, G__5705, G__5706, seq5703__$3);
};
cljs.core.async.mix = function cljs$core$async$mix(out) {
  var cs = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var solo_modes = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "pause", "pause", -2095325672), null, new cljs.core.Keyword(null, "mute", "mute", 1151223646), null], null), null);
  var attrs = cljs.core.conj.call(null, solo_modes, new cljs.core.Keyword(null, "solo", "solo", -316350075));
  var solo_mode = cljs.core.atom.call(null, new cljs.core.Keyword(null, "mute", "mute", 1151223646));
  var change = cljs.core.async.chan.call(null, cljs.core.async.sliding_buffer.call(null, 1));
  var changed = function() {
    return cljs.core.async.put_BANG_.call(null, change, true);
  };
  var pick = function(attr, chs) {
    return cljs.core.reduce_kv.call(null, function(ret, c, v) {
      if (cljs.core.truth_(attr.call(null, v))) {
        return cljs.core.conj.call(null, ret, c);
      } else {
        return ret;
      }
    }, cljs.core.PersistentHashSet.EMPTY, chs);
  };
  var calc_state = function() {
    var chs = cljs.core.deref.call(null, cs);
    var mode = cljs.core.deref.call(null, solo_mode);
    var solos = pick.call(null, new cljs.core.Keyword(null, "solo", "solo", -316350075), chs);
    var pauses = pick.call(null, new cljs.core.Keyword(null, "pause", "pause", -2095325672), chs);
    return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "solos", "solos", 1441458643), solos, new cljs.core.Keyword(null, "mutes", "mutes", 1068806309), pick.call(null, new cljs.core.Keyword(null, "mute", "mute", 1151223646), chs), new cljs.core.Keyword(null, "reads", "reads", -1215067361), cljs.core.conj.call(null, cljs.core._EQ_.call(null, mode, new cljs.core.Keyword(null, "pause", "pause", -2095325672)) && !cljs.core.empty_QMARK_.call(null, solos) ? cljs.core.vec.call(null, 
    solos) : cljs.core.vec.call(null, cljs.core.remove.call(null, pauses, cljs.core.keys.call(null, chs))), change)], null);
  };
  var m = function() {
    if (typeof cljs !== "undefined" && typeof cljs.core !== "undefined" && typeof cljs.core.async !== "undefined" && typeof cljs.core.async.t_cljs$core$async5719 !== "undefined") {
    } else {
      cljs.core.async.t_cljs$core$async5719 = function(change, solo_mode, pick, cs, calc_state, out, changed, solo_modes, attrs, meta5720) {
        this.change = change;
        this.solo_mode = solo_mode;
        this.pick = pick;
        this.cs = cs;
        this.calc_state = calc_state;
        this.out = out;
        this.changed = changed;
        this.solo_modes = solo_modes;
        this.attrs = attrs;
        this.meta5720 = meta5720;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
        this.cljs$lang$protocol_mask$partition1$ = 0;
      };
      cljs.core.async.t_cljs$core$async5719.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_5721, meta5720__$1) {
        var self__ = this;
        var _5721__$1 = this;
        return new cljs.core.async.t_cljs$core$async5719(self__.change, self__.solo_mode, self__.pick, self__.cs, self__.calc_state, self__.out, self__.changed, self__.solo_modes, self__.attrs, meta5720__$1);
      };
      cljs.core.async.t_cljs$core$async5719.prototype.cljs$core$IMeta$_meta$arity$1 = function(_5721) {
        var self__ = this;
        var _5721__$1 = this;
        return self__.meta5720;
      };
      cljs.core.async.t_cljs$core$async5719.prototype.cljs$core$async$Mux$ = cljs.core.PROTOCOL_SENTINEL;
      cljs.core.async.t_cljs$core$async5719.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(_) {
        var self__ = this;
        var ___$1 = this;
        return self__.out;
      };
      cljs.core.async.t_cljs$core$async5719.prototype.cljs$core$async$Mix$ = cljs.core.PROTOCOL_SENTINEL;
      cljs.core.async.t_cljs$core$async5719.prototype.cljs$core$async$Mix$admix_STAR_$arity$2 = function(_, ch) {
        var self__ = this;
        var ___$1 = this;
        cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.assoc, ch, cljs.core.PersistentArrayMap.EMPTY);
        return self__.changed.call(null);
      };
      cljs.core.async.t_cljs$core$async5719.prototype.cljs$core$async$Mix$unmix_STAR_$arity$2 = function(_, ch) {
        var self__ = this;
        var ___$1 = this;
        cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.dissoc, ch);
        return self__.changed.call(null);
      };
      cljs.core.async.t_cljs$core$async5719.prototype.cljs$core$async$Mix$unmix_all_STAR_$arity$1 = function(_) {
        var self__ = this;
        var ___$1 = this;
        cljs.core.reset_BANG_.call(null, self__.cs, cljs.core.PersistentArrayMap.EMPTY);
        return self__.changed.call(null);
      };
      cljs.core.async.t_cljs$core$async5719.prototype.cljs$core$async$Mix$toggle_STAR_$arity$2 = function(_, state_map) {
        var self__ = this;
        var ___$1 = this;
        cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.partial.call(null, cljs.core.merge_with, cljs.core.merge), state_map);
        return self__.changed.call(null);
      };
      cljs.core.async.t_cljs$core$async5719.prototype.cljs$core$async$Mix$solo_mode_STAR_$arity$2 = function(_, mode) {
        var self__ = this;
        var ___$1 = this;
        if (cljs.core.truth_(self__.solo_modes.call(null, mode))) {
        } else {
          throw new Error(["Assert failed: ", ["mode must be one of: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.solo_modes)].join(""), "\n", "(solo-modes mode)"].join(""));
        }
        cljs.core.reset_BANG_.call(null, self__.solo_mode, mode);
        return self__.changed.call(null);
      };
      cljs.core.async.t_cljs$core$async5719.getBasis = function() {
        return new cljs.core.PersistentVector(null, 10, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "change", "change", 477485025, null), new cljs.core.Symbol(null, "solo-mode", "solo-mode", 2031788074, null), new cljs.core.Symbol(null, "pick", "pick", 1300068175, null), new cljs.core.Symbol(null, "cs", "cs", -117024463, null), new cljs.core.Symbol(null, "calc-state", "calc-state", -349968968, null), new cljs.core.Symbol(null, "out", "out", 729986010, null), new cljs.core.Symbol(null, 
        "changed", "changed", -2083710852, null), new cljs.core.Symbol(null, "solo-modes", "solo-modes", 882180540, null), new cljs.core.Symbol(null, "attrs", "attrs", -450137186, null), new cljs.core.Symbol(null, "meta5720", "meta5720", 687297004, null)], null);
      };
      cljs.core.async.t_cljs$core$async5719.cljs$lang$type = true;
      cljs.core.async.t_cljs$core$async5719.cljs$lang$ctorStr = "cljs.core.async/t_cljs$core$async5719";
      cljs.core.async.t_cljs$core$async5719.cljs$lang$ctorPrWriter = function(this__4369__auto__, writer__4370__auto__, opt__4371__auto__) {
        return cljs.core._write.call(null, writer__4370__auto__, "cljs.core.async/t_cljs$core$async5719");
      };
      cljs.core.async.__GT_t_cljs$core$async5719 = function cljs$core$async$mix_$___GT_t_cljs$core$async5719(change__$1, solo_mode__$1, pick__$1, cs__$1, calc_state__$1, out__$1, changed__$1, solo_modes__$1, attrs__$1, meta5720) {
        return new cljs.core.async.t_cljs$core$async5719(change__$1, solo_mode__$1, pick__$1, cs__$1, calc_state__$1, out__$1, changed__$1, solo_modes__$1, attrs__$1, meta5720);
      };
    }
    return new cljs.core.async.t_cljs$core$async5719(change, solo_mode, pick, cs, calc_state, out, changed, solo_modes, attrs, cljs.core.PersistentArrayMap.EMPTY);
  }();
  var c__4794__auto___5884 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function() {
    var f__4795__auto__ = function() {
      var switch__4702__auto__ = function(state_5823) {
        var state_val_5824 = state_5823[1];
        if (state_val_5824 === 7) {
          var inst_5738 = state_5823[2];
          var state_5823__$1 = state_5823;
          var statearr_5825_5885 = state_5823__$1;
          statearr_5825_5885[2] = inst_5738;
          statearr_5825_5885[1] = 4;
          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
        } else {
          if (state_val_5824 === 20) {
            var inst_5750 = state_5823[7];
            var state_5823__$1 = state_5823;
            var statearr_5826_5886 = state_5823__$1;
            statearr_5826_5886[2] = inst_5750;
            statearr_5826_5886[1] = 21;
            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
          } else {
            if (state_val_5824 === 27) {
              var state_5823__$1 = state_5823;
              var statearr_5827_5887 = state_5823__$1;
              statearr_5827_5887[2] = null;
              statearr_5827_5887[1] = 28;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_5824 === 1) {
                var inst_5725 = state_5823[8];
                var inst_5725__$1 = calc_state.call(null);
                var inst_5727 = inst_5725__$1 == null;
                var inst_5728 = cljs.core.not.call(null, inst_5727);
                var state_5823__$1 = function() {
                  var statearr_5828 = state_5823;
                  statearr_5828[8] = inst_5725__$1;
                  return statearr_5828;
                }();
                if (inst_5728) {
                  var statearr_5829_5888 = state_5823__$1;
                  statearr_5829_5888[1] = 2;
                } else {
                  var statearr_5830_5889 = state_5823__$1;
                  statearr_5830_5889[1] = 3;
                }
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_5824 === 24) {
                  var inst_5783 = state_5823[9];
                  var inst_5797 = state_5823[10];
                  var inst_5774 = state_5823[11];
                  var inst_5797__$1 = inst_5774.call(null, inst_5783);
                  var state_5823__$1 = function() {
                    var statearr_5831 = state_5823;
                    statearr_5831[10] = inst_5797__$1;
                    return statearr_5831;
                  }();
                  if (cljs.core.truth_(inst_5797__$1)) {
                    var statearr_5832_5890 = state_5823__$1;
                    statearr_5832_5890[1] = 29;
                  } else {
                    var statearr_5833_5891 = state_5823__$1;
                    statearr_5833_5891[1] = 30;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_5824 === 4) {
                    var inst_5741 = state_5823[2];
                    var state_5823__$1 = state_5823;
                    if (cljs.core.truth_(inst_5741)) {
                      var statearr_5834_5892 = state_5823__$1;
                      statearr_5834_5892[1] = 8;
                    } else {
                      var statearr_5835_5893 = state_5823__$1;
                      statearr_5835_5893[1] = 9;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_5824 === 15) {
                      var inst_5768 = state_5823[2];
                      var state_5823__$1 = state_5823;
                      if (cljs.core.truth_(inst_5768)) {
                        var statearr_5836_5894 = state_5823__$1;
                        statearr_5836_5894[1] = 19;
                      } else {
                        var statearr_5837_5895 = state_5823__$1;
                        statearr_5837_5895[1] = 20;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_5824 === 21) {
                        var inst_5773 = state_5823[12];
                        var inst_5773__$1 = state_5823[2];
                        var inst_5774 = cljs.core.get.call(null, inst_5773__$1, new cljs.core.Keyword(null, "solos", "solos", 1441458643));
                        var inst_5775 = cljs.core.get.call(null, inst_5773__$1, new cljs.core.Keyword(null, "mutes", "mutes", 1068806309));
                        var inst_5776 = cljs.core.get.call(null, inst_5773__$1, new cljs.core.Keyword(null, "reads", "reads", -1215067361));
                        var state_5823__$1 = function() {
                          var statearr_5838 = state_5823;
                          statearr_5838[12] = inst_5773__$1;
                          statearr_5838[11] = inst_5774;
                          statearr_5838[13] = inst_5775;
                          return statearr_5838;
                        }();
                        return cljs.core.async.ioc_alts_BANG_.call(null, state_5823__$1, 22, inst_5776);
                      } else {
                        if (state_val_5824 === 31) {
                          var inst_5805 = state_5823[2];
                          var state_5823__$1 = state_5823;
                          if (cljs.core.truth_(inst_5805)) {
                            var statearr_5839_5896 = state_5823__$1;
                            statearr_5839_5896[1] = 32;
                          } else {
                            var statearr_5840_5897 = state_5823__$1;
                            statearr_5840_5897[1] = 33;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_5824 === 32) {
                            var inst_5782 = state_5823[14];
                            var state_5823__$1 = state_5823;
                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_5823__$1, 35, out, inst_5782);
                          } else {
                            if (state_val_5824 === 33) {
                              var inst_5773 = state_5823[12];
                              var inst_5750 = inst_5773;
                              var state_5823__$1 = function() {
                                var statearr_5841 = state_5823;
                                statearr_5841[7] = inst_5750;
                                return statearr_5841;
                              }();
                              var statearr_5842_5898 = state_5823__$1;
                              statearr_5842_5898[2] = null;
                              statearr_5842_5898[1] = 11;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_5824 === 13) {
                                var inst_5750 = state_5823[7];
                                var inst_5757 = inst_5750.cljs$lang$protocol_mask$partition0$;
                                var inst_5758 = inst_5757 & 64;
                                var inst_5759 = inst_5750.cljs$core$ISeq$;
                                var inst_5760 = cljs.core.PROTOCOL_SENTINEL === inst_5759;
                                var inst_5761 = inst_5758 || inst_5760;
                                var state_5823__$1 = state_5823;
                                if (cljs.core.truth_(inst_5761)) {
                                  var statearr_5843_5899 = state_5823__$1;
                                  statearr_5843_5899[1] = 16;
                                } else {
                                  var statearr_5844_5900 = state_5823__$1;
                                  statearr_5844_5900[1] = 17;
                                }
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_5824 === 22) {
                                  var inst_5783 = state_5823[9];
                                  var inst_5782 = state_5823[14];
                                  var inst_5781 = state_5823[2];
                                  var inst_5782__$1 = cljs.core.nth.call(null, inst_5781, 0, null);
                                  var inst_5783__$1 = cljs.core.nth.call(null, inst_5781, 1, null);
                                  var inst_5784 = inst_5782__$1 == null;
                                  var inst_5785 = cljs.core._EQ_.call(null, inst_5783__$1, change);
                                  var inst_5786 = inst_5784 || inst_5785;
                                  var state_5823__$1 = function() {
                                    var statearr_5845 = state_5823;
                                    statearr_5845[9] = inst_5783__$1;
                                    statearr_5845[14] = inst_5782__$1;
                                    return statearr_5845;
                                  }();
                                  if (cljs.core.truth_(inst_5786)) {
                                    var statearr_5846_5901 = state_5823__$1;
                                    statearr_5846_5901[1] = 23;
                                  } else {
                                    var statearr_5847_5902 = state_5823__$1;
                                    statearr_5847_5902[1] = 24;
                                  }
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_5824 === 36) {
                                    var inst_5773 = state_5823[12];
                                    var inst_5750 = inst_5773;
                                    var state_5823__$1 = function() {
                                      var statearr_5848 = state_5823;
                                      statearr_5848[7] = inst_5750;
                                      return statearr_5848;
                                    }();
                                    var statearr_5849_5903 = state_5823__$1;
                                    statearr_5849_5903[2] = null;
                                    statearr_5849_5903[1] = 11;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_5824 === 29) {
                                      var inst_5797 = state_5823[10];
                                      var state_5823__$1 = state_5823;
                                      var statearr_5850_5904 = state_5823__$1;
                                      statearr_5850_5904[2] = inst_5797;
                                      statearr_5850_5904[1] = 31;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_5824 === 6) {
                                        var state_5823__$1 = state_5823;
                                        var statearr_5851_5905 = state_5823__$1;
                                        statearr_5851_5905[2] = false;
                                        statearr_5851_5905[1] = 7;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_5824 === 28) {
                                          var inst_5793 = state_5823[2];
                                          var inst_5794 = calc_state.call(null);
                                          var inst_5750 = inst_5794;
                                          var state_5823__$1 = function() {
                                            var statearr_5852 = state_5823;
                                            statearr_5852[15] = inst_5793;
                                            statearr_5852[7] = inst_5750;
                                            return statearr_5852;
                                          }();
                                          var statearr_5853_5906 = state_5823__$1;
                                          statearr_5853_5906[2] = null;
                                          statearr_5853_5906[1] = 11;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_5824 === 25) {
                                            var inst_5819 = state_5823[2];
                                            var state_5823__$1 = state_5823;
                                            var statearr_5854_5907 = state_5823__$1;
                                            statearr_5854_5907[2] = inst_5819;
                                            statearr_5854_5907[1] = 12;
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_5824 === 34) {
                                              var inst_5817 = state_5823[2];
                                              var state_5823__$1 = state_5823;
                                              var statearr_5855_5908 = state_5823__$1;
                                              statearr_5855_5908[2] = inst_5817;
                                              statearr_5855_5908[1] = 25;
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_5824 === 17) {
                                                var state_5823__$1 = state_5823;
                                                var statearr_5856_5909 = state_5823__$1;
                                                statearr_5856_5909[2] = false;
                                                statearr_5856_5909[1] = 18;
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_5824 === 3) {
                                                  var state_5823__$1 = state_5823;
                                                  var statearr_5857_5910 = state_5823__$1;
                                                  statearr_5857_5910[2] = false;
                                                  statearr_5857_5910[1] = 4;
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_5824 === 12) {
                                                    var inst_5821 = state_5823[2];
                                                    var state_5823__$1 = state_5823;
                                                    return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_5823__$1, inst_5821);
                                                  } else {
                                                    if (state_val_5824 === 2) {
                                                      var inst_5725 = state_5823[8];
                                                      var inst_5730 = inst_5725.cljs$lang$protocol_mask$partition0$;
                                                      var inst_5731 = inst_5730 & 64;
                                                      var inst_5732 = inst_5725.cljs$core$ISeq$;
                                                      var inst_5733 = cljs.core.PROTOCOL_SENTINEL === inst_5732;
                                                      var inst_5734 = inst_5731 || inst_5733;
                                                      var state_5823__$1 = state_5823;
                                                      if (cljs.core.truth_(inst_5734)) {
                                                        var statearr_5858_5911 = state_5823__$1;
                                                        statearr_5858_5911[1] = 5;
                                                      } else {
                                                        var statearr_5859_5912 = state_5823__$1;
                                                        statearr_5859_5912[1] = 6;
                                                      }
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      if (state_val_5824 === 23) {
                                                        var inst_5782 = state_5823[14];
                                                        var inst_5788 = inst_5782 == null;
                                                        var state_5823__$1 = state_5823;
                                                        if (cljs.core.truth_(inst_5788)) {
                                                          var statearr_5860_5913 = state_5823__$1;
                                                          statearr_5860_5913[1] = 26;
                                                        } else {
                                                          var statearr_5861_5914 = state_5823__$1;
                                                          statearr_5861_5914[1] = 27;
                                                        }
                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                      } else {
                                                        if (state_val_5824 === 35) {
                                                          var inst_5808 = state_5823[2];
                                                          var state_5823__$1 = state_5823;
                                                          if (cljs.core.truth_(inst_5808)) {
                                                            var statearr_5862_5915 = state_5823__$1;
                                                            statearr_5862_5915[1] = 36;
                                                          } else {
                                                            var statearr_5863_5916 = state_5823__$1;
                                                            statearr_5863_5916[1] = 37;
                                                          }
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          if (state_val_5824 === 19) {
                                                            var inst_5750 = state_5823[7];
                                                            var inst_5770 = cljs.core.apply.call(null, cljs.core.hash_map, inst_5750);
                                                            var state_5823__$1 = state_5823;
                                                            var statearr_5864_5917 = state_5823__$1;
                                                            statearr_5864_5917[2] = inst_5770;
                                                            statearr_5864_5917[1] = 21;
                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                          } else {
                                                            if (state_val_5824 === 11) {
                                                              var inst_5750 = state_5823[7];
                                                              var inst_5754 = inst_5750 == null;
                                                              var inst_5755 = cljs.core.not.call(null, inst_5754);
                                                              var state_5823__$1 = state_5823;
                                                              if (inst_5755) {
                                                                var statearr_5865_5918 = state_5823__$1;
                                                                statearr_5865_5918[1] = 13;
                                                              } else {
                                                                var statearr_5866_5919 = state_5823__$1;
                                                                statearr_5866_5919[1] = 14;
                                                              }
                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                            } else {
                                                              if (state_val_5824 === 9) {
                                                                var inst_5725 = state_5823[8];
                                                                var state_5823__$1 = state_5823;
                                                                var statearr_5867_5920 = state_5823__$1;
                                                                statearr_5867_5920[2] = inst_5725;
                                                                statearr_5867_5920[1] = 10;
                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                              } else {
                                                                if (state_val_5824 === 5) {
                                                                  var state_5823__$1 = state_5823;
                                                                  var statearr_5868_5921 = state_5823__$1;
                                                                  statearr_5868_5921[2] = true;
                                                                  statearr_5868_5921[1] = 7;
                                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                } else {
                                                                  if (state_val_5824 === 14) {
                                                                    var state_5823__$1 = state_5823;
                                                                    var statearr_5869_5922 = state_5823__$1;
                                                                    statearr_5869_5922[2] = false;
                                                                    statearr_5869_5922[1] = 15;
                                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                  } else {
                                                                    if (state_val_5824 === 26) {
                                                                      var inst_5783 = state_5823[9];
                                                                      var inst_5790 = cljs.core.swap_BANG_.call(null, cs, cljs.core.dissoc, inst_5783);
                                                                      var state_5823__$1 = state_5823;
                                                                      var statearr_5870_5923 = state_5823__$1;
                                                                      statearr_5870_5923[2] = inst_5790;
                                                                      statearr_5870_5923[1] = 28;
                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                    } else {
                                                                      if (state_val_5824 === 16) {
                                                                        var state_5823__$1 = state_5823;
                                                                        var statearr_5871_5924 = state_5823__$1;
                                                                        statearr_5871_5924[2] = true;
                                                                        statearr_5871_5924[1] = 18;
                                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                      } else {
                                                                        if (state_val_5824 === 38) {
                                                                          var inst_5813 = state_5823[2];
                                                                          var state_5823__$1 = state_5823;
                                                                          var statearr_5872_5925 = state_5823__$1;
                                                                          statearr_5872_5925[2] = inst_5813;
                                                                          statearr_5872_5925[1] = 34;
                                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                        } else {
                                                                          if (state_val_5824 === 30) {
                                                                            var inst_5783 = state_5823[9];
                                                                            var inst_5774 = state_5823[11];
                                                                            var inst_5775 = state_5823[13];
                                                                            var inst_5800 = cljs.core.empty_QMARK_.call(null, inst_5774);
                                                                            var inst_5801 = inst_5775.call(null, inst_5783);
                                                                            var inst_5802 = cljs.core.not.call(null, inst_5801);
                                                                            var inst_5803 = inst_5800 && inst_5802;
                                                                            var state_5823__$1 = state_5823;
                                                                            var statearr_5873_5926 = state_5823__$1;
                                                                            statearr_5873_5926[2] = inst_5803;
                                                                            statearr_5873_5926[1] = 31;
                                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                          } else {
                                                                            if (state_val_5824 === 10) {
                                                                              var inst_5725 = state_5823[8];
                                                                              var inst_5746 = state_5823[2];
                                                                              var inst_5747 = cljs.core.get.call(null, inst_5746, new cljs.core.Keyword(null, "solos", "solos", 1441458643));
                                                                              var inst_5748 = cljs.core.get.call(null, inst_5746, new cljs.core.Keyword(null, "mutes", "mutes", 1068806309));
                                                                              var inst_5749 = cljs.core.get.call(null, inst_5746, new cljs.core.Keyword(null, "reads", "reads", -1215067361));
                                                                              var inst_5750 = inst_5725;
                                                                              var state_5823__$1 = function() {
                                                                                var statearr_5874 = state_5823;
                                                                                statearr_5874[16] = inst_5747;
                                                                                statearr_5874[17] = inst_5748;
                                                                                statearr_5874[7] = inst_5750;
                                                                                statearr_5874[18] = inst_5749;
                                                                                return statearr_5874;
                                                                              }();
                                                                              var statearr_5875_5927 = state_5823__$1;
                                                                              statearr_5875_5927[2] = null;
                                                                              statearr_5875_5927[1] = 11;
                                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                            } else {
                                                                              if (state_val_5824 === 18) {
                                                                                var inst_5765 = state_5823[2];
                                                                                var state_5823__$1 = state_5823;
                                                                                var statearr_5876_5928 = state_5823__$1;
                                                                                statearr_5876_5928[2] = inst_5765;
                                                                                statearr_5876_5928[1] = 15;
                                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                              } else {
                                                                                if (state_val_5824 === 37) {
                                                                                  var state_5823__$1 = state_5823;
                                                                                  var statearr_5877_5929 = state_5823__$1;
                                                                                  statearr_5877_5929[2] = null;
                                                                                  statearr_5877_5929[1] = 38;
                                                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                } else {
                                                                                  if (state_val_5824 === 8) {
                                                                                    var inst_5725 = state_5823[8];
                                                                                    var inst_5743 = cljs.core.apply.call(null, cljs.core.hash_map, inst_5725);
                                                                                    var state_5823__$1 = state_5823;
                                                                                    var statearr_5878_5930 = state_5823__$1;
                                                                                    statearr_5878_5930[2] = inst_5743;
                                                                                    statearr_5878_5930[1] = 10;
                                                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                  } else {
                                                                                    return null;
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      return function() {
        var cljs$core$async$mix_$_state_machine__4703__auto__ = null;
        var cljs$core$async$mix_$_state_machine__4703__auto____0 = function() {
          var statearr_5879 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
          statearr_5879[0] = cljs$core$async$mix_$_state_machine__4703__auto__;
          statearr_5879[1] = 1;
          return statearr_5879;
        };
        var cljs$core$async$mix_$_state_machine__4703__auto____1 = function(state_5823) {
          while (true) {
            var ret_value__4704__auto__ = function() {
              try {
                while (true) {
                  var result__4705__auto__ = switch__4702__auto__.call(null, state_5823);
                  if (cljs.core.keyword_identical_QMARK_.call(null, result__4705__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    continue;
                  } else {
                    return result__4705__auto__;
                  }
                  break;
                }
              } catch (e5880) {
                var ex__4706__auto__ = e5880;
                var statearr_5881_5931 = state_5823;
                statearr_5881_5931[2] = ex__4706__auto__;
                if (cljs.core.seq.call(null, state_5823[4])) {
                  var statearr_5882_5932 = state_5823;
                  statearr_5882_5932[1] = cljs.core.first.call(null, state_5823[4]);
                } else {
                  throw ex__4706__auto__;
                }
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              }
            }();
            if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__4704__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
              var G__5933 = state_5823;
              state_5823 = G__5933;
              continue;
            } else {
              return ret_value__4704__auto__;
            }
            break;
          }
        };
        cljs$core$async$mix_$_state_machine__4703__auto__ = function(state_5823) {
          switch(arguments.length) {
            case 0:
              return cljs$core$async$mix_$_state_machine__4703__auto____0.call(this);
            case 1:
              return cljs$core$async$mix_$_state_machine__4703__auto____1.call(this, state_5823);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        cljs$core$async$mix_$_state_machine__4703__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$mix_$_state_machine__4703__auto____0;
        cljs$core$async$mix_$_state_machine__4703__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$mix_$_state_machine__4703__auto____1;
        return cljs$core$async$mix_$_state_machine__4703__auto__;
      }();
    }();
    var state__4796__auto__ = function() {
      var statearr_5883 = f__4795__auto__.call(null);
      statearr_5883[6] = c__4794__auto___5884;
      return statearr_5883;
    }();
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__4796__auto__);
  });
  return m;
};
cljs.core.async.admix = function cljs$core$async$admix(mix, ch) {
  return cljs.core.async.admix_STAR_.call(null, mix, ch);
};
cljs.core.async.unmix = function cljs$core$async$unmix(mix, ch) {
  return cljs.core.async.unmix_STAR_.call(null, mix, ch);
};
cljs.core.async.unmix_all = function cljs$core$async$unmix_all(mix) {
  return cljs.core.async.unmix_all_STAR_.call(null, mix);
};
cljs.core.async.toggle = function cljs$core$async$toggle(mix, state_map) {
  return cljs.core.async.toggle_STAR_.call(null, mix, state_map);
};
cljs.core.async.solo_mode = function cljs$core$async$solo_mode(mix, mode) {
  return cljs.core.async.solo_mode_STAR_.call(null, mix, mode);
};
cljs.core.async.Pub = function() {
};
var cljs$core$async$Pub$sub_STAR_$dyn_5936 = function(p, v, ch, close_QMARK_) {
  var x__4428__auto__ = p == null ? null : p;
  var m__4429__auto__ = cljs.core.async.sub_STAR_[goog.typeOf(x__4428__auto__)];
  if (!(m__4429__auto__ == null)) {
    return m__4429__auto__.call(null, p, v, ch, close_QMARK_);
  } else {
    var m__4426__auto__ = cljs.core.async.sub_STAR_["_"];
    if (!(m__4426__auto__ == null)) {
      return m__4426__auto__.call(null, p, v, ch, close_QMARK_);
    } else {
      throw cljs.core.missing_protocol.call(null, "Pub.sub*", p);
    }
  }
};
cljs.core.async.sub_STAR_ = function cljs$core$async$sub_STAR_(p, v, ch, close_QMARK_) {
  if (!(p == null) && !(p.cljs$core$async$Pub$sub_STAR_$arity$4 == null)) {
    return p.cljs$core$async$Pub$sub_STAR_$arity$4(p, v, ch, close_QMARK_);
  } else {
    return cljs$core$async$Pub$sub_STAR_$dyn_5936.call(null, p, v, ch, close_QMARK_);
  }
};
var cljs$core$async$Pub$unsub_STAR_$dyn_5937 = function(p, v, ch) {
  var x__4428__auto__ = p == null ? null : p;
  var m__4429__auto__ = cljs.core.async.unsub_STAR_[goog.typeOf(x__4428__auto__)];
  if (!(m__4429__auto__ == null)) {
    return m__4429__auto__.call(null, p, v, ch);
  } else {
    var m__4426__auto__ = cljs.core.async.unsub_STAR_["_"];
    if (!(m__4426__auto__ == null)) {
      return m__4426__auto__.call(null, p, v, ch);
    } else {
      throw cljs.core.missing_protocol.call(null, "Pub.unsub*", p);
    }
  }
};
cljs.core.async.unsub_STAR_ = function cljs$core$async$unsub_STAR_(p, v, ch) {
  if (!(p == null) && !(p.cljs$core$async$Pub$unsub_STAR_$arity$3 == null)) {
    return p.cljs$core$async$Pub$unsub_STAR_$arity$3(p, v, ch);
  } else {
    return cljs$core$async$Pub$unsub_STAR_$dyn_5937.call(null, p, v, ch);
  }
};
var cljs$core$async$Pub$unsub_all_STAR_$dyn_5938 = function() {
  var G__5939 = null;
  var G__5939__1 = function(p) {
    var x__4428__auto__ = p == null ? null : p;
    var m__4429__auto__ = cljs.core.async.unsub_all_STAR_[goog.typeOf(x__4428__auto__)];
    if (!(m__4429__auto__ == null)) {
      return m__4429__auto__.call(null, p);
    } else {
      var m__4426__auto__ = cljs.core.async.unsub_all_STAR_["_"];
      if (!(m__4426__auto__ == null)) {
        return m__4426__auto__.call(null, p);
      } else {
        throw cljs.core.missing_protocol.call(null, "Pub.unsub-all*", p);
      }
    }
  };
  var G__5939__2 = function(p, v) {
    var x__4428__auto__ = p == null ? null : p;
    var m__4429__auto__ = cljs.core.async.unsub_all_STAR_[goog.typeOf(x__4428__auto__)];
    if (!(m__4429__auto__ == null)) {
      return m__4429__auto__.call(null, p, v);
    } else {
      var m__4426__auto__ = cljs.core.async.unsub_all_STAR_["_"];
      if (!(m__4426__auto__ == null)) {
        return m__4426__auto__.call(null, p, v);
      } else {
        throw cljs.core.missing_protocol.call(null, "Pub.unsub-all*", p);
      }
    }
  };
  G__5939 = function(p, v) {
    switch(arguments.length) {
      case 1:
        return G__5939__1.call(this, p);
      case 2:
        return G__5939__2.call(this, p, v);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__5939.cljs$core$IFn$_invoke$arity$1 = G__5939__1;
  G__5939.cljs$core$IFn$_invoke$arity$2 = G__5939__2;
  return G__5939;
}();
cljs.core.async.unsub_all_STAR_ = function cljs$core$async$unsub_all_STAR_(var_args) {
  var G__5935 = arguments.length;
  switch(G__5935) {
    case 1:
      return cljs.core.async.unsub_all_STAR_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.async.unsub_all_STAR_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
cljs.core.async.unsub_all_STAR_.cljs$core$IFn$_invoke$arity$1 = function(p) {
  if (!(p == null) && !(p.cljs$core$async$Pub$unsub_all_STAR_$arity$1 == null)) {
    return p.cljs$core$async$Pub$unsub_all_STAR_$arity$1(p);
  } else {
    return cljs$core$async$Pub$unsub_all_STAR_$dyn_5938.call(null, p);
  }
};
cljs.core.async.unsub_all_STAR_.cljs$core$IFn$_invoke$arity$2 = function(p, v) {
  if (!(p == null) && !(p.cljs$core$async$Pub$unsub_all_STAR_$arity$2 == null)) {
    return p.cljs$core$async$Pub$unsub_all_STAR_$arity$2(p, v);
  } else {
    return cljs$core$async$Pub$unsub_all_STAR_$dyn_5938.call(null, p, v);
  }
};
cljs.core.async.unsub_all_STAR_.cljs$lang$maxFixedArity = 2;
cljs.core.async.pub = function cljs$core$async$pub(var_args) {
  var G__5943 = arguments.length;
  switch(G__5943) {
    case 2:
      return cljs.core.async.pub.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.pub.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
cljs.core.async.pub.cljs$core$IFn$_invoke$arity$2 = function(ch, topic_fn) {
  return cljs.core.async.pub.call(null, ch, topic_fn, cljs.core.constantly.call(null, null));
};
cljs.core.async.pub.cljs$core$IFn$_invoke$arity$3 = function(ch, topic_fn, buf_fn) {
  var mults = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var ensure_mult = function(topic) {
    var or__4126__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, mults), topic);
    if (cljs.core.truth_(or__4126__auto__)) {
      return or__4126__auto__;
    } else {
      return cljs.core.get.call(null, cljs.core.swap_BANG_.call(null, mults, function(p1__5941_SHARP_) {
        if (cljs.core.truth_(p1__5941_SHARP_.call(null, topic))) {
          return p1__5941_SHARP_;
        } else {
          return cljs.core.assoc.call(null, p1__5941_SHARP_, topic, cljs.core.async.mult.call(null, cljs.core.async.chan.call(null, buf_fn.call(null, topic))));
        }
      }), topic);
    }
  };
  var p = function() {
    if (typeof cljs !== "undefined" && typeof cljs.core !== "undefined" && typeof cljs.core.async !== "undefined" && typeof cljs.core.async.t_cljs$core$async5944 !== "undefined") {
    } else {
      cljs.core.async.t_cljs$core$async5944 = function(ch, topic_fn, buf_fn, mults, ensure_mult, meta5945) {
        this.ch = ch;
        this.topic_fn = topic_fn;
        this.buf_fn = buf_fn;
        this.mults = mults;
        this.ensure_mult = ensure_mult;
        this.meta5945 = meta5945;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
        this.cljs$lang$protocol_mask$partition1$ = 0;
      };
      cljs.core.async.t_cljs$core$async5944.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_5946, meta5945__$1) {
        var self__ = this;
        var _5946__$1 = this;
        return new cljs.core.async.t_cljs$core$async5944(self__.ch, self__.topic_fn, self__.buf_fn, self__.mults, self__.ensure_mult, meta5945__$1);
      };
      cljs.core.async.t_cljs$core$async5944.prototype.cljs$core$IMeta$_meta$arity$1 = function(_5946) {
        var self__ = this;
        var _5946__$1 = this;
        return self__.meta5945;
      };
      cljs.core.async.t_cljs$core$async5944.prototype.cljs$core$async$Mux$ = cljs.core.PROTOCOL_SENTINEL;
      cljs.core.async.t_cljs$core$async5944.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(_) {
        var self__ = this;
        var ___$1 = this;
        return self__.ch;
      };
      cljs.core.async.t_cljs$core$async5944.prototype.cljs$core$async$Pub$ = cljs.core.PROTOCOL_SENTINEL;
      cljs.core.async.t_cljs$core$async5944.prototype.cljs$core$async$Pub$sub_STAR_$arity$4 = function(p, topic, ch__$1, close_QMARK_) {
        var self__ = this;
        var p__$1 = this;
        var m = self__.ensure_mult.call(null, topic);
        return cljs.core.async.tap.call(null, m, ch__$1, close_QMARK_);
      };
      cljs.core.async.t_cljs$core$async5944.prototype.cljs$core$async$Pub$unsub_STAR_$arity$3 = function(p, topic, ch__$1) {
        var self__ = this;
        var p__$1 = this;
        var temp__5735__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, self__.mults), topic);
        if (cljs.core.truth_(temp__5735__auto__)) {
          var m = temp__5735__auto__;
          return cljs.core.async.untap.call(null, m, ch__$1);
        } else {
          return null;
        }
      };
      cljs.core.async.t_cljs$core$async5944.prototype.cljs$core$async$Pub$unsub_all_STAR_$arity$1 = function(_) {
        var self__ = this;
        var ___$1 = this;
        return cljs.core.reset_BANG_.call(null, self__.mults, cljs.core.PersistentArrayMap.EMPTY);
      };
      cljs.core.async.t_cljs$core$async5944.prototype.cljs$core$async$Pub$unsub_all_STAR_$arity$2 = function(_, topic) {
        var self__ = this;
        var ___$1 = this;
        return cljs.core.swap_BANG_.call(null, self__.mults, cljs.core.dissoc, topic);
      };
      cljs.core.async.t_cljs$core$async5944.getBasis = function() {
        return new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "ch", "ch", 1085813622, null), new cljs.core.Symbol(null, "topic-fn", "topic-fn", -862449736, null), new cljs.core.Symbol(null, "buf-fn", "buf-fn", -1200281591, null), new cljs.core.Symbol(null, "mults", "mults", -461114485, null), new cljs.core.Symbol(null, "ensure-mult", "ensure-mult", 1796584816, null), new cljs.core.Symbol(null, "meta5945", "meta5945", 1364797935, null)], 
        null);
      };
      cljs.core.async.t_cljs$core$async5944.cljs$lang$type = true;
      cljs.core.async.t_cljs$core$async5944.cljs$lang$ctorStr = "cljs.core.async/t_cljs$core$async5944";
      cljs.core.async.t_cljs$core$async5944.cljs$lang$ctorPrWriter = function(this__4369__auto__, writer__4370__auto__, opt__4371__auto__) {
        return cljs.core._write.call(null, writer__4370__auto__, "cljs.core.async/t_cljs$core$async5944");
      };
      cljs.core.async.__GT_t_cljs$core$async5944 = function cljs$core$async$__GT_t_cljs$core$async5944(ch__$1, topic_fn__$1, buf_fn__$1, mults__$1, ensure_mult__$1, meta5945) {
        return new cljs.core.async.t_cljs$core$async5944(ch__$1, topic_fn__$1, buf_fn__$1, mults__$1, ensure_mult__$1, meta5945);
      };
    }
    return new cljs.core.async.t_cljs$core$async5944(ch, topic_fn, buf_fn, mults, ensure_mult, cljs.core.PersistentArrayMap.EMPTY);
  }();
  var c__4794__auto___6065 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function() {
    var f__4795__auto__ = function() {
      var switch__4702__auto__ = function(state_6018) {
        var state_val_6019 = state_6018[1];
        if (state_val_6019 === 7) {
          var inst_6014 = state_6018[2];
          var state_6018__$1 = state_6018;
          var statearr_6020_6066 = state_6018__$1;
          statearr_6020_6066[2] = inst_6014;
          statearr_6020_6066[1] = 3;
          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
        } else {
          if (state_val_6019 === 20) {
            var state_6018__$1 = state_6018;
            var statearr_6021_6067 = state_6018__$1;
            statearr_6021_6067[2] = null;
            statearr_6021_6067[1] = 21;
            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
          } else {
            if (state_val_6019 === 1) {
              var state_6018__$1 = state_6018;
              var statearr_6022_6068 = state_6018__$1;
              statearr_6022_6068[2] = null;
              statearr_6022_6068[1] = 2;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_6019 === 24) {
                var inst_5997 = state_6018[7];
                var inst_6006 = cljs.core.swap_BANG_.call(null, mults, cljs.core.dissoc, inst_5997);
                var state_6018__$1 = state_6018;
                var statearr_6023_6069 = state_6018__$1;
                statearr_6023_6069[2] = inst_6006;
                statearr_6023_6069[1] = 25;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_6019 === 4) {
                  var inst_5949 = state_6018[8];
                  var inst_5949__$1 = state_6018[2];
                  var inst_5950 = inst_5949__$1 == null;
                  var state_6018__$1 = function() {
                    var statearr_6024 = state_6018;
                    statearr_6024[8] = inst_5949__$1;
                    return statearr_6024;
                  }();
                  if (cljs.core.truth_(inst_5950)) {
                    var statearr_6025_6070 = state_6018__$1;
                    statearr_6025_6070[1] = 5;
                  } else {
                    var statearr_6026_6071 = state_6018__$1;
                    statearr_6026_6071[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_6019 === 15) {
                    var inst_5991 = state_6018[2];
                    var state_6018__$1 = state_6018;
                    var statearr_6027_6072 = state_6018__$1;
                    statearr_6027_6072[2] = inst_5991;
                    statearr_6027_6072[1] = 12;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_6019 === 21) {
                      var inst_6011 = state_6018[2];
                      var state_6018__$1 = function() {
                        var statearr_6028 = state_6018;
                        statearr_6028[9] = inst_6011;
                        return statearr_6028;
                      }();
                      var statearr_6029_6073 = state_6018__$1;
                      statearr_6029_6073[2] = null;
                      statearr_6029_6073[1] = 2;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_6019 === 13) {
                        var inst_5973 = state_6018[10];
                        var inst_5975 = cljs.core.chunked_seq_QMARK_.call(null, inst_5973);
                        var state_6018__$1 = state_6018;
                        if (inst_5975) {
                          var statearr_6030_6074 = state_6018__$1;
                          statearr_6030_6074[1] = 16;
                        } else {
                          var statearr_6031_6075 = state_6018__$1;
                          statearr_6031_6075[1] = 17;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_6019 === 22) {
                          var inst_6003 = state_6018[2];
                          var state_6018__$1 = state_6018;
                          if (cljs.core.truth_(inst_6003)) {
                            var statearr_6032_6076 = state_6018__$1;
                            statearr_6032_6076[1] = 23;
                          } else {
                            var statearr_6033_6077 = state_6018__$1;
                            statearr_6033_6077[1] = 24;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_6019 === 6) {
                            var inst_5999 = state_6018[11];
                            var inst_5997 = state_6018[7];
                            var inst_5949 = state_6018[8];
                            var inst_5997__$1 = topic_fn.call(null, inst_5949);
                            var inst_5998 = cljs.core.deref.call(null, mults);
                            var inst_5999__$1 = cljs.core.get.call(null, inst_5998, inst_5997__$1);
                            var state_6018__$1 = function() {
                              var statearr_6034 = state_6018;
                              statearr_6034[11] = inst_5999__$1;
                              statearr_6034[7] = inst_5997__$1;
                              return statearr_6034;
                            }();
                            if (cljs.core.truth_(inst_5999__$1)) {
                              var statearr_6035_6078 = state_6018__$1;
                              statearr_6035_6078[1] = 19;
                            } else {
                              var statearr_6036_6079 = state_6018__$1;
                              statearr_6036_6079[1] = 20;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_6019 === 25) {
                              var inst_6008 = state_6018[2];
                              var state_6018__$1 = state_6018;
                              var statearr_6037_6080 = state_6018__$1;
                              statearr_6037_6080[2] = inst_6008;
                              statearr_6037_6080[1] = 21;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_6019 === 17) {
                                var inst_5973 = state_6018[10];
                                var inst_5982 = cljs.core.first.call(null, inst_5973);
                                var inst_5983 = cljs.core.async.muxch_STAR_.call(null, inst_5982);
                                var inst_5984 = cljs.core.async.close_BANG_.call(null, inst_5983);
                                var inst_5985 = cljs.core.next.call(null, inst_5973);
                                var inst_5959 = inst_5985;
                                var inst_5960 = null;
                                var inst_5961 = 0;
                                var inst_5962 = 0;
                                var state_6018__$1 = function() {
                                  var statearr_6038 = state_6018;
                                  statearr_6038[12] = inst_5959;
                                  statearr_6038[13] = inst_5960;
                                  statearr_6038[14] = inst_5962;
                                  statearr_6038[15] = inst_5984;
                                  statearr_6038[16] = inst_5961;
                                  return statearr_6038;
                                }();
                                var statearr_6039_6081 = state_6018__$1;
                                statearr_6039_6081[2] = null;
                                statearr_6039_6081[1] = 8;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_6019 === 3) {
                                  var inst_6016 = state_6018[2];
                                  var state_6018__$1 = state_6018;
                                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_6018__$1, inst_6016);
                                } else {
                                  if (state_val_6019 === 12) {
                                    var inst_5993 = state_6018[2];
                                    var state_6018__$1 = state_6018;
                                    var statearr_6040_6082 = state_6018__$1;
                                    statearr_6040_6082[2] = inst_5993;
                                    statearr_6040_6082[1] = 9;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_6019 === 2) {
                                      var state_6018__$1 = state_6018;
                                      return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_6018__$1, 4, ch);
                                    } else {
                                      if (state_val_6019 === 23) {
                                        var state_6018__$1 = state_6018;
                                        var statearr_6041_6083 = state_6018__$1;
                                        statearr_6041_6083[2] = null;
                                        statearr_6041_6083[1] = 25;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_6019 === 19) {
                                          var inst_5999 = state_6018[11];
                                          var inst_5949 = state_6018[8];
                                          var inst_6001 = cljs.core.async.muxch_STAR_.call(null, inst_5999);
                                          var state_6018__$1 = state_6018;
                                          return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_6018__$1, 22, inst_6001, inst_5949);
                                        } else {
                                          if (state_val_6019 === 11) {
                                            var inst_5959 = state_6018[12];
                                            var inst_5973 = state_6018[10];
                                            var inst_5973__$1 = cljs.core.seq.call(null, inst_5959);
                                            var state_6018__$1 = function() {
                                              var statearr_6042 = state_6018;
                                              statearr_6042[10] = inst_5973__$1;
                                              return statearr_6042;
                                            }();
                                            if (inst_5973__$1) {
                                              var statearr_6043_6084 = state_6018__$1;
                                              statearr_6043_6084[1] = 13;
                                            } else {
                                              var statearr_6044_6085 = state_6018__$1;
                                              statearr_6044_6085[1] = 14;
                                            }
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_6019 === 9) {
                                              var inst_5995 = state_6018[2];
                                              var state_6018__$1 = state_6018;
                                              var statearr_6045_6086 = state_6018__$1;
                                              statearr_6045_6086[2] = inst_5995;
                                              statearr_6045_6086[1] = 7;
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_6019 === 5) {
                                                var inst_5956 = cljs.core.deref.call(null, mults);
                                                var inst_5957 = cljs.core.vals.call(null, inst_5956);
                                                var inst_5958 = cljs.core.seq.call(null, inst_5957);
                                                var inst_5959 = inst_5958;
                                                var inst_5960 = null;
                                                var inst_5961 = 0;
                                                var inst_5962 = 0;
                                                var state_6018__$1 = function() {
                                                  var statearr_6046 = state_6018;
                                                  statearr_6046[12] = inst_5959;
                                                  statearr_6046[13] = inst_5960;
                                                  statearr_6046[14] = inst_5962;
                                                  statearr_6046[16] = inst_5961;
                                                  return statearr_6046;
                                                }();
                                                var statearr_6047_6087 = state_6018__$1;
                                                statearr_6047_6087[2] = null;
                                                statearr_6047_6087[1] = 8;
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_6019 === 14) {
                                                  var state_6018__$1 = state_6018;
                                                  var statearr_6051_6088 = state_6018__$1;
                                                  statearr_6051_6088[2] = null;
                                                  statearr_6051_6088[1] = 15;
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_6019 === 16) {
                                                    var inst_5973 = state_6018[10];
                                                    var inst_5977 = cljs.core.chunk_first.call(null, inst_5973);
                                                    var inst_5978 = cljs.core.chunk_rest.call(null, inst_5973);
                                                    var inst_5979 = cljs.core.count.call(null, inst_5977);
                                                    var inst_5959 = inst_5978;
                                                    var inst_5960 = inst_5977;
                                                    var inst_5961 = inst_5979;
                                                    var inst_5962 = 0;
                                                    var state_6018__$1 = function() {
                                                      var statearr_6052 = state_6018;
                                                      statearr_6052[12] = inst_5959;
                                                      statearr_6052[13] = inst_5960;
                                                      statearr_6052[14] = inst_5962;
                                                      statearr_6052[16] = inst_5961;
                                                      return statearr_6052;
                                                    }();
                                                    var statearr_6053_6089 = state_6018__$1;
                                                    statearr_6053_6089[2] = null;
                                                    statearr_6053_6089[1] = 8;
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_6019 === 10) {
                                                      var inst_5959 = state_6018[12];
                                                      var inst_5960 = state_6018[13];
                                                      var inst_5962 = state_6018[14];
                                                      var inst_5961 = state_6018[16];
                                                      var inst_5967 = cljs.core._nth.call(null, inst_5960, inst_5962);
                                                      var inst_5968 = cljs.core.async.muxch_STAR_.call(null, inst_5967);
                                                      var inst_5969 = cljs.core.async.close_BANG_.call(null, inst_5968);
                                                      var inst_5970 = inst_5962 + 1;
                                                      var tmp6048 = inst_5959;
                                                      var tmp6049 = inst_5960;
                                                      var tmp6050 = inst_5961;
                                                      var inst_5959__$1 = tmp6048;
                                                      var inst_5960__$1 = tmp6049;
                                                      var inst_5961__$1 = tmp6050;
                                                      var inst_5962__$1 = inst_5970;
                                                      var state_6018__$1 = function() {
                                                        var statearr_6054 = state_6018;
                                                        statearr_6054[12] = inst_5959__$1;
                                                        statearr_6054[13] = inst_5960__$1;
                                                        statearr_6054[14] = inst_5962__$1;
                                                        statearr_6054[17] = inst_5969;
                                                        statearr_6054[16] = inst_5961__$1;
                                                        return statearr_6054;
                                                      }();
                                                      var statearr_6055_6090 = state_6018__$1;
                                                      statearr_6055_6090[2] = null;
                                                      statearr_6055_6090[1] = 8;
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      if (state_val_6019 === 18) {
                                                        var inst_5988 = state_6018[2];
                                                        var state_6018__$1 = state_6018;
                                                        var statearr_6056_6091 = state_6018__$1;
                                                        statearr_6056_6091[2] = inst_5988;
                                                        statearr_6056_6091[1] = 15;
                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                      } else {
                                                        if (state_val_6019 === 8) {
                                                          var inst_5962 = state_6018[14];
                                                          var inst_5961 = state_6018[16];
                                                          var inst_5964 = inst_5962 < inst_5961;
                                                          var inst_5965 = inst_5964;
                                                          var state_6018__$1 = state_6018;
                                                          if (cljs.core.truth_(inst_5965)) {
                                                            var statearr_6057_6092 = state_6018__$1;
                                                            statearr_6057_6092[1] = 10;
                                                          } else {
                                                            var statearr_6058_6093 = state_6018__$1;
                                                            statearr_6058_6093[1] = 11;
                                                          }
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          return null;
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      return function() {
        var cljs$core$async$state_machine__4703__auto__ = null;
        var cljs$core$async$state_machine__4703__auto____0 = function() {
          var statearr_6059 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
          statearr_6059[0] = cljs$core$async$state_machine__4703__auto__;
          statearr_6059[1] = 1;
          return statearr_6059;
        };
        var cljs$core$async$state_machine__4703__auto____1 = function(state_6018) {
          while (true) {
            var ret_value__4704__auto__ = function() {
              try {
                while (true) {
                  var result__4705__auto__ = switch__4702__auto__.call(null, state_6018);
                  if (cljs.core.keyword_identical_QMARK_.call(null, result__4705__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    continue;
                  } else {
                    return result__4705__auto__;
                  }
                  break;
                }
              } catch (e6060) {
                var ex__4706__auto__ = e6060;
                var statearr_6061_6094 = state_6018;
                statearr_6061_6094[2] = ex__4706__auto__;
                if (cljs.core.seq.call(null, state_6018[4])) {
                  var statearr_6062_6095 = state_6018;
                  statearr_6062_6095[1] = cljs.core.first.call(null, state_6018[4]);
                } else {
                  throw ex__4706__auto__;
                }
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              }
            }();
            if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__4704__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
              var G__6096 = state_6018;
              state_6018 = G__6096;
              continue;
            } else {
              return ret_value__4704__auto__;
            }
            break;
          }
        };
        cljs$core$async$state_machine__4703__auto__ = function(state_6018) {
          switch(arguments.length) {
            case 0:
              return cljs$core$async$state_machine__4703__auto____0.call(this);
            case 1:
              return cljs$core$async$state_machine__4703__auto____1.call(this, state_6018);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        cljs$core$async$state_machine__4703__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__4703__auto____0;
        cljs$core$async$state_machine__4703__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__4703__auto____1;
        return cljs$core$async$state_machine__4703__auto__;
      }();
    }();
    var state__4796__auto__ = function() {
      var statearr_6063 = f__4795__auto__.call(null);
      statearr_6063[6] = c__4794__auto___6065;
      return statearr_6063;
    }();
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__4796__auto__);
  });
  return p;
};
cljs.core.async.pub.cljs$lang$maxFixedArity = 3;
cljs.core.async.sub = function cljs$core$async$sub(var_args) {
  var G__6098 = arguments.length;
  switch(G__6098) {
    case 3:
      return cljs.core.async.sub.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.async.sub.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
cljs.core.async.sub.cljs$core$IFn$_invoke$arity$3 = function(p, topic, ch) {
  return cljs.core.async.sub.call(null, p, topic, ch, true);
};
cljs.core.async.sub.cljs$core$IFn$_invoke$arity$4 = function(p, topic, ch, close_QMARK_) {
  return cljs.core.async.sub_STAR_.call(null, p, topic, ch, close_QMARK_);
};
cljs.core.async.sub.cljs$lang$maxFixedArity = 4;
cljs.core.async.unsub = function cljs$core$async$unsub(p, topic, ch) {
  return cljs.core.async.unsub_STAR_.call(null, p, topic, ch);
};
cljs.core.async.unsub_all = function cljs$core$async$unsub_all(var_args) {
  var G__6101 = arguments.length;
  switch(G__6101) {
    case 1:
      return cljs.core.async.unsub_all.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.async.unsub_all.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
cljs.core.async.unsub_all.cljs$core$IFn$_invoke$arity$1 = function(p) {
  return cljs.core.async.unsub_all_STAR_.call(null, p);
};
cljs.core.async.unsub_all.cljs$core$IFn$_invoke$arity$2 = function(p, topic) {
  return cljs.core.async.unsub_all_STAR_.call(null, p, topic);
};
cljs.core.async.unsub_all.cljs$lang$maxFixedArity = 2;
cljs.core.async.map = function cljs$core$async$map(var_args) {
  var G__6104 = arguments.length;
  switch(G__6104) {
    case 2:
      return cljs.core.async.map.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.map.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
cljs.core.async.map.cljs$core$IFn$_invoke$arity$2 = function(f, chs) {
  return cljs.core.async.map.call(null, f, chs, null);
};
cljs.core.async.map.cljs$core$IFn$_invoke$arity$3 = function(f, chs, buf_or_n) {
  var chs__$1 = cljs.core.vec.call(null, chs);
  var out = cljs.core.async.chan.call(null, buf_or_n);
  var cnt = cljs.core.count.call(null, chs__$1);
  var rets = cljs.core.object_array.call(null, cnt);
  var dchan = cljs.core.async.chan.call(null, 1);
  var dctr = cljs.core.atom.call(null, null);
  var done = cljs.core.mapv.call(null, function(i) {
    return function(ret) {
      rets[i] = ret;
      if (cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec) === 0) {
        return cljs.core.async.put_BANG_.call(null, dchan, rets.slice(0));
      } else {
        return null;
      }
    };
  }, cljs.core.range.call(null, cnt));
  var c__4794__auto___6182 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function() {
    var f__4795__auto__ = function() {
      var switch__4702__auto__ = function(state_6147) {
        var state_val_6148 = state_6147[1];
        if (state_val_6148 === 7) {
          var state_6147__$1 = state_6147;
          var statearr_6149_6183 = state_6147__$1;
          statearr_6149_6183[2] = null;
          statearr_6149_6183[1] = 8;
          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
        } else {
          if (state_val_6148 === 1) {
            var state_6147__$1 = state_6147;
            var statearr_6150_6184 = state_6147__$1;
            statearr_6150_6184[2] = null;
            statearr_6150_6184[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
          } else {
            if (state_val_6148 === 4) {
              var inst_6107 = state_6147[7];
              var inst_6108 = state_6147[8];
              var inst_6110 = inst_6108 < inst_6107;
              var state_6147__$1 = state_6147;
              if (cljs.core.truth_(inst_6110)) {
                var statearr_6151_6185 = state_6147__$1;
                statearr_6151_6185[1] = 6;
              } else {
                var statearr_6152_6186 = state_6147__$1;
                statearr_6152_6186[1] = 7;
              }
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_6148 === 15) {
                var inst_6133 = state_6147[9];
                var inst_6138 = cljs.core.apply.call(null, f, inst_6133);
                var state_6147__$1 = state_6147;
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_6147__$1, 17, out, inst_6138);
              } else {
                if (state_val_6148 === 13) {
                  var inst_6133 = state_6147[9];
                  var inst_6133__$1 = state_6147[2];
                  var inst_6134 = cljs.core.some.call(null, cljs.core.nil_QMARK_, inst_6133__$1);
                  var state_6147__$1 = function() {
                    var statearr_6153 = state_6147;
                    statearr_6153[9] = inst_6133__$1;
                    return statearr_6153;
                  }();
                  if (cljs.core.truth_(inst_6134)) {
                    var statearr_6154_6187 = state_6147__$1;
                    statearr_6154_6187[1] = 14;
                  } else {
                    var statearr_6155_6188 = state_6147__$1;
                    statearr_6155_6188[1] = 15;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_6148 === 6) {
                    var state_6147__$1 = state_6147;
                    var statearr_6156_6189 = state_6147__$1;
                    statearr_6156_6189[2] = null;
                    statearr_6156_6189[1] = 9;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_6148 === 17) {
                      var inst_6140 = state_6147[2];
                      var state_6147__$1 = function() {
                        var statearr_6158 = state_6147;
                        statearr_6158[10] = inst_6140;
                        return statearr_6158;
                      }();
                      var statearr_6159_6190 = state_6147__$1;
                      statearr_6159_6190[2] = null;
                      statearr_6159_6190[1] = 2;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_6148 === 3) {
                        var inst_6145 = state_6147[2];
                        var state_6147__$1 = state_6147;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_6147__$1, inst_6145);
                      } else {
                        if (state_val_6148 === 12) {
                          var _ = function() {
                            var statearr_6160 = state_6147;
                            statearr_6160[4] = cljs.core.rest.call(null, state_6147[4]);
                            return statearr_6160;
                          }();
                          var state_6147__$1 = state_6147;
                          var ex6157 = state_6147__$1[2];
                          var statearr_6161_6191 = state_6147__$1;
                          statearr_6161_6191[5] = ex6157;
                          if (ex6157 instanceof Object) {
                            var statearr_6162_6192 = state_6147__$1;
                            statearr_6162_6192[1] = 11;
                            statearr_6162_6192[5] = null;
                          } else {
                            throw ex6157;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_6148 === 2) {
                            var inst_6106 = cljs.core.reset_BANG_.call(null, dctr, cnt);
                            var inst_6107 = cnt;
                            var inst_6108 = 0;
                            var state_6147__$1 = function() {
                              var statearr_6163 = state_6147;
                              statearr_6163[7] = inst_6107;
                              statearr_6163[11] = inst_6106;
                              statearr_6163[8] = inst_6108;
                              return statearr_6163;
                            }();
                            var statearr_6164_6193 = state_6147__$1;
                            statearr_6164_6193[2] = null;
                            statearr_6164_6193[1] = 4;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_6148 === 11) {
                              var inst_6112 = state_6147[2];
                              var inst_6113 = cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec);
                              var state_6147__$1 = function() {
                                var statearr_6165 = state_6147;
                                statearr_6165[12] = inst_6112;
                                return statearr_6165;
                              }();
                              var statearr_6166_6194 = state_6147__$1;
                              statearr_6166_6194[2] = inst_6113;
                              statearr_6166_6194[1] = 10;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_6148 === 9) {
                                var inst_6108 = state_6147[8];
                                var _ = function() {
                                  var statearr_6167 = state_6147;
                                  statearr_6167[4] = cljs.core.cons.call(null, 12, state_6147[4]);
                                  return statearr_6167;
                                }();
                                var inst_6119 = chs__$1.call(null, inst_6108);
                                var inst_6120 = done.call(null, inst_6108);
                                var inst_6121 = cljs.core.async.take_BANG_.call(null, inst_6119, inst_6120);
                                var ___$1 = function() {
                                  var statearr_6168 = state_6147;
                                  statearr_6168[4] = cljs.core.rest.call(null, state_6147[4]);
                                  return statearr_6168;
                                }();
                                var state_6147__$1 = state_6147;
                                var statearr_6169_6195 = state_6147__$1;
                                statearr_6169_6195[2] = inst_6121;
                                statearr_6169_6195[1] = 10;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_6148 === 5) {
                                  var inst_6131 = state_6147[2];
                                  var state_6147__$1 = function() {
                                    var statearr_6170 = state_6147;
                                    statearr_6170[13] = inst_6131;
                                    return statearr_6170;
                                  }();
                                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_6147__$1, 13, dchan);
                                } else {
                                  if (state_val_6148 === 14) {
                                    var inst_6136 = cljs.core.async.close_BANG_.call(null, out);
                                    var state_6147__$1 = state_6147;
                                    var statearr_6171_6196 = state_6147__$1;
                                    statearr_6171_6196[2] = inst_6136;
                                    statearr_6171_6196[1] = 16;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_6148 === 16) {
                                      var inst_6143 = state_6147[2];
                                      var state_6147__$1 = state_6147;
                                      var statearr_6172_6197 = state_6147__$1;
                                      statearr_6172_6197[2] = inst_6143;
                                      statearr_6172_6197[1] = 3;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_6148 === 10) {
                                        var inst_6108 = state_6147[8];
                                        var inst_6124 = state_6147[2];
                                        var inst_6125 = inst_6108 + 1;
                                        var inst_6108__$1 = inst_6125;
                                        var state_6147__$1 = function() {
                                          var statearr_6173 = state_6147;
                                          statearr_6173[14] = inst_6124;
                                          statearr_6173[8] = inst_6108__$1;
                                          return statearr_6173;
                                        }();
                                        var statearr_6174_6198 = state_6147__$1;
                                        statearr_6174_6198[2] = null;
                                        statearr_6174_6198[1] = 4;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_6148 === 8) {
                                          var inst_6129 = state_6147[2];
                                          var state_6147__$1 = state_6147;
                                          var statearr_6175_6199 = state_6147__$1;
                                          statearr_6175_6199[2] = inst_6129;
                                          statearr_6175_6199[1] = 5;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          return null;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      return function() {
        var cljs$core$async$state_machine__4703__auto__ = null;
        var cljs$core$async$state_machine__4703__auto____0 = function() {
          var statearr_6176 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
          statearr_6176[0] = cljs$core$async$state_machine__4703__auto__;
          statearr_6176[1] = 1;
          return statearr_6176;
        };
        var cljs$core$async$state_machine__4703__auto____1 = function(state_6147) {
          while (true) {
            var ret_value__4704__auto__ = function() {
              try {
                while (true) {
                  var result__4705__auto__ = switch__4702__auto__.call(null, state_6147);
                  if (cljs.core.keyword_identical_QMARK_.call(null, result__4705__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    continue;
                  } else {
                    return result__4705__auto__;
                  }
                  break;
                }
              } catch (e6177) {
                var ex__4706__auto__ = e6177;
                var statearr_6178_6200 = state_6147;
                statearr_6178_6200[2] = ex__4706__auto__;
                if (cljs.core.seq.call(null, state_6147[4])) {
                  var statearr_6179_6201 = state_6147;
                  statearr_6179_6201[1] = cljs.core.first.call(null, state_6147[4]);
                } else {
                  throw ex__4706__auto__;
                }
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              }
            }();
            if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__4704__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
              var G__6202 = state_6147;
              state_6147 = G__6202;
              continue;
            } else {
              return ret_value__4704__auto__;
            }
            break;
          }
        };
        cljs$core$async$state_machine__4703__auto__ = function(state_6147) {
          switch(arguments.length) {
            case 0:
              return cljs$core$async$state_machine__4703__auto____0.call(this);
            case 1:
              return cljs$core$async$state_machine__4703__auto____1.call(this, state_6147);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        cljs$core$async$state_machine__4703__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__4703__auto____0;
        cljs$core$async$state_machine__4703__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__4703__auto____1;
        return cljs$core$async$state_machine__4703__auto__;
      }();
    }();
    var state__4796__auto__ = function() {
      var statearr_6180 = f__4795__auto__.call(null);
      statearr_6180[6] = c__4794__auto___6182;
      return statearr_6180;
    }();
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__4796__auto__);
  });
  return out;
};
cljs.core.async.map.cljs$lang$maxFixedArity = 3;
cljs.core.async.merge = function cljs$core$async$merge(var_args) {
  var G__6205 = arguments.length;
  switch(G__6205) {
    case 1:
      return cljs.core.async.merge.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.async.merge.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
cljs.core.async.merge.cljs$core$IFn$_invoke$arity$1 = function(chs) {
  return cljs.core.async.merge.call(null, chs, null);
};
cljs.core.async.merge.cljs$core$IFn$_invoke$arity$2 = function(chs, buf_or_n) {
  var out = cljs.core.async.chan.call(null, buf_or_n);
  var c__4794__auto___6260 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function() {
    var f__4795__auto__ = function() {
      var switch__4702__auto__ = function(state_6237) {
        var state_val_6238 = state_6237[1];
        if (state_val_6238 === 7) {
          var inst_6216 = state_6237[7];
          var inst_6217 = state_6237[8];
          var inst_6216__$1 = state_6237[2];
          var inst_6217__$1 = cljs.core.nth.call(null, inst_6216__$1, 0, null);
          var inst_6218 = cljs.core.nth.call(null, inst_6216__$1, 1, null);
          var inst_6219 = inst_6217__$1 == null;
          var state_6237__$1 = function() {
            var statearr_6239 = state_6237;
            statearr_6239[9] = inst_6218;
            statearr_6239[7] = inst_6216__$1;
            statearr_6239[8] = inst_6217__$1;
            return statearr_6239;
          }();
          if (cljs.core.truth_(inst_6219)) {
            var statearr_6240_6261 = state_6237__$1;
            statearr_6240_6261[1] = 8;
          } else {
            var statearr_6241_6262 = state_6237__$1;
            statearr_6241_6262[1] = 9;
          }
          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
        } else {
          if (state_val_6238 === 1) {
            var inst_6206 = cljs.core.vec.call(null, chs);
            var inst_6207 = inst_6206;
            var state_6237__$1 = function() {
              var statearr_6242 = state_6237;
              statearr_6242[10] = inst_6207;
              return statearr_6242;
            }();
            var statearr_6243_6263 = state_6237__$1;
            statearr_6243_6263[2] = null;
            statearr_6243_6263[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
          } else {
            if (state_val_6238 === 4) {
              var inst_6207 = state_6237[10];
              var state_6237__$1 = state_6237;
              return cljs.core.async.ioc_alts_BANG_.call(null, state_6237__$1, 7, inst_6207);
            } else {
              if (state_val_6238 === 6) {
                var inst_6233 = state_6237[2];
                var state_6237__$1 = state_6237;
                var statearr_6244_6264 = state_6237__$1;
                statearr_6244_6264[2] = inst_6233;
                statearr_6244_6264[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_6238 === 3) {
                  var inst_6235 = state_6237[2];
                  var state_6237__$1 = state_6237;
                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_6237__$1, inst_6235);
                } else {
                  if (state_val_6238 === 2) {
                    var inst_6207 = state_6237[10];
                    var inst_6209 = cljs.core.count.call(null, inst_6207);
                    var inst_6210 = inst_6209 > 0;
                    var state_6237__$1 = state_6237;
                    if (cljs.core.truth_(inst_6210)) {
                      var statearr_6246_6265 = state_6237__$1;
                      statearr_6246_6265[1] = 4;
                    } else {
                      var statearr_6247_6266 = state_6237__$1;
                      statearr_6247_6266[1] = 5;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_6238 === 11) {
                      var inst_6207 = state_6237[10];
                      var inst_6226 = state_6237[2];
                      var tmp6245 = inst_6207;
                      var inst_6207__$1 = tmp6245;
                      var state_6237__$1 = function() {
                        var statearr_6248 = state_6237;
                        statearr_6248[11] = inst_6226;
                        statearr_6248[10] = inst_6207__$1;
                        return statearr_6248;
                      }();
                      var statearr_6249_6267 = state_6237__$1;
                      statearr_6249_6267[2] = null;
                      statearr_6249_6267[1] = 2;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_6238 === 9) {
                        var inst_6217 = state_6237[8];
                        var state_6237__$1 = state_6237;
                        return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_6237__$1, 11, out, inst_6217);
                      } else {
                        if (state_val_6238 === 5) {
                          var inst_6231 = cljs.core.async.close_BANG_.call(null, out);
                          var state_6237__$1 = state_6237;
                          var statearr_6250_6268 = state_6237__$1;
                          statearr_6250_6268[2] = inst_6231;
                          statearr_6250_6268[1] = 6;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_6238 === 10) {
                            var inst_6229 = state_6237[2];
                            var state_6237__$1 = state_6237;
                            var statearr_6251_6269 = state_6237__$1;
                            statearr_6251_6269[2] = inst_6229;
                            statearr_6251_6269[1] = 6;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_6238 === 8) {
                              var inst_6218 = state_6237[9];
                              var inst_6216 = state_6237[7];
                              var inst_6207 = state_6237[10];
                              var inst_6217 = state_6237[8];
                              var inst_6221 = function() {
                                var cs = inst_6207;
                                var vec__6212 = inst_6216;
                                var v = inst_6217;
                                var c = inst_6218;
                                return function(p1__6203_SHARP_) {
                                  return cljs.core.not_EQ_.call(null, c, p1__6203_SHARP_);
                                };
                              }();
                              var inst_6222 = cljs.core.filterv.call(null, inst_6221, inst_6207);
                              var inst_6207__$1 = inst_6222;
                              var state_6237__$1 = function() {
                                var statearr_6252 = state_6237;
                                statearr_6252[10] = inst_6207__$1;
                                return statearr_6252;
                              }();
                              var statearr_6253_6270 = state_6237__$1;
                              statearr_6253_6270[2] = null;
                              statearr_6253_6270[1] = 2;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              return null;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      return function() {
        var cljs$core$async$state_machine__4703__auto__ = null;
        var cljs$core$async$state_machine__4703__auto____0 = function() {
          var statearr_6254 = [null, null, null, null, null, null, null, null, null, null, null, null];
          statearr_6254[0] = cljs$core$async$state_machine__4703__auto__;
          statearr_6254[1] = 1;
          return statearr_6254;
        };
        var cljs$core$async$state_machine__4703__auto____1 = function(state_6237) {
          while (true) {
            var ret_value__4704__auto__ = function() {
              try {
                while (true) {
                  var result__4705__auto__ = switch__4702__auto__.call(null, state_6237);
                  if (cljs.core.keyword_identical_QMARK_.call(null, result__4705__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    continue;
                  } else {
                    return result__4705__auto__;
                  }
                  break;
                }
              } catch (e6255) {
                var ex__4706__auto__ = e6255;
                var statearr_6256_6271 = state_6237;
                statearr_6256_6271[2] = ex__4706__auto__;
                if (cljs.core.seq.call(null, state_6237[4])) {
                  var statearr_6257_6272 = state_6237;
                  statearr_6257_6272[1] = cljs.core.first.call(null, state_6237[4]);
                } else {
                  throw ex__4706__auto__;
                }
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              }
            }();
            if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__4704__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
              var G__6273 = state_6237;
              state_6237 = G__6273;
              continue;
            } else {
              return ret_value__4704__auto__;
            }
            break;
          }
        };
        cljs$core$async$state_machine__4703__auto__ = function(state_6237) {
          switch(arguments.length) {
            case 0:
              return cljs$core$async$state_machine__4703__auto____0.call(this);
            case 1:
              return cljs$core$async$state_machine__4703__auto____1.call(this, state_6237);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        cljs$core$async$state_machine__4703__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__4703__auto____0;
        cljs$core$async$state_machine__4703__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__4703__auto____1;
        return cljs$core$async$state_machine__4703__auto__;
      }();
    }();
    var state__4796__auto__ = function() {
      var statearr_6258 = f__4795__auto__.call(null);
      statearr_6258[6] = c__4794__auto___6260;
      return statearr_6258;
    }();
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__4796__auto__);
  });
  return out;
};
cljs.core.async.merge.cljs$lang$maxFixedArity = 2;
cljs.core.async.into = function cljs$core$async$into(coll, ch) {
  return cljs.core.async.reduce.call(null, cljs.core.conj, coll, ch);
};
cljs.core.async.take = function cljs$core$async$take(var_args) {
  var G__6275 = arguments.length;
  switch(G__6275) {
    case 2:
      return cljs.core.async.take.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.take.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
cljs.core.async.take.cljs$core$IFn$_invoke$arity$2 = function(n, ch) {
  return cljs.core.async.take.call(null, n, ch, null);
};
cljs.core.async.take.cljs$core$IFn$_invoke$arity$3 = function(n, ch, buf_or_n) {
  var out = cljs.core.async.chan.call(null, buf_or_n);
  var c__4794__auto___6321 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function() {
    var f__4795__auto__ = function() {
      var switch__4702__auto__ = function(state_6299) {
        var state_val_6300 = state_6299[1];
        if (state_val_6300 === 7) {
          var inst_6281 = state_6299[7];
          var inst_6281__$1 = state_6299[2];
          var inst_6282 = inst_6281__$1 == null;
          var inst_6283 = cljs.core.not.call(null, inst_6282);
          var state_6299__$1 = function() {
            var statearr_6301 = state_6299;
            statearr_6301[7] = inst_6281__$1;
            return statearr_6301;
          }();
          if (inst_6283) {
            var statearr_6302_6322 = state_6299__$1;
            statearr_6302_6322[1] = 8;
          } else {
            var statearr_6303_6323 = state_6299__$1;
            statearr_6303_6323[1] = 9;
          }
          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
        } else {
          if (state_val_6300 === 1) {
            var inst_6276 = 0;
            var state_6299__$1 = function() {
              var statearr_6304 = state_6299;
              statearr_6304[8] = inst_6276;
              return statearr_6304;
            }();
            var statearr_6305_6324 = state_6299__$1;
            statearr_6305_6324[2] = null;
            statearr_6305_6324[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
          } else {
            if (state_val_6300 === 4) {
              var state_6299__$1 = state_6299;
              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_6299__$1, 7, ch);
            } else {
              if (state_val_6300 === 6) {
                var inst_6294 = state_6299[2];
                var state_6299__$1 = state_6299;
                var statearr_6306_6325 = state_6299__$1;
                statearr_6306_6325[2] = inst_6294;
                statearr_6306_6325[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_6300 === 3) {
                  var inst_6296 = state_6299[2];
                  var inst_6297 = cljs.core.async.close_BANG_.call(null, out);
                  var state_6299__$1 = function() {
                    var statearr_6307 = state_6299;
                    statearr_6307[9] = inst_6296;
                    return statearr_6307;
                  }();
                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_6299__$1, inst_6297);
                } else {
                  if (state_val_6300 === 2) {
                    var inst_6276 = state_6299[8];
                    var inst_6278 = inst_6276 < n;
                    var state_6299__$1 = state_6299;
                    if (cljs.core.truth_(inst_6278)) {
                      var statearr_6308_6326 = state_6299__$1;
                      statearr_6308_6326[1] = 4;
                    } else {
                      var statearr_6309_6327 = state_6299__$1;
                      statearr_6309_6327[1] = 5;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_6300 === 11) {
                      var inst_6276 = state_6299[8];
                      var inst_6286 = state_6299[2];
                      var inst_6287 = inst_6276 + 1;
                      var inst_6276__$1 = inst_6287;
                      var state_6299__$1 = function() {
                        var statearr_6310 = state_6299;
                        statearr_6310[8] = inst_6276__$1;
                        statearr_6310[10] = inst_6286;
                        return statearr_6310;
                      }();
                      var statearr_6311_6328 = state_6299__$1;
                      statearr_6311_6328[2] = null;
                      statearr_6311_6328[1] = 2;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_6300 === 9) {
                        var state_6299__$1 = state_6299;
                        var statearr_6312_6329 = state_6299__$1;
                        statearr_6312_6329[2] = null;
                        statearr_6312_6329[1] = 10;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_6300 === 5) {
                          var state_6299__$1 = state_6299;
                          var statearr_6313_6330 = state_6299__$1;
                          statearr_6313_6330[2] = null;
                          statearr_6313_6330[1] = 6;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_6300 === 10) {
                            var inst_6291 = state_6299[2];
                            var state_6299__$1 = state_6299;
                            var statearr_6314_6331 = state_6299__$1;
                            statearr_6314_6331[2] = inst_6291;
                            statearr_6314_6331[1] = 6;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_6300 === 8) {
                              var inst_6281 = state_6299[7];
                              var state_6299__$1 = state_6299;
                              return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_6299__$1, 11, out, inst_6281);
                            } else {
                              return null;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      return function() {
        var cljs$core$async$state_machine__4703__auto__ = null;
        var cljs$core$async$state_machine__4703__auto____0 = function() {
          var statearr_6315 = [null, null, null, null, null, null, null, null, null, null, null];
          statearr_6315[0] = cljs$core$async$state_machine__4703__auto__;
          statearr_6315[1] = 1;
          return statearr_6315;
        };
        var cljs$core$async$state_machine__4703__auto____1 = function(state_6299) {
          while (true) {
            var ret_value__4704__auto__ = function() {
              try {
                while (true) {
                  var result__4705__auto__ = switch__4702__auto__.call(null, state_6299);
                  if (cljs.core.keyword_identical_QMARK_.call(null, result__4705__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    continue;
                  } else {
                    return result__4705__auto__;
                  }
                  break;
                }
              } catch (e6316) {
                var ex__4706__auto__ = e6316;
                var statearr_6317_6332 = state_6299;
                statearr_6317_6332[2] = ex__4706__auto__;
                if (cljs.core.seq.call(null, state_6299[4])) {
                  var statearr_6318_6333 = state_6299;
                  statearr_6318_6333[1] = cljs.core.first.call(null, state_6299[4]);
                } else {
                  throw ex__4706__auto__;
                }
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              }
            }();
            if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__4704__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
              var G__6334 = state_6299;
              state_6299 = G__6334;
              continue;
            } else {
              return ret_value__4704__auto__;
            }
            break;
          }
        };
        cljs$core$async$state_machine__4703__auto__ = function(state_6299) {
          switch(arguments.length) {
            case 0:
              return cljs$core$async$state_machine__4703__auto____0.call(this);
            case 1:
              return cljs$core$async$state_machine__4703__auto____1.call(this, state_6299);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        cljs$core$async$state_machine__4703__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__4703__auto____0;
        cljs$core$async$state_machine__4703__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__4703__auto____1;
        return cljs$core$async$state_machine__4703__auto__;
      }();
    }();
    var state__4796__auto__ = function() {
      var statearr_6319 = f__4795__auto__.call(null);
      statearr_6319[6] = c__4794__auto___6321;
      return statearr_6319;
    }();
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__4796__auto__);
  });
  return out;
};
cljs.core.async.take.cljs$lang$maxFixedArity = 3;
cljs.core.async.map_LT_ = function cljs$core$async$map_LT_(f, ch) {
  if (typeof cljs !== "undefined" && typeof cljs.core !== "undefined" && typeof cljs.core.async !== "undefined" && typeof cljs.core.async.t_cljs$core$async6336 !== "undefined") {
  } else {
    cljs.core.async.t_cljs$core$async6336 = function(f, ch, meta6337) {
      this.f = f;
      this.ch = ch;
      this.meta6337 = meta6337;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.core.async.t_cljs$core$async6336.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_6338, meta6337__$1) {
      var self__ = this;
      var _6338__$1 = this;
      return new cljs.core.async.t_cljs$core$async6336(self__.f, self__.ch, meta6337__$1);
    };
    cljs.core.async.t_cljs$core$async6336.prototype.cljs$core$IMeta$_meta$arity$1 = function(_6338) {
      var self__ = this;
      var _6338__$1 = this;
      return self__.meta6337;
    };
    cljs.core.async.t_cljs$core$async6336.prototype.cljs$core$async$impl$protocols$Channel$ = cljs.core.PROTOCOL_SENTINEL;
    cljs.core.async.t_cljs$core$async6336.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t_cljs$core$async6336.prototype.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.closed_QMARK_.call(null, self__.ch);
    };
    cljs.core.async.t_cljs$core$async6336.prototype.cljs$core$async$impl$protocols$ReadPort$ = cljs.core.PROTOCOL_SENTINEL;
    cljs.core.async.t_cljs$core$async6336.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      var ret = cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, function() {
        if (typeof cljs !== "undefined" && typeof cljs.core !== "undefined" && typeof cljs.core.async !== "undefined" && typeof cljs.core.async.t_cljs$core$async6339 !== "undefined") {
        } else {
          cljs.core.async.t_cljs$core$async6339 = function(f, ch, meta6337, _, fn1, meta6340) {
            this.f = f;
            this.ch = ch;
            this.meta6337 = meta6337;
            this._ = _;
            this.fn1 = fn1;
            this.meta6340 = meta6340;
            this.cljs$lang$protocol_mask$partition0$ = 393216;
            this.cljs$lang$protocol_mask$partition1$ = 0;
          };
          cljs.core.async.t_cljs$core$async6339.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_6341, meta6340__$1) {
            var self__ = this;
            var _6341__$1 = this;
            return new cljs.core.async.t_cljs$core$async6339(self__.f, self__.ch, self__.meta6337, self__._, self__.fn1, meta6340__$1);
          };
          cljs.core.async.t_cljs$core$async6339.prototype.cljs$core$IMeta$_meta$arity$1 = function(_6341) {
            var self__ = this;
            var _6341__$1 = this;
            return self__.meta6340;
          };
          cljs.core.async.t_cljs$core$async6339.prototype.cljs$core$async$impl$protocols$Handler$ = cljs.core.PROTOCOL_SENTINEL;
          cljs.core.async.t_cljs$core$async6339.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(___$1) {
            var self__ = this;
            var ___$2 = this;
            return cljs.core.async.impl.protocols.active_QMARK_.call(null, self__.fn1);
          };
          cljs.core.async.t_cljs$core$async6339.prototype.cljs$core$async$impl$protocols$Handler$blockable_QMARK_$arity$1 = function(___$1) {
            var self__ = this;
            var ___$2 = this;
            return true;
          };
          cljs.core.async.t_cljs$core$async6339.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(___$1) {
            var self__ = this;
            var ___$2 = this;
            var f1 = cljs.core.async.impl.protocols.commit.call(null, self__.fn1);
            return function(p1__6335_SHARP_) {
              return f1.call(null, p1__6335_SHARP_ == null ? null : self__.f.call(null, p1__6335_SHARP_));
            };
          };
          cljs.core.async.t_cljs$core$async6339.getBasis = function() {
            return new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "f", "f", 43394975, null), new cljs.core.Symbol(null, "ch", "ch", 1085813622, null), new cljs.core.Symbol(null, "meta6337", "meta6337", 602212396, null), cljs.core.with_meta(new cljs.core.Symbol(null, "_", "_", -1201019570, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Symbol("cljs.core.async", "t_cljs$core$async6336", 
            "cljs.core.async/t_cljs$core$async6336", -701199404, null)], null)), new cljs.core.Symbol(null, "fn1", "fn1", 895834444, null), new cljs.core.Symbol(null, "meta6340", "meta6340", -117172813, null)], null);
          };
          cljs.core.async.t_cljs$core$async6339.cljs$lang$type = true;
          cljs.core.async.t_cljs$core$async6339.cljs$lang$ctorStr = "cljs.core.async/t_cljs$core$async6339";
          cljs.core.async.t_cljs$core$async6339.cljs$lang$ctorPrWriter = function(this__4369__auto__, writer__4370__auto__, opt__4371__auto__) {
            return cljs.core._write.call(null, writer__4370__auto__, "cljs.core.async/t_cljs$core$async6339");
          };
          cljs.core.async.__GT_t_cljs$core$async6339 = function cljs$core$async$map_LT__$___GT_t_cljs$core$async6339(f__$1, ch__$1, meta6337__$1, ___$2, fn1__$1, meta6340) {
            return new cljs.core.async.t_cljs$core$async6339(f__$1, ch__$1, meta6337__$1, ___$2, fn1__$1, meta6340);
          };
        }
        return new cljs.core.async.t_cljs$core$async6339(self__.f, self__.ch, self__.meta6337, ___$1, fn1, cljs.core.PersistentArrayMap.EMPTY);
      }());
      if (cljs.core.truth_(function() {
        var and__4115__auto__ = ret;
        if (cljs.core.truth_(and__4115__auto__)) {
          return !(cljs.core.deref.call(null, ret) == null);
        } else {
          return and__4115__auto__;
        }
      }())) {
        return cljs.core.async.impl.channels.box.call(null, self__.f.call(null, cljs.core.deref.call(null, ret)));
      } else {
        return ret;
      }
    };
    cljs.core.async.t_cljs$core$async6336.prototype.cljs$core$async$impl$protocols$WritePort$ = cljs.core.PROTOCOL_SENTINEL;
    cljs.core.async.t_cljs$core$async6336.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, val, fn1);
    };
    cljs.core.async.t_cljs$core$async6336.getBasis = function() {
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "f", "f", 43394975, null), new cljs.core.Symbol(null, "ch", "ch", 1085813622, null), new cljs.core.Symbol(null, "meta6337", "meta6337", 602212396, null)], null);
    };
    cljs.core.async.t_cljs$core$async6336.cljs$lang$type = true;
    cljs.core.async.t_cljs$core$async6336.cljs$lang$ctorStr = "cljs.core.async/t_cljs$core$async6336";
    cljs.core.async.t_cljs$core$async6336.cljs$lang$ctorPrWriter = function(this__4369__auto__, writer__4370__auto__, opt__4371__auto__) {
      return cljs.core._write.call(null, writer__4370__auto__, "cljs.core.async/t_cljs$core$async6336");
    };
    cljs.core.async.__GT_t_cljs$core$async6336 = function cljs$core$async$map_LT__$___GT_t_cljs$core$async6336(f__$1, ch__$1, meta6337) {
      return new cljs.core.async.t_cljs$core$async6336(f__$1, ch__$1, meta6337);
    };
  }
  return new cljs.core.async.t_cljs$core$async6336(f, ch, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.map_GT_ = function cljs$core$async$map_GT_(f, ch) {
  if (typeof cljs !== "undefined" && typeof cljs.core !== "undefined" && typeof cljs.core.async !== "undefined" && typeof cljs.core.async.t_cljs$core$async6342 !== "undefined") {
  } else {
    cljs.core.async.t_cljs$core$async6342 = function(f, ch, meta6343) {
      this.f = f;
      this.ch = ch;
      this.meta6343 = meta6343;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.core.async.t_cljs$core$async6342.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_6344, meta6343__$1) {
      var self__ = this;
      var _6344__$1 = this;
      return new cljs.core.async.t_cljs$core$async6342(self__.f, self__.ch, meta6343__$1);
    };
    cljs.core.async.t_cljs$core$async6342.prototype.cljs$core$IMeta$_meta$arity$1 = function(_6344) {
      var self__ = this;
      var _6344__$1 = this;
      return self__.meta6343;
    };
    cljs.core.async.t_cljs$core$async6342.prototype.cljs$core$async$impl$protocols$Channel$ = cljs.core.PROTOCOL_SENTINEL;
    cljs.core.async.t_cljs$core$async6342.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t_cljs$core$async6342.prototype.cljs$core$async$impl$protocols$ReadPort$ = cljs.core.PROTOCOL_SENTINEL;
    cljs.core.async.t_cljs$core$async6342.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, fn1);
    };
    cljs.core.async.t_cljs$core$async6342.prototype.cljs$core$async$impl$protocols$WritePort$ = cljs.core.PROTOCOL_SENTINEL;
    cljs.core.async.t_cljs$core$async6342.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, self__.f.call(null, val), fn1);
    };
    cljs.core.async.t_cljs$core$async6342.getBasis = function() {
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "f", "f", 43394975, null), new cljs.core.Symbol(null, "ch", "ch", 1085813622, null), new cljs.core.Symbol(null, "meta6343", "meta6343", -1490600098, null)], null);
    };
    cljs.core.async.t_cljs$core$async6342.cljs$lang$type = true;
    cljs.core.async.t_cljs$core$async6342.cljs$lang$ctorStr = "cljs.core.async/t_cljs$core$async6342";
    cljs.core.async.t_cljs$core$async6342.cljs$lang$ctorPrWriter = function(this__4369__auto__, writer__4370__auto__, opt__4371__auto__) {
      return cljs.core._write.call(null, writer__4370__auto__, "cljs.core.async/t_cljs$core$async6342");
    };
    cljs.core.async.__GT_t_cljs$core$async6342 = function cljs$core$async$map_GT__$___GT_t_cljs$core$async6342(f__$1, ch__$1, meta6343) {
      return new cljs.core.async.t_cljs$core$async6342(f__$1, ch__$1, meta6343);
    };
  }
  return new cljs.core.async.t_cljs$core$async6342(f, ch, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.filter_GT_ = function cljs$core$async$filter_GT_(p, ch) {
  if (typeof cljs !== "undefined" && typeof cljs.core !== "undefined" && typeof cljs.core.async !== "undefined" && typeof cljs.core.async.t_cljs$core$async6345 !== "undefined") {
  } else {
    cljs.core.async.t_cljs$core$async6345 = function(p, ch, meta6346) {
      this.p = p;
      this.ch = ch;
      this.meta6346 = meta6346;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.core.async.t_cljs$core$async6345.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_6347, meta6346__$1) {
      var self__ = this;
      var _6347__$1 = this;
      return new cljs.core.async.t_cljs$core$async6345(self__.p, self__.ch, meta6346__$1);
    };
    cljs.core.async.t_cljs$core$async6345.prototype.cljs$core$IMeta$_meta$arity$1 = function(_6347) {
      var self__ = this;
      var _6347__$1 = this;
      return self__.meta6346;
    };
    cljs.core.async.t_cljs$core$async6345.prototype.cljs$core$async$impl$protocols$Channel$ = cljs.core.PROTOCOL_SENTINEL;
    cljs.core.async.t_cljs$core$async6345.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t_cljs$core$async6345.prototype.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.closed_QMARK_.call(null, self__.ch);
    };
    cljs.core.async.t_cljs$core$async6345.prototype.cljs$core$async$impl$protocols$ReadPort$ = cljs.core.PROTOCOL_SENTINEL;
    cljs.core.async.t_cljs$core$async6345.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, fn1);
    };
    cljs.core.async.t_cljs$core$async6345.prototype.cljs$core$async$impl$protocols$WritePort$ = cljs.core.PROTOCOL_SENTINEL;
    cljs.core.async.t_cljs$core$async6345.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn1) {
      var self__ = this;
      var ___$1 = this;
      if (cljs.core.truth_(self__.p.call(null, val))) {
        return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, val, fn1);
      } else {
        return cljs.core.async.impl.channels.box.call(null, cljs.core.not.call(null, cljs.core.async.impl.protocols.closed_QMARK_.call(null, self__.ch)));
      }
    };
    cljs.core.async.t_cljs$core$async6345.getBasis = function() {
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "p", "p", 1791580836, null), new cljs.core.Symbol(null, "ch", "ch", 1085813622, null), new cljs.core.Symbol(null, "meta6346", "meta6346", -710442874, null)], null);
    };
    cljs.core.async.t_cljs$core$async6345.cljs$lang$type = true;
    cljs.core.async.t_cljs$core$async6345.cljs$lang$ctorStr = "cljs.core.async/t_cljs$core$async6345";
    cljs.core.async.t_cljs$core$async6345.cljs$lang$ctorPrWriter = function(this__4369__auto__, writer__4370__auto__, opt__4371__auto__) {
      return cljs.core._write.call(null, writer__4370__auto__, "cljs.core.async/t_cljs$core$async6345");
    };
    cljs.core.async.__GT_t_cljs$core$async6345 = function cljs$core$async$filter_GT__$___GT_t_cljs$core$async6345(p__$1, ch__$1, meta6346) {
      return new cljs.core.async.t_cljs$core$async6345(p__$1, ch__$1, meta6346);
    };
  }
  return new cljs.core.async.t_cljs$core$async6345(p, ch, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.remove_GT_ = function cljs$core$async$remove_GT_(p, ch) {
  return cljs.core.async.filter_GT_.call(null, cljs.core.complement.call(null, p), ch);
};
cljs.core.async.filter_LT_ = function cljs$core$async$filter_LT_(var_args) {
  var G__6349 = arguments.length;
  switch(G__6349) {
    case 2:
      return cljs.core.async.filter_LT_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.filter_LT_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
cljs.core.async.filter_LT_.cljs$core$IFn$_invoke$arity$2 = function(p, ch) {
  return cljs.core.async.filter_LT_.call(null, p, ch, null);
};
cljs.core.async.filter_LT_.cljs$core$IFn$_invoke$arity$3 = function(p, ch, buf_or_n) {
  var out = cljs.core.async.chan.call(null, buf_or_n);
  var c__4794__auto___6390 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function() {
    var f__4795__auto__ = function() {
      var switch__4702__auto__ = function(state_6370) {
        var state_val_6371 = state_6370[1];
        if (state_val_6371 === 7) {
          var inst_6366 = state_6370[2];
          var state_6370__$1 = state_6370;
          var statearr_6372_6391 = state_6370__$1;
          statearr_6372_6391[2] = inst_6366;
          statearr_6372_6391[1] = 3;
          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
        } else {
          if (state_val_6371 === 1) {
            var state_6370__$1 = state_6370;
            var statearr_6373_6392 = state_6370__$1;
            statearr_6373_6392[2] = null;
            statearr_6373_6392[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
          } else {
            if (state_val_6371 === 4) {
              var inst_6352 = state_6370[7];
              var inst_6352__$1 = state_6370[2];
              var inst_6353 = inst_6352__$1 == null;
              var state_6370__$1 = function() {
                var statearr_6374 = state_6370;
                statearr_6374[7] = inst_6352__$1;
                return statearr_6374;
              }();
              if (cljs.core.truth_(inst_6353)) {
                var statearr_6375_6393 = state_6370__$1;
                statearr_6375_6393[1] = 5;
              } else {
                var statearr_6376_6394 = state_6370__$1;
                statearr_6376_6394[1] = 6;
              }
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_6371 === 6) {
                var inst_6352 = state_6370[7];
                var inst_6357 = p.call(null, inst_6352);
                var state_6370__$1 = state_6370;
                if (cljs.core.truth_(inst_6357)) {
                  var statearr_6377_6395 = state_6370__$1;
                  statearr_6377_6395[1] = 8;
                } else {
                  var statearr_6378_6396 = state_6370__$1;
                  statearr_6378_6396[1] = 9;
                }
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_6371 === 3) {
                  var inst_6368 = state_6370[2];
                  var state_6370__$1 = state_6370;
                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_6370__$1, inst_6368);
                } else {
                  if (state_val_6371 === 2) {
                    var state_6370__$1 = state_6370;
                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_6370__$1, 4, ch);
                  } else {
                    if (state_val_6371 === 11) {
                      var inst_6360 = state_6370[2];
                      var state_6370__$1 = state_6370;
                      var statearr_6379_6397 = state_6370__$1;
                      statearr_6379_6397[2] = inst_6360;
                      statearr_6379_6397[1] = 10;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_6371 === 9) {
                        var state_6370__$1 = state_6370;
                        var statearr_6380_6398 = state_6370__$1;
                        statearr_6380_6398[2] = null;
                        statearr_6380_6398[1] = 10;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_6371 === 5) {
                          var inst_6355 = cljs.core.async.close_BANG_.call(null, out);
                          var state_6370__$1 = state_6370;
                          var statearr_6381_6399 = state_6370__$1;
                          statearr_6381_6399[2] = inst_6355;
                          statearr_6381_6399[1] = 7;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_6371 === 10) {
                            var inst_6363 = state_6370[2];
                            var state_6370__$1 = function() {
                              var statearr_6382 = state_6370;
                              statearr_6382[8] = inst_6363;
                              return statearr_6382;
                            }();
                            var statearr_6383_6400 = state_6370__$1;
                            statearr_6383_6400[2] = null;
                            statearr_6383_6400[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_6371 === 8) {
                              var inst_6352 = state_6370[7];
                              var state_6370__$1 = state_6370;
                              return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_6370__$1, 11, out, inst_6352);
                            } else {
                              return null;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      return function() {
        var cljs$core$async$state_machine__4703__auto__ = null;
        var cljs$core$async$state_machine__4703__auto____0 = function() {
          var statearr_6384 = [null, null, null, null, null, null, null, null, null];
          statearr_6384[0] = cljs$core$async$state_machine__4703__auto__;
          statearr_6384[1] = 1;
          return statearr_6384;
        };
        var cljs$core$async$state_machine__4703__auto____1 = function(state_6370) {
          while (true) {
            var ret_value__4704__auto__ = function() {
              try {
                while (true) {
                  var result__4705__auto__ = switch__4702__auto__.call(null, state_6370);
                  if (cljs.core.keyword_identical_QMARK_.call(null, result__4705__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    continue;
                  } else {
                    return result__4705__auto__;
                  }
                  break;
                }
              } catch (e6385) {
                var ex__4706__auto__ = e6385;
                var statearr_6386_6401 = state_6370;
                statearr_6386_6401[2] = ex__4706__auto__;
                if (cljs.core.seq.call(null, state_6370[4])) {
                  var statearr_6387_6402 = state_6370;
                  statearr_6387_6402[1] = cljs.core.first.call(null, state_6370[4]);
                } else {
                  throw ex__4706__auto__;
                }
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              }
            }();
            if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__4704__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
              var G__6403 = state_6370;
              state_6370 = G__6403;
              continue;
            } else {
              return ret_value__4704__auto__;
            }
            break;
          }
        };
        cljs$core$async$state_machine__4703__auto__ = function(state_6370) {
          switch(arguments.length) {
            case 0:
              return cljs$core$async$state_machine__4703__auto____0.call(this);
            case 1:
              return cljs$core$async$state_machine__4703__auto____1.call(this, state_6370);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        cljs$core$async$state_machine__4703__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__4703__auto____0;
        cljs$core$async$state_machine__4703__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__4703__auto____1;
        return cljs$core$async$state_machine__4703__auto__;
      }();
    }();
    var state__4796__auto__ = function() {
      var statearr_6388 = f__4795__auto__.call(null);
      statearr_6388[6] = c__4794__auto___6390;
      return statearr_6388;
    }();
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__4796__auto__);
  });
  return out;
};
cljs.core.async.filter_LT_.cljs$lang$maxFixedArity = 3;
cljs.core.async.remove_LT_ = function cljs$core$async$remove_LT_(var_args) {
  var G__6405 = arguments.length;
  switch(G__6405) {
    case 2:
      return cljs.core.async.remove_LT_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.remove_LT_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
cljs.core.async.remove_LT_.cljs$core$IFn$_invoke$arity$2 = function(p, ch) {
  return cljs.core.async.remove_LT_.call(null, p, ch, null);
};
cljs.core.async.remove_LT_.cljs$core$IFn$_invoke$arity$3 = function(p, ch, buf_or_n) {
  return cljs.core.async.filter_LT_.call(null, cljs.core.complement.call(null, p), ch, buf_or_n);
};
cljs.core.async.remove_LT_.cljs$lang$maxFixedArity = 3;
cljs.core.async.mapcat_STAR_ = function cljs$core$async$mapcat_STAR_(f, in$, out) {
  var c__4794__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function() {
    var f__4795__auto__ = function() {
      var switch__4702__auto__ = function(state_6468) {
        var state_val_6469 = state_6468[1];
        if (state_val_6469 === 7) {
          var inst_6464 = state_6468[2];
          var state_6468__$1 = state_6468;
          var statearr_6470_6509 = state_6468__$1;
          statearr_6470_6509[2] = inst_6464;
          statearr_6470_6509[1] = 3;
          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
        } else {
          if (state_val_6469 === 20) {
            var inst_6434 = state_6468[7];
            var inst_6445 = state_6468[2];
            var inst_6446 = cljs.core.next.call(null, inst_6434);
            var inst_6420 = inst_6446;
            var inst_6421 = null;
            var inst_6422 = 0;
            var inst_6423 = 0;
            var state_6468__$1 = function() {
              var statearr_6471 = state_6468;
              statearr_6471[8] = inst_6422;
              statearr_6471[9] = inst_6421;
              statearr_6471[10] = inst_6420;
              statearr_6471[11] = inst_6423;
              statearr_6471[12] = inst_6445;
              return statearr_6471;
            }();
            var statearr_6472_6510 = state_6468__$1;
            statearr_6472_6510[2] = null;
            statearr_6472_6510[1] = 8;
            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
          } else {
            if (state_val_6469 === 1) {
              var state_6468__$1 = state_6468;
              var statearr_6473_6511 = state_6468__$1;
              statearr_6473_6511[2] = null;
              statearr_6473_6511[1] = 2;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_6469 === 4) {
                var inst_6409 = state_6468[13];
                var inst_6409__$1 = state_6468[2];
                var inst_6410 = inst_6409__$1 == null;
                var state_6468__$1 = function() {
                  var statearr_6474 = state_6468;
                  statearr_6474[13] = inst_6409__$1;
                  return statearr_6474;
                }();
                if (cljs.core.truth_(inst_6410)) {
                  var statearr_6475_6512 = state_6468__$1;
                  statearr_6475_6512[1] = 5;
                } else {
                  var statearr_6476_6513 = state_6468__$1;
                  statearr_6476_6513[1] = 6;
                }
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_6469 === 15) {
                  var state_6468__$1 = state_6468;
                  var statearr_6480_6514 = state_6468__$1;
                  statearr_6480_6514[2] = null;
                  statearr_6480_6514[1] = 16;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_6469 === 21) {
                    var state_6468__$1 = state_6468;
                    var statearr_6481_6515 = state_6468__$1;
                    statearr_6481_6515[2] = null;
                    statearr_6481_6515[1] = 23;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_6469 === 13) {
                      var inst_6422 = state_6468[8];
                      var inst_6421 = state_6468[9];
                      var inst_6420 = state_6468[10];
                      var inst_6423 = state_6468[11];
                      var inst_6430 = state_6468[2];
                      var inst_6431 = inst_6423 + 1;
                      var tmp6477 = inst_6422;
                      var tmp6478 = inst_6421;
                      var tmp6479 = inst_6420;
                      var inst_6420__$1 = tmp6479;
                      var inst_6421__$1 = tmp6478;
                      var inst_6422__$1 = tmp6477;
                      var inst_6423__$1 = inst_6431;
                      var state_6468__$1 = function() {
                        var statearr_6482 = state_6468;
                        statearr_6482[8] = inst_6422__$1;
                        statearr_6482[14] = inst_6430;
                        statearr_6482[9] = inst_6421__$1;
                        statearr_6482[10] = inst_6420__$1;
                        statearr_6482[11] = inst_6423__$1;
                        return statearr_6482;
                      }();
                      var statearr_6483_6516 = state_6468__$1;
                      statearr_6483_6516[2] = null;
                      statearr_6483_6516[1] = 8;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_6469 === 22) {
                        var state_6468__$1 = state_6468;
                        var statearr_6484_6517 = state_6468__$1;
                        statearr_6484_6517[2] = null;
                        statearr_6484_6517[1] = 2;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_6469 === 6) {
                          var inst_6409 = state_6468[13];
                          var inst_6418 = f.call(null, inst_6409);
                          var inst_6419 = cljs.core.seq.call(null, inst_6418);
                          var inst_6420 = inst_6419;
                          var inst_6421 = null;
                          var inst_6422 = 0;
                          var inst_6423 = 0;
                          var state_6468__$1 = function() {
                            var statearr_6485 = state_6468;
                            statearr_6485[8] = inst_6422;
                            statearr_6485[9] = inst_6421;
                            statearr_6485[10] = inst_6420;
                            statearr_6485[11] = inst_6423;
                            return statearr_6485;
                          }();
                          var statearr_6486_6518 = state_6468__$1;
                          statearr_6486_6518[2] = null;
                          statearr_6486_6518[1] = 8;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_6469 === 17) {
                            var inst_6434 = state_6468[7];
                            var inst_6438 = cljs.core.chunk_first.call(null, inst_6434);
                            var inst_6439 = cljs.core.chunk_rest.call(null, inst_6434);
                            var inst_6440 = cljs.core.count.call(null, inst_6438);
                            var inst_6420 = inst_6439;
                            var inst_6421 = inst_6438;
                            var inst_6422 = inst_6440;
                            var inst_6423 = 0;
                            var state_6468__$1 = function() {
                              var statearr_6487 = state_6468;
                              statearr_6487[8] = inst_6422;
                              statearr_6487[9] = inst_6421;
                              statearr_6487[10] = inst_6420;
                              statearr_6487[11] = inst_6423;
                              return statearr_6487;
                            }();
                            var statearr_6488_6519 = state_6468__$1;
                            statearr_6488_6519[2] = null;
                            statearr_6488_6519[1] = 8;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_6469 === 3) {
                              var inst_6466 = state_6468[2];
                              var state_6468__$1 = state_6468;
                              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_6468__$1, inst_6466);
                            } else {
                              if (state_val_6469 === 12) {
                                var inst_6454 = state_6468[2];
                                var state_6468__$1 = state_6468;
                                var statearr_6489_6520 = state_6468__$1;
                                statearr_6489_6520[2] = inst_6454;
                                statearr_6489_6520[1] = 9;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_6469 === 2) {
                                  var state_6468__$1 = state_6468;
                                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_6468__$1, 4, in$);
                                } else {
                                  if (state_val_6469 === 23) {
                                    var inst_6462 = state_6468[2];
                                    var state_6468__$1 = state_6468;
                                    var statearr_6490_6521 = state_6468__$1;
                                    statearr_6490_6521[2] = inst_6462;
                                    statearr_6490_6521[1] = 7;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_6469 === 19) {
                                      var inst_6449 = state_6468[2];
                                      var state_6468__$1 = state_6468;
                                      var statearr_6491_6522 = state_6468__$1;
                                      statearr_6491_6522[2] = inst_6449;
                                      statearr_6491_6522[1] = 16;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_6469 === 11) {
                                        var inst_6434 = state_6468[7];
                                        var inst_6420 = state_6468[10];
                                        var inst_6434__$1 = cljs.core.seq.call(null, inst_6420);
                                        var state_6468__$1 = function() {
                                          var statearr_6492 = state_6468;
                                          statearr_6492[7] = inst_6434__$1;
                                          return statearr_6492;
                                        }();
                                        if (inst_6434__$1) {
                                          var statearr_6493_6523 = state_6468__$1;
                                          statearr_6493_6523[1] = 14;
                                        } else {
                                          var statearr_6494_6524 = state_6468__$1;
                                          statearr_6494_6524[1] = 15;
                                        }
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_6469 === 9) {
                                          var inst_6456 = state_6468[2];
                                          var inst_6457 = cljs.core.async.impl.protocols.closed_QMARK_.call(null, out);
                                          var state_6468__$1 = function() {
                                            var statearr_6495 = state_6468;
                                            statearr_6495[15] = inst_6456;
                                            return statearr_6495;
                                          }();
                                          if (cljs.core.truth_(inst_6457)) {
                                            var statearr_6496_6525 = state_6468__$1;
                                            statearr_6496_6525[1] = 21;
                                          } else {
                                            var statearr_6497_6526 = state_6468__$1;
                                            statearr_6497_6526[1] = 22;
                                          }
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_6469 === 5) {
                                            var inst_6412 = cljs.core.async.close_BANG_.call(null, out);
                                            var state_6468__$1 = state_6468;
                                            var statearr_6498_6527 = state_6468__$1;
                                            statearr_6498_6527[2] = inst_6412;
                                            statearr_6498_6527[1] = 7;
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_6469 === 14) {
                                              var inst_6434 = state_6468[7];
                                              var inst_6436 = cljs.core.chunked_seq_QMARK_.call(null, inst_6434);
                                              var state_6468__$1 = state_6468;
                                              if (inst_6436) {
                                                var statearr_6499_6528 = state_6468__$1;
                                                statearr_6499_6528[1] = 17;
                                              } else {
                                                var statearr_6500_6529 = state_6468__$1;
                                                statearr_6500_6529[1] = 18;
                                              }
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_6469 === 16) {
                                                var inst_6452 = state_6468[2];
                                                var state_6468__$1 = state_6468;
                                                var statearr_6501_6530 = state_6468__$1;
                                                statearr_6501_6530[2] = inst_6452;
                                                statearr_6501_6530[1] = 12;
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_6469 === 10) {
                                                  var inst_6421 = state_6468[9];
                                                  var inst_6423 = state_6468[11];
                                                  var inst_6428 = cljs.core._nth.call(null, inst_6421, inst_6423);
                                                  var state_6468__$1 = state_6468;
                                                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_6468__$1, 13, out, inst_6428);
                                                } else {
                                                  if (state_val_6469 === 18) {
                                                    var inst_6434 = state_6468[7];
                                                    var inst_6443 = cljs.core.first.call(null, inst_6434);
                                                    var state_6468__$1 = state_6468;
                                                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_6468__$1, 20, out, inst_6443);
                                                  } else {
                                                    if (state_val_6469 === 8) {
                                                      var inst_6422 = state_6468[8];
                                                      var inst_6423 = state_6468[11];
                                                      var inst_6425 = inst_6423 < inst_6422;
                                                      var inst_6426 = inst_6425;
                                                      var state_6468__$1 = state_6468;
                                                      if (cljs.core.truth_(inst_6426)) {
                                                        var statearr_6502_6531 = state_6468__$1;
                                                        statearr_6502_6531[1] = 10;
                                                      } else {
                                                        var statearr_6503_6532 = state_6468__$1;
                                                        statearr_6503_6532[1] = 11;
                                                      }
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      return null;
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      return function() {
        var cljs$core$async$mapcat_STAR__$_state_machine__4703__auto__ = null;
        var cljs$core$async$mapcat_STAR__$_state_machine__4703__auto____0 = function() {
          var statearr_6504 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
          statearr_6504[0] = cljs$core$async$mapcat_STAR__$_state_machine__4703__auto__;
          statearr_6504[1] = 1;
          return statearr_6504;
        };
        var cljs$core$async$mapcat_STAR__$_state_machine__4703__auto____1 = function(state_6468) {
          while (true) {
            var ret_value__4704__auto__ = function() {
              try {
                while (true) {
                  var result__4705__auto__ = switch__4702__auto__.call(null, state_6468);
                  if (cljs.core.keyword_identical_QMARK_.call(null, result__4705__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    continue;
                  } else {
                    return result__4705__auto__;
                  }
                  break;
                }
              } catch (e6505) {
                var ex__4706__auto__ = e6505;
                var statearr_6506_6533 = state_6468;
                statearr_6506_6533[2] = ex__4706__auto__;
                if (cljs.core.seq.call(null, state_6468[4])) {
                  var statearr_6507_6534 = state_6468;
                  statearr_6507_6534[1] = cljs.core.first.call(null, state_6468[4]);
                } else {
                  throw ex__4706__auto__;
                }
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              }
            }();
            if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__4704__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
              var G__6535 = state_6468;
              state_6468 = G__6535;
              continue;
            } else {
              return ret_value__4704__auto__;
            }
            break;
          }
        };
        cljs$core$async$mapcat_STAR__$_state_machine__4703__auto__ = function(state_6468) {
          switch(arguments.length) {
            case 0:
              return cljs$core$async$mapcat_STAR__$_state_machine__4703__auto____0.call(this);
            case 1:
              return cljs$core$async$mapcat_STAR__$_state_machine__4703__auto____1.call(this, state_6468);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        cljs$core$async$mapcat_STAR__$_state_machine__4703__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$mapcat_STAR__$_state_machine__4703__auto____0;
        cljs$core$async$mapcat_STAR__$_state_machine__4703__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$mapcat_STAR__$_state_machine__4703__auto____1;
        return cljs$core$async$mapcat_STAR__$_state_machine__4703__auto__;
      }();
    }();
    var state__4796__auto__ = function() {
      var statearr_6508 = f__4795__auto__.call(null);
      statearr_6508[6] = c__4794__auto__;
      return statearr_6508;
    }();
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__4796__auto__);
  });
  return c__4794__auto__;
};
cljs.core.async.mapcat_LT_ = function cljs$core$async$mapcat_LT_(var_args) {
  var G__6537 = arguments.length;
  switch(G__6537) {
    case 2:
      return cljs.core.async.mapcat_LT_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.mapcat_LT_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
cljs.core.async.mapcat_LT_.cljs$core$IFn$_invoke$arity$2 = function(f, in$) {
  return cljs.core.async.mapcat_LT_.call(null, f, in$, null);
};
cljs.core.async.mapcat_LT_.cljs$core$IFn$_invoke$arity$3 = function(f, in$, buf_or_n) {
  var out = cljs.core.async.chan.call(null, buf_or_n);
  cljs.core.async.mapcat_STAR_.call(null, f, in$, out);
  return out;
};
cljs.core.async.mapcat_LT_.cljs$lang$maxFixedArity = 3;
cljs.core.async.mapcat_GT_ = function cljs$core$async$mapcat_GT_(var_args) {
  var G__6540 = arguments.length;
  switch(G__6540) {
    case 2:
      return cljs.core.async.mapcat_GT_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.mapcat_GT_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
cljs.core.async.mapcat_GT_.cljs$core$IFn$_invoke$arity$2 = function(f, out) {
  return cljs.core.async.mapcat_GT_.call(null, f, out, null);
};
cljs.core.async.mapcat_GT_.cljs$core$IFn$_invoke$arity$3 = function(f, out, buf_or_n) {
  var in$ = cljs.core.async.chan.call(null, buf_or_n);
  cljs.core.async.mapcat_STAR_.call(null, f, in$, out);
  return in$;
};
cljs.core.async.mapcat_GT_.cljs$lang$maxFixedArity = 3;
cljs.core.async.unique = function cljs$core$async$unique(var_args) {
  var G__6543 = arguments.length;
  switch(G__6543) {
    case 1:
      return cljs.core.async.unique.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.async.unique.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
cljs.core.async.unique.cljs$core$IFn$_invoke$arity$1 = function(ch) {
  return cljs.core.async.unique.call(null, ch, null);
};
cljs.core.async.unique.cljs$core$IFn$_invoke$arity$2 = function(ch, buf_or_n) {
  var out = cljs.core.async.chan.call(null, buf_or_n);
  var c__4794__auto___6591 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function() {
    var f__4795__auto__ = function() {
      var switch__4702__auto__ = function(state_6567) {
        var state_val_6568 = state_6567[1];
        if (state_val_6568 === 7) {
          var inst_6562 = state_6567[2];
          var state_6567__$1 = state_6567;
          var statearr_6569_6592 = state_6567__$1;
          statearr_6569_6592[2] = inst_6562;
          statearr_6569_6592[1] = 3;
          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
        } else {
          if (state_val_6568 === 1) {
            var inst_6544 = null;
            var state_6567__$1 = function() {
              var statearr_6570 = state_6567;
              statearr_6570[7] = inst_6544;
              return statearr_6570;
            }();
            var statearr_6571_6593 = state_6567__$1;
            statearr_6571_6593[2] = null;
            statearr_6571_6593[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
          } else {
            if (state_val_6568 === 4) {
              var inst_6547 = state_6567[8];
              var inst_6547__$1 = state_6567[2];
              var inst_6548 = inst_6547__$1 == null;
              var inst_6549 = cljs.core.not.call(null, inst_6548);
              var state_6567__$1 = function() {
                var statearr_6572 = state_6567;
                statearr_6572[8] = inst_6547__$1;
                return statearr_6572;
              }();
              if (inst_6549) {
                var statearr_6573_6594 = state_6567__$1;
                statearr_6573_6594[1] = 5;
              } else {
                var statearr_6574_6595 = state_6567__$1;
                statearr_6574_6595[1] = 6;
              }
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_6568 === 6) {
                var state_6567__$1 = state_6567;
                var statearr_6575_6596 = state_6567__$1;
                statearr_6575_6596[2] = null;
                statearr_6575_6596[1] = 7;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_6568 === 3) {
                  var inst_6564 = state_6567[2];
                  var inst_6565 = cljs.core.async.close_BANG_.call(null, out);
                  var state_6567__$1 = function() {
                    var statearr_6576 = state_6567;
                    statearr_6576[9] = inst_6564;
                    return statearr_6576;
                  }();
                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_6567__$1, inst_6565);
                } else {
                  if (state_val_6568 === 2) {
                    var state_6567__$1 = state_6567;
                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_6567__$1, 4, ch);
                  } else {
                    if (state_val_6568 === 11) {
                      var inst_6547 = state_6567[8];
                      var inst_6556 = state_6567[2];
                      var inst_6544 = inst_6547;
                      var state_6567__$1 = function() {
                        var statearr_6577 = state_6567;
                        statearr_6577[7] = inst_6544;
                        statearr_6577[10] = inst_6556;
                        return statearr_6577;
                      }();
                      var statearr_6578_6597 = state_6567__$1;
                      statearr_6578_6597[2] = null;
                      statearr_6578_6597[1] = 2;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_6568 === 9) {
                        var inst_6547 = state_6567[8];
                        var state_6567__$1 = state_6567;
                        return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_6567__$1, 11, out, inst_6547);
                      } else {
                        if (state_val_6568 === 5) {
                          var inst_6544 = state_6567[7];
                          var inst_6547 = state_6567[8];
                          var inst_6551 = cljs.core._EQ_.call(null, inst_6547, inst_6544);
                          var state_6567__$1 = state_6567;
                          if (inst_6551) {
                            var statearr_6580_6598 = state_6567__$1;
                            statearr_6580_6598[1] = 8;
                          } else {
                            var statearr_6581_6599 = state_6567__$1;
                            statearr_6581_6599[1] = 9;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_6568 === 10) {
                            var inst_6559 = state_6567[2];
                            var state_6567__$1 = state_6567;
                            var statearr_6582_6600 = state_6567__$1;
                            statearr_6582_6600[2] = inst_6559;
                            statearr_6582_6600[1] = 7;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_6568 === 8) {
                              var inst_6544 = state_6567[7];
                              var tmp6579 = inst_6544;
                              var inst_6544__$1 = tmp6579;
                              var state_6567__$1 = function() {
                                var statearr_6583 = state_6567;
                                statearr_6583[7] = inst_6544__$1;
                                return statearr_6583;
                              }();
                              var statearr_6584_6601 = state_6567__$1;
                              statearr_6584_6601[2] = null;
                              statearr_6584_6601[1] = 2;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              return null;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      return function() {
        var cljs$core$async$state_machine__4703__auto__ = null;
        var cljs$core$async$state_machine__4703__auto____0 = function() {
          var statearr_6585 = [null, null, null, null, null, null, null, null, null, null, null];
          statearr_6585[0] = cljs$core$async$state_machine__4703__auto__;
          statearr_6585[1] = 1;
          return statearr_6585;
        };
        var cljs$core$async$state_machine__4703__auto____1 = function(state_6567) {
          while (true) {
            var ret_value__4704__auto__ = function() {
              try {
                while (true) {
                  var result__4705__auto__ = switch__4702__auto__.call(null, state_6567);
                  if (cljs.core.keyword_identical_QMARK_.call(null, result__4705__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    continue;
                  } else {
                    return result__4705__auto__;
                  }
                  break;
                }
              } catch (e6586) {
                var ex__4706__auto__ = e6586;
                var statearr_6587_6602 = state_6567;
                statearr_6587_6602[2] = ex__4706__auto__;
                if (cljs.core.seq.call(null, state_6567[4])) {
                  var statearr_6588_6603 = state_6567;
                  statearr_6588_6603[1] = cljs.core.first.call(null, state_6567[4]);
                } else {
                  throw ex__4706__auto__;
                }
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              }
            }();
            if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__4704__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
              var G__6604 = state_6567;
              state_6567 = G__6604;
              continue;
            } else {
              return ret_value__4704__auto__;
            }
            break;
          }
        };
        cljs$core$async$state_machine__4703__auto__ = function(state_6567) {
          switch(arguments.length) {
            case 0:
              return cljs$core$async$state_machine__4703__auto____0.call(this);
            case 1:
              return cljs$core$async$state_machine__4703__auto____1.call(this, state_6567);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        cljs$core$async$state_machine__4703__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__4703__auto____0;
        cljs$core$async$state_machine__4703__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__4703__auto____1;
        return cljs$core$async$state_machine__4703__auto__;
      }();
    }();
    var state__4796__auto__ = function() {
      var statearr_6589 = f__4795__auto__.call(null);
      statearr_6589[6] = c__4794__auto___6591;
      return statearr_6589;
    }();
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__4796__auto__);
  });
  return out;
};
cljs.core.async.unique.cljs$lang$maxFixedArity = 2;
cljs.core.async.partition = function cljs$core$async$partition(var_args) {
  var G__6606 = arguments.length;
  switch(G__6606) {
    case 2:
      return cljs.core.async.partition.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.partition.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
cljs.core.async.partition.cljs$core$IFn$_invoke$arity$2 = function(n, ch) {
  return cljs.core.async.partition.call(null, n, ch, null);
};
cljs.core.async.partition.cljs$core$IFn$_invoke$arity$3 = function(n, ch, buf_or_n) {
  var out = cljs.core.async.chan.call(null, buf_or_n);
  var c__4794__auto___6673 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function() {
    var f__4795__auto__ = function() {
      var switch__4702__auto__ = function(state_6644) {
        var state_val_6645 = state_6644[1];
        if (state_val_6645 === 7) {
          var inst_6640 = state_6644[2];
          var state_6644__$1 = state_6644;
          var statearr_6646_6674 = state_6644__$1;
          statearr_6646_6674[2] = inst_6640;
          statearr_6646_6674[1] = 3;
          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
        } else {
          if (state_val_6645 === 1) {
            var inst_6607 = new Array(n);
            var inst_6608 = inst_6607;
            var inst_6609 = 0;
            var state_6644__$1 = function() {
              var statearr_6647 = state_6644;
              statearr_6647[7] = inst_6609;
              statearr_6647[8] = inst_6608;
              return statearr_6647;
            }();
            var statearr_6648_6675 = state_6644__$1;
            statearr_6648_6675[2] = null;
            statearr_6648_6675[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
          } else {
            if (state_val_6645 === 4) {
              var inst_6612 = state_6644[9];
              var inst_6612__$1 = state_6644[2];
              var inst_6613 = inst_6612__$1 == null;
              var inst_6614 = cljs.core.not.call(null, inst_6613);
              var state_6644__$1 = function() {
                var statearr_6649 = state_6644;
                statearr_6649[9] = inst_6612__$1;
                return statearr_6649;
              }();
              if (inst_6614) {
                var statearr_6650_6676 = state_6644__$1;
                statearr_6650_6676[1] = 5;
              } else {
                var statearr_6651_6677 = state_6644__$1;
                statearr_6651_6677[1] = 6;
              }
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_6645 === 15) {
                var inst_6634 = state_6644[2];
                var state_6644__$1 = state_6644;
                var statearr_6652_6678 = state_6644__$1;
                statearr_6652_6678[2] = inst_6634;
                statearr_6652_6678[1] = 14;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_6645 === 13) {
                  var state_6644__$1 = state_6644;
                  var statearr_6653_6679 = state_6644__$1;
                  statearr_6653_6679[2] = null;
                  statearr_6653_6679[1] = 14;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_6645 === 6) {
                    var inst_6609 = state_6644[7];
                    var inst_6630 = inst_6609 > 0;
                    var state_6644__$1 = state_6644;
                    if (cljs.core.truth_(inst_6630)) {
                      var statearr_6654_6680 = state_6644__$1;
                      statearr_6654_6680[1] = 12;
                    } else {
                      var statearr_6655_6681 = state_6644__$1;
                      statearr_6655_6681[1] = 13;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_6645 === 3) {
                      var inst_6642 = state_6644[2];
                      var state_6644__$1 = state_6644;
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_6644__$1, inst_6642);
                    } else {
                      if (state_val_6645 === 12) {
                        var inst_6608 = state_6644[8];
                        var inst_6632 = cljs.core.vec.call(null, inst_6608);
                        var state_6644__$1 = state_6644;
                        return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_6644__$1, 15, out, inst_6632);
                      } else {
                        if (state_val_6645 === 2) {
                          var state_6644__$1 = state_6644;
                          return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_6644__$1, 4, ch);
                        } else {
                          if (state_val_6645 === 11) {
                            var inst_6624 = state_6644[2];
                            var inst_6625 = new Array(n);
                            var inst_6608 = inst_6625;
                            var inst_6609 = 0;
                            var state_6644__$1 = function() {
                              var statearr_6656 = state_6644;
                              statearr_6656[7] = inst_6609;
                              statearr_6656[10] = inst_6624;
                              statearr_6656[8] = inst_6608;
                              return statearr_6656;
                            }();
                            var statearr_6657_6682 = state_6644__$1;
                            statearr_6657_6682[2] = null;
                            statearr_6657_6682[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_6645 === 9) {
                              var inst_6608 = state_6644[8];
                              var inst_6622 = cljs.core.vec.call(null, inst_6608);
                              var state_6644__$1 = state_6644;
                              return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_6644__$1, 11, out, inst_6622);
                            } else {
                              if (state_val_6645 === 5) {
                                var inst_6612 = state_6644[9];
                                var inst_6609 = state_6644[7];
                                var inst_6617 = state_6644[11];
                                var inst_6608 = state_6644[8];
                                var inst_6616 = inst_6608[inst_6609] = inst_6612;
                                var inst_6617__$1 = inst_6609 + 1;
                                var inst_6618 = inst_6617__$1 < n;
                                var state_6644__$1 = function() {
                                  var statearr_6658 = state_6644;
                                  statearr_6658[11] = inst_6617__$1;
                                  statearr_6658[12] = inst_6616;
                                  return statearr_6658;
                                }();
                                if (cljs.core.truth_(inst_6618)) {
                                  var statearr_6659_6683 = state_6644__$1;
                                  statearr_6659_6683[1] = 8;
                                } else {
                                  var statearr_6660_6684 = state_6644__$1;
                                  statearr_6660_6684[1] = 9;
                                }
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_6645 === 14) {
                                  var inst_6637 = state_6644[2];
                                  var inst_6638 = cljs.core.async.close_BANG_.call(null, out);
                                  var state_6644__$1 = function() {
                                    var statearr_6662 = state_6644;
                                    statearr_6662[13] = inst_6637;
                                    return statearr_6662;
                                  }();
                                  var statearr_6663_6685 = state_6644__$1;
                                  statearr_6663_6685[2] = inst_6638;
                                  statearr_6663_6685[1] = 7;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_6645 === 10) {
                                    var inst_6628 = state_6644[2];
                                    var state_6644__$1 = state_6644;
                                    var statearr_6664_6686 = state_6644__$1;
                                    statearr_6664_6686[2] = inst_6628;
                                    statearr_6664_6686[1] = 7;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_6645 === 8) {
                                      var inst_6617 = state_6644[11];
                                      var inst_6608 = state_6644[8];
                                      var tmp6661 = inst_6608;
                                      var inst_6608__$1 = tmp6661;
                                      var inst_6609 = inst_6617;
                                      var state_6644__$1 = function() {
                                        var statearr_6665 = state_6644;
                                        statearr_6665[7] = inst_6609;
                                        statearr_6665[8] = inst_6608__$1;
                                        return statearr_6665;
                                      }();
                                      var statearr_6666_6687 = state_6644__$1;
                                      statearr_6666_6687[2] = null;
                                      statearr_6666_6687[1] = 2;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      return null;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      return function() {
        var cljs$core$async$state_machine__4703__auto__ = null;
        var cljs$core$async$state_machine__4703__auto____0 = function() {
          var statearr_6667 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null];
          statearr_6667[0] = cljs$core$async$state_machine__4703__auto__;
          statearr_6667[1] = 1;
          return statearr_6667;
        };
        var cljs$core$async$state_machine__4703__auto____1 = function(state_6644) {
          while (true) {
            var ret_value__4704__auto__ = function() {
              try {
                while (true) {
                  var result__4705__auto__ = switch__4702__auto__.call(null, state_6644);
                  if (cljs.core.keyword_identical_QMARK_.call(null, result__4705__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    continue;
                  } else {
                    return result__4705__auto__;
                  }
                  break;
                }
              } catch (e6668) {
                var ex__4706__auto__ = e6668;
                var statearr_6669_6688 = state_6644;
                statearr_6669_6688[2] = ex__4706__auto__;
                if (cljs.core.seq.call(null, state_6644[4])) {
                  var statearr_6670_6689 = state_6644;
                  statearr_6670_6689[1] = cljs.core.first.call(null, state_6644[4]);
                } else {
                  throw ex__4706__auto__;
                }
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              }
            }();
            if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__4704__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
              var G__6690 = state_6644;
              state_6644 = G__6690;
              continue;
            } else {
              return ret_value__4704__auto__;
            }
            break;
          }
        };
        cljs$core$async$state_machine__4703__auto__ = function(state_6644) {
          switch(arguments.length) {
            case 0:
              return cljs$core$async$state_machine__4703__auto____0.call(this);
            case 1:
              return cljs$core$async$state_machine__4703__auto____1.call(this, state_6644);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        cljs$core$async$state_machine__4703__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__4703__auto____0;
        cljs$core$async$state_machine__4703__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__4703__auto____1;
        return cljs$core$async$state_machine__4703__auto__;
      }();
    }();
    var state__4796__auto__ = function() {
      var statearr_6671 = f__4795__auto__.call(null);
      statearr_6671[6] = c__4794__auto___6673;
      return statearr_6671;
    }();
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__4796__auto__);
  });
  return out;
};
cljs.core.async.partition.cljs$lang$maxFixedArity = 3;
cljs.core.async.partition_by = function cljs$core$async$partition_by(var_args) {
  var G__6692 = arguments.length;
  switch(G__6692) {
    case 2:
      return cljs.core.async.partition_by.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.partition_by.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
cljs.core.async.partition_by.cljs$core$IFn$_invoke$arity$2 = function(f, ch) {
  return cljs.core.async.partition_by.call(null, f, ch, null);
};
cljs.core.async.partition_by.cljs$core$IFn$_invoke$arity$3 = function(f, ch, buf_or_n) {
  var out = cljs.core.async.chan.call(null, buf_or_n);
  var c__4794__auto___6763 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function() {
    var f__4795__auto__ = function() {
      var switch__4702__auto__ = function(state_6734) {
        var state_val_6735 = state_6734[1];
        if (state_val_6735 === 7) {
          var inst_6730 = state_6734[2];
          var state_6734__$1 = state_6734;
          var statearr_6736_6764 = state_6734__$1;
          statearr_6736_6764[2] = inst_6730;
          statearr_6736_6764[1] = 3;
          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
        } else {
          if (state_val_6735 === 1) {
            var inst_6693 = [];
            var inst_6694 = inst_6693;
            var inst_6695 = new cljs.core.Keyword("cljs.core.async", "nothing", "cljs.core.async/nothing", -69252123);
            var state_6734__$1 = function() {
              var statearr_6737 = state_6734;
              statearr_6737[7] = inst_6694;
              statearr_6737[8] = inst_6695;
              return statearr_6737;
            }();
            var statearr_6738_6765 = state_6734__$1;
            statearr_6738_6765[2] = null;
            statearr_6738_6765[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
          } else {
            if (state_val_6735 === 4) {
              var inst_6698 = state_6734[9];
              var inst_6698__$1 = state_6734[2];
              var inst_6699 = inst_6698__$1 == null;
              var inst_6700 = cljs.core.not.call(null, inst_6699);
              var state_6734__$1 = function() {
                var statearr_6739 = state_6734;
                statearr_6739[9] = inst_6698__$1;
                return statearr_6739;
              }();
              if (inst_6700) {
                var statearr_6740_6766 = state_6734__$1;
                statearr_6740_6766[1] = 5;
              } else {
                var statearr_6741_6767 = state_6734__$1;
                statearr_6741_6767[1] = 6;
              }
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_6735 === 15) {
                var inst_6724 = state_6734[2];
                var state_6734__$1 = state_6734;
                var statearr_6742_6768 = state_6734__$1;
                statearr_6742_6768[2] = inst_6724;
                statearr_6742_6768[1] = 14;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_6735 === 13) {
                  var state_6734__$1 = state_6734;
                  var statearr_6743_6769 = state_6734__$1;
                  statearr_6743_6769[2] = null;
                  statearr_6743_6769[1] = 14;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_6735 === 6) {
                    var inst_6694 = state_6734[7];
                    var inst_6719 = inst_6694.length;
                    var inst_6720 = inst_6719 > 0;
                    var state_6734__$1 = state_6734;
                    if (cljs.core.truth_(inst_6720)) {
                      var statearr_6744_6770 = state_6734__$1;
                      statearr_6744_6770[1] = 12;
                    } else {
                      var statearr_6745_6771 = state_6734__$1;
                      statearr_6745_6771[1] = 13;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_6735 === 3) {
                      var inst_6732 = state_6734[2];
                      var state_6734__$1 = state_6734;
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_6734__$1, inst_6732);
                    } else {
                      if (state_val_6735 === 12) {
                        var inst_6694 = state_6734[7];
                        var inst_6722 = cljs.core.vec.call(null, inst_6694);
                        var state_6734__$1 = state_6734;
                        return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_6734__$1, 15, out, inst_6722);
                      } else {
                        if (state_val_6735 === 2) {
                          var state_6734__$1 = state_6734;
                          return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_6734__$1, 4, ch);
                        } else {
                          if (state_val_6735 === 11) {
                            var inst_6702 = state_6734[10];
                            var inst_6698 = state_6734[9];
                            var inst_6712 = state_6734[2];
                            var inst_6713 = [];
                            var inst_6714 = inst_6713.push(inst_6698);
                            var inst_6694 = inst_6713;
                            var inst_6695 = inst_6702;
                            var state_6734__$1 = function() {
                              var statearr_6746 = state_6734;
                              statearr_6746[7] = inst_6694;
                              statearr_6746[11] = inst_6712;
                              statearr_6746[8] = inst_6695;
                              statearr_6746[12] = inst_6714;
                              return statearr_6746;
                            }();
                            var statearr_6747_6772 = state_6734__$1;
                            statearr_6747_6772[2] = null;
                            statearr_6747_6772[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_6735 === 9) {
                              var inst_6694 = state_6734[7];
                              var inst_6710 = cljs.core.vec.call(null, inst_6694);
                              var state_6734__$1 = state_6734;
                              return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_6734__$1, 11, out, inst_6710);
                            } else {
                              if (state_val_6735 === 5) {
                                var inst_6695 = state_6734[8];
                                var inst_6702 = state_6734[10];
                                var inst_6698 = state_6734[9];
                                var inst_6702__$1 = f.call(null, inst_6698);
                                var inst_6703 = cljs.core._EQ_.call(null, inst_6702__$1, inst_6695);
                                var inst_6704 = cljs.core.keyword_identical_QMARK_.call(null, inst_6695, new cljs.core.Keyword("cljs.core.async", "nothing", "cljs.core.async/nothing", -69252123));
                                var inst_6705 = inst_6703 || inst_6704;
                                var state_6734__$1 = function() {
                                  var statearr_6748 = state_6734;
                                  statearr_6748[10] = inst_6702__$1;
                                  return statearr_6748;
                                }();
                                if (cljs.core.truth_(inst_6705)) {
                                  var statearr_6749_6773 = state_6734__$1;
                                  statearr_6749_6773[1] = 8;
                                } else {
                                  var statearr_6750_6774 = state_6734__$1;
                                  statearr_6750_6774[1] = 9;
                                }
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_6735 === 14) {
                                  var inst_6727 = state_6734[2];
                                  var inst_6728 = cljs.core.async.close_BANG_.call(null, out);
                                  var state_6734__$1 = function() {
                                    var statearr_6752 = state_6734;
                                    statearr_6752[13] = inst_6727;
                                    return statearr_6752;
                                  }();
                                  var statearr_6753_6775 = state_6734__$1;
                                  statearr_6753_6775[2] = inst_6728;
                                  statearr_6753_6775[1] = 7;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_6735 === 10) {
                                    var inst_6717 = state_6734[2];
                                    var state_6734__$1 = state_6734;
                                    var statearr_6754_6776 = state_6734__$1;
                                    statearr_6754_6776[2] = inst_6717;
                                    statearr_6754_6776[1] = 7;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_6735 === 8) {
                                      var inst_6694 = state_6734[7];
                                      var inst_6702 = state_6734[10];
                                      var inst_6698 = state_6734[9];
                                      var inst_6707 = inst_6694.push(inst_6698);
                                      var tmp6751 = inst_6694;
                                      var inst_6694__$1 = tmp6751;
                                      var inst_6695 = inst_6702;
                                      var state_6734__$1 = function() {
                                        var statearr_6755 = state_6734;
                                        statearr_6755[7] = inst_6694__$1;
                                        statearr_6755[8] = inst_6695;
                                        statearr_6755[14] = inst_6707;
                                        return statearr_6755;
                                      }();
                                      var statearr_6756_6777 = state_6734__$1;
                                      statearr_6756_6777[2] = null;
                                      statearr_6756_6777[1] = 2;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      return null;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      return function() {
        var cljs$core$async$state_machine__4703__auto__ = null;
        var cljs$core$async$state_machine__4703__auto____0 = function() {
          var statearr_6757 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
          statearr_6757[0] = cljs$core$async$state_machine__4703__auto__;
          statearr_6757[1] = 1;
          return statearr_6757;
        };
        var cljs$core$async$state_machine__4703__auto____1 = function(state_6734) {
          while (true) {
            var ret_value__4704__auto__ = function() {
              try {
                while (true) {
                  var result__4705__auto__ = switch__4702__auto__.call(null, state_6734);
                  if (cljs.core.keyword_identical_QMARK_.call(null, result__4705__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    continue;
                  } else {
                    return result__4705__auto__;
                  }
                  break;
                }
              } catch (e6758) {
                var ex__4706__auto__ = e6758;
                var statearr_6759_6778 = state_6734;
                statearr_6759_6778[2] = ex__4706__auto__;
                if (cljs.core.seq.call(null, state_6734[4])) {
                  var statearr_6760_6779 = state_6734;
                  statearr_6760_6779[1] = cljs.core.first.call(null, state_6734[4]);
                } else {
                  throw ex__4706__auto__;
                }
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              }
            }();
            if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__4704__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
              var G__6780 = state_6734;
              state_6734 = G__6780;
              continue;
            } else {
              return ret_value__4704__auto__;
            }
            break;
          }
        };
        cljs$core$async$state_machine__4703__auto__ = function(state_6734) {
          switch(arguments.length) {
            case 0:
              return cljs$core$async$state_machine__4703__auto____0.call(this);
            case 1:
              return cljs$core$async$state_machine__4703__auto____1.call(this, state_6734);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        cljs$core$async$state_machine__4703__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__4703__auto____0;
        cljs$core$async$state_machine__4703__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__4703__auto____1;
        return cljs$core$async$state_machine__4703__auto__;
      }();
    }();
    var state__4796__auto__ = function() {
      var statearr_6761 = f__4795__auto__.call(null);
      statearr_6761[6] = c__4794__auto___6763;
      return statearr_6761;
    }();
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__4796__auto__);
  });
  return out;
};
cljs.core.async.partition_by.cljs$lang$maxFixedArity = 3;
goog.provide("dommy.utils");
goog.require("cljs.core");
dommy.utils.dissoc_in = function dommy$utils$dissoc_in(m, p__1996) {
  var vec__1997 = p__1996;
  var seq__1998 = cljs.core.seq.call(null, vec__1997);
  var first__1999 = cljs.core.first.call(null, seq__1998);
  var seq__1998__$1 = cljs.core.next.call(null, seq__1998);
  var k = first__1999;
  var ks = seq__1998__$1;
  if (cljs.core.truth_(m)) {
    var temp__5733__auto__ = function() {
      var and__4115__auto__ = ks;
      if (and__4115__auto__) {
        return dommy.utils.dissoc_in.call(null, m.call(null, k), ks);
      } else {
        return and__4115__auto__;
      }
    }();
    if (cljs.core.truth_(temp__5733__auto__)) {
      var res = temp__5733__auto__;
      return cljs.core.assoc.call(null, m, k, res);
    } else {
      var res = cljs.core.dissoc.call(null, m, k);
      if (cljs.core.empty_QMARK_.call(null, res)) {
        return null;
      } else {
        return res;
      }
    }
  } else {
    return null;
  }
};
dommy.utils.__GT_Array = function dommy$utils$__GT_Array(array_like) {
  return Array.prototype.slice.call(array_like);
};
dommy.utils.as_str = function dommy$utils$as_str(s) {
  if (s instanceof cljs.core.Keyword) {
    return [function() {
      var G__2001 = cljs.core.namespace.call(null, s);
      if (G__2001 == null) {
        return null;
      } else {
        return [G__2001, "/"].join("");
      }
    }(), cljs.core.name.call(null, s)].join("");
  } else {
    return s;
  }
};
dommy.utils.class_match_QMARK_ = function dommy$utils$class_match_QMARK_(class_name, class$, idx) {
  if (idx === 0 || " " === class_name.charAt(idx - 1)) {
    var total_len = class_name.length;
    var stop = idx + class$.length;
    if (stop <= total_len) {
      return stop === total_len || " " === class_name.charAt(stop);
    } else {
      return null;
    }
  } else {
    return false;
  }
};
dommy.utils.class_index = function dommy$utils$class_index(class_name, class$) {
  var start_from = 0;
  while (true) {
    var i = class_name.indexOf(class$, start_from);
    if (i >= 0) {
      if (dommy.utils.class_match_QMARK_.call(null, class_name, class$, i)) {
        return i;
      } else {
        var G__2002 = i + class$.length;
        start_from = G__2002;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
dommy.utils.remove_class_str = function dommy$utils$remove_class_str(init_class_name, class$) {
  var class_name = init_class_name;
  while (true) {
    var class_len = class_name.length;
    var temp__5733__auto__ = dommy.utils.class_index.call(null, class_name, class$);
    if (cljs.core.truth_(temp__5733__auto__)) {
      var i = temp__5733__auto__;
      var G__2003 = function() {
        var end = i + class$.length;
        return cljs.core.str.cljs$core$IFn$_invoke$arity$1(end < class_len ? [cljs.core.str.cljs$core$IFn$_invoke$arity$1(class_name.substring(0, i)), cljs.core.str.cljs$core$IFn$_invoke$arity$1(class_name.substr(end + 1))].join("") : class_name.substring(0, i - 1));
      }();
      class_name = G__2003;
      continue;
    } else {
      return class_name;
    }
    break;
  }
};
goog.provide("dommy.core");
goog.require("cljs.core");
goog.require("clojure.string");
goog.require("dommy.utils");
dommy.core.selector = function dommy$core$selector(data) {
  if (cljs.core.coll_QMARK_.call(null, data)) {
    return clojure.string.join.call(null, " ", cljs.core.map.call(null, dommy.core.selector, data));
  } else {
    if (typeof data === "string" || data instanceof cljs.core.Keyword) {
      return cljs.core.name.call(null, data);
    } else {
      return null;
    }
  }
};
dommy.core.text = function dommy$core$text(elem) {
  var or__4126__auto__ = elem.textContent;
  if (cljs.core.truth_(or__4126__auto__)) {
    return or__4126__auto__;
  } else {
    return elem.innerText;
  }
};
dommy.core.html = function dommy$core$html(elem) {
  return elem.innerHTML;
};
dommy.core.value = function dommy$core$value(elem) {
  return elem.value;
};
dommy.core.class$ = function dommy$core$class(elem) {
  return elem.className;
};
dommy.core.attr = function dommy$core$attr(elem, k) {
  if (cljs.core.truth_(k)) {
    return elem.getAttribute(dommy.utils.as_str.call(null, k));
  } else {
    return null;
  }
};
dommy.core.style = function dommy$core$style(var_args) {
  var G__2120 = arguments.length;
  switch(G__2120) {
    case 1:
      return dommy.core.style.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return dommy.core.style.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
dommy.core.style.cljs$core$IFn$_invoke$arity$1 = function(elem) {
  return cljs.core.js__GT_clj.call(null, window.getComputedStyle(elem));
};
dommy.core.style.cljs$core$IFn$_invoke$arity$2 = function(elem, k) {
  return window.getComputedStyle(elem)[dommy.utils.as_str.call(null, k)];
};
dommy.core.style.cljs$lang$maxFixedArity = 2;
dommy.core.px = function dommy$core$px(elem, k) {
  var pixels = dommy.core.style.call(null, elem, k);
  if (cljs.core.seq.call(null, pixels)) {
    return parseInt(pixels);
  } else {
    return null;
  }
};
dommy.core.has_class_QMARK_ = function dommy$core$has_class_QMARK_(elem, c) {
  var c__$1 = dommy.utils.as_str.call(null, c);
  var temp__5733__auto__ = elem.classList;
  if (cljs.core.truth_(temp__5733__auto__)) {
    var class_list = temp__5733__auto__;
    return class_list.contains(c__$1);
  } else {
    var temp__5735__auto__ = dommy.core.class$.call(null, elem);
    if (cljs.core.truth_(temp__5735__auto__)) {
      var class_name = temp__5735__auto__;
      var temp__5735__auto____$1 = dommy.utils.class_index.call(null, class_name, c__$1);
      if (cljs.core.truth_(temp__5735__auto____$1)) {
        var i = temp__5735__auto____$1;
        return i >= 0;
      } else {
        return null;
      }
    } else {
      return null;
    }
  }
};
dommy.core.hidden_QMARK_ = function dommy$core$hidden_QMARK_(elem) {
  return dommy.core.style.call(null, elem, new cljs.core.Keyword(null, "display", "display", 242065432)) === "none";
};
dommy.core.bounding_client_rect = function dommy$core$bounding_client_rect(elem) {
  var r = elem.getBoundingClientRect();
  return new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "top", "top", -1856271961), r.top, new cljs.core.Keyword(null, "bottom", "bottom", -1550509018), r.bottom, new cljs.core.Keyword(null, "left", "left", -399115937), r.left, new cljs.core.Keyword(null, "right", "right", -452581833), r.right, new cljs.core.Keyword(null, "width", "width", -384071477), r.width, new cljs.core.Keyword(null, "height", "height", 1025178622), r.height], null);
};
dommy.core.parent = function dommy$core$parent(elem) {
  return elem.parentNode;
};
dommy.core.children = function dommy$core$children(elem) {
  return elem.children;
};
dommy.core.ancestors = function dommy$core$ancestors(elem) {
  return cljs.core.take_while.call(null, cljs.core.identity, cljs.core.iterate.call(null, dommy.core.parent, elem));
};
dommy.core.ancestor_nodes = dommy.core.ancestors;
dommy.core.matches_pred = function dommy$core$matches_pred(var_args) {
  var G__2123 = arguments.length;
  switch(G__2123) {
    case 2:
      return dommy.core.matches_pred.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 1:
      return dommy.core.matches_pred.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
dommy.core.matches_pred.cljs$core$IFn$_invoke$arity$2 = function(base, selector) {
  var matches = dommy.utils.__GT_Array.call(null, base.querySelectorAll(dommy.core.selector.call(null, selector)));
  return function(elem) {
    return matches.indexOf(elem) >= 0;
  };
};
dommy.core.matches_pred.cljs$core$IFn$_invoke$arity$1 = function(selector) {
  return dommy.core.matches_pred.call(null, document, selector);
};
dommy.core.matches_pred.cljs$lang$maxFixedArity = 2;
dommy.core.closest = function dommy$core$closest(var_args) {
  var G__2127 = arguments.length;
  switch(G__2127) {
    case 3:
      return dommy.core.closest.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 2:
      return dommy.core.closest.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
dommy.core.closest.cljs$core$IFn$_invoke$arity$3 = function(base, elem, selector) {
  return cljs.core.first.call(null, cljs.core.filter.call(null, dommy.core.matches_pred.call(null, base, selector), cljs.core.take_while.call(null, function(p1__2125_SHARP_) {
    return !(p1__2125_SHARP_ === base);
  }, dommy.core.ancestors.call(null, elem))));
};
dommy.core.closest.cljs$core$IFn$_invoke$arity$2 = function(elem, selector) {
  return dommy.core.closest.call(null, document.body, elem, selector);
};
dommy.core.closest.cljs$lang$maxFixedArity = 3;
dommy.core.descendant_QMARK_ = function dommy$core$descendant_QMARK_(descendant, ancestor) {
  if (cljs.core.truth_(ancestor.contains)) {
    return ancestor.contains(descendant);
  } else {
    if (cljs.core.truth_(ancestor.compareDocumentPosition)) {
      return (ancestor.compareDocumentPosition(descendant) & 1 << 4) != 0;
    } else {
      return null;
    }
  }
};
dommy.core.set_text_BANG_ = function dommy$core$set_text_BANG_(elem, text) {
  if (!(void 0 === elem.textContent)) {
    elem.textContent = text;
  } else {
    elem.innerText = text;
  }
  return elem;
};
dommy.core.set_html_BANG_ = function dommy$core$set_html_BANG_(elem, html) {
  elem.innerHTML = html;
  return elem;
};
dommy.core.set_value_BANG_ = function dommy$core$set_value_BANG_(elem, value) {
  elem.value = value;
  return elem;
};
dommy.core.set_class_BANG_ = function dommy$core$set_class_BANG_(elem, c) {
  return elem.className = c;
};
dommy.core.set_style_BANG_ = function dommy$core$set_style_BANG_(var_args) {
  var args__4742__auto__ = [];
  var len__4736__auto___2147 = arguments.length;
  var i__4737__auto___2148 = 0;
  while (true) {
    if (i__4737__auto___2148 < len__4736__auto___2147) {
      args__4742__auto__.push(arguments[i__4737__auto___2148]);
      var G__2149 = i__4737__auto___2148 + 1;
      i__4737__auto___2148 = G__2149;
      continue;
    } else {
    }
    break;
  }
  var argseq__4743__auto__ = 1 < args__4742__auto__.length ? new cljs.core.IndexedSeq(args__4742__auto__.slice(1), 0, null) : null;
  return dommy.core.set_style_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__4743__auto__);
};
dommy.core.set_style_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(elem, kvs) {
  if (cljs.core.even_QMARK_.call(null, cljs.core.count.call(null, kvs))) {
  } else {
    throw new Error("Assert failed: (even? (count kvs))");
  }
  var style = elem.style;
  var seq__2131_2150 = cljs.core.seq.call(null, cljs.core.partition.call(null, 2, kvs));
  var chunk__2132_2151 = null;
  var count__2133_2152 = 0;
  var i__2134_2153 = 0;
  while (true) {
    if (i__2134_2153 < count__2133_2152) {
      var vec__2141_2154 = cljs.core._nth.call(null, chunk__2132_2151, i__2134_2153);
      var k_2155 = cljs.core.nth.call(null, vec__2141_2154, 0, null);
      var v_2156 = cljs.core.nth.call(null, vec__2141_2154, 1, null);
      style.setProperty(dommy.utils.as_str.call(null, k_2155), v_2156);
      var G__2157 = seq__2131_2150;
      var G__2158 = chunk__2132_2151;
      var G__2159 = count__2133_2152;
      var G__2160 = i__2134_2153 + 1;
      seq__2131_2150 = G__2157;
      chunk__2132_2151 = G__2158;
      count__2133_2152 = G__2159;
      i__2134_2153 = G__2160;
      continue;
    } else {
      var temp__5735__auto___2161 = cljs.core.seq.call(null, seq__2131_2150);
      if (temp__5735__auto___2161) {
        var seq__2131_2162__$1 = temp__5735__auto___2161;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__2131_2162__$1)) {
          var c__4556__auto___2163 = cljs.core.chunk_first.call(null, seq__2131_2162__$1);
          var G__2164 = cljs.core.chunk_rest.call(null, seq__2131_2162__$1);
          var G__2165 = c__4556__auto___2163;
          var G__2166 = cljs.core.count.call(null, c__4556__auto___2163);
          var G__2167 = 0;
          seq__2131_2150 = G__2164;
          chunk__2132_2151 = G__2165;
          count__2133_2152 = G__2166;
          i__2134_2153 = G__2167;
          continue;
        } else {
          var vec__2144_2168 = cljs.core.first.call(null, seq__2131_2162__$1);
          var k_2169 = cljs.core.nth.call(null, vec__2144_2168, 0, null);
          var v_2170 = cljs.core.nth.call(null, vec__2144_2168, 1, null);
          style.setProperty(dommy.utils.as_str.call(null, k_2169), v_2170);
          var G__2171 = cljs.core.next.call(null, seq__2131_2162__$1);
          var G__2172 = null;
          var G__2173 = 0;
          var G__2174 = 0;
          seq__2131_2150 = G__2171;
          chunk__2132_2151 = G__2172;
          count__2133_2152 = G__2173;
          i__2134_2153 = G__2174;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return elem;
};
dommy.core.set_style_BANG_.cljs$lang$maxFixedArity = 1;
dommy.core.set_style_BANG_.cljs$lang$applyTo = function(seq2129) {
  var G__2130 = cljs.core.first.call(null, seq2129);
  var seq2129__$1 = cljs.core.next.call(null, seq2129);
  var self__4723__auto__ = this;
  return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__2130, seq2129__$1);
};
dommy.core.remove_style_BANG_ = function dommy$core$remove_style_BANG_(var_args) {
  var args__4742__auto__ = [];
  var len__4736__auto___2181 = arguments.length;
  var i__4737__auto___2182 = 0;
  while (true) {
    if (i__4737__auto___2182 < len__4736__auto___2181) {
      args__4742__auto__.push(arguments[i__4737__auto___2182]);
      var G__2183 = i__4737__auto___2182 + 1;
      i__4737__auto___2182 = G__2183;
      continue;
    } else {
    }
    break;
  }
  var argseq__4743__auto__ = 1 < args__4742__auto__.length ? new cljs.core.IndexedSeq(args__4742__auto__.slice(1), 0, null) : null;
  return dommy.core.remove_style_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__4743__auto__);
};
dommy.core.remove_style_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(elem, keywords) {
  var style = elem.style;
  var seq__2177_2184 = cljs.core.seq.call(null, keywords);
  var chunk__2178_2185 = null;
  var count__2179_2186 = 0;
  var i__2180_2187 = 0;
  while (true) {
    if (i__2180_2187 < count__2179_2186) {
      var kw_2188 = cljs.core._nth.call(null, chunk__2178_2185, i__2180_2187);
      style.removeProperty(dommy.utils.as_str.call(null, kw_2188));
      var G__2189 = seq__2177_2184;
      var G__2190 = chunk__2178_2185;
      var G__2191 = count__2179_2186;
      var G__2192 = i__2180_2187 + 1;
      seq__2177_2184 = G__2189;
      chunk__2178_2185 = G__2190;
      count__2179_2186 = G__2191;
      i__2180_2187 = G__2192;
      continue;
    } else {
      var temp__5735__auto___2193 = cljs.core.seq.call(null, seq__2177_2184);
      if (temp__5735__auto___2193) {
        var seq__2177_2194__$1 = temp__5735__auto___2193;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__2177_2194__$1)) {
          var c__4556__auto___2195 = cljs.core.chunk_first.call(null, seq__2177_2194__$1);
          var G__2196 = cljs.core.chunk_rest.call(null, seq__2177_2194__$1);
          var G__2197 = c__4556__auto___2195;
          var G__2198 = cljs.core.count.call(null, c__4556__auto___2195);
          var G__2199 = 0;
          seq__2177_2184 = G__2196;
          chunk__2178_2185 = G__2197;
          count__2179_2186 = G__2198;
          i__2180_2187 = G__2199;
          continue;
        } else {
          var kw_2200 = cljs.core.first.call(null, seq__2177_2194__$1);
          style.removeProperty(dommy.utils.as_str.call(null, kw_2200));
          var G__2201 = cljs.core.next.call(null, seq__2177_2194__$1);
          var G__2202 = null;
          var G__2203 = 0;
          var G__2204 = 0;
          seq__2177_2184 = G__2201;
          chunk__2178_2185 = G__2202;
          count__2179_2186 = G__2203;
          i__2180_2187 = G__2204;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return elem;
};
dommy.core.remove_style_BANG_.cljs$lang$maxFixedArity = 1;
dommy.core.remove_style_BANG_.cljs$lang$applyTo = function(seq2175) {
  var G__2176 = cljs.core.first.call(null, seq2175);
  var seq2175__$1 = cljs.core.next.call(null, seq2175);
  var self__4723__auto__ = this;
  return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__2176, seq2175__$1);
};
dommy.core.set_px_BANG_ = function dommy$core$set_px_BANG_(var_args) {
  var args__4742__auto__ = [];
  var len__4736__auto___2223 = arguments.length;
  var i__4737__auto___2224 = 0;
  while (true) {
    if (i__4737__auto___2224 < len__4736__auto___2223) {
      args__4742__auto__.push(arguments[i__4737__auto___2224]);
      var G__2225 = i__4737__auto___2224 + 1;
      i__4737__auto___2224 = G__2225;
      continue;
    } else {
    }
    break;
  }
  var argseq__4743__auto__ = 1 < args__4742__auto__.length ? new cljs.core.IndexedSeq(args__4742__auto__.slice(1), 0, null) : null;
  return dommy.core.set_px_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__4743__auto__);
};
dommy.core.set_px_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(elem, kvs) {
  if (cljs.core.even_QMARK_.call(null, cljs.core.count.call(null, kvs))) {
  } else {
    throw new Error("Assert failed: (even? (count kvs))");
  }
  var seq__2207_2226 = cljs.core.seq.call(null, cljs.core.partition.call(null, 2, kvs));
  var chunk__2208_2227 = null;
  var count__2209_2228 = 0;
  var i__2210_2229 = 0;
  while (true) {
    if (i__2210_2229 < count__2209_2228) {
      var vec__2217_2230 = cljs.core._nth.call(null, chunk__2208_2227, i__2210_2229);
      var k_2231 = cljs.core.nth.call(null, vec__2217_2230, 0, null);
      var v_2232 = cljs.core.nth.call(null, vec__2217_2230, 1, null);
      dommy.core.set_style_BANG_.call(null, elem, k_2231, [cljs.core.str.cljs$core$IFn$_invoke$arity$1(v_2232), "px"].join(""));
      var G__2233 = seq__2207_2226;
      var G__2234 = chunk__2208_2227;
      var G__2235 = count__2209_2228;
      var G__2236 = i__2210_2229 + 1;
      seq__2207_2226 = G__2233;
      chunk__2208_2227 = G__2234;
      count__2209_2228 = G__2235;
      i__2210_2229 = G__2236;
      continue;
    } else {
      var temp__5735__auto___2237 = cljs.core.seq.call(null, seq__2207_2226);
      if (temp__5735__auto___2237) {
        var seq__2207_2238__$1 = temp__5735__auto___2237;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__2207_2238__$1)) {
          var c__4556__auto___2239 = cljs.core.chunk_first.call(null, seq__2207_2238__$1);
          var G__2240 = cljs.core.chunk_rest.call(null, seq__2207_2238__$1);
          var G__2241 = c__4556__auto___2239;
          var G__2242 = cljs.core.count.call(null, c__4556__auto___2239);
          var G__2243 = 0;
          seq__2207_2226 = G__2240;
          chunk__2208_2227 = G__2241;
          count__2209_2228 = G__2242;
          i__2210_2229 = G__2243;
          continue;
        } else {
          var vec__2220_2244 = cljs.core.first.call(null, seq__2207_2238__$1);
          var k_2245 = cljs.core.nth.call(null, vec__2220_2244, 0, null);
          var v_2246 = cljs.core.nth.call(null, vec__2220_2244, 1, null);
          dommy.core.set_style_BANG_.call(null, elem, k_2245, [cljs.core.str.cljs$core$IFn$_invoke$arity$1(v_2246), "px"].join(""));
          var G__2247 = cljs.core.next.call(null, seq__2207_2238__$1);
          var G__2248 = null;
          var G__2249 = 0;
          var G__2250 = 0;
          seq__2207_2226 = G__2247;
          chunk__2208_2227 = G__2248;
          count__2209_2228 = G__2249;
          i__2210_2229 = G__2250;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return elem;
};
dommy.core.set_px_BANG_.cljs$lang$maxFixedArity = 1;
dommy.core.set_px_BANG_.cljs$lang$applyTo = function(seq2205) {
  var G__2206 = cljs.core.first.call(null, seq2205);
  var seq2205__$1 = cljs.core.next.call(null, seq2205);
  var self__4723__auto__ = this;
  return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__2206, seq2205__$1);
};
dommy.core.set_attr_BANG_ = function dommy$core$set_attr_BANG_(var_args) {
  var G__2256 = arguments.length;
  switch(G__2256) {
    case 2:
      return dommy.core.set_attr_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return dommy.core.set_attr_BANG_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var args_arr__4757__auto__ = [];
      var len__4736__auto___2276 = arguments.length;
      var i__4737__auto___2277 = 0;
      while (true) {
        if (i__4737__auto___2277 < len__4736__auto___2276) {
          args_arr__4757__auto__.push(arguments[i__4737__auto___2277]);
          var G__2278 = i__4737__auto___2277 + 1;
          i__4737__auto___2277 = G__2278;
          continue;
        } else {
        }
        break;
      }
      var argseq__4758__auto__ = new cljs.core.IndexedSeq(args_arr__4757__auto__.slice(3), 0, null);
      return dommy.core.set_attr_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__4758__auto__);
  }
};
dommy.core.set_attr_BANG_.cljs$core$IFn$_invoke$arity$2 = function(elem, k) {
  return dommy.core.set_attr_BANG_.call(null, elem, k, dommy.utils.as_str.call(null, k));
};
dommy.core.set_attr_BANG_.cljs$core$IFn$_invoke$arity$3 = function(elem, k, v) {
  var k__$1 = dommy.utils.as_str.call(null, k);
  if (cljs.core.truth_(v)) {
    if (cljs.core.fn_QMARK_.call(null, v)) {
      var G__2257 = elem;
      G__2257[k__$1] = v;
      return G__2257;
    } else {
      var G__2258 = elem;
      G__2258.setAttribute(k__$1, v);
      return G__2258;
    }
  } else {
    return null;
  }
};
dommy.core.set_attr_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(elem, k, v, kvs) {
  if (cljs.core.even_QMARK_.call(null, cljs.core.count.call(null, kvs))) {
  } else {
    throw new Error("Assert failed: (even? (count kvs))");
  }
  var seq__2259_2279 = cljs.core.seq.call(null, cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, v], null), cljs.core.partition.call(null, 2, kvs)));
  var chunk__2260_2280 = null;
  var count__2261_2281 = 0;
  var i__2262_2282 = 0;
  while (true) {
    if (i__2262_2282 < count__2261_2281) {
      var vec__2269_2283 = cljs.core._nth.call(null, chunk__2260_2280, i__2262_2282);
      var k_2284__$1 = cljs.core.nth.call(null, vec__2269_2283, 0, null);
      var v_2285__$1 = cljs.core.nth.call(null, vec__2269_2283, 1, null);
      dommy.core.set_attr_BANG_.call(null, elem, k_2284__$1, v_2285__$1);
      var G__2286 = seq__2259_2279;
      var G__2287 = chunk__2260_2280;
      var G__2288 = count__2261_2281;
      var G__2289 = i__2262_2282 + 1;
      seq__2259_2279 = G__2286;
      chunk__2260_2280 = G__2287;
      count__2261_2281 = G__2288;
      i__2262_2282 = G__2289;
      continue;
    } else {
      var temp__5735__auto___2290 = cljs.core.seq.call(null, seq__2259_2279);
      if (temp__5735__auto___2290) {
        var seq__2259_2291__$1 = temp__5735__auto___2290;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__2259_2291__$1)) {
          var c__4556__auto___2292 = cljs.core.chunk_first.call(null, seq__2259_2291__$1);
          var G__2293 = cljs.core.chunk_rest.call(null, seq__2259_2291__$1);
          var G__2294 = c__4556__auto___2292;
          var G__2295 = cljs.core.count.call(null, c__4556__auto___2292);
          var G__2296 = 0;
          seq__2259_2279 = G__2293;
          chunk__2260_2280 = G__2294;
          count__2261_2281 = G__2295;
          i__2262_2282 = G__2296;
          continue;
        } else {
          var vec__2272_2297 = cljs.core.first.call(null, seq__2259_2291__$1);
          var k_2298__$1 = cljs.core.nth.call(null, vec__2272_2297, 0, null);
          var v_2299__$1 = cljs.core.nth.call(null, vec__2272_2297, 1, null);
          dommy.core.set_attr_BANG_.call(null, elem, k_2298__$1, v_2299__$1);
          var G__2300 = cljs.core.next.call(null, seq__2259_2291__$1);
          var G__2301 = null;
          var G__2302 = 0;
          var G__2303 = 0;
          seq__2259_2279 = G__2300;
          chunk__2260_2280 = G__2301;
          count__2261_2281 = G__2302;
          i__2262_2282 = G__2303;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return elem;
};
dommy.core.set_attr_BANG_.cljs$lang$applyTo = function(seq2252) {
  var G__2253 = cljs.core.first.call(null, seq2252);
  var seq2252__$1 = cljs.core.next.call(null, seq2252);
  var G__2254 = cljs.core.first.call(null, seq2252__$1);
  var seq2252__$2 = cljs.core.next.call(null, seq2252__$1);
  var G__2255 = cljs.core.first.call(null, seq2252__$2);
  var seq2252__$3 = cljs.core.next.call(null, seq2252__$2);
  var self__4723__auto__ = this;
  return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__2253, G__2254, G__2255, seq2252__$3);
};
dommy.core.set_attr_BANG_.cljs$lang$maxFixedArity = 3;
dommy.core.remove_attr_BANG_ = function dommy$core$remove_attr_BANG_(var_args) {
  var G__2308 = arguments.length;
  switch(G__2308) {
    case 2:
      return dommy.core.remove_attr_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var args_arr__4757__auto__ = [];
      var len__4736__auto___2314 = arguments.length;
      var i__4737__auto___2315 = 0;
      while (true) {
        if (i__4737__auto___2315 < len__4736__auto___2314) {
          args_arr__4757__auto__.push(arguments[i__4737__auto___2315]);
          var G__2316 = i__4737__auto___2315 + 1;
          i__4737__auto___2315 = G__2316;
          continue;
        } else {
        }
        break;
      }
      var argseq__4758__auto__ = new cljs.core.IndexedSeq(args_arr__4757__auto__.slice(2), 0, null);
      return dommy.core.remove_attr_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__4758__auto__);
  }
};
dommy.core.remove_attr_BANG_.cljs$core$IFn$_invoke$arity$2 = function(elem, k) {
  var k_2317__$1 = dommy.utils.as_str.call(null, k);
  if (cljs.core.truth_((new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, ["class", null, "classes", null], null), null)).call(null, k_2317__$1))) {
    dommy.core.set_class_BANG_.call(null, elem, "");
  } else {
    elem.removeAttribute(k_2317__$1);
  }
  return elem;
};
dommy.core.remove_attr_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(elem, k, ks) {
  var seq__2309_2318 = cljs.core.seq.call(null, cljs.core.cons.call(null, k, ks));
  var chunk__2310_2319 = null;
  var count__2311_2320 = 0;
  var i__2312_2321 = 0;
  while (true) {
    if (i__2312_2321 < count__2311_2320) {
      var k_2322__$1 = cljs.core._nth.call(null, chunk__2310_2319, i__2312_2321);
      dommy.core.remove_attr_BANG_.call(null, elem, k_2322__$1);
      var G__2323 = seq__2309_2318;
      var G__2324 = chunk__2310_2319;
      var G__2325 = count__2311_2320;
      var G__2326 = i__2312_2321 + 1;
      seq__2309_2318 = G__2323;
      chunk__2310_2319 = G__2324;
      count__2311_2320 = G__2325;
      i__2312_2321 = G__2326;
      continue;
    } else {
      var temp__5735__auto___2327 = cljs.core.seq.call(null, seq__2309_2318);
      if (temp__5735__auto___2327) {
        var seq__2309_2328__$1 = temp__5735__auto___2327;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__2309_2328__$1)) {
          var c__4556__auto___2329 = cljs.core.chunk_first.call(null, seq__2309_2328__$1);
          var G__2330 = cljs.core.chunk_rest.call(null, seq__2309_2328__$1);
          var G__2331 = c__4556__auto___2329;
          var G__2332 = cljs.core.count.call(null, c__4556__auto___2329);
          var G__2333 = 0;
          seq__2309_2318 = G__2330;
          chunk__2310_2319 = G__2331;
          count__2311_2320 = G__2332;
          i__2312_2321 = G__2333;
          continue;
        } else {
          var k_2334__$1 = cljs.core.first.call(null, seq__2309_2328__$1);
          dommy.core.remove_attr_BANG_.call(null, elem, k_2334__$1);
          var G__2335 = cljs.core.next.call(null, seq__2309_2328__$1);
          var G__2336 = null;
          var G__2337 = 0;
          var G__2338 = 0;
          seq__2309_2318 = G__2335;
          chunk__2310_2319 = G__2336;
          count__2311_2320 = G__2337;
          i__2312_2321 = G__2338;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return elem;
};
dommy.core.remove_attr_BANG_.cljs$lang$applyTo = function(seq2305) {
  var G__2306 = cljs.core.first.call(null, seq2305);
  var seq2305__$1 = cljs.core.next.call(null, seq2305);
  var G__2307 = cljs.core.first.call(null, seq2305__$1);
  var seq2305__$2 = cljs.core.next.call(null, seq2305__$1);
  var self__4723__auto__ = this;
  return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__2306, G__2307, seq2305__$2);
};
dommy.core.remove_attr_BANG_.cljs$lang$maxFixedArity = 2;
dommy.core.toggle_attr_BANG_ = function dommy$core$toggle_attr_BANG_(var_args) {
  var G__2340 = arguments.length;
  switch(G__2340) {
    case 2:
      return dommy.core.toggle_attr_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return dommy.core.toggle_attr_BANG_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
dommy.core.toggle_attr_BANG_.cljs$core$IFn$_invoke$arity$2 = function(elem, k) {
  return dommy.core.toggle_attr_BANG_.call(null, elem, k, cljs.core.boolean$.call(null, dommy.core.attr.call(null, elem, k)));
};
dommy.core.toggle_attr_BANG_.cljs$core$IFn$_invoke$arity$3 = function(elem, k, add_QMARK_) {
  if (add_QMARK_) {
    return dommy.core.set_attr_BANG_.call(null, elem, k);
  } else {
    return dommy.core.remove_attr_BANG_.call(null, elem, k);
  }
};
dommy.core.toggle_attr_BANG_.cljs$lang$maxFixedArity = 3;
dommy.core.add_class_BANG_ = function dommy$core$add_class_BANG_(var_args) {
  var G__2346 = arguments.length;
  switch(G__2346) {
    case 2:
      return dommy.core.add_class_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var args_arr__4757__auto__ = [];
      var len__4736__auto___2360 = arguments.length;
      var i__4737__auto___2361 = 0;
      while (true) {
        if (i__4737__auto___2361 < len__4736__auto___2360) {
          args_arr__4757__auto__.push(arguments[i__4737__auto___2361]);
          var G__2362 = i__4737__auto___2361 + 1;
          i__4737__auto___2361 = G__2362;
          continue;
        } else {
        }
        break;
      }
      var argseq__4758__auto__ = new cljs.core.IndexedSeq(args_arr__4757__auto__.slice(2), 0, null);
      return dommy.core.add_class_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__4758__auto__);
  }
};
dommy.core.add_class_BANG_.cljs$core$IFn$_invoke$arity$2 = function(elem, classes) {
  var classes__$1 = clojure.string.trim.call(null, dommy.utils.as_str.call(null, classes)).split(/\s+/);
  if (cljs.core.seq.call(null, classes__$1)) {
    var temp__5733__auto___2363 = elem.classList;
    if (cljs.core.truth_(temp__5733__auto___2363)) {
      var class_list_2364 = temp__5733__auto___2363;
      var seq__2347_2365 = cljs.core.seq.call(null, classes__$1);
      var chunk__2348_2366 = null;
      var count__2349_2367 = 0;
      var i__2350_2368 = 0;
      while (true) {
        if (i__2350_2368 < count__2349_2367) {
          var c_2369 = cljs.core._nth.call(null, chunk__2348_2366, i__2350_2368);
          class_list_2364.add(c_2369);
          var G__2370 = seq__2347_2365;
          var G__2371 = chunk__2348_2366;
          var G__2372 = count__2349_2367;
          var G__2373 = i__2350_2368 + 1;
          seq__2347_2365 = G__2370;
          chunk__2348_2366 = G__2371;
          count__2349_2367 = G__2372;
          i__2350_2368 = G__2373;
          continue;
        } else {
          var temp__5735__auto___2374 = cljs.core.seq.call(null, seq__2347_2365);
          if (temp__5735__auto___2374) {
            var seq__2347_2375__$1 = temp__5735__auto___2374;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__2347_2375__$1)) {
              var c__4556__auto___2376 = cljs.core.chunk_first.call(null, seq__2347_2375__$1);
              var G__2377 = cljs.core.chunk_rest.call(null, seq__2347_2375__$1);
              var G__2378 = c__4556__auto___2376;
              var G__2379 = cljs.core.count.call(null, c__4556__auto___2376);
              var G__2380 = 0;
              seq__2347_2365 = G__2377;
              chunk__2348_2366 = G__2378;
              count__2349_2367 = G__2379;
              i__2350_2368 = G__2380;
              continue;
            } else {
              var c_2381 = cljs.core.first.call(null, seq__2347_2375__$1);
              class_list_2364.add(c_2381);
              var G__2382 = cljs.core.next.call(null, seq__2347_2375__$1);
              var G__2383 = null;
              var G__2384 = 0;
              var G__2385 = 0;
              seq__2347_2365 = G__2382;
              chunk__2348_2366 = G__2383;
              count__2349_2367 = G__2384;
              i__2350_2368 = G__2385;
              continue;
            }
          } else {
          }
        }
        break;
      }
    } else {
      var seq__2351_2386 = cljs.core.seq.call(null, classes__$1);
      var chunk__2352_2387 = null;
      var count__2353_2388 = 0;
      var i__2354_2389 = 0;
      while (true) {
        if (i__2354_2389 < count__2353_2388) {
          var c_2390 = cljs.core._nth.call(null, chunk__2352_2387, i__2354_2389);
          var class_name_2391 = dommy.core.class$.call(null, elem);
          if (cljs.core.truth_(dommy.utils.class_index.call(null, class_name_2391, c_2390))) {
          } else {
            dommy.core.set_class_BANG_.call(null, elem, class_name_2391 === "" ? c_2390 : [cljs.core.str.cljs$core$IFn$_invoke$arity$1(class_name_2391), " ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(c_2390)].join(""));
          }
          var G__2392 = seq__2351_2386;
          var G__2393 = chunk__2352_2387;
          var G__2394 = count__2353_2388;
          var G__2395 = i__2354_2389 + 1;
          seq__2351_2386 = G__2392;
          chunk__2352_2387 = G__2393;
          count__2353_2388 = G__2394;
          i__2354_2389 = G__2395;
          continue;
        } else {
          var temp__5735__auto___2396 = cljs.core.seq.call(null, seq__2351_2386);
          if (temp__5735__auto___2396) {
            var seq__2351_2397__$1 = temp__5735__auto___2396;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__2351_2397__$1)) {
              var c__4556__auto___2398 = cljs.core.chunk_first.call(null, seq__2351_2397__$1);
              var G__2399 = cljs.core.chunk_rest.call(null, seq__2351_2397__$1);
              var G__2400 = c__4556__auto___2398;
              var G__2401 = cljs.core.count.call(null, c__4556__auto___2398);
              var G__2402 = 0;
              seq__2351_2386 = G__2399;
              chunk__2352_2387 = G__2400;
              count__2353_2388 = G__2401;
              i__2354_2389 = G__2402;
              continue;
            } else {
              var c_2403 = cljs.core.first.call(null, seq__2351_2397__$1);
              var class_name_2404 = dommy.core.class$.call(null, elem);
              if (cljs.core.truth_(dommy.utils.class_index.call(null, class_name_2404, c_2403))) {
              } else {
                dommy.core.set_class_BANG_.call(null, elem, class_name_2404 === "" ? c_2403 : [cljs.core.str.cljs$core$IFn$_invoke$arity$1(class_name_2404), " ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(c_2403)].join(""));
              }
              var G__2405 = cljs.core.next.call(null, seq__2351_2397__$1);
              var G__2406 = null;
              var G__2407 = 0;
              var G__2408 = 0;
              seq__2351_2386 = G__2405;
              chunk__2352_2387 = G__2406;
              count__2353_2388 = G__2407;
              i__2354_2389 = G__2408;
              continue;
            }
          } else {
          }
        }
        break;
      }
    }
  } else {
  }
  return elem;
};
dommy.core.add_class_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(elem, classes, more_classes) {
  var seq__2355_2409 = cljs.core.seq.call(null, cljs.core.conj.call(null, more_classes, classes));
  var chunk__2356_2410 = null;
  var count__2357_2411 = 0;
  var i__2358_2412 = 0;
  while (true) {
    if (i__2358_2412 < count__2357_2411) {
      var c_2413 = cljs.core._nth.call(null, chunk__2356_2410, i__2358_2412);
      dommy.core.add_class_BANG_.call(null, elem, c_2413);
      var G__2414 = seq__2355_2409;
      var G__2415 = chunk__2356_2410;
      var G__2416 = count__2357_2411;
      var G__2417 = i__2358_2412 + 1;
      seq__2355_2409 = G__2414;
      chunk__2356_2410 = G__2415;
      count__2357_2411 = G__2416;
      i__2358_2412 = G__2417;
      continue;
    } else {
      var temp__5735__auto___2418 = cljs.core.seq.call(null, seq__2355_2409);
      if (temp__5735__auto___2418) {
        var seq__2355_2419__$1 = temp__5735__auto___2418;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__2355_2419__$1)) {
          var c__4556__auto___2420 = cljs.core.chunk_first.call(null, seq__2355_2419__$1);
          var G__2421 = cljs.core.chunk_rest.call(null, seq__2355_2419__$1);
          var G__2422 = c__4556__auto___2420;
          var G__2423 = cljs.core.count.call(null, c__4556__auto___2420);
          var G__2424 = 0;
          seq__2355_2409 = G__2421;
          chunk__2356_2410 = G__2422;
          count__2357_2411 = G__2423;
          i__2358_2412 = G__2424;
          continue;
        } else {
          var c_2425 = cljs.core.first.call(null, seq__2355_2419__$1);
          dommy.core.add_class_BANG_.call(null, elem, c_2425);
          var G__2426 = cljs.core.next.call(null, seq__2355_2419__$1);
          var G__2427 = null;
          var G__2428 = 0;
          var G__2429 = 0;
          seq__2355_2409 = G__2426;
          chunk__2356_2410 = G__2427;
          count__2357_2411 = G__2428;
          i__2358_2412 = G__2429;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return elem;
};
dommy.core.add_class_BANG_.cljs$lang$applyTo = function(seq2343) {
  var G__2344 = cljs.core.first.call(null, seq2343);
  var seq2343__$1 = cljs.core.next.call(null, seq2343);
  var G__2345 = cljs.core.first.call(null, seq2343__$1);
  var seq2343__$2 = cljs.core.next.call(null, seq2343__$1);
  var self__4723__auto__ = this;
  return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__2344, G__2345, seq2343__$2);
};
dommy.core.add_class_BANG_.cljs$lang$maxFixedArity = 2;
dommy.core.remove_class_BANG_ = function dommy$core$remove_class_BANG_(var_args) {
  var G__2434 = arguments.length;
  switch(G__2434) {
    case 2:
      return dommy.core.remove_class_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var args_arr__4757__auto__ = [];
      var len__4736__auto___2440 = arguments.length;
      var i__4737__auto___2441 = 0;
      while (true) {
        if (i__4737__auto___2441 < len__4736__auto___2440) {
          args_arr__4757__auto__.push(arguments[i__4737__auto___2441]);
          var G__2442 = i__4737__auto___2441 + 1;
          i__4737__auto___2441 = G__2442;
          continue;
        } else {
        }
        break;
      }
      var argseq__4758__auto__ = new cljs.core.IndexedSeq(args_arr__4757__auto__.slice(2), 0, null);
      return dommy.core.remove_class_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__4758__auto__);
  }
};
dommy.core.remove_class_BANG_.cljs$core$IFn$_invoke$arity$2 = function(elem, c) {
  var c__$1 = dommy.utils.as_str.call(null, c);
  var temp__5733__auto___2443 = elem.classList;
  if (cljs.core.truth_(temp__5733__auto___2443)) {
    var class_list_2444 = temp__5733__auto___2443;
    class_list_2444.remove(c__$1);
  } else {
    var class_name_2445 = dommy.core.class$.call(null, elem);
    var new_class_name_2446 = dommy.utils.remove_class_str.call(null, class_name_2445, c__$1);
    if (class_name_2445 === new_class_name_2446) {
    } else {
      dommy.core.set_class_BANG_.call(null, elem, new_class_name_2446);
    }
  }
  return elem;
};
dommy.core.remove_class_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(elem, class$, classes) {
  var seq__2435 = cljs.core.seq.call(null, cljs.core.conj.call(null, classes, class$));
  var chunk__2436 = null;
  var count__2437 = 0;
  var i__2438 = 0;
  while (true) {
    if (i__2438 < count__2437) {
      var c = cljs.core._nth.call(null, chunk__2436, i__2438);
      dommy.core.remove_class_BANG_.call(null, elem, c);
      var G__2447 = seq__2435;
      var G__2448 = chunk__2436;
      var G__2449 = count__2437;
      var G__2450 = i__2438 + 1;
      seq__2435 = G__2447;
      chunk__2436 = G__2448;
      count__2437 = G__2449;
      i__2438 = G__2450;
      continue;
    } else {
      var temp__5735__auto__ = cljs.core.seq.call(null, seq__2435);
      if (temp__5735__auto__) {
        var seq__2435__$1 = temp__5735__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__2435__$1)) {
          var c__4556__auto__ = cljs.core.chunk_first.call(null, seq__2435__$1);
          var G__2451 = cljs.core.chunk_rest.call(null, seq__2435__$1);
          var G__2452 = c__4556__auto__;
          var G__2453 = cljs.core.count.call(null, c__4556__auto__);
          var G__2454 = 0;
          seq__2435 = G__2451;
          chunk__2436 = G__2452;
          count__2437 = G__2453;
          i__2438 = G__2454;
          continue;
        } else {
          var c = cljs.core.first.call(null, seq__2435__$1);
          dommy.core.remove_class_BANG_.call(null, elem, c);
          var G__2455 = cljs.core.next.call(null, seq__2435__$1);
          var G__2456 = null;
          var G__2457 = 0;
          var G__2458 = 0;
          seq__2435 = G__2455;
          chunk__2436 = G__2456;
          count__2437 = G__2457;
          i__2438 = G__2458;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
dommy.core.remove_class_BANG_.cljs$lang$applyTo = function(seq2431) {
  var G__2432 = cljs.core.first.call(null, seq2431);
  var seq2431__$1 = cljs.core.next.call(null, seq2431);
  var G__2433 = cljs.core.first.call(null, seq2431__$1);
  var seq2431__$2 = cljs.core.next.call(null, seq2431__$1);
  var self__4723__auto__ = this;
  return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__2432, G__2433, seq2431__$2);
};
dommy.core.remove_class_BANG_.cljs$lang$maxFixedArity = 2;
dommy.core.toggle_class_BANG_ = function dommy$core$toggle_class_BANG_(var_args) {
  var G__2460 = arguments.length;
  switch(G__2460) {
    case 2:
      return dommy.core.toggle_class_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return dommy.core.toggle_class_BANG_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
dommy.core.toggle_class_BANG_.cljs$core$IFn$_invoke$arity$2 = function(elem, c) {
  var c__$1 = dommy.utils.as_str.call(null, c);
  var temp__5733__auto___2462 = elem.classList;
  if (cljs.core.truth_(temp__5733__auto___2462)) {
    var class_list_2463 = temp__5733__auto___2462;
    class_list_2463.toggle(c__$1);
  } else {
    dommy.core.toggle_class_BANG_.call(null, elem, c__$1, !dommy.core.has_class_QMARK_.call(null, elem, c__$1));
  }
  return elem;
};
dommy.core.toggle_class_BANG_.cljs$core$IFn$_invoke$arity$3 = function(elem, class$, add_QMARK_) {
  if (add_QMARK_) {
    dommy.core.add_class_BANG_.call(null, elem, class$);
  } else {
    dommy.core.remove_class_BANG_.call(null, elem, class$);
  }
  return elem;
};
dommy.core.toggle_class_BANG_.cljs$lang$maxFixedArity = 3;
dommy.core.toggle_BANG_ = function dommy$core$toggle_BANG_(var_args) {
  var G__2465 = arguments.length;
  switch(G__2465) {
    case 2:
      return dommy.core.toggle_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 1:
      return dommy.core.toggle_BANG_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
dommy.core.toggle_BANG_.cljs$core$IFn$_invoke$arity$2 = function(elem, show_QMARK_) {
  return dommy.core.set_style_BANG_.call(null, elem, new cljs.core.Keyword(null, "display", "display", 242065432), show_QMARK_ ? "" : "none");
};
dommy.core.toggle_BANG_.cljs$core$IFn$_invoke$arity$1 = function(elem) {
  return dommy.core.toggle_BANG_.call(null, elem, dommy.core.hidden_QMARK_.call(null, elem));
};
dommy.core.toggle_BANG_.cljs$lang$maxFixedArity = 2;
dommy.core.hide_BANG_ = function dommy$core$hide_BANG_(elem) {
  return dommy.core.toggle_BANG_.call(null, elem, false);
};
dommy.core.show_BANG_ = function dommy$core$show_BANG_(elem) {
  return dommy.core.toggle_BANG_.call(null, elem, true);
};
dommy.core.scroll_into_view = function dommy$core$scroll_into_view(elem, align_with_top_QMARK_) {
  var top = (new cljs.core.Keyword(null, "top", "top", -1856271961)).cljs$core$IFn$_invoke$arity$1(dommy.core.bounding_client_rect.call(null, elem));
  if (window.innerHeight < top + elem.offsetHeight) {
    return elem.scrollIntoView(align_with_top_QMARK_);
  } else {
    return null;
  }
};
dommy.core.create_element = function dommy$core$create_element(var_args) {
  var G__2468 = arguments.length;
  switch(G__2468) {
    case 1:
      return dommy.core.create_element.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return dommy.core.create_element.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
dommy.core.create_element.cljs$core$IFn$_invoke$arity$1 = function(tag) {
  return document.createElement(dommy.utils.as_str.call(null, tag));
};
dommy.core.create_element.cljs$core$IFn$_invoke$arity$2 = function(tag_ns, tag) {
  return document.createElementNS(dommy.utils.as_str.call(null, tag_ns), dommy.utils.as_str.call(null, tag));
};
dommy.core.create_element.cljs$lang$maxFixedArity = 2;
dommy.core.create_text_node = function dommy$core$create_text_node(text) {
  return document.createTextNode(text);
};
dommy.core.clear_BANG_ = function dommy$core$clear_BANG_(elem) {
  return dommy.core.set_html_BANG_.call(null, elem, "");
};
dommy.core.append_BANG_ = function dommy$core$append_BANG_(var_args) {
  var G__2474 = arguments.length;
  switch(G__2474) {
    case 2:
      return dommy.core.append_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var args_arr__4757__auto__ = [];
      var len__4736__auto___2481 = arguments.length;
      var i__4737__auto___2482 = 0;
      while (true) {
        if (i__4737__auto___2482 < len__4736__auto___2481) {
          args_arr__4757__auto__.push(arguments[i__4737__auto___2482]);
          var G__2483 = i__4737__auto___2482 + 1;
          i__4737__auto___2482 = G__2483;
          continue;
        } else {
        }
        break;
      }
      var argseq__4758__auto__ = new cljs.core.IndexedSeq(args_arr__4757__auto__.slice(2), 0, null);
      return dommy.core.append_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__4758__auto__);
  }
};
dommy.core.append_BANG_.cljs$core$IFn$_invoke$arity$2 = function(parent, child) {
  var G__2475 = parent;
  G__2475.appendChild(child);
  return G__2475;
};
dommy.core.append_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(parent, child, more_children) {
  var seq__2476_2484 = cljs.core.seq.call(null, cljs.core.cons.call(null, child, more_children));
  var chunk__2477_2485 = null;
  var count__2478_2486 = 0;
  var i__2479_2487 = 0;
  while (true) {
    if (i__2479_2487 < count__2478_2486) {
      var c_2488 = cljs.core._nth.call(null, chunk__2477_2485, i__2479_2487);
      dommy.core.append_BANG_.call(null, parent, c_2488);
      var G__2489 = seq__2476_2484;
      var G__2490 = chunk__2477_2485;
      var G__2491 = count__2478_2486;
      var G__2492 = i__2479_2487 + 1;
      seq__2476_2484 = G__2489;
      chunk__2477_2485 = G__2490;
      count__2478_2486 = G__2491;
      i__2479_2487 = G__2492;
      continue;
    } else {
      var temp__5735__auto___2493 = cljs.core.seq.call(null, seq__2476_2484);
      if (temp__5735__auto___2493) {
        var seq__2476_2494__$1 = temp__5735__auto___2493;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__2476_2494__$1)) {
          var c__4556__auto___2495 = cljs.core.chunk_first.call(null, seq__2476_2494__$1);
          var G__2496 = cljs.core.chunk_rest.call(null, seq__2476_2494__$1);
          var G__2497 = c__4556__auto___2495;
          var G__2498 = cljs.core.count.call(null, c__4556__auto___2495);
          var G__2499 = 0;
          seq__2476_2484 = G__2496;
          chunk__2477_2485 = G__2497;
          count__2478_2486 = G__2498;
          i__2479_2487 = G__2499;
          continue;
        } else {
          var c_2500 = cljs.core.first.call(null, seq__2476_2494__$1);
          dommy.core.append_BANG_.call(null, parent, c_2500);
          var G__2501 = cljs.core.next.call(null, seq__2476_2494__$1);
          var G__2502 = null;
          var G__2503 = 0;
          var G__2504 = 0;
          seq__2476_2484 = G__2501;
          chunk__2477_2485 = G__2502;
          count__2478_2486 = G__2503;
          i__2479_2487 = G__2504;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return parent;
};
dommy.core.append_BANG_.cljs$lang$applyTo = function(seq2471) {
  var G__2472 = cljs.core.first.call(null, seq2471);
  var seq2471__$1 = cljs.core.next.call(null, seq2471);
  var G__2473 = cljs.core.first.call(null, seq2471__$1);
  var seq2471__$2 = cljs.core.next.call(null, seq2471__$1);
  var self__4723__auto__ = this;
  return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__2472, G__2473, seq2471__$2);
};
dommy.core.append_BANG_.cljs$lang$maxFixedArity = 2;
dommy.core.prepend_BANG_ = function dommy$core$prepend_BANG_(var_args) {
  var G__2509 = arguments.length;
  switch(G__2509) {
    case 2:
      return dommy.core.prepend_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var args_arr__4757__auto__ = [];
      var len__4736__auto___2516 = arguments.length;
      var i__4737__auto___2517 = 0;
      while (true) {
        if (i__4737__auto___2517 < len__4736__auto___2516) {
          args_arr__4757__auto__.push(arguments[i__4737__auto___2517]);
          var G__2518 = i__4737__auto___2517 + 1;
          i__4737__auto___2517 = G__2518;
          continue;
        } else {
        }
        break;
      }
      var argseq__4758__auto__ = new cljs.core.IndexedSeq(args_arr__4757__auto__.slice(2), 0, null);
      return dommy.core.prepend_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__4758__auto__);
  }
};
dommy.core.prepend_BANG_.cljs$core$IFn$_invoke$arity$2 = function(parent, child) {
  var G__2510 = parent;
  G__2510.insertBefore(child, parent.firstChild);
  return G__2510;
};
dommy.core.prepend_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(parent, child, more_children) {
  var seq__2511_2519 = cljs.core.seq.call(null, cljs.core.cons.call(null, child, more_children));
  var chunk__2512_2520 = null;
  var count__2513_2521 = 0;
  var i__2514_2522 = 0;
  while (true) {
    if (i__2514_2522 < count__2513_2521) {
      var c_2523 = cljs.core._nth.call(null, chunk__2512_2520, i__2514_2522);
      dommy.core.prepend_BANG_.call(null, parent, c_2523);
      var G__2524 = seq__2511_2519;
      var G__2525 = chunk__2512_2520;
      var G__2526 = count__2513_2521;
      var G__2527 = i__2514_2522 + 1;
      seq__2511_2519 = G__2524;
      chunk__2512_2520 = G__2525;
      count__2513_2521 = G__2526;
      i__2514_2522 = G__2527;
      continue;
    } else {
      var temp__5735__auto___2528 = cljs.core.seq.call(null, seq__2511_2519);
      if (temp__5735__auto___2528) {
        var seq__2511_2529__$1 = temp__5735__auto___2528;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__2511_2529__$1)) {
          var c__4556__auto___2530 = cljs.core.chunk_first.call(null, seq__2511_2529__$1);
          var G__2531 = cljs.core.chunk_rest.call(null, seq__2511_2529__$1);
          var G__2532 = c__4556__auto___2530;
          var G__2533 = cljs.core.count.call(null, c__4556__auto___2530);
          var G__2534 = 0;
          seq__2511_2519 = G__2531;
          chunk__2512_2520 = G__2532;
          count__2513_2521 = G__2533;
          i__2514_2522 = G__2534;
          continue;
        } else {
          var c_2535 = cljs.core.first.call(null, seq__2511_2529__$1);
          dommy.core.prepend_BANG_.call(null, parent, c_2535);
          var G__2536 = cljs.core.next.call(null, seq__2511_2529__$1);
          var G__2537 = null;
          var G__2538 = 0;
          var G__2539 = 0;
          seq__2511_2519 = G__2536;
          chunk__2512_2520 = G__2537;
          count__2513_2521 = G__2538;
          i__2514_2522 = G__2539;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return parent;
};
dommy.core.prepend_BANG_.cljs$lang$applyTo = function(seq2506) {
  var G__2507 = cljs.core.first.call(null, seq2506);
  var seq2506__$1 = cljs.core.next.call(null, seq2506);
  var G__2508 = cljs.core.first.call(null, seq2506__$1);
  var seq2506__$2 = cljs.core.next.call(null, seq2506__$1);
  var self__4723__auto__ = this;
  return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__2507, G__2508, seq2506__$2);
};
dommy.core.prepend_BANG_.cljs$lang$maxFixedArity = 2;
dommy.core.insert_before_BANG_ = function dommy$core$insert_before_BANG_(elem, other) {
  var p = dommy.core.parent.call(null, other);
  if (cljs.core.truth_(p)) {
  } else {
    throw new Error(["Assert failed: ", "Target element must have a parent", "\n", "p"].join(""));
  }
  p.insertBefore(elem, other);
  return elem;
};
dommy.core.insert_after_BANG_ = function dommy$core$insert_after_BANG_(elem, other) {
  var temp__5733__auto___2540 = other.nextSibling;
  if (cljs.core.truth_(temp__5733__auto___2540)) {
    var next_2541 = temp__5733__auto___2540;
    dommy.core.insert_before_BANG_.call(null, elem, next_2541);
  } else {
    dommy.core.append_BANG_.call(null, dommy.core.parent.call(null, other), elem);
  }
  return elem;
};
dommy.core.replace_BANG_ = function dommy$core$replace_BANG_(elem, new$) {
  var p = dommy.core.parent.call(null, elem);
  if (cljs.core.truth_(p)) {
  } else {
    throw new Error(["Assert failed: ", "Target element must have a parent", "\n", "p"].join(""));
  }
  p.replaceChild(new$, elem);
  return new$;
};
dommy.core.replace_contents_BANG_ = function dommy$core$replace_contents_BANG_(p, child) {
  return dommy.core.append_BANG_.call(null, dommy.core.clear_BANG_.call(null, p), child);
};
dommy.core.remove_BANG_ = function dommy$core$remove_BANG_(var_args) {
  var G__2543 = arguments.length;
  switch(G__2543) {
    case 1:
      return dommy.core.remove_BANG_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return dommy.core.remove_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
  }
};
dommy.core.remove_BANG_.cljs$core$IFn$_invoke$arity$1 = function(elem) {
  var p = dommy.core.parent.call(null, elem);
  if (cljs.core.truth_(p)) {
  } else {
    throw new Error(["Assert failed: ", "Target element must have a parent", "\n", "p"].join(""));
  }
  return dommy.core.remove_BANG_.call(null, p, elem);
};
dommy.core.remove_BANG_.cljs$core$IFn$_invoke$arity$2 = function(p, elem) {
  var G__2544 = p;
  G__2544.removeChild(elem);
  return G__2544;
};
dommy.core.remove_BANG_.cljs$lang$maxFixedArity = 2;
dommy.core.special_listener_makers = cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(p__2546) {
  var vec__2547 = p__2546;
  var special_mouse_event = cljs.core.nth.call(null, vec__2547, 0, null);
  var real_mouse_event = cljs.core.nth.call(null, vec__2547, 1, null);
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [special_mouse_event, cljs.core.PersistentArrayMap.createAsIfByAssoc([real_mouse_event, function(f) {
    return function(event) {
      var related_target = event.relatedTarget;
      var listener_target = function() {
        var or__4126__auto__ = event.selectedTarget;
        if (cljs.core.truth_(or__4126__auto__)) {
          return or__4126__auto__;
        } else {
          return event.currentTarget;
        }
      }();
      if (cljs.core.truth_(function() {
        var and__4115__auto__ = related_target;
        if (cljs.core.truth_(and__4115__auto__)) {
          return dommy.core.descendant_QMARK_.call(null, related_target, listener_target);
        } else {
          return and__4115__auto__;
        }
      }())) {
        return null;
      } else {
        return f.call(null, event);
      }
    };
  }])], null);
}, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "mouseenter", "mouseenter", -1792413560), new cljs.core.Keyword(null, "mouseover", "mouseover", -484272303), new cljs.core.Keyword(null, "mouseleave", "mouseleave", 531566580), new cljs.core.Keyword(null, "mouseout", "mouseout", 2049446890)], null)));
dommy.core.live_listener = function dommy$core$live_listener(elem, selector, f) {
  return function(event) {
    var selected_target = dommy.core.closest.call(null, elem, event.target, selector);
    if (cljs.core.truth_(function() {
      var and__4115__auto__ = selected_target;
      if (cljs.core.truth_(and__4115__auto__)) {
        return cljs.core.not.call(null, dommy.core.attr.call(null, selected_target, new cljs.core.Keyword(null, "disabled", "disabled", -1529784218)));
      } else {
        return and__4115__auto__;
      }
    }())) {
      event.selectedTarget = selected_target;
      return f.call(null, event);
    } else {
      return null;
    }
  };
};
dommy.core.event_listeners = function dommy$core$event_listeners(elem) {
  var or__4126__auto__ = elem.dommyEventListeners;
  if (cljs.core.truth_(or__4126__auto__)) {
    return or__4126__auto__;
  } else {
    return cljs.core.PersistentArrayMap.EMPTY;
  }
};
dommy.core.update_event_listeners_BANG_ = function dommy$core$update_event_listeners_BANG_(var_args) {
  var args__4742__auto__ = [];
  var len__4736__auto___2553 = arguments.length;
  var i__4737__auto___2554 = 0;
  while (true) {
    if (i__4737__auto___2554 < len__4736__auto___2553) {
      args__4742__auto__.push(arguments[i__4737__auto___2554]);
      var G__2555 = i__4737__auto___2554 + 1;
      i__4737__auto___2554 = G__2555;
      continue;
    } else {
    }
    break;
  }
  var argseq__4743__auto__ = 2 < args__4742__auto__.length ? new cljs.core.IndexedSeq(args__4742__auto__.slice(2), 0, null) : null;
  return dommy.core.update_event_listeners_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__4743__auto__);
};
dommy.core.update_event_listeners_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(elem, f, args) {
  var elem__$1 = elem;
  return elem__$1.dommyEventListeners = cljs.core.apply.call(null, f, dommy.core.event_listeners.call(null, elem__$1), args);
};
dommy.core.update_event_listeners_BANG_.cljs$lang$maxFixedArity = 2;
dommy.core.update_event_listeners_BANG_.cljs$lang$applyTo = function(seq2550) {
  var G__2551 = cljs.core.first.call(null, seq2550);
  var seq2550__$1 = cljs.core.next.call(null, seq2550);
  var G__2552 = cljs.core.first.call(null, seq2550__$1);
  var seq2550__$2 = cljs.core.next.call(null, seq2550__$1);
  var self__4723__auto__ = this;
  return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__2551, G__2552, seq2550__$2);
};
dommy.core.elem_and_selector = function dommy$core$elem_and_selector(elem_sel) {
  if (cljs.core.sequential_QMARK_.call(null, elem_sel)) {
    return cljs.core.juxt.call(null, cljs.core.first, cljs.core.rest).call(null, elem_sel);
  } else {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [elem_sel, null], null);
  }
};
dommy.core.listen_BANG_ = function dommy$core$listen_BANG_(var_args) {
  var args__4742__auto__ = [];
  var len__4736__auto___2637 = arguments.length;
  var i__4737__auto___2638 = 0;
  while (true) {
    if (i__4737__auto___2638 < len__4736__auto___2637) {
      args__4742__auto__.push(arguments[i__4737__auto___2638]);
      var G__2639 = i__4737__auto___2638 + 1;
      i__4737__auto___2638 = G__2639;
      continue;
    } else {
    }
    break;
  }
  var argseq__4743__auto__ = 1 < args__4742__auto__.length ? new cljs.core.IndexedSeq(args__4742__auto__.slice(1), 0, null) : null;
  return dommy.core.listen_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__4743__auto__);
};
dommy.core.listen_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(elem_sel, type_fs) {
  if (cljs.core.even_QMARK_.call(null, cljs.core.count.call(null, type_fs))) {
  } else {
    throw new Error("Assert failed: (even? (count type-fs))");
  }
  var vec__2558_2640 = dommy.core.elem_and_selector.call(null, elem_sel);
  var elem_2641 = cljs.core.nth.call(null, vec__2558_2640, 0, null);
  var selector_2642 = cljs.core.nth.call(null, vec__2558_2640, 1, null);
  var seq__2561_2643 = cljs.core.seq.call(null, cljs.core.partition.call(null, 2, type_fs));
  var chunk__2568_2644 = null;
  var count__2569_2645 = 0;
  var i__2570_2646 = 0;
  while (true) {
    if (i__2570_2646 < count__2569_2645) {
      var vec__2607_2647 = cljs.core._nth.call(null, chunk__2568_2644, i__2570_2646);
      var orig_type_2648 = cljs.core.nth.call(null, vec__2607_2647, 0, null);
      var f_2649 = cljs.core.nth.call(null, vec__2607_2647, 1, null);
      var seq__2571_2650 = cljs.core.seq.call(null, cljs.core.get.call(null, dommy.core.special_listener_makers, orig_type_2648, cljs.core.PersistentArrayMap.createAsIfByAssoc([orig_type_2648, cljs.core.identity])));
      var chunk__2573_2651 = null;
      var count__2574_2652 = 0;
      var i__2575_2653 = 0;
      while (true) {
        if (i__2575_2653 < count__2574_2652) {
          var vec__2616_2654 = cljs.core._nth.call(null, chunk__2573_2651, i__2575_2653);
          var actual_type_2655 = cljs.core.nth.call(null, vec__2616_2654, 0, null);
          var factory_2656 = cljs.core.nth.call(null, vec__2616_2654, 1, null);
          var canonical_f_2657 = (cljs.core.truth_(selector_2642) ? cljs.core.partial.call(null, dommy.core.live_listener, elem_2641, selector_2642) : cljs.core.identity).call(null, factory_2656.call(null, f_2649));
          dommy.core.update_event_listeners_BANG_.call(null, elem_2641, cljs.core.assoc_in, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [selector_2642, actual_type_2655, f_2649], null), canonical_f_2657);
          if (cljs.core.truth_(elem_2641.addEventListener)) {
            elem_2641.addEventListener(cljs.core.name.call(null, actual_type_2655), canonical_f_2657);
          } else {
            elem_2641.attachEvent(cljs.core.name.call(null, actual_type_2655), canonical_f_2657);
          }
          var G__2658 = seq__2571_2650;
          var G__2659 = chunk__2573_2651;
          var G__2660 = count__2574_2652;
          var G__2661 = i__2575_2653 + 1;
          seq__2571_2650 = G__2658;
          chunk__2573_2651 = G__2659;
          count__2574_2652 = G__2660;
          i__2575_2653 = G__2661;
          continue;
        } else {
          var temp__5735__auto___2662 = cljs.core.seq.call(null, seq__2571_2650);
          if (temp__5735__auto___2662) {
            var seq__2571_2663__$1 = temp__5735__auto___2662;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__2571_2663__$1)) {
              var c__4556__auto___2664 = cljs.core.chunk_first.call(null, seq__2571_2663__$1);
              var G__2665 = cljs.core.chunk_rest.call(null, seq__2571_2663__$1);
              var G__2666 = c__4556__auto___2664;
              var G__2667 = cljs.core.count.call(null, c__4556__auto___2664);
              var G__2668 = 0;
              seq__2571_2650 = G__2665;
              chunk__2573_2651 = G__2666;
              count__2574_2652 = G__2667;
              i__2575_2653 = G__2668;
              continue;
            } else {
              var vec__2619_2669 = cljs.core.first.call(null, seq__2571_2663__$1);
              var actual_type_2670 = cljs.core.nth.call(null, vec__2619_2669, 0, null);
              var factory_2671 = cljs.core.nth.call(null, vec__2619_2669, 1, null);
              var canonical_f_2672 = (cljs.core.truth_(selector_2642) ? cljs.core.partial.call(null, dommy.core.live_listener, elem_2641, selector_2642) : cljs.core.identity).call(null, factory_2671.call(null, f_2649));
              dommy.core.update_event_listeners_BANG_.call(null, elem_2641, cljs.core.assoc_in, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [selector_2642, actual_type_2670, f_2649], null), canonical_f_2672);
              if (cljs.core.truth_(elem_2641.addEventListener)) {
                elem_2641.addEventListener(cljs.core.name.call(null, actual_type_2670), canonical_f_2672);
              } else {
                elem_2641.attachEvent(cljs.core.name.call(null, actual_type_2670), canonical_f_2672);
              }
              var G__2673 = cljs.core.next.call(null, seq__2571_2663__$1);
              var G__2674 = null;
              var G__2675 = 0;
              var G__2676 = 0;
              seq__2571_2650 = G__2673;
              chunk__2573_2651 = G__2674;
              count__2574_2652 = G__2675;
              i__2575_2653 = G__2676;
              continue;
            }
          } else {
          }
        }
        break;
      }
      var G__2677 = seq__2561_2643;
      var G__2678 = chunk__2568_2644;
      var G__2679 = count__2569_2645;
      var G__2680 = i__2570_2646 + 1;
      seq__2561_2643 = G__2677;
      chunk__2568_2644 = G__2678;
      count__2569_2645 = G__2679;
      i__2570_2646 = G__2680;
      continue;
    } else {
      var temp__5735__auto___2681 = cljs.core.seq.call(null, seq__2561_2643);
      if (temp__5735__auto___2681) {
        var seq__2561_2682__$1 = temp__5735__auto___2681;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__2561_2682__$1)) {
          var c__4556__auto___2683 = cljs.core.chunk_first.call(null, seq__2561_2682__$1);
          var G__2684 = cljs.core.chunk_rest.call(null, seq__2561_2682__$1);
          var G__2685 = c__4556__auto___2683;
          var G__2686 = cljs.core.count.call(null, c__4556__auto___2683);
          var G__2687 = 0;
          seq__2561_2643 = G__2684;
          chunk__2568_2644 = G__2685;
          count__2569_2645 = G__2686;
          i__2570_2646 = G__2687;
          continue;
        } else {
          var vec__2622_2688 = cljs.core.first.call(null, seq__2561_2682__$1);
          var orig_type_2689 = cljs.core.nth.call(null, vec__2622_2688, 0, null);
          var f_2690 = cljs.core.nth.call(null, vec__2622_2688, 1, null);
          var seq__2562_2691 = cljs.core.seq.call(null, cljs.core.get.call(null, dommy.core.special_listener_makers, orig_type_2689, cljs.core.PersistentArrayMap.createAsIfByAssoc([orig_type_2689, cljs.core.identity])));
          var chunk__2564_2692 = null;
          var count__2565_2693 = 0;
          var i__2566_2694 = 0;
          while (true) {
            if (i__2566_2694 < count__2565_2693) {
              var vec__2631_2695 = cljs.core._nth.call(null, chunk__2564_2692, i__2566_2694);
              var actual_type_2696 = cljs.core.nth.call(null, vec__2631_2695, 0, null);
              var factory_2697 = cljs.core.nth.call(null, vec__2631_2695, 1, null);
              var canonical_f_2698 = (cljs.core.truth_(selector_2642) ? cljs.core.partial.call(null, dommy.core.live_listener, elem_2641, selector_2642) : cljs.core.identity).call(null, factory_2697.call(null, f_2690));
              dommy.core.update_event_listeners_BANG_.call(null, elem_2641, cljs.core.assoc_in, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [selector_2642, actual_type_2696, f_2690], null), canonical_f_2698);
              if (cljs.core.truth_(elem_2641.addEventListener)) {
                elem_2641.addEventListener(cljs.core.name.call(null, actual_type_2696), canonical_f_2698);
              } else {
                elem_2641.attachEvent(cljs.core.name.call(null, actual_type_2696), canonical_f_2698);
              }
              var G__2699 = seq__2562_2691;
              var G__2700 = chunk__2564_2692;
              var G__2701 = count__2565_2693;
              var G__2702 = i__2566_2694 + 1;
              seq__2562_2691 = G__2699;
              chunk__2564_2692 = G__2700;
              count__2565_2693 = G__2701;
              i__2566_2694 = G__2702;
              continue;
            } else {
              var temp__5735__auto___2703__$1 = cljs.core.seq.call(null, seq__2562_2691);
              if (temp__5735__auto___2703__$1) {
                var seq__2562_2704__$1 = temp__5735__auto___2703__$1;
                if (cljs.core.chunked_seq_QMARK_.call(null, seq__2562_2704__$1)) {
                  var c__4556__auto___2705 = cljs.core.chunk_first.call(null, seq__2562_2704__$1);
                  var G__2706 = cljs.core.chunk_rest.call(null, seq__2562_2704__$1);
                  var G__2707 = c__4556__auto___2705;
                  var G__2708 = cljs.core.count.call(null, c__4556__auto___2705);
                  var G__2709 = 0;
                  seq__2562_2691 = G__2706;
                  chunk__2564_2692 = G__2707;
                  count__2565_2693 = G__2708;
                  i__2566_2694 = G__2709;
                  continue;
                } else {
                  var vec__2634_2710 = cljs.core.first.call(null, seq__2562_2704__$1);
                  var actual_type_2711 = cljs.core.nth.call(null, vec__2634_2710, 0, null);
                  var factory_2712 = cljs.core.nth.call(null, vec__2634_2710, 1, null);
                  var canonical_f_2713 = (cljs.core.truth_(selector_2642) ? cljs.core.partial.call(null, dommy.core.live_listener, elem_2641, selector_2642) : cljs.core.identity).call(null, factory_2712.call(null, f_2690));
                  dommy.core.update_event_listeners_BANG_.call(null, elem_2641, cljs.core.assoc_in, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [selector_2642, actual_type_2711, f_2690], null), canonical_f_2713);
                  if (cljs.core.truth_(elem_2641.addEventListener)) {
                    elem_2641.addEventListener(cljs.core.name.call(null, actual_type_2711), canonical_f_2713);
                  } else {
                    elem_2641.attachEvent(cljs.core.name.call(null, actual_type_2711), canonical_f_2713);
                  }
                  var G__2714 = cljs.core.next.call(null, seq__2562_2704__$1);
                  var G__2715 = null;
                  var G__2716 = 0;
                  var G__2717 = 0;
                  seq__2562_2691 = G__2714;
                  chunk__2564_2692 = G__2715;
                  count__2565_2693 = G__2716;
                  i__2566_2694 = G__2717;
                  continue;
                }
              } else {
              }
            }
            break;
          }
          var G__2718 = cljs.core.next.call(null, seq__2561_2682__$1);
          var G__2719 = null;
          var G__2720 = 0;
          var G__2721 = 0;
          seq__2561_2643 = G__2718;
          chunk__2568_2644 = G__2719;
          count__2569_2645 = G__2720;
          i__2570_2646 = G__2721;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return elem_sel;
};
dommy.core.listen_BANG_.cljs$lang$maxFixedArity = 1;
dommy.core.listen_BANG_.cljs$lang$applyTo = function(seq2556) {
  var G__2557 = cljs.core.first.call(null, seq2556);
  var seq2556__$1 = cljs.core.next.call(null, seq2556);
  var self__4723__auto__ = this;
  return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__2557, seq2556__$1);
};
dommy.core.unlisten_BANG_ = function dommy$core$unlisten_BANG_(var_args) {
  var args__4742__auto__ = [];
  var len__4736__auto___2803 = arguments.length;
  var i__4737__auto___2804 = 0;
  while (true) {
    if (i__4737__auto___2804 < len__4736__auto___2803) {
      args__4742__auto__.push(arguments[i__4737__auto___2804]);
      var G__2805 = i__4737__auto___2804 + 1;
      i__4737__auto___2804 = G__2805;
      continue;
    } else {
    }
    break;
  }
  var argseq__4743__auto__ = 1 < args__4742__auto__.length ? new cljs.core.IndexedSeq(args__4742__auto__.slice(1), 0, null) : null;
  return dommy.core.unlisten_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__4743__auto__);
};
dommy.core.unlisten_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(elem_sel, type_fs) {
  if (cljs.core.even_QMARK_.call(null, cljs.core.count.call(null, type_fs))) {
  } else {
    throw new Error("Assert failed: (even? (count type-fs))");
  }
  var vec__2724_2806 = dommy.core.elem_and_selector.call(null, elem_sel);
  var elem_2807 = cljs.core.nth.call(null, vec__2724_2806, 0, null);
  var selector_2808 = cljs.core.nth.call(null, vec__2724_2806, 1, null);
  var seq__2727_2809 = cljs.core.seq.call(null, cljs.core.partition.call(null, 2, type_fs));
  var chunk__2734_2810 = null;
  var count__2735_2811 = 0;
  var i__2736_2812 = 0;
  while (true) {
    if (i__2736_2812 < count__2735_2811) {
      var vec__2773_2813 = cljs.core._nth.call(null, chunk__2734_2810, i__2736_2812);
      var orig_type_2814 = cljs.core.nth.call(null, vec__2773_2813, 0, null);
      var f_2815 = cljs.core.nth.call(null, vec__2773_2813, 1, null);
      var seq__2737_2816 = cljs.core.seq.call(null, cljs.core.get.call(null, dommy.core.special_listener_makers, orig_type_2814, cljs.core.PersistentArrayMap.createAsIfByAssoc([orig_type_2814, cljs.core.identity])));
      var chunk__2739_2817 = null;
      var count__2740_2818 = 0;
      var i__2741_2819 = 0;
      while (true) {
        if (i__2741_2819 < count__2740_2818) {
          var vec__2782_2820 = cljs.core._nth.call(null, chunk__2739_2817, i__2741_2819);
          var actual_type_2821 = cljs.core.nth.call(null, vec__2782_2820, 0, null);
          var __2822 = cljs.core.nth.call(null, vec__2782_2820, 1, null);
          var keys_2823 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [selector_2808, actual_type_2821, f_2815], null);
          var canonical_f_2824 = cljs.core.get_in.call(null, dommy.core.event_listeners.call(null, elem_2807), keys_2823);
          dommy.core.update_event_listeners_BANG_.call(null, elem_2807, dommy.utils.dissoc_in, keys_2823);
          if (cljs.core.truth_(elem_2807.removeEventListener)) {
            elem_2807.removeEventListener(cljs.core.name.call(null, actual_type_2821), canonical_f_2824);
          } else {
            elem_2807.detachEvent(cljs.core.name.call(null, actual_type_2821), canonical_f_2824);
          }
          var G__2825 = seq__2737_2816;
          var G__2826 = chunk__2739_2817;
          var G__2827 = count__2740_2818;
          var G__2828 = i__2741_2819 + 1;
          seq__2737_2816 = G__2825;
          chunk__2739_2817 = G__2826;
          count__2740_2818 = G__2827;
          i__2741_2819 = G__2828;
          continue;
        } else {
          var temp__5735__auto___2829 = cljs.core.seq.call(null, seq__2737_2816);
          if (temp__5735__auto___2829) {
            var seq__2737_2830__$1 = temp__5735__auto___2829;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__2737_2830__$1)) {
              var c__4556__auto___2831 = cljs.core.chunk_first.call(null, seq__2737_2830__$1);
              var G__2832 = cljs.core.chunk_rest.call(null, seq__2737_2830__$1);
              var G__2833 = c__4556__auto___2831;
              var G__2834 = cljs.core.count.call(null, c__4556__auto___2831);
              var G__2835 = 0;
              seq__2737_2816 = G__2832;
              chunk__2739_2817 = G__2833;
              count__2740_2818 = G__2834;
              i__2741_2819 = G__2835;
              continue;
            } else {
              var vec__2785_2836 = cljs.core.first.call(null, seq__2737_2830__$1);
              var actual_type_2837 = cljs.core.nth.call(null, vec__2785_2836, 0, null);
              var __2838 = cljs.core.nth.call(null, vec__2785_2836, 1, null);
              var keys_2839 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [selector_2808, actual_type_2837, f_2815], null);
              var canonical_f_2840 = cljs.core.get_in.call(null, dommy.core.event_listeners.call(null, elem_2807), keys_2839);
              dommy.core.update_event_listeners_BANG_.call(null, elem_2807, dommy.utils.dissoc_in, keys_2839);
              if (cljs.core.truth_(elem_2807.removeEventListener)) {
                elem_2807.removeEventListener(cljs.core.name.call(null, actual_type_2837), canonical_f_2840);
              } else {
                elem_2807.detachEvent(cljs.core.name.call(null, actual_type_2837), canonical_f_2840);
              }
              var G__2841 = cljs.core.next.call(null, seq__2737_2830__$1);
              var G__2842 = null;
              var G__2843 = 0;
              var G__2844 = 0;
              seq__2737_2816 = G__2841;
              chunk__2739_2817 = G__2842;
              count__2740_2818 = G__2843;
              i__2741_2819 = G__2844;
              continue;
            }
          } else {
          }
        }
        break;
      }
      var G__2845 = seq__2727_2809;
      var G__2846 = chunk__2734_2810;
      var G__2847 = count__2735_2811;
      var G__2848 = i__2736_2812 + 1;
      seq__2727_2809 = G__2845;
      chunk__2734_2810 = G__2846;
      count__2735_2811 = G__2847;
      i__2736_2812 = G__2848;
      continue;
    } else {
      var temp__5735__auto___2849 = cljs.core.seq.call(null, seq__2727_2809);
      if (temp__5735__auto___2849) {
        var seq__2727_2850__$1 = temp__5735__auto___2849;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__2727_2850__$1)) {
          var c__4556__auto___2851 = cljs.core.chunk_first.call(null, seq__2727_2850__$1);
          var G__2852 = cljs.core.chunk_rest.call(null, seq__2727_2850__$1);
          var G__2853 = c__4556__auto___2851;
          var G__2854 = cljs.core.count.call(null, c__4556__auto___2851);
          var G__2855 = 0;
          seq__2727_2809 = G__2852;
          chunk__2734_2810 = G__2853;
          count__2735_2811 = G__2854;
          i__2736_2812 = G__2855;
          continue;
        } else {
          var vec__2788_2856 = cljs.core.first.call(null, seq__2727_2850__$1);
          var orig_type_2857 = cljs.core.nth.call(null, vec__2788_2856, 0, null);
          var f_2858 = cljs.core.nth.call(null, vec__2788_2856, 1, null);
          var seq__2728_2859 = cljs.core.seq.call(null, cljs.core.get.call(null, dommy.core.special_listener_makers, orig_type_2857, cljs.core.PersistentArrayMap.createAsIfByAssoc([orig_type_2857, cljs.core.identity])));
          var chunk__2730_2860 = null;
          var count__2731_2861 = 0;
          var i__2732_2862 = 0;
          while (true) {
            if (i__2732_2862 < count__2731_2861) {
              var vec__2797_2863 = cljs.core._nth.call(null, chunk__2730_2860, i__2732_2862);
              var actual_type_2864 = cljs.core.nth.call(null, vec__2797_2863, 0, null);
              var __2865 = cljs.core.nth.call(null, vec__2797_2863, 1, null);
              var keys_2866 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [selector_2808, actual_type_2864, f_2858], null);
              var canonical_f_2867 = cljs.core.get_in.call(null, dommy.core.event_listeners.call(null, elem_2807), keys_2866);
              dommy.core.update_event_listeners_BANG_.call(null, elem_2807, dommy.utils.dissoc_in, keys_2866);
              if (cljs.core.truth_(elem_2807.removeEventListener)) {
                elem_2807.removeEventListener(cljs.core.name.call(null, actual_type_2864), canonical_f_2867);
              } else {
                elem_2807.detachEvent(cljs.core.name.call(null, actual_type_2864), canonical_f_2867);
              }
              var G__2868 = seq__2728_2859;
              var G__2869 = chunk__2730_2860;
              var G__2870 = count__2731_2861;
              var G__2871 = i__2732_2862 + 1;
              seq__2728_2859 = G__2868;
              chunk__2730_2860 = G__2869;
              count__2731_2861 = G__2870;
              i__2732_2862 = G__2871;
              continue;
            } else {
              var temp__5735__auto___2872__$1 = cljs.core.seq.call(null, seq__2728_2859);
              if (temp__5735__auto___2872__$1) {
                var seq__2728_2873__$1 = temp__5735__auto___2872__$1;
                if (cljs.core.chunked_seq_QMARK_.call(null, seq__2728_2873__$1)) {
                  var c__4556__auto___2874 = cljs.core.chunk_first.call(null, seq__2728_2873__$1);
                  var G__2875 = cljs.core.chunk_rest.call(null, seq__2728_2873__$1);
                  var G__2876 = c__4556__auto___2874;
                  var G__2877 = cljs.core.count.call(null, c__4556__auto___2874);
                  var G__2878 = 0;
                  seq__2728_2859 = G__2875;
                  chunk__2730_2860 = G__2876;
                  count__2731_2861 = G__2877;
                  i__2732_2862 = G__2878;
                  continue;
                } else {
                  var vec__2800_2879 = cljs.core.first.call(null, seq__2728_2873__$1);
                  var actual_type_2880 = cljs.core.nth.call(null, vec__2800_2879, 0, null);
                  var __2881 = cljs.core.nth.call(null, vec__2800_2879, 1, null);
                  var keys_2882 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [selector_2808, actual_type_2880, f_2858], null);
                  var canonical_f_2883 = cljs.core.get_in.call(null, dommy.core.event_listeners.call(null, elem_2807), keys_2882);
                  dommy.core.update_event_listeners_BANG_.call(null, elem_2807, dommy.utils.dissoc_in, keys_2882);
                  if (cljs.core.truth_(elem_2807.removeEventListener)) {
                    elem_2807.removeEventListener(cljs.core.name.call(null, actual_type_2880), canonical_f_2883);
                  } else {
                    elem_2807.detachEvent(cljs.core.name.call(null, actual_type_2880), canonical_f_2883);
                  }
                  var G__2884 = cljs.core.next.call(null, seq__2728_2873__$1);
                  var G__2885 = null;
                  var G__2886 = 0;
                  var G__2887 = 0;
                  seq__2728_2859 = G__2884;
                  chunk__2730_2860 = G__2885;
                  count__2731_2861 = G__2886;
                  i__2732_2862 = G__2887;
                  continue;
                }
              } else {
              }
            }
            break;
          }
          var G__2888 = cljs.core.next.call(null, seq__2727_2850__$1);
          var G__2889 = null;
          var G__2890 = 0;
          var G__2891 = 0;
          seq__2727_2809 = G__2888;
          chunk__2734_2810 = G__2889;
          count__2735_2811 = G__2890;
          i__2736_2812 = G__2891;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return elem_sel;
};
dommy.core.unlisten_BANG_.cljs$lang$maxFixedArity = 1;
dommy.core.unlisten_BANG_.cljs$lang$applyTo = function(seq2722) {
  var G__2723 = cljs.core.first.call(null, seq2722);
  var seq2722__$1 = cljs.core.next.call(null, seq2722);
  var self__4723__auto__ = this;
  return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__2723, seq2722__$1);
};
dommy.core.listen_once_BANG_ = function dommy$core$listen_once_BANG_(var_args) {
  var args__4742__auto__ = [];
  var len__4736__auto___2913 = arguments.length;
  var i__4737__auto___2914 = 0;
  while (true) {
    if (i__4737__auto___2914 < len__4736__auto___2913) {
      args__4742__auto__.push(arguments[i__4737__auto___2914]);
      var G__2915 = i__4737__auto___2914 + 1;
      i__4737__auto___2914 = G__2915;
      continue;
    } else {
    }
    break;
  }
  var argseq__4743__auto__ = 1 < args__4742__auto__.length ? new cljs.core.IndexedSeq(args__4742__auto__.slice(1), 0, null) : null;
  return dommy.core.listen_once_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__4743__auto__);
};
dommy.core.listen_once_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(elem_sel, type_fs) {
  if (cljs.core.even_QMARK_.call(null, cljs.core.count.call(null, type_fs))) {
  } else {
    throw new Error("Assert failed: (even? (count type-fs))");
  }
  var vec__2894_2916 = dommy.core.elem_and_selector.call(null, elem_sel);
  var elem_2917 = cljs.core.nth.call(null, vec__2894_2916, 0, null);
  var selector_2918 = cljs.core.nth.call(null, vec__2894_2916, 1, null);
  var seq__2897_2919 = cljs.core.seq.call(null, cljs.core.partition.call(null, 2, type_fs));
  var chunk__2898_2920 = null;
  var count__2899_2921 = 0;
  var i__2900_2922 = 0;
  while (true) {
    if (i__2900_2922 < count__2899_2921) {
      var vec__2907_2923 = cljs.core._nth.call(null, chunk__2898_2920, i__2900_2922);
      var type_2924 = cljs.core.nth.call(null, vec__2907_2923, 0, null);
      var f_2925 = cljs.core.nth.call(null, vec__2907_2923, 1, null);
      dommy.core.listen_BANG_.call(null, elem_sel, type_2924, function(seq__2897_2919, chunk__2898_2920, count__2899_2921, i__2900_2922, vec__2907_2923, type_2924, f_2925, vec__2894_2916, elem_2917, selector_2918) {
        return function dommy$core$this_fn(e) {
          dommy.core.unlisten_BANG_.call(null, elem_sel, type_2924, dommy$core$this_fn);
          return f_2925.call(null, e);
        };
      }(seq__2897_2919, chunk__2898_2920, count__2899_2921, i__2900_2922, vec__2907_2923, type_2924, f_2925, vec__2894_2916, elem_2917, selector_2918));
      var G__2926 = seq__2897_2919;
      var G__2927 = chunk__2898_2920;
      var G__2928 = count__2899_2921;
      var G__2929 = i__2900_2922 + 1;
      seq__2897_2919 = G__2926;
      chunk__2898_2920 = G__2927;
      count__2899_2921 = G__2928;
      i__2900_2922 = G__2929;
      continue;
    } else {
      var temp__5735__auto___2930 = cljs.core.seq.call(null, seq__2897_2919);
      if (temp__5735__auto___2930) {
        var seq__2897_2931__$1 = temp__5735__auto___2930;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__2897_2931__$1)) {
          var c__4556__auto___2932 = cljs.core.chunk_first.call(null, seq__2897_2931__$1);
          var G__2933 = cljs.core.chunk_rest.call(null, seq__2897_2931__$1);
          var G__2934 = c__4556__auto___2932;
          var G__2935 = cljs.core.count.call(null, c__4556__auto___2932);
          var G__2936 = 0;
          seq__2897_2919 = G__2933;
          chunk__2898_2920 = G__2934;
          count__2899_2921 = G__2935;
          i__2900_2922 = G__2936;
          continue;
        } else {
          var vec__2910_2937 = cljs.core.first.call(null, seq__2897_2931__$1);
          var type_2938 = cljs.core.nth.call(null, vec__2910_2937, 0, null);
          var f_2939 = cljs.core.nth.call(null, vec__2910_2937, 1, null);
          dommy.core.listen_BANG_.call(null, elem_sel, type_2938, function(seq__2897_2919, chunk__2898_2920, count__2899_2921, i__2900_2922, vec__2910_2937, type_2938, f_2939, seq__2897_2931__$1, temp__5735__auto___2930, vec__2894_2916, elem_2917, selector_2918) {
            return function dommy$core$this_fn(e) {
              dommy.core.unlisten_BANG_.call(null, elem_sel, type_2938, dommy$core$this_fn);
              return f_2939.call(null, e);
            };
          }(seq__2897_2919, chunk__2898_2920, count__2899_2921, i__2900_2922, vec__2910_2937, type_2938, f_2939, seq__2897_2931__$1, temp__5735__auto___2930, vec__2894_2916, elem_2917, selector_2918));
          var G__2940 = cljs.core.next.call(null, seq__2897_2931__$1);
          var G__2941 = null;
          var G__2942 = 0;
          var G__2943 = 0;
          seq__2897_2919 = G__2940;
          chunk__2898_2920 = G__2941;
          count__2899_2921 = G__2942;
          i__2900_2922 = G__2943;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return elem_sel;
};
dommy.core.listen_once_BANG_.cljs$lang$maxFixedArity = 1;
dommy.core.listen_once_BANG_.cljs$lang$applyTo = function(seq2892) {
  var G__2893 = cljs.core.first.call(null, seq2892);
  var seq2892__$1 = cljs.core.next.call(null, seq2892);
  var self__4723__auto__ = this;
  return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__2893, seq2892__$1);
};
goog.provide("weather_canvas.canvas_buffer");
goog.require("cljs.core");
goog.require("dommy.core");
weather_canvas.canvas_buffer.size_x = 3;
weather_canvas.canvas_buffer.size_y = 16;
weather_canvas.canvas_buffer.canvas_buffer = function weather_canvas$canvas_buffer$canvas_buffer(buffer_id) {
  var canvas = document.querySelector(dommy.core.selector.call(null, buffer_id));
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "canvas", "canvas", -1798817489), weather_canvas.canvas_buffer.init_canvas.call(null, canvas, 40), new cljs.core.Keyword(null, "context", "context", -830191113), canvas.getContext("2d")], null);
};
weather_canvas.canvas_buffer.init_canvas = function weather_canvas$canvas_buffer$init_canvas(canvas, years) {
  canvas.width = 366 * weather_canvas.canvas_buffer.size_x;
  return canvas.height = years * weather_canvas.canvas_buffer.size_y;
};
weather_canvas.canvas_buffer.draw_rectangle = function weather_canvas$canvas_buffer$draw_rectangle(buffer, position, dimensions, color) {
  var ctx = (new cljs.core.Keyword(null, "context", "context", -830191113)).cljs$core$IFn$_invoke$arity$1(buffer);
  ctx.fillStyle = color;
  return ctx.fillRect(cljs.core.first.call(null, position), cljs.core.second.call(null, position), cljs.core.first.call(null, dimensions), cljs.core.second.call(null, dimensions));
};
weather_canvas.canvas_buffer.draw_text = function weather_canvas$canvas_buffer$draw_text(buffer, text, position, font_size, color) {
  var ctx = (new cljs.core.Keyword(null, "context", "context", -830191113)).cljs$core$IFn$_invoke$arity$1(buffer);
  ctx.fillStyle = color;
  ctx.font = [cljs.core.str.cljs$core$IFn$_invoke$arity$1(font_size), "px Arial"].join("");
  ctx.fillText(text, cljs.core.first.call(null, position), cljs.core.second.call(null, position));
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [ctx.measureText(text).width, font_size], null);
};
goog.provide("goog.string.format");
goog.require("goog.string");
goog.string.format = function(formatString, var_args) {
  var args = Array.prototype.slice.call(arguments);
  var template = args.shift();
  if (typeof template == "undefined") {
    throw new Error("[goog.string.format] Template required");
  }
  var formatRe = /%([0\- \+]*)(\d+)?(\.(\d+))?([%sfdiu])/g;
  function replacerDemuxer(match, flags, width, dotp, precision, type, offset, wholeString) {
    if (type == "%") {
      return "%";
    }
    var value = args.shift();
    if (typeof value == "undefined") {
      throw new Error("[goog.string.format] Not enough arguments");
    }
    arguments[0] = value;
    return goog.string.format.demuxes_[type].apply(null, arguments);
  }
  return template.replace(formatRe, replacerDemuxer);
};
goog.string.format.demuxes_ = {};
goog.string.format.demuxes_["s"] = function(value, flags, width, dotp, precision, type, offset, wholeString) {
  var replacement = value;
  if (isNaN(width) || width == "" || replacement.length >= Number(width)) {
    return replacement;
  }
  if (flags.indexOf("-", 0) > -1) {
    replacement = replacement + goog.string.repeat(" ", Number(width) - replacement.length);
  } else {
    replacement = goog.string.repeat(" ", Number(width) - replacement.length) + replacement;
  }
  return replacement;
};
goog.string.format.demuxes_["f"] = function(value, flags, width, dotp, precision, type, offset, wholeString) {
  var replacement = value.toString();
  if (!(isNaN(precision) || precision == "")) {
    replacement = parseFloat(value).toFixed(precision);
  }
  var sign;
  if (Number(value) < 0) {
    sign = "-";
  } else {
    if (flags.indexOf("+") >= 0) {
      sign = "+";
    } else {
      if (flags.indexOf(" ") >= 0) {
        sign = " ";
      } else {
        sign = "";
      }
    }
  }
  if (Number(value) >= 0) {
    replacement = sign + replacement;
  }
  if (isNaN(width) || replacement.length >= Number(width)) {
    return replacement;
  }
  replacement = isNaN(precision) ? Math.abs(Number(value)).toString() : Math.abs(Number(value)).toFixed(precision);
  var padCount = Number(width) - replacement.length - sign.length;
  if (flags.indexOf("-", 0) >= 0) {
    replacement = sign + replacement + goog.string.repeat(" ", padCount);
  } else {
    var paddingChar = flags.indexOf("0", 0) >= 0 ? "0" : " ";
    replacement = sign + goog.string.repeat(paddingChar, padCount) + replacement;
  }
  return replacement;
};
goog.string.format.demuxes_["d"] = function(value, flags, width, dotp, precision, type, offset, wholeString) {
  return goog.string.format.demuxes_["f"](parseInt(value, 10), flags, width, dotp, 0, type, offset, wholeString);
};
goog.string.format.demuxes_["i"] = goog.string.format.demuxes_["d"];
goog.string.format.demuxes_["u"] = goog.string.format.demuxes_["d"];
goog.provide("weather_canvas.templates");
goog.require("cljs.core");
goog.require("hipo.core");
goog.require("goog.string");
goog.require("goog.string.format");
weather_canvas.templates.years = cljs.core.reverse.call(null, cljs.core.range.call(null, 1844, 1 + (new Date).getFullYear()));
weather_canvas.templates.id_generator = function weather_canvas$templates$id_generator(prefix) {
  return function(suffix) {
    return goog.string.format("%s-%s", prefix, suffix);
  };
};
weather_canvas.templates.id_stripper = function weather_canvas$templates$id_stripper(prefix) {
  return function(id) {
    return cljs.core.second.call(null, clojure.string.split.call(null, id, [cljs.core.str.cljs$core$IFn$_invoke$arity$1(prefix), "-"].join("")));
  };
};
weather_canvas.templates.query_form = function weather_canvas$templates$query_form(sequence_no) {
  var id_prefix = goog.string.format("query-form-%d", sequence_no);
  var mk_id = weather_canvas.templates.id_generator.call(null, id_prefix);
  var year_options_2 = cljs.core.apply.call(null, cljs.core.vector, function() {
    var iter__4529__auto__ = function weather_canvas$templates$query_form_$_iter__2439(s__2440) {
      return new cljs.core.LazySeq(null, function() {
        var s__2440__$1 = s__2440;
        while (true) {
          var temp__5735__auto__ = cljs.core.seq.call(null, s__2440__$1);
          if (temp__5735__auto__) {
            var s__2440__$2 = temp__5735__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, s__2440__$2)) {
              var c__4527__auto__ = cljs.core.chunk_first.call(null, s__2440__$2);
              var size__4528__auto__ = cljs.core.count.call(null, c__4527__auto__);
              var b__2442 = cljs.core.chunk_buffer.call(null, size__4528__auto__);
              if (function() {
                var i__2441 = 0;
                while (true) {
                  if (i__2441 < size__4528__auto__) {
                    var year = cljs.core._nth.call(null, c__4527__auto__, i__2441);
                    cljs.core.chunk_append.call(null, b__2442, cljs.core._EQ_.call(null, (new Date).getFullYear(), year) ? new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "option", "option", 65132272), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), year, new cljs.core.Keyword(null, "selected", "selected", 574897764), "selected"], null), year], null) : new cljs.core.PersistentVector(null, 
                    3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "option", "option", 65132272), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "value", "value", 305978217), year], null), year], null));
                    var G__2448 = i__2441 + 1;
                    i__2441 = G__2448;
                    continue;
                  } else {
                    return true;
                  }
                  break;
                }
              }()) {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__2442), weather_canvas$templates$query_form_$_iter__2439.call(null, cljs.core.chunk_rest.call(null, s__2440__$2)));
              } else {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__2442), null);
              }
            } else {
              var year = cljs.core.first.call(null, s__2440__$2);
              return cljs.core.cons.call(null, cljs.core._EQ_.call(null, (new Date).getFullYear(), year) ? new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "option", "option", 65132272), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), year, new cljs.core.Keyword(null, "selected", "selected", 574897764), "selected"], null), year], null) : new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, 
              [new cljs.core.Keyword(null, "option", "option", 65132272), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "value", "value", 305978217), year], null), year], null), weather_canvas$templates$query_form_$_iter__2439.call(null, cljs.core.rest.call(null, s__2440__$2)));
            }
          } else {
            return null;
          }
          break;
        }
      }, null, null);
    };
    return iter__4529__auto__.call(null, weather_canvas.templates.years);
  }());
  var year_options_1 = cljs.core.apply.call(null, cljs.core.vector, function() {
    var iter__4529__auto__ = function weather_canvas$templates$query_form_$_iter__2443(s__2444) {
      return new cljs.core.LazySeq(null, function() {
        var s__2444__$1 = s__2444;
        while (true) {
          var temp__5735__auto__ = cljs.core.seq.call(null, s__2444__$1);
          if (temp__5735__auto__) {
            var s__2444__$2 = temp__5735__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, s__2444__$2)) {
              var c__4527__auto__ = cljs.core.chunk_first.call(null, s__2444__$2);
              var size__4528__auto__ = cljs.core.count.call(null, c__4527__auto__);
              var b__2446 = cljs.core.chunk_buffer.call(null, size__4528__auto__);
              if (function() {
                var i__2445 = 0;
                while (true) {
                  if (i__2445 < size__4528__auto__) {
                    var year = cljs.core._nth.call(null, c__4527__auto__, i__2445);
                    cljs.core.chunk_append.call(null, b__2446, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "option", "option", 65132272), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "value", "value", 305978217), year], null), year], null));
                    var G__2449 = i__2445 + 1;
                    i__2445 = G__2449;
                    continue;
                  } else {
                    return true;
                  }
                  break;
                }
              }()) {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__2446), weather_canvas$templates$query_form_$_iter__2443.call(null, cljs.core.chunk_rest.call(null, s__2444__$2)));
              } else {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__2446), null);
              }
            } else {
              var year = cljs.core.first.call(null, s__2444__$2);
              return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "option", "option", 65132272), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "value", "value", 305978217), year], null), year], null), weather_canvas$templates$query_form_$_iter__2443.call(null, cljs.core.rest.call(null, s__2444__$2)));
            }
          } else {
            return null;
          }
          break;
        }
      }, null, null);
    };
    return iter__4529__auto__.call(null, weather_canvas.templates.years);
  }());
  var v2447 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div.query-form-container", "div.query-form-container", -1315864630), new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "form", "form", -1624062471), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "id", "id", -1388402092), id_prefix, new cljs.core.Keyword(null, "autocomplete", "autocomplete", 
  1041133913), "off"], null), new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div.form-grouping", "div.form-grouping", 760173441), weather_canvas.templates.with_label.call(null, "vuodesta", new cljs.core.Keyword(null, "select", "select", 1147833503), mk_id.call(null, "year-start"), cljs.core.conj.call(null, year_options_1, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "option", 
  "option", 65132272), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), -1, new cljs.core.Keyword(null, "selected", "selected", 574897764), "selected"], null), "valitse"], null)), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "class", "class", -2030961996), "year", new cljs.core.Keyword(null, "data-bound", "data-bound", -845833043), "start"], null)), weather_canvas.templates.with_label.call(null, "vuoteen", new cljs.core.Keyword(null, 
  "select", "select", 1147833503), mk_id.call(null, "year-end"), year_options_2, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "class", "class", -2030961996), "year", new cljs.core.Keyword(null, "data-bound", "data-bound", -845833043), "end"], null)), weather_canvas.templates.with_label.call(null, "paikassa", new cljs.core.Keyword(null, "input", "input", 556931961), mk_id.call(null, "location"), null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, 
  "autocomplete", "autocomplete", 1041133913), "off", new cljs.core.Keyword(null, "type", "type", 1174270348), "text", new cljs.core.Keyword(null, "disabled", "disabled", -1529784218), "disabled"], null))], null), new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div.form-grouping", "div.form-grouping", 760173441), weather_canvas.templates.with_label.call(null, "piirrä", new cljs.core.Keyword(null, "select", "select", 1147833503), mk_id.call(null, 
  "quantity"), new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "option", "option", 65132272), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "value", "value", 305978217), "tday"], null), "keskilämpötila"], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "option", 
  "option", 65132272), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "value", "value", 305978217), "tmax"], null), "maksimilämpötila"], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "option", "option", 65132272), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "value", "value", 305978217), "tmin"], null), "minimilämpötila"], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "option", "option", 65132272), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "value", "value", 305978217), "rrday"], null), "sademäärä"], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "option", "option", 65132272), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "value", "value", 305978217), "snow"], null), "lumensyvyys"], null)], null)), weather_canvas.templates.with_label.call(null, 
  "järjestä", new cljs.core.Keyword(null, "select", "select", 1147833503), mk_id.call(null, "order"), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "option", "option", 65132272), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "value", "value", 305978217), "default"], null), "ajan mukaan"], null), new cljs.core.PersistentVector(null, 
  3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "option", "option", 65132272), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "value", "value", 305978217), "value"], null), "mittausarvon mukaan"], null)], null), weather_canvas.templates.c), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "input", "input", 556931961), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, 
  "class", "class", -2030961996), "submit", new cljs.core.Keyword(null, "type", "type", 1174270348), "submit", new cljs.core.Keyword(null, "value", "value", 305978217), "Toteuta!"], null)], null)], null)], null)], null);
  var el__2425__auto__ = hipo.interpreter.create.call(null, v2447, null);
  hipo.core.set_hiccup_BANG_.call(null, el__2425__auto__, v2447);
  return el__2425__auto__;
};
weather_canvas.templates.with_label = function weather_canvas$templates$with_label(var_args) {
  var args__4742__auto__ = [];
  var len__4736__auto___2455 = arguments.length;
  var i__4737__auto___2456 = 0;
  while (true) {
    if (i__4737__auto___2456 < len__4736__auto___2455) {
      args__4742__auto__.push(arguments[i__4737__auto___2456]);
      var G__2457 = i__4737__auto___2456 + 1;
      i__4737__auto___2456 = G__2457;
      continue;
    } else {
    }
    break;
  }
  var argseq__4743__auto__ = 4 < args__4742__auto__.length ? new cljs.core.IndexedSeq(args__4742__auto__.slice(4), 0, null) : null;
  return weather_canvas.templates.with_label.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], argseq__4743__auto__);
};
weather_canvas.templates.with_label.cljs$core$IFn$_invoke$arity$variadic = function(label, type, id, contents, attrs) {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "span", "span", 1394872991), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", -2030961996), "form-element"], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "label", "label", 1718410804), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "for", "for", 
  -1323786319), id], null), label], null), cljs.core.into.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [type, cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "id", "id", -1388402092), id, new cljs.core.Keyword(null, "name", "name", 1843675177), id], null), cljs.core.first.call(null, attrs))], null), contents)], null);
};
weather_canvas.templates.with_label.cljs$lang$maxFixedArity = 4;
weather_canvas.templates.with_label.cljs$lang$applyTo = function(seq2450) {
  var G__2451 = cljs.core.first.call(null, seq2450);
  var seq2450__$1 = cljs.core.next.call(null, seq2450);
  var G__2452 = cljs.core.first.call(null, seq2450__$1);
  var seq2450__$2 = cljs.core.next.call(null, seq2450__$1);
  var G__2453 = cljs.core.first.call(null, seq2450__$2);
  var seq2450__$3 = cljs.core.next.call(null, seq2450__$2);
  var G__2454 = cljs.core.first.call(null, seq2450__$3);
  var seq2450__$4 = cljs.core.next.call(null, seq2450__$3);
  var self__4723__auto__ = this;
  return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__2451, G__2452, G__2453, G__2454, seq2450__$4);
};
goog.provide("goog.ui.ac.ArrayMatcher");
goog.require("goog.string");
goog.ui.ac.ArrayMatcher = function(rows, opt_noSimilar) {
  this.rows_ = rows || [];
  this.useSimilar_ = !opt_noSimilar;
};
goog.ui.ac.ArrayMatcher.prototype.setRows = function(rows) {
  this.rows_ = rows || [];
};
goog.ui.ac.ArrayMatcher.prototype.requestMatchingRows = function(token, maxMatches, matchHandler, opt_fullString) {
  var matches = this.useSimilar_ ? goog.ui.ac.ArrayMatcher.getMatchesForRows(token, maxMatches, this.rows_) : this.getPrefixMatches(token, maxMatches);
  matchHandler(token, matches);
};
goog.ui.ac.ArrayMatcher.getMatchesForRows = function(token, maxMatches, rows) {
  var matches = goog.ui.ac.ArrayMatcher.getPrefixMatchesForRows(token, maxMatches, rows);
  if (matches.length == 0) {
    matches = goog.ui.ac.ArrayMatcher.getSimilarMatchesForRows(token, maxMatches, rows);
  }
  return matches;
};
goog.ui.ac.ArrayMatcher.prototype.getPrefixMatches = function(token, maxMatches) {
  return goog.ui.ac.ArrayMatcher.getPrefixMatchesForRows(token, maxMatches, this.rows_);
};
goog.ui.ac.ArrayMatcher.getPrefixMatchesForRows = function(token, maxMatches, rows) {
  var matches = [];
  if (token != "") {
    var escapedToken = goog.string.regExpEscape(token);
    var matcher = new RegExp("(^|\\W+)" + escapedToken, "i");
    for (var i = 0; i < rows.length && matches.length < maxMatches; i++) {
      var row = rows[i];
      if (String(row).match(matcher)) {
        matches.push(row);
      }
    }
  }
  return matches;
};
goog.ui.ac.ArrayMatcher.prototype.getSimilarRows = function(token, maxMatches) {
  return goog.ui.ac.ArrayMatcher.getSimilarMatchesForRows(token, maxMatches, this.rows_);
};
goog.ui.ac.ArrayMatcher.getSimilarMatchesForRows = function(token, maxMatches, rows) {
  var results = [];
  for (var index = 0; index < rows.length; index++) {
    var row = rows[index];
    var str = token.toLowerCase();
    var txt = String(row).toLowerCase();
    var score = 0;
    if (txt.indexOf(str) != -1) {
      score = parseInt((txt.indexOf(str) / 4).toString(), 10);
    } else {
      var arr = str.split("");
      var lastPos = -1;
      var penalty = 10;
      for (var i = 0, c; c = arr[i]; i++) {
        var pos = txt.indexOf(c);
        if (pos > lastPos) {
          var diff = pos - lastPos - 1;
          if (diff > penalty - 5) {
            diff = penalty - 5;
          }
          score += diff;
          lastPos = pos;
        } else {
          score += penalty;
          penalty += 5;
        }
      }
    }
    if (score < str.length * 6) {
      results.push({str:row, score:score, index:index});
    }
  }
  results.sort(function(a, b) {
    var diff = a.score - b.score;
    if (diff != 0) {
      return diff;
    }
    return a.index - b.index;
  });
  var matches = [];
  for (var i = 0; i < maxMatches && i < results.length; i++) {
    matches.push(results[i].str);
  }
  return matches;
};
goog.provide("goog.debug.errorcontext");
goog.debug.errorcontext.addErrorContext = function(err, contextKey, contextValue) {
  if (!err[goog.debug.errorcontext.CONTEXT_KEY_]) {
    err[goog.debug.errorcontext.CONTEXT_KEY_] = {};
  }
  err[goog.debug.errorcontext.CONTEXT_KEY_][contextKey] = contextValue;
};
goog.debug.errorcontext.getErrorContext = function(err) {
  return err[goog.debug.errorcontext.CONTEXT_KEY_] || {};
};
goog.debug.errorcontext.CONTEXT_KEY_ = "__closure__error__context__984382";
goog.provide("goog.debug");
goog.require("goog.array");
goog.require("goog.debug.errorcontext");
goog.require("goog.userAgent");
goog.debug.LOGGING_ENABLED = goog.define("goog.debug.LOGGING_ENABLED", goog.DEBUG);
goog.debug.FORCE_SLOPPY_STACKS = goog.define("goog.debug.FORCE_SLOPPY_STACKS", false);
goog.debug.catchErrors = function(logFunc, opt_cancel, opt_target) {
  var target = opt_target || goog.global;
  var oldErrorHandler = target.onerror;
  var retVal = !!opt_cancel;
  if (goog.userAgent.WEBKIT && !goog.userAgent.isVersionOrHigher("535.3")) {
    retVal = !retVal;
  }
  target.onerror = function(message, url, line, opt_col, opt_error) {
    if (oldErrorHandler) {
      oldErrorHandler(message, url, line, opt_col, opt_error);
    }
    logFunc({message:message, fileName:url, line:line, lineNumber:line, col:opt_col, error:opt_error});
    return retVal;
  };
};
goog.debug.expose = function(obj, opt_showFn) {
  if (typeof obj == "undefined") {
    return "undefined";
  }
  if (obj == null) {
    return "NULL";
  }
  var str = [];
  for (var x in obj) {
    if (!opt_showFn && goog.isFunction(obj[x])) {
      continue;
    }
    var s = x + " \x3d ";
    try {
      s += obj[x];
    } catch (e) {
      s += "*** " + e + " ***";
    }
    str.push(s);
  }
  return str.join("\n");
};
goog.debug.deepExpose = function(obj, opt_showFn) {
  var str = [];
  var uidsToCleanup = [];
  var ancestorUids = {};
  var helper = function(obj, space) {
    var nestspace = space + "  ";
    var indentMultiline = function(str) {
      return str.replace(/\n/g, "\n" + space);
    };
    try {
      if (obj === undefined) {
        str.push("undefined");
      } else {
        if (obj === null) {
          str.push("NULL");
        } else {
          if (typeof obj === "string") {
            str.push('"' + indentMultiline(obj) + '"');
          } else {
            if (goog.isFunction(obj)) {
              str.push(indentMultiline(String(obj)));
            } else {
              if (goog.isObject(obj)) {
                if (!goog.hasUid(obj)) {
                  uidsToCleanup.push(obj);
                }
                var uid = goog.getUid(obj);
                if (ancestorUids[uid]) {
                  str.push("*** reference loop detected (id\x3d" + uid + ") ***");
                } else {
                  ancestorUids[uid] = true;
                  str.push("{");
                  for (var x in obj) {
                    if (!opt_showFn && goog.isFunction(obj[x])) {
                      continue;
                    }
                    str.push("\n");
                    str.push(nestspace);
                    str.push(x + " \x3d ");
                    helper(obj[x], nestspace);
                  }
                  str.push("\n" + space + "}");
                  delete ancestorUids[uid];
                }
              } else {
                str.push(obj);
              }
            }
          }
        }
      }
    } catch (e) {
      str.push("*** " + e + " ***");
    }
  };
  helper(obj, "");
  for (var i = 0; i < uidsToCleanup.length; i++) {
    goog.removeUid(uidsToCleanup[i]);
  }
  return str.join("");
};
goog.debug.exposeArray = function(arr) {
  var str = [];
  for (var i = 0; i < arr.length; i++) {
    if (goog.isArray(arr[i])) {
      str.push(goog.debug.exposeArray(arr[i]));
    } else {
      str.push(arr[i]);
    }
  }
  return "[ " + str.join(", ") + " ]";
};
goog.debug.normalizeErrorObject = function(err) {
  var href = goog.getObjectByName("window.location.href");
  if (err == null) {
    err = 'Unknown Error of type "null/undefined"';
  }
  if (typeof err === "string") {
    return {"message":err, "name":"Unknown error", "lineNumber":"Not available", "fileName":href, "stack":"Not available"};
  }
  var lineNumber, fileName;
  var threwError = false;
  try {
    lineNumber = err.lineNumber || err.line || "Not available";
  } catch (e) {
    lineNumber = "Not available";
    threwError = true;
  }
  try {
    fileName = err.fileName || err.filename || err.sourceURL || goog.global["$googDebugFname"] || href;
  } catch (e) {
    fileName = "Not available";
    threwError = true;
  }
  if (threwError || !err.lineNumber || !err.fileName || !err.stack || !err.message || !err.name) {
    var message = err.message;
    if (message == null) {
      if (err.constructor && err.constructor instanceof Function) {
        var ctorName = err.constructor.name ? err.constructor.name : goog.debug.getFunctionName(err.constructor);
        message = 'Unknown Error of type "' + ctorName + '"';
      } else {
        message = "Unknown Error of unknown type";
      }
    }
    return {"message":message, "name":err.name || "UnknownError", "lineNumber":lineNumber, "fileName":fileName, "stack":err.stack || "Not available"};
  }
  return err;
};
goog.debug.enhanceError = function(err, opt_message) {
  var error;
  if (!(err instanceof Error)) {
    error = Error(err);
    if (Error.captureStackTrace) {
      Error.captureStackTrace(error, goog.debug.enhanceError);
    }
  } else {
    error = err;
  }
  if (!error.stack) {
    error.stack = goog.debug.getStacktrace(goog.debug.enhanceError);
  }
  if (opt_message) {
    var x = 0;
    while (error["message" + x]) {
      ++x;
    }
    error["message" + x] = String(opt_message);
  }
  return error;
};
goog.debug.enhanceErrorWithContext = function(err, opt_context) {
  var error = goog.debug.enhanceError(err);
  if (opt_context) {
    for (var key in opt_context) {
      goog.debug.errorcontext.addErrorContext(error, key, opt_context[key]);
    }
  }
  return error;
};
goog.debug.getStacktraceSimple = function(opt_depth) {
  if (!goog.debug.FORCE_SLOPPY_STACKS) {
    var stack = goog.debug.getNativeStackTrace_(goog.debug.getStacktraceSimple);
    if (stack) {
      return stack;
    }
  }
  var sb = [];
  var fn = arguments.callee.caller;
  var depth = 0;
  while (fn && (!opt_depth || depth < opt_depth)) {
    sb.push(goog.debug.getFunctionName(fn));
    sb.push("()\n");
    try {
      fn = fn.caller;
    } catch (e) {
      sb.push("[exception trying to get caller]\n");
      break;
    }
    depth++;
    if (depth >= goog.debug.MAX_STACK_DEPTH) {
      sb.push("[...long stack...]");
      break;
    }
  }
  if (opt_depth && depth >= opt_depth) {
    sb.push("[...reached max depth limit...]");
  } else {
    sb.push("[end]");
  }
  return sb.join("");
};
goog.debug.MAX_STACK_DEPTH = 50;
goog.debug.getNativeStackTrace_ = function(fn) {
  var tempErr = new Error;
  if (Error.captureStackTrace) {
    Error.captureStackTrace(tempErr, fn);
    return String(tempErr.stack);
  } else {
    try {
      throw tempErr;
    } catch (e) {
      tempErr = e;
    }
    var stack = tempErr.stack;
    if (stack) {
      return String(stack);
    }
  }
  return null;
};
goog.debug.getStacktrace = function(fn) {
  var stack;
  if (!goog.debug.FORCE_SLOPPY_STACKS) {
    var contextFn = fn || goog.debug.getStacktrace;
    stack = goog.debug.getNativeStackTrace_(contextFn);
  }
  if (!stack) {
    stack = goog.debug.getStacktraceHelper_(fn || arguments.callee.caller, []);
  }
  return stack;
};
goog.debug.getStacktraceHelper_ = function(fn, visited) {
  var sb = [];
  if (goog.array.contains(visited, fn)) {
    sb.push("[...circular reference...]");
  } else {
    if (fn && visited.length < goog.debug.MAX_STACK_DEPTH) {
      sb.push(goog.debug.getFunctionName(fn) + "(");
      var args = fn.arguments;
      for (var i = 0; args && i < args.length; i++) {
        if (i > 0) {
          sb.push(", ");
        }
        var argDesc;
        var arg = args[i];
        switch(typeof arg) {
          case "object":
            argDesc = arg ? "object" : "null";
            break;
          case "string":
            argDesc = arg;
            break;
          case "number":
            argDesc = String(arg);
            break;
          case "boolean":
            argDesc = arg ? "true" : "false";
            break;
          case "function":
            argDesc = goog.debug.getFunctionName(arg);
            argDesc = argDesc ? argDesc : "[fn]";
            break;
          case "undefined":
          default:
            argDesc = typeof arg;
            break;
        }
        if (argDesc.length > 40) {
          argDesc = argDesc.substr(0, 40) + "...";
        }
        sb.push(argDesc);
      }
      visited.push(fn);
      sb.push(")\n");
      try {
        sb.push(goog.debug.getStacktraceHelper_(fn.caller, visited));
      } catch (e) {
        sb.push("[exception trying to get caller]\n");
      }
    } else {
      if (fn) {
        sb.push("[...long stack...]");
      } else {
        sb.push("[end]");
      }
    }
  }
  return sb.join("");
};
goog.debug.getFunctionName = function(fn) {
  if (goog.debug.fnNameCache_[fn]) {
    return goog.debug.fnNameCache_[fn];
  }
  var functionSource = String(fn);
  if (!goog.debug.fnNameCache_[functionSource]) {
    var matches = /function\s+([^\(]+)/m.exec(functionSource);
    if (matches) {
      var method = matches[1];
      goog.debug.fnNameCache_[functionSource] = method;
    } else {
      goog.debug.fnNameCache_[functionSource] = "[Anonymous]";
    }
  }
  return goog.debug.fnNameCache_[functionSource];
};
goog.debug.makeWhitespaceVisible = function(string) {
  return string.replace(/ /g, "[_]").replace(/\f/g, "[f]").replace(/\n/g, "[n]\n").replace(/\r/g, "[r]").replace(/\t/g, "[t]");
};
goog.debug.runtimeType = function(value) {
  if (value instanceof Function) {
    return value.displayName || value.name || "unknown type name";
  } else {
    if (value instanceof Object) {
      return value.constructor.displayName || value.constructor.name || Object.prototype.toString.call(value);
    } else {
      return value === null ? "null" : typeof value;
    }
  }
};
goog.debug.fnNameCache_ = {};
goog.debug.freezeInternal_ = goog.DEBUG && Object.freeze || function(arg) {
  return arg;
};
goog.debug.freeze = function(arg) {
  return {valueOf:function() {
    return goog.debug.freezeInternal_(arg);
  }}.valueOf();
};
goog.provide("goog.events.BrowserFeature");
goog.require("goog.userAgent");
goog.scope(function() {
  goog.events.BrowserFeature = {HAS_W3C_BUTTON:!goog.userAgent.IE || goog.userAgent.isDocumentModeOrHigher(9), HAS_W3C_EVENT_SUPPORT:!goog.userAgent.IE || goog.userAgent.isDocumentModeOrHigher(9), SET_KEY_CODE_TO_PREVENT_DEFAULT:goog.userAgent.IE && !goog.userAgent.isVersionOrHigher("9"), HAS_NAVIGATOR_ONLINE_PROPERTY:!goog.userAgent.WEBKIT || goog.userAgent.isVersionOrHigher("528"), HAS_HTML5_NETWORK_EVENT_SUPPORT:goog.userAgent.GECKO && goog.userAgent.isVersionOrHigher("1.9b") || goog.userAgent.IE && 
  goog.userAgent.isVersionOrHigher("8") || goog.userAgent.OPERA && goog.userAgent.isVersionOrHigher("9.5") || goog.userAgent.WEBKIT && goog.userAgent.isVersionOrHigher("528"), HTML5_NETWORK_EVENTS_FIRE_ON_BODY:goog.userAgent.GECKO && !goog.userAgent.isVersionOrHigher("8") || goog.userAgent.IE && !goog.userAgent.isVersionOrHigher("9"), TOUCH_ENABLED:"ontouchstart" in goog.global || !!(goog.global["document"] && document.documentElement && "ontouchstart" in document.documentElement) || !!(goog.global["navigator"] && 
  (goog.global["navigator"]["maxTouchPoints"] || goog.global["navigator"]["msMaxTouchPoints"])), POINTER_EVENTS:"PointerEvent" in goog.global, MSPOINTER_EVENTS:"MSPointerEvent" in goog.global && !!(goog.global["navigator"] && goog.global["navigator"]["msPointerEnabled"]), PASSIVE_EVENTS:purify(function() {
    if (!goog.global.addEventListener || !Object.defineProperty) {
      return false;
    }
    var passive = false;
    var options = Object.defineProperty({}, "passive", {get:function() {
      passive = true;
    }});
    try {
      goog.global.addEventListener("test", goog.nullFunction, options);
      goog.global.removeEventListener("test", goog.nullFunction, options);
    } catch (e) {
    }
    return passive;
  })};
  function purify(fn) {
    return {valueOf:fn}.valueOf();
  }
});
goog.provide("goog.disposable.IDisposable");
goog.disposable.IDisposable = function() {
};
goog.disposable.IDisposable.prototype.dispose = goog.abstractMethod;
goog.disposable.IDisposable.prototype.isDisposed = goog.abstractMethod;
goog.provide("goog.Disposable");
goog.provide("goog.dispose");
goog.provide("goog.disposeAll");
goog.require("goog.disposable.IDisposable");
goog.Disposable = function() {
  this.creationStack;
  if (goog.Disposable.MONITORING_MODE != goog.Disposable.MonitoringMode.OFF) {
    if (goog.Disposable.INCLUDE_STACK_ON_CREATION) {
      this.creationStack = (new Error).stack;
    }
    goog.Disposable.instances_[goog.getUid(this)] = this;
  }
  this.disposed_ = this.disposed_;
  this.onDisposeCallbacks_ = this.onDisposeCallbacks_;
};
goog.Disposable.MonitoringMode = {OFF:0, PERMANENT:1, INTERACTIVE:2};
goog.Disposable.MONITORING_MODE = goog.define("goog.Disposable.MONITORING_MODE", 0);
goog.Disposable.INCLUDE_STACK_ON_CREATION = goog.define("goog.Disposable.INCLUDE_STACK_ON_CREATION", true);
goog.Disposable.instances_ = {};
goog.Disposable.getUndisposedObjects = function() {
  var ret = [];
  for (var id in goog.Disposable.instances_) {
    if (goog.Disposable.instances_.hasOwnProperty(id)) {
      ret.push(goog.Disposable.instances_[Number(id)]);
    }
  }
  return ret;
};
goog.Disposable.clearUndisposedObjects = function() {
  goog.Disposable.instances_ = {};
};
goog.Disposable.prototype.disposed_ = false;
goog.Disposable.prototype.onDisposeCallbacks_;
goog.Disposable.prototype.isDisposed = function() {
  return this.disposed_;
};
goog.Disposable.prototype.getDisposed = goog.Disposable.prototype.isDisposed;
goog.Disposable.prototype.dispose = function() {
  if (!this.disposed_) {
    this.disposed_ = true;
    this.disposeInternal();
    if (goog.Disposable.MONITORING_MODE != goog.Disposable.MonitoringMode.OFF) {
      var uid = goog.getUid(this);
      if (goog.Disposable.MONITORING_MODE == goog.Disposable.MonitoringMode.PERMANENT && !goog.Disposable.instances_.hasOwnProperty(uid)) {
        throw new Error(this + " did not call the goog.Disposable base " + "constructor or was disposed of after a clearUndisposedObjects " + "call");
      }
      if (goog.Disposable.MONITORING_MODE != goog.Disposable.MonitoringMode.OFF && this.onDisposeCallbacks_ && this.onDisposeCallbacks_.length > 0) {
        throw new Error(this + " did not empty its onDisposeCallbacks queue. This " + "probably means it overrode dispose() or disposeInternal() " + "without calling the superclass' method.");
      }
      delete goog.Disposable.instances_[uid];
    }
  }
};
goog.Disposable.prototype.registerDisposable = function(disposable) {
  this.addOnDisposeCallback(goog.partial(goog.dispose, disposable));
};
goog.Disposable.prototype.addOnDisposeCallback = function(callback, opt_scope) {
  if (this.disposed_) {
    opt_scope !== undefined ? callback.call(opt_scope) : callback();
    return;
  }
  if (!this.onDisposeCallbacks_) {
    this.onDisposeCallbacks_ = [];
  }
  this.onDisposeCallbacks_.push(opt_scope !== undefined ? goog.bind(callback, opt_scope) : callback);
};
goog.Disposable.prototype.disposeInternal = function() {
  if (this.onDisposeCallbacks_) {
    while (this.onDisposeCallbacks_.length) {
      this.onDisposeCallbacks_.shift()();
    }
  }
};
goog.Disposable.isDisposed = function(obj) {
  if (obj && typeof obj.isDisposed == "function") {
    return obj.isDisposed();
  }
  return false;
};
goog.dispose = function(obj) {
  if (obj && typeof obj.dispose == "function") {
    obj.dispose();
  }
};
goog.disposeAll = function(var_args) {
  for (var i = 0, len = arguments.length; i < len; ++i) {
    var disposable = arguments[i];
    if (goog.isArrayLike(disposable)) {
      goog.disposeAll.apply(null, disposable);
    } else {
      goog.dispose(disposable);
    }
  }
};
goog.provide("goog.events.EventId");
goog.events.EventId = function(eventId) {
  this.id = eventId;
};
goog.events.EventId.prototype.toString = function() {
  return this.id;
};
goog.provide("goog.events.Event");
goog.provide("goog.events.EventLike");
goog.require("goog.Disposable");
goog.require("goog.events.EventId");
goog.events.EventLike;
goog.events.Event = function(type, opt_target) {
  this.type = type instanceof goog.events.EventId ? String(type) : type;
  this.target = opt_target;
  this.currentTarget = this.target;
  this.propagationStopped_ = false;
  this.defaultPrevented = false;
  this.returnValue_ = true;
};
goog.events.Event.prototype.stopPropagation = function() {
  this.propagationStopped_ = true;
};
goog.events.Event.prototype.preventDefault = function() {
  this.defaultPrevented = true;
  this.returnValue_ = false;
};
goog.events.Event.stopPropagation = function(e) {
  e.stopPropagation();
};
goog.events.Event.preventDefault = function(e) {
  e.preventDefault();
};
goog.provide("goog.events.EventType");
goog.provide("goog.events.MouseAsMouseEventType");
goog.provide("goog.events.MouseEvents");
goog.provide("goog.events.PointerAsMouseEventType");
goog.provide("goog.events.PointerAsTouchEventType");
goog.provide("goog.events.PointerFallbackEventType");
goog.provide("goog.events.PointerTouchFallbackEventType");
goog.require("goog.events.BrowserFeature");
goog.require("goog.userAgent");
goog.events.getVendorPrefixedName_ = function(eventName) {
  return goog.userAgent.WEBKIT ? "webkit" + eventName : goog.userAgent.OPERA ? "o" + eventName.toLowerCase() : eventName.toLowerCase();
};
goog.events.EventType = {CLICK:"click", RIGHTCLICK:"rightclick", DBLCLICK:"dblclick", AUXCLICK:"auxclick", MOUSEDOWN:"mousedown", MOUSEUP:"mouseup", MOUSEOVER:"mouseover", MOUSEOUT:"mouseout", MOUSEMOVE:"mousemove", MOUSEENTER:"mouseenter", MOUSELEAVE:"mouseleave", MOUSECANCEL:"mousecancel", SELECTIONCHANGE:"selectionchange", SELECTSTART:"selectstart", WHEEL:"wheel", KEYPRESS:"keypress", KEYDOWN:"keydown", KEYUP:"keyup", BLUR:"blur", FOCUS:"focus", DEACTIVATE:"deactivate", FOCUSIN:"focusin", FOCUSOUT:"focusout", 
CHANGE:"change", RESET:"reset", SELECT:"select", SUBMIT:"submit", INPUT:"input", PROPERTYCHANGE:"propertychange", DRAGSTART:"dragstart", DRAG:"drag", DRAGENTER:"dragenter", DRAGOVER:"dragover", DRAGLEAVE:"dragleave", DROP:"drop", DRAGEND:"dragend", TOUCHSTART:"touchstart", TOUCHMOVE:"touchmove", TOUCHEND:"touchend", TOUCHCANCEL:"touchcancel", BEFOREUNLOAD:"beforeunload", CONSOLEMESSAGE:"consolemessage", CONTEXTMENU:"contextmenu", DEVICECHANGE:"devicechange", DEVICEMOTION:"devicemotion", DEVICEORIENTATION:"deviceorientation", 
DOMCONTENTLOADED:"DOMContentLoaded", ERROR:"error", HELP:"help", LOAD:"load", LOSECAPTURE:"losecapture", ORIENTATIONCHANGE:"orientationchange", READYSTATECHANGE:"readystatechange", RESIZE:"resize", SCROLL:"scroll", UNLOAD:"unload", CANPLAY:"canplay", CANPLAYTHROUGH:"canplaythrough", DURATIONCHANGE:"durationchange", EMPTIED:"emptied", ENDED:"ended", LOADEDDATA:"loadeddata", LOADEDMETADATA:"loadedmetadata", PAUSE:"pause", PLAY:"play", PLAYING:"playing", PROGRESS:"progress", RATECHANGE:"ratechange", 
SEEKED:"seeked", SEEKING:"seeking", STALLED:"stalled", SUSPEND:"suspend", TIMEUPDATE:"timeupdate", VOLUMECHANGE:"volumechange", WAITING:"waiting", SOURCEOPEN:"sourceopen", SOURCEENDED:"sourceended", SOURCECLOSED:"sourceclosed", ABORT:"abort", UPDATE:"update", UPDATESTART:"updatestart", UPDATEEND:"updateend", HASHCHANGE:"hashchange", PAGEHIDE:"pagehide", PAGESHOW:"pageshow", POPSTATE:"popstate", COPY:"copy", PASTE:"paste", CUT:"cut", BEFORECOPY:"beforecopy", BEFORECUT:"beforecut", BEFOREPASTE:"beforepaste", 
ONLINE:"online", OFFLINE:"offline", MESSAGE:"message", CONNECT:"connect", INSTALL:"install", ACTIVATE:"activate", FETCH:"fetch", FOREIGNFETCH:"foreignfetch", MESSAGEERROR:"messageerror", STATECHANGE:"statechange", UPDATEFOUND:"updatefound", CONTROLLERCHANGE:"controllerchange", ANIMATIONSTART:goog.events.getVendorPrefixedName_("AnimationStart"), ANIMATIONEND:goog.events.getVendorPrefixedName_("AnimationEnd"), ANIMATIONITERATION:goog.events.getVendorPrefixedName_("AnimationIteration"), TRANSITIONEND:goog.events.getVendorPrefixedName_("TransitionEnd"), 
POINTERDOWN:"pointerdown", POINTERUP:"pointerup", POINTERCANCEL:"pointercancel", POINTERMOVE:"pointermove", POINTEROVER:"pointerover", POINTEROUT:"pointerout", POINTERENTER:"pointerenter", POINTERLEAVE:"pointerleave", GOTPOINTERCAPTURE:"gotpointercapture", LOSTPOINTERCAPTURE:"lostpointercapture", MSGESTURECHANGE:"MSGestureChange", MSGESTUREEND:"MSGestureEnd", MSGESTUREHOLD:"MSGestureHold", MSGESTURESTART:"MSGestureStart", MSGESTURETAP:"MSGestureTap", MSGOTPOINTERCAPTURE:"MSGotPointerCapture", MSINERTIASTART:"MSInertiaStart", 
MSLOSTPOINTERCAPTURE:"MSLostPointerCapture", MSPOINTERCANCEL:"MSPointerCancel", MSPOINTERDOWN:"MSPointerDown", MSPOINTERENTER:"MSPointerEnter", MSPOINTERHOVER:"MSPointerHover", MSPOINTERLEAVE:"MSPointerLeave", MSPOINTERMOVE:"MSPointerMove", MSPOINTEROUT:"MSPointerOut", MSPOINTEROVER:"MSPointerOver", MSPOINTERUP:"MSPointerUp", TEXT:"text", TEXTINPUT:goog.userAgent.IE ? "textinput" : "textInput", COMPOSITIONSTART:"compositionstart", COMPOSITIONUPDATE:"compositionupdate", COMPOSITIONEND:"compositionend", 
BEFOREINPUT:"beforeinput", EXIT:"exit", LOADABORT:"loadabort", LOADCOMMIT:"loadcommit", LOADREDIRECT:"loadredirect", LOADSTART:"loadstart", LOADSTOP:"loadstop", RESPONSIVE:"responsive", SIZECHANGED:"sizechanged", UNRESPONSIVE:"unresponsive", VISIBILITYCHANGE:"visibilitychange", STORAGE:"storage", DOMSUBTREEMODIFIED:"DOMSubtreeModified", DOMNODEINSERTED:"DOMNodeInserted", DOMNODEREMOVED:"DOMNodeRemoved", DOMNODEREMOVEDFROMDOCUMENT:"DOMNodeRemovedFromDocument", DOMNODEINSERTEDINTODOCUMENT:"DOMNodeInsertedIntoDocument", 
DOMATTRMODIFIED:"DOMAttrModified", DOMCHARACTERDATAMODIFIED:"DOMCharacterDataModified", BEFOREPRINT:"beforeprint", AFTERPRINT:"afterprint", BEFOREINSTALLPROMPT:"beforeinstallprompt", APPINSTALLED:"appinstalled"};
goog.events.getPointerFallbackEventName_ = function(pointerEventName, msPointerEventName, fallbackEventName) {
  if (goog.events.BrowserFeature.POINTER_EVENTS) {
    return pointerEventName;
  }
  if (goog.events.BrowserFeature.MSPOINTER_EVENTS) {
    return msPointerEventName;
  }
  return fallbackEventName;
};
goog.events.PointerFallbackEventType = {POINTERDOWN:goog.events.getPointerFallbackEventName_(goog.events.EventType.POINTERDOWN, goog.events.EventType.MSPOINTERDOWN, goog.events.EventType.MOUSEDOWN), POINTERUP:goog.events.getPointerFallbackEventName_(goog.events.EventType.POINTERUP, goog.events.EventType.MSPOINTERUP, goog.events.EventType.MOUSEUP), POINTERCANCEL:goog.events.getPointerFallbackEventName_(goog.events.EventType.POINTERCANCEL, goog.events.EventType.MSPOINTERCANCEL, goog.events.EventType.MOUSECANCEL), 
POINTERMOVE:goog.events.getPointerFallbackEventName_(goog.events.EventType.POINTERMOVE, goog.events.EventType.MSPOINTERMOVE, goog.events.EventType.MOUSEMOVE), POINTEROVER:goog.events.getPointerFallbackEventName_(goog.events.EventType.POINTEROVER, goog.events.EventType.MSPOINTEROVER, goog.events.EventType.MOUSEOVER), POINTEROUT:goog.events.getPointerFallbackEventName_(goog.events.EventType.POINTEROUT, goog.events.EventType.MSPOINTEROUT, goog.events.EventType.MOUSEOUT), POINTERENTER:goog.events.getPointerFallbackEventName_(goog.events.EventType.POINTERENTER, 
goog.events.EventType.MSPOINTERENTER, goog.events.EventType.MOUSEENTER), POINTERLEAVE:goog.events.getPointerFallbackEventName_(goog.events.EventType.POINTERLEAVE, goog.events.EventType.MSPOINTERLEAVE, goog.events.EventType.MOUSELEAVE)};
goog.events.PointerTouchFallbackEventType = {POINTERDOWN:goog.events.getPointerFallbackEventName_(goog.events.EventType.POINTERDOWN, goog.events.EventType.MSPOINTERDOWN, goog.events.EventType.TOUCHSTART), POINTERUP:goog.events.getPointerFallbackEventName_(goog.events.EventType.POINTERUP, goog.events.EventType.MSPOINTERUP, goog.events.EventType.TOUCHEND), POINTERCANCEL:goog.events.getPointerFallbackEventName_(goog.events.EventType.POINTERCANCEL, goog.events.EventType.MSPOINTERCANCEL, goog.events.EventType.TOUCHCANCEL), 
POINTERMOVE:goog.events.getPointerFallbackEventName_(goog.events.EventType.POINTERMOVE, goog.events.EventType.MSPOINTERMOVE, goog.events.EventType.TOUCHMOVE)};
goog.events.MouseEvents;
goog.events.PointerAsMouseEventType = {MOUSEDOWN:goog.events.PointerFallbackEventType.POINTERDOWN, MOUSEUP:goog.events.PointerFallbackEventType.POINTERUP, MOUSECANCEL:goog.events.PointerFallbackEventType.POINTERCANCEL, MOUSEMOVE:goog.events.PointerFallbackEventType.POINTERMOVE, MOUSEOVER:goog.events.PointerFallbackEventType.POINTEROVER, MOUSEOUT:goog.events.PointerFallbackEventType.POINTEROUT, MOUSEENTER:goog.events.PointerFallbackEventType.POINTERENTER, MOUSELEAVE:goog.events.PointerFallbackEventType.POINTERLEAVE};
goog.events.MouseAsMouseEventType = {MOUSEDOWN:goog.events.EventType.MOUSEDOWN, MOUSEUP:goog.events.EventType.MOUSEUP, MOUSECANCEL:goog.events.EventType.MOUSECANCEL, MOUSEMOVE:goog.events.EventType.MOUSEMOVE, MOUSEOVER:goog.events.EventType.MOUSEOVER, MOUSEOUT:goog.events.EventType.MOUSEOUT, MOUSEENTER:goog.events.EventType.MOUSEENTER, MOUSELEAVE:goog.events.EventType.MOUSELEAVE};
goog.events.PointerAsTouchEventType = {TOUCHCANCEL:goog.events.PointerTouchFallbackEventType.POINTERCANCEL, TOUCHEND:goog.events.PointerTouchFallbackEventType.POINTERUP, TOUCHMOVE:goog.events.PointerTouchFallbackEventType.POINTERMOVE, TOUCHSTART:goog.events.PointerTouchFallbackEventType.POINTERDOWN};
goog.provide("goog.events.BrowserEvent");
goog.provide("goog.events.BrowserEvent.MouseButton");
goog.provide("goog.events.BrowserEvent.PointerType");
goog.require("goog.debug");
goog.require("goog.events.BrowserFeature");
goog.require("goog.events.Event");
goog.require("goog.events.EventType");
goog.require("goog.reflect");
goog.require("goog.userAgent");
goog.events.USE_LAYER_XY_AS_OFFSET_XY = goog.define("goog.events.USE_LAYER_XY_AS_OFFSET_XY", false);
goog.events.BrowserEvent = function(opt_e, opt_currentTarget) {
  goog.events.BrowserEvent.base(this, "constructor", opt_e ? opt_e.type : "");
  this.target = null;
  this.currentTarget = null;
  this.relatedTarget = null;
  this.offsetX = 0;
  this.offsetY = 0;
  this.clientX = 0;
  this.clientY = 0;
  this.screenX = 0;
  this.screenY = 0;
  this.button = 0;
  this.key = "";
  this.keyCode = 0;
  this.charCode = 0;
  this.ctrlKey = false;
  this.altKey = false;
  this.shiftKey = false;
  this.metaKey = false;
  this.state = null;
  this.platformModifierKey = false;
  this.pointerId = 0;
  this.pointerType = "";
  this.event_ = null;
  if (opt_e) {
    this.init(opt_e, opt_currentTarget);
  }
};
goog.inherits(goog.events.BrowserEvent, goog.events.Event);
goog.events.BrowserEvent.MouseButton = {LEFT:0, MIDDLE:1, RIGHT:2};
goog.events.BrowserEvent.PointerType = {MOUSE:"mouse", PEN:"pen", TOUCH:"touch"};
goog.events.BrowserEvent.IEButtonMap = goog.debug.freeze([1, 4, 2]);
goog.events.BrowserEvent.IE_BUTTON_MAP = goog.events.BrowserEvent.IEButtonMap;
goog.events.BrowserEvent.IE_POINTER_TYPE_MAP = goog.debug.freeze({2:goog.events.BrowserEvent.PointerType.TOUCH, 3:goog.events.BrowserEvent.PointerType.PEN, 4:goog.events.BrowserEvent.PointerType.MOUSE});
goog.events.BrowserEvent.prototype.init = function(e, opt_currentTarget) {
  var type = this.type = e.type;
  var relevantTouch = e.changedTouches && e.changedTouches.length ? e.changedTouches[0] : null;
  this.target = e.target || e.srcElement;
  this.currentTarget = opt_currentTarget;
  var relatedTarget = e.relatedTarget;
  if (relatedTarget) {
    if (goog.userAgent.GECKO) {
      if (!goog.reflect.canAccessProperty(relatedTarget, "nodeName")) {
        relatedTarget = null;
      }
    }
  } else {
    if (type == goog.events.EventType.MOUSEOVER) {
      relatedTarget = e.fromElement;
    } else {
      if (type == goog.events.EventType.MOUSEOUT) {
        relatedTarget = e.toElement;
      }
    }
  }
  this.relatedTarget = relatedTarget;
  if (relevantTouch) {
    this.clientX = relevantTouch.clientX !== undefined ? relevantTouch.clientX : relevantTouch.pageX;
    this.clientY = relevantTouch.clientY !== undefined ? relevantTouch.clientY : relevantTouch.pageY;
    this.screenX = relevantTouch.screenX || 0;
    this.screenY = relevantTouch.screenY || 0;
  } else {
    if (goog.events.USE_LAYER_XY_AS_OFFSET_XY) {
      this.offsetX = e.layerX !== undefined ? e.layerX : e.offsetX;
      this.offsetY = e.layerY !== undefined ? e.layerY : e.offsetY;
    } else {
      this.offsetX = goog.userAgent.WEBKIT || e.offsetX !== undefined ? e.offsetX : e.layerX;
      this.offsetY = goog.userAgent.WEBKIT || e.offsetY !== undefined ? e.offsetY : e.layerY;
    }
    this.clientX = e.clientX !== undefined ? e.clientX : e.pageX;
    this.clientY = e.clientY !== undefined ? e.clientY : e.pageY;
    this.screenX = e.screenX || 0;
    this.screenY = e.screenY || 0;
  }
  this.button = e.button;
  this.keyCode = e.keyCode || 0;
  this.key = e.key || "";
  this.charCode = e.charCode || (type == "keypress" ? e.keyCode : 0);
  this.ctrlKey = e.ctrlKey;
  this.altKey = e.altKey;
  this.shiftKey = e.shiftKey;
  this.metaKey = e.metaKey;
  this.platformModifierKey = goog.userAgent.MAC ? e.metaKey : e.ctrlKey;
  this.pointerId = e.pointerId || 0;
  this.pointerType = goog.events.BrowserEvent.getPointerType_(e);
  this.state = e.state;
  this.event_ = e;
  if (e.defaultPrevented) {
    this.preventDefault();
  }
};
goog.events.BrowserEvent.prototype.isButton = function(button) {
  if (!goog.events.BrowserFeature.HAS_W3C_BUTTON) {
    if (this.type == "click") {
      return button == goog.events.BrowserEvent.MouseButton.LEFT;
    } else {
      return !!(this.event_.button & goog.events.BrowserEvent.IE_BUTTON_MAP[button]);
    }
  } else {
    return this.event_.button == button;
  }
};
goog.events.BrowserEvent.prototype.isMouseActionButton = function() {
  return this.isButton(goog.events.BrowserEvent.MouseButton.LEFT) && !(goog.userAgent.WEBKIT && goog.userAgent.MAC && this.ctrlKey);
};
goog.events.BrowserEvent.prototype.stopPropagation = function() {
  goog.events.BrowserEvent.superClass_.stopPropagation.call(this);
  if (this.event_.stopPropagation) {
    this.event_.stopPropagation();
  } else {
    this.event_.cancelBubble = true;
  }
};
goog.events.BrowserEvent.prototype.preventDefault = function() {
  goog.events.BrowserEvent.superClass_.preventDefault.call(this);
  var be = this.event_;
  if (!be.preventDefault) {
    be.returnValue = false;
    if (goog.events.BrowserFeature.SET_KEY_CODE_TO_PREVENT_DEFAULT) {
      try {
        var VK_F1 = 112;
        var VK_F12 = 123;
        if (be.ctrlKey || be.keyCode >= VK_F1 && be.keyCode <= VK_F12) {
          be.keyCode = -1;
        }
      } catch (ex) {
      }
    }
  } else {
    be.preventDefault();
  }
};
goog.events.BrowserEvent.prototype.getBrowserEvent = function() {
  return this.event_;
};
goog.events.BrowserEvent.getPointerType_ = function(e) {
  if (typeof e.pointerType === "string") {
    return e.pointerType;
  }
  return goog.events.BrowserEvent.IE_POINTER_TYPE_MAP[e.pointerType] || "";
};
goog.provide("goog.events.Listenable");
goog.provide("goog.events.ListenableKey");
goog.forwardDeclare("goog.events.EventLike");
goog.forwardDeclare("goog.events.EventTarget");
goog.require("goog.events.EventId");
goog.events.Listenable = function() {
};
goog.events.Listenable.IMPLEMENTED_BY_PROP = "closure_listenable_" + (Math.random() * 1e6 | 0);
goog.events.Listenable.addImplementation = function(cls) {
  cls.prototype[goog.events.Listenable.IMPLEMENTED_BY_PROP] = true;
};
goog.events.Listenable.isImplementedBy = function(obj) {
  return !!(obj && obj[goog.events.Listenable.IMPLEMENTED_BY_PROP]);
};
goog.events.Listenable.prototype.listen;
goog.events.Listenable.prototype.listenOnce;
goog.events.Listenable.prototype.unlisten;
goog.events.Listenable.prototype.unlistenByKey;
goog.events.Listenable.prototype.dispatchEvent;
goog.events.Listenable.prototype.removeAllListeners;
goog.events.Listenable.prototype.getParentEventTarget;
goog.events.Listenable.prototype.fireListeners;
goog.events.Listenable.prototype.getListeners;
goog.events.Listenable.prototype.getListener;
goog.events.Listenable.prototype.hasListener;
goog.events.ListenableKey = function() {
};
goog.events.ListenableKey.counter_ = 0;
goog.events.ListenableKey.reserveKey = function() {
  return ++goog.events.ListenableKey.counter_;
};
goog.events.ListenableKey.prototype.src;
goog.events.ListenableKey.prototype.type;
goog.events.ListenableKey.prototype.listener;
goog.events.ListenableKey.prototype.capture;
goog.events.ListenableKey.prototype.handler;
goog.events.ListenableKey.prototype.key;
goog.provide("goog.events.Listener");
goog.require("goog.events.ListenableKey");
goog.events.Listener = function(listener, proxy, src, type, capture, opt_handler) {
  if (goog.events.Listener.ENABLE_MONITORING) {
    this.creationStack = (new Error).stack;
  }
  this.listener = listener;
  this.proxy = proxy;
  this.src = src;
  this.type = type;
  this.capture = !!capture;
  this.handler = opt_handler;
  this.key = goog.events.ListenableKey.reserveKey();
  this.callOnce = false;
  this.removed = false;
};
goog.events.Listener.ENABLE_MONITORING = goog.define("goog.events.Listener.ENABLE_MONITORING", false);
goog.events.Listener.prototype.creationStack;
goog.events.Listener.prototype.markAsRemoved = function() {
  this.removed = true;
  this.listener = null;
  this.proxy = null;
  this.src = null;
  this.handler = null;
};
goog.provide("goog.events.ListenerMap");
goog.require("goog.array");
goog.require("goog.events.Listener");
goog.require("goog.object");
goog.events.ListenerMap = function(src) {
  this.src = src;
  this.listeners = {};
  this.typeCount_ = 0;
};
goog.events.ListenerMap.prototype.getTypeCount = function() {
  return this.typeCount_;
};
goog.events.ListenerMap.prototype.getListenerCount = function() {
  var count = 0;
  for (var type in this.listeners) {
    count += this.listeners[type].length;
  }
  return count;
};
goog.events.ListenerMap.prototype.add = function(type, listener, callOnce, opt_useCapture, opt_listenerScope) {
  var typeStr = type.toString();
  var listenerArray = this.listeners[typeStr];
  if (!listenerArray) {
    listenerArray = this.listeners[typeStr] = [];
    this.typeCount_++;
  }
  var listenerObj;
  var index = goog.events.ListenerMap.findListenerIndex_(listenerArray, listener, opt_useCapture, opt_listenerScope);
  if (index > -1) {
    listenerObj = listenerArray[index];
    if (!callOnce) {
      listenerObj.callOnce = false;
    }
  } else {
    listenerObj = new goog.events.Listener(listener, null, this.src, typeStr, !!opt_useCapture, opt_listenerScope);
    listenerObj.callOnce = callOnce;
    listenerArray.push(listenerObj);
  }
  return listenerObj;
};
goog.events.ListenerMap.prototype.remove = function(type, listener, opt_useCapture, opt_listenerScope) {
  var typeStr = type.toString();
  if (!(typeStr in this.listeners)) {
    return false;
  }
  var listenerArray = this.listeners[typeStr];
  var index = goog.events.ListenerMap.findListenerIndex_(listenerArray, listener, opt_useCapture, opt_listenerScope);
  if (index > -1) {
    var listenerObj = listenerArray[index];
    listenerObj.markAsRemoved();
    goog.array.removeAt(listenerArray, index);
    if (listenerArray.length == 0) {
      delete this.listeners[typeStr];
      this.typeCount_--;
    }
    return true;
  }
  return false;
};
goog.events.ListenerMap.prototype.removeByKey = function(listener) {
  var type = listener.type;
  if (!(type in this.listeners)) {
    return false;
  }
  var removed = goog.array.remove(this.listeners[type], listener);
  if (removed) {
    listener.markAsRemoved();
    if (this.listeners[type].length == 0) {
      delete this.listeners[type];
      this.typeCount_--;
    }
  }
  return removed;
};
goog.events.ListenerMap.prototype.removeAll = function(opt_type) {
  var typeStr = opt_type && opt_type.toString();
  var count = 0;
  for (var type in this.listeners) {
    if (!typeStr || type == typeStr) {
      var listenerArray = this.listeners[type];
      for (var i = 0; i < listenerArray.length; i++) {
        ++count;
        listenerArray[i].markAsRemoved();
      }
      delete this.listeners[type];
      this.typeCount_--;
    }
  }
  return count;
};
goog.events.ListenerMap.prototype.getListeners = function(type, capture) {
  var listenerArray = this.listeners[type.toString()];
  var rv = [];
  if (listenerArray) {
    for (var i = 0; i < listenerArray.length; ++i) {
      var listenerObj = listenerArray[i];
      if (listenerObj.capture == capture) {
        rv.push(listenerObj);
      }
    }
  }
  return rv;
};
goog.events.ListenerMap.prototype.getListener = function(type, listener, capture, opt_listenerScope) {
  var listenerArray = this.listeners[type.toString()];
  var i = -1;
  if (listenerArray) {
    i = goog.events.ListenerMap.findListenerIndex_(listenerArray, listener, capture, opt_listenerScope);
  }
  return i > -1 ? listenerArray[i] : null;
};
goog.events.ListenerMap.prototype.hasListener = function(opt_type, opt_capture) {
  var hasType = opt_type !== undefined;
  var typeStr = hasType ? opt_type.toString() : "";
  var hasCapture = opt_capture !== undefined;
  return goog.object.some(this.listeners, function(listenerArray, type) {
    for (var i = 0; i < listenerArray.length; ++i) {
      if ((!hasType || listenerArray[i].type == typeStr) && (!hasCapture || listenerArray[i].capture == opt_capture)) {
        return true;
      }
    }
    return false;
  });
};
goog.events.ListenerMap.findListenerIndex_ = function(listenerArray, listener, opt_useCapture, opt_listenerScope) {
  for (var i = 0; i < listenerArray.length; ++i) {
    var listenerObj = listenerArray[i];
    if (!listenerObj.removed && listenerObj.listener == listener && listenerObj.capture == !!opt_useCapture && listenerObj.handler == opt_listenerScope) {
      return i;
    }
  }
  return -1;
};
goog.provide("goog.events");
goog.provide("goog.events.CaptureSimulationMode");
goog.provide("goog.events.Key");
goog.provide("goog.events.ListenableType");
goog.forwardDeclare("goog.debug.ErrorHandler");
goog.forwardDeclare("goog.events.EventWrapper");
goog.require("goog.asserts");
goog.require("goog.debug.entryPointRegistry");
goog.require("goog.events.BrowserEvent");
goog.require("goog.events.BrowserFeature");
goog.require("goog.events.Listenable");
goog.require("goog.events.ListenerMap");
goog.events.Key;
goog.events.ListenableType;
goog.events.LISTENER_MAP_PROP_ = "closure_lm_" + (Math.random() * 1e6 | 0);
goog.events.onString_ = "on";
goog.events.onStringMap_ = {};
goog.events.CaptureSimulationMode = {OFF_AND_FAIL:0, OFF_AND_SILENT:1, ON:2};
goog.events.CAPTURE_SIMULATION_MODE = goog.define("goog.events.CAPTURE_SIMULATION_MODE", 2);
goog.events.listenerCountEstimate_ = 0;
goog.events.listen = function(src, type, listener, opt_options, opt_handler) {
  if (opt_options && opt_options.once) {
    return goog.events.listenOnce(src, type, listener, opt_options, opt_handler);
  }
  if (goog.isArray(type)) {
    for (var i = 0; i < type.length; i++) {
      goog.events.listen(src, type[i], listener, opt_options, opt_handler);
    }
    return null;
  }
  listener = goog.events.wrapListener(listener);
  if (goog.events.Listenable.isImplementedBy(src)) {
    var capture = goog.isObject(opt_options) ? !!opt_options.capture : !!opt_options;
    return src.listen(type, listener, capture, opt_handler);
  } else {
    return goog.events.listen_(src, type, listener, false, opt_options, opt_handler);
  }
};
goog.events.listen_ = function(src, type, listener, callOnce, opt_options, opt_handler) {
  if (!type) {
    throw new Error("Invalid event type");
  }
  var capture = goog.isObject(opt_options) ? !!opt_options.capture : !!opt_options;
  if (capture && !goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT) {
    if (goog.events.CAPTURE_SIMULATION_MODE == goog.events.CaptureSimulationMode.OFF_AND_FAIL) {
      goog.asserts.fail("Can not register capture listener in IE8-.");
      return null;
    } else {
      if (goog.events.CAPTURE_SIMULATION_MODE == goog.events.CaptureSimulationMode.OFF_AND_SILENT) {
        return null;
      }
    }
  }
  var listenerMap = goog.events.getListenerMap_(src);
  if (!listenerMap) {
    src[goog.events.LISTENER_MAP_PROP_] = listenerMap = new goog.events.ListenerMap(src);
  }
  var listenerObj = listenerMap.add(type, listener, callOnce, capture, opt_handler);
  if (listenerObj.proxy) {
    return listenerObj;
  }
  var proxy = goog.events.getProxy();
  listenerObj.proxy = proxy;
  proxy.src = src;
  proxy.listener = listenerObj;
  if (src.addEventListener) {
    if (!goog.events.BrowserFeature.PASSIVE_EVENTS) {
      opt_options = capture;
    }
    if (opt_options === undefined) {
      opt_options = false;
    }
    src.addEventListener(type.toString(), proxy, opt_options);
  } else {
    if (src.attachEvent) {
      src.attachEvent(goog.events.getOnString_(type.toString()), proxy);
    } else {
      if (src.addListener && src.removeListener) {
        goog.asserts.assert(type === "change", "MediaQueryList only has a change event");
        src.addListener(proxy);
      } else {
        throw new Error("addEventListener and attachEvent are unavailable.");
      }
    }
  }
  goog.events.listenerCountEstimate_++;
  return listenerObj;
};
goog.events.getProxy = function() {
  var proxyCallbackFunction = goog.events.handleBrowserEvent_;
  var f = goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT ? function(eventObject) {
    return proxyCallbackFunction.call(f.src, f.listener, eventObject);
  } : function(eventObject) {
    var v = proxyCallbackFunction.call(f.src, f.listener, eventObject);
    if (!v) {
      return v;
    }
  };
  return f;
};
goog.events.listenOnce = function(src, type, listener, opt_options, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0; i < type.length; i++) {
      goog.events.listenOnce(src, type[i], listener, opt_options, opt_handler);
    }
    return null;
  }
  listener = goog.events.wrapListener(listener);
  if (goog.events.Listenable.isImplementedBy(src)) {
    var capture = goog.isObject(opt_options) ? !!opt_options.capture : !!opt_options;
    return src.listenOnce(type, listener, capture, opt_handler);
  } else {
    return goog.events.listen_(src, type, listener, true, opt_options, opt_handler);
  }
};
goog.events.listenWithWrapper = function(src, wrapper, listener, opt_capt, opt_handler) {
  wrapper.listen(src, listener, opt_capt, opt_handler);
};
goog.events.unlisten = function(src, type, listener, opt_options, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0; i < type.length; i++) {
      goog.events.unlisten(src, type[i], listener, opt_options, opt_handler);
    }
    return null;
  }
  var capture = goog.isObject(opt_options) ? !!opt_options.capture : !!opt_options;
  listener = goog.events.wrapListener(listener);
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.unlisten(type, listener, capture, opt_handler);
  }
  if (!src) {
    return false;
  }
  var listenerMap = goog.events.getListenerMap_(src);
  if (listenerMap) {
    var listenerObj = listenerMap.getListener(type, listener, capture, opt_handler);
    if (listenerObj) {
      return goog.events.unlistenByKey(listenerObj);
    }
  }
  return false;
};
goog.events.unlistenByKey = function(key) {
  if (typeof key === "number") {
    return false;
  }
  var listener = key;
  if (!listener || listener.removed) {
    return false;
  }
  var src = listener.src;
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.unlistenByKey(listener);
  }
  var type = listener.type;
  var proxy = listener.proxy;
  if (src.removeEventListener) {
    src.removeEventListener(type, proxy, listener.capture);
  } else {
    if (src.detachEvent) {
      src.detachEvent(goog.events.getOnString_(type), proxy);
    } else {
      if (src.addListener && src.removeListener) {
        src.removeListener(proxy);
      }
    }
  }
  goog.events.listenerCountEstimate_--;
  var listenerMap = goog.events.getListenerMap_(src);
  if (listenerMap) {
    listenerMap.removeByKey(listener);
    if (listenerMap.getTypeCount() == 0) {
      listenerMap.src = null;
      src[goog.events.LISTENER_MAP_PROP_] = null;
    }
  } else {
    listener.markAsRemoved();
  }
  return true;
};
goog.events.unlistenWithWrapper = function(src, wrapper, listener, opt_capt, opt_handler) {
  wrapper.unlisten(src, listener, opt_capt, opt_handler);
};
goog.events.removeAll = function(obj, opt_type) {
  if (!obj) {
    return 0;
  }
  if (goog.events.Listenable.isImplementedBy(obj)) {
    return obj.removeAllListeners(opt_type);
  }
  var listenerMap = goog.events.getListenerMap_(obj);
  if (!listenerMap) {
    return 0;
  }
  var count = 0;
  var typeStr = opt_type && opt_type.toString();
  for (var type in listenerMap.listeners) {
    if (!typeStr || type == typeStr) {
      var listeners = listenerMap.listeners[type].concat();
      for (var i = 0; i < listeners.length; ++i) {
        if (goog.events.unlistenByKey(listeners[i])) {
          ++count;
        }
      }
    }
  }
  return count;
};
goog.events.getListeners = function(obj, type, capture) {
  if (goog.events.Listenable.isImplementedBy(obj)) {
    return obj.getListeners(type, capture);
  } else {
    if (!obj) {
      return [];
    }
    var listenerMap = goog.events.getListenerMap_(obj);
    return listenerMap ? listenerMap.getListeners(type, capture) : [];
  }
};
goog.events.getListener = function(src, type, listener, opt_capt, opt_handler) {
  type = type;
  listener = goog.events.wrapListener(listener);
  var capture = !!opt_capt;
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.getListener(type, listener, capture, opt_handler);
  }
  if (!src) {
    return null;
  }
  var listenerMap = goog.events.getListenerMap_(src);
  if (listenerMap) {
    return listenerMap.getListener(type, listener, capture, opt_handler);
  }
  return null;
};
goog.events.hasListener = function(obj, opt_type, opt_capture) {
  if (goog.events.Listenable.isImplementedBy(obj)) {
    return obj.hasListener(opt_type, opt_capture);
  }
  var listenerMap = goog.events.getListenerMap_(obj);
  return !!listenerMap && listenerMap.hasListener(opt_type, opt_capture);
};
goog.events.expose = function(e) {
  var str = [];
  for (var key in e) {
    if (e[key] && e[key].id) {
      str.push(key + " \x3d " + e[key] + " (" + e[key].id + ")");
    } else {
      str.push(key + " \x3d " + e[key]);
    }
  }
  return str.join("\n");
};
goog.events.getOnString_ = function(type) {
  if (type in goog.events.onStringMap_) {
    return goog.events.onStringMap_[type];
  }
  return goog.events.onStringMap_[type] = goog.events.onString_ + type;
};
goog.events.fireListeners = function(obj, type, capture, eventObject) {
  if (goog.events.Listenable.isImplementedBy(obj)) {
    return obj.fireListeners(type, capture, eventObject);
  }
  return goog.events.fireListeners_(obj, type, capture, eventObject);
};
goog.events.fireListeners_ = function(obj, type, capture, eventObject) {
  var retval = true;
  var listenerMap = goog.events.getListenerMap_(obj);
  if (listenerMap) {
    var listenerArray = listenerMap.listeners[type.toString()];
    if (listenerArray) {
      listenerArray = listenerArray.concat();
      for (var i = 0; i < listenerArray.length; i++) {
        var listener = listenerArray[i];
        if (listener && listener.capture == capture && !listener.removed) {
          var result = goog.events.fireListener(listener, eventObject);
          retval = retval && result !== false;
        }
      }
    }
  }
  return retval;
};
goog.events.fireListener = function(listener, eventObject) {
  var listenerFn = listener.listener;
  var listenerHandler = listener.handler || listener.src;
  if (listener.callOnce) {
    goog.events.unlistenByKey(listener);
  }
  return listenerFn.call(listenerHandler, eventObject);
};
goog.events.getTotalListenerCount = function() {
  return goog.events.listenerCountEstimate_;
};
goog.events.dispatchEvent = function(src, e) {
  goog.asserts.assert(goog.events.Listenable.isImplementedBy(src), "Can not use goog.events.dispatchEvent with " + "non-goog.events.Listenable instance.");
  return src.dispatchEvent(e);
};
goog.events.protectBrowserEventEntryPoint = function(errorHandler) {
  goog.events.handleBrowserEvent_ = errorHandler.protectEntryPoint(goog.events.handleBrowserEvent_);
};
goog.events.handleBrowserEvent_ = function(listener, opt_evt) {
  if (listener.removed) {
    return true;
  }
  if (!goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT) {
    var ieEvent = opt_evt || goog.getObjectByName("window.event");
    var evt = new goog.events.BrowserEvent(ieEvent, this);
    var retval = true;
    if (goog.events.CAPTURE_SIMULATION_MODE == goog.events.CaptureSimulationMode.ON) {
      if (!goog.events.isMarkedIeEvent_(ieEvent)) {
        goog.events.markIeEvent_(ieEvent);
        var ancestors = [];
        for (var parent = evt.currentTarget; parent; parent = parent.parentNode) {
          ancestors.push(parent);
        }
        var type = listener.type;
        for (var i = ancestors.length - 1; !evt.propagationStopped_ && i >= 0; i--) {
          evt.currentTarget = ancestors[i];
          var result = goog.events.fireListeners_(ancestors[i], type, true, evt);
          retval = retval && result;
        }
        for (var i = 0; !evt.propagationStopped_ && i < ancestors.length; i++) {
          evt.currentTarget = ancestors[i];
          var result = goog.events.fireListeners_(ancestors[i], type, false, evt);
          retval = retval && result;
        }
      }
    } else {
      retval = goog.events.fireListener(listener, evt);
    }
    return retval;
  }
  return goog.events.fireListener(listener, new goog.events.BrowserEvent(opt_evt, this));
};
goog.events.markIeEvent_ = function(e) {
  var useReturnValue = false;
  if (e.keyCode == 0) {
    try {
      e.keyCode = -1;
      return;
    } catch (ex) {
      useReturnValue = true;
    }
  }
  if (useReturnValue || e.returnValue == undefined) {
    e.returnValue = true;
  }
};
goog.events.isMarkedIeEvent_ = function(e) {
  return e.keyCode < 0 || e.returnValue != undefined;
};
goog.events.uniqueIdCounter_ = 0;
goog.events.getUniqueId = function(identifier) {
  return identifier + "_" + goog.events.uniqueIdCounter_++;
};
goog.events.getListenerMap_ = function(src) {
  var listenerMap = src[goog.events.LISTENER_MAP_PROP_];
  return listenerMap instanceof goog.events.ListenerMap ? listenerMap : null;
};
goog.events.LISTENER_WRAPPER_PROP_ = "__closure_events_fn_" + (Math.random() * 1e9 >>> 0);
goog.events.wrapListener = function(listener) {
  goog.asserts.assert(listener, "Listener can not be null.");
  if (goog.isFunction(listener)) {
    return listener;
  }
  goog.asserts.assert(listener.handleEvent, "An object listener must have handleEvent method.");
  if (!listener[goog.events.LISTENER_WRAPPER_PROP_]) {
    listener[goog.events.LISTENER_WRAPPER_PROP_] = function(e) {
      return listener.handleEvent(e);
    };
  }
  return listener[goog.events.LISTENER_WRAPPER_PROP_];
};
goog.debug.entryPointRegistry.register(function(transformer) {
  goog.events.handleBrowserEvent_ = transformer(goog.events.handleBrowserEvent_);
});
goog.provide("goog.events.EventTarget");
goog.require("goog.Disposable");
goog.require("goog.asserts");
goog.require("goog.events");
goog.require("goog.events.Event");
goog.require("goog.events.Listenable");
goog.require("goog.events.ListenerMap");
goog.require("goog.object");
goog.events.EventTarget = function() {
  goog.Disposable.call(this);
  this.eventTargetListeners_ = new goog.events.ListenerMap(this);
  this.actualEventTarget_ = this;
  this.parentEventTarget_ = null;
};
goog.inherits(goog.events.EventTarget, goog.Disposable);
goog.events.Listenable.addImplementation(goog.events.EventTarget);
goog.events.EventTarget.MAX_ANCESTORS_ = 1000;
goog.events.EventTarget.prototype.getParentEventTarget = function() {
  return this.parentEventTarget_;
};
goog.events.EventTarget.prototype.setParentEventTarget = function(parent) {
  this.parentEventTarget_ = parent;
};
goog.events.EventTarget.prototype.addEventListener = function(type, handler, opt_capture, opt_handlerScope) {
  goog.events.listen(this, type, handler, opt_capture, opt_handlerScope);
};
goog.events.EventTarget.prototype.removeEventListener = function(type, handler, opt_capture, opt_handlerScope) {
  goog.events.unlisten(this, type, handler, opt_capture, opt_handlerScope);
};
goog.events.EventTarget.prototype.dispatchEvent = function(e) {
  this.assertInitialized_();
  var ancestorsTree, ancestor = this.getParentEventTarget();
  if (ancestor) {
    ancestorsTree = [];
    var ancestorCount = 1;
    for (; ancestor; ancestor = ancestor.getParentEventTarget()) {
      ancestorsTree.push(ancestor);
      goog.asserts.assert(++ancestorCount < goog.events.EventTarget.MAX_ANCESTORS_, "infinite loop");
    }
  }
  return goog.events.EventTarget.dispatchEventInternal_(this.actualEventTarget_, e, ancestorsTree);
};
goog.events.EventTarget.prototype.disposeInternal = function() {
  goog.events.EventTarget.superClass_.disposeInternal.call(this);
  this.removeAllListeners();
  this.parentEventTarget_ = null;
};
goog.events.EventTarget.prototype.listen = function(type, listener, opt_useCapture, opt_listenerScope) {
  this.assertInitialized_();
  return this.eventTargetListeners_.add(String(type), listener, false, opt_useCapture, opt_listenerScope);
};
goog.events.EventTarget.prototype.listenOnce = function(type, listener, opt_useCapture, opt_listenerScope) {
  return this.eventTargetListeners_.add(String(type), listener, true, opt_useCapture, opt_listenerScope);
};
goog.events.EventTarget.prototype.unlisten = function(type, listener, opt_useCapture, opt_listenerScope) {
  return this.eventTargetListeners_.remove(String(type), listener, opt_useCapture, opt_listenerScope);
};
goog.events.EventTarget.prototype.unlistenByKey = function(key) {
  return this.eventTargetListeners_.removeByKey(key);
};
goog.events.EventTarget.prototype.removeAllListeners = function(opt_type) {
  if (!this.eventTargetListeners_) {
    return 0;
  }
  return this.eventTargetListeners_.removeAll(opt_type);
};
goog.events.EventTarget.prototype.fireListeners = function(type, capture, eventObject) {
  var listenerArray = this.eventTargetListeners_.listeners[String(type)];
  if (!listenerArray) {
    return true;
  }
  listenerArray = listenerArray.concat();
  var rv = true;
  for (var i = 0; i < listenerArray.length; ++i) {
    var listener = listenerArray[i];
    if (listener && !listener.removed && listener.capture == capture) {
      var listenerFn = listener.listener;
      var listenerHandler = listener.handler || listener.src;
      if (listener.callOnce) {
        this.unlistenByKey(listener);
      }
      rv = listenerFn.call(listenerHandler, eventObject) !== false && rv;
    }
  }
  return rv && eventObject.returnValue_ != false;
};
goog.events.EventTarget.prototype.getListeners = function(type, capture) {
  return this.eventTargetListeners_.getListeners(String(type), capture);
};
goog.events.EventTarget.prototype.getListener = function(type, listener, capture, opt_listenerScope) {
  return this.eventTargetListeners_.getListener(String(type), listener, capture, opt_listenerScope);
};
goog.events.EventTarget.prototype.hasListener = function(opt_type, opt_capture) {
  var id = opt_type !== undefined ? String(opt_type) : undefined;
  return this.eventTargetListeners_.hasListener(id, opt_capture);
};
goog.events.EventTarget.prototype.setTargetForTesting = function(target) {
  this.actualEventTarget_ = target;
};
goog.events.EventTarget.prototype.assertInitialized_ = function() {
  goog.asserts.assert(this.eventTargetListeners_, "Event target is not initialized. Did you call the superclass " + "(goog.events.EventTarget) constructor?");
};
goog.events.EventTarget.dispatchEventInternal_ = function(target, e, opt_ancestorsTree) {
  var type = e.type || e;
  if (typeof e === "string") {
    e = new goog.events.Event(e, target);
  } else {
    if (!(e instanceof goog.events.Event)) {
      var oldEvent = e;
      e = new goog.events.Event(type, target);
      goog.object.extend(e, oldEvent);
    } else {
      e.target = e.target || target;
    }
  }
  var rv = true, currentTarget;
  if (opt_ancestorsTree) {
    for (var i = opt_ancestorsTree.length - 1; !e.propagationStopped_ && i >= 0; i--) {
      currentTarget = e.currentTarget = opt_ancestorsTree[i];
      rv = currentTarget.fireListeners(type, true, e) && rv;
    }
  }
  if (!e.propagationStopped_) {
    currentTarget = e.currentTarget = target;
    rv = currentTarget.fireListeners(type, true, e) && rv;
    if (!e.propagationStopped_) {
      rv = currentTarget.fireListeners(type, false, e) && rv;
    }
  }
  if (opt_ancestorsTree) {
    for (i = 0; !e.propagationStopped_ && i < opt_ancestorsTree.length; i++) {
      currentTarget = e.currentTarget = opt_ancestorsTree[i];
      rv = currentTarget.fireListeners(type, false, e) && rv;
    }
  }
  return rv;
};
goog.provide("goog.ui.ac.RenderOptions");
goog.ui.ac.RenderOptions = function() {
};
goog.ui.ac.RenderOptions.prototype.preserveHilited_ = false;
goog.ui.ac.RenderOptions.prototype.autoHilite_;
goog.ui.ac.RenderOptions.prototype.setPreserveHilited = function(flag) {
  this.preserveHilited_ = flag;
};
goog.ui.ac.RenderOptions.prototype.getPreserveHilited = function() {
  return this.preserveHilited_;
};
goog.ui.ac.RenderOptions.prototype.setAutoHilite = function(flag) {
  this.autoHilite_ = flag;
};
goog.ui.ac.RenderOptions.prototype.getAutoHilite = function() {
  return this.autoHilite_;
};
goog.provide("goog.ui.ac.AutoComplete");
goog.provide("goog.ui.ac.AutoComplete.EventType");
goog.forwardDeclare("goog.ui.ac.InputHandler");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.events");
goog.require("goog.events.EventTarget");
goog.require("goog.object");
goog.require("goog.ui.ac.RenderOptions");
goog.ui.ac.AutoComplete = function(matcher, renderer, selectionHandler) {
  goog.events.EventTarget.call(this);
  this.matcher_ = matcher;
  this.selectionHandler_ = selectionHandler;
  this.renderer_ = renderer;
  goog.events.listen(renderer, [goog.ui.ac.AutoComplete.EventType.HILITE, goog.ui.ac.AutoComplete.EventType.SELECT, goog.ui.ac.AutoComplete.EventType.CANCEL_DISMISS, goog.ui.ac.AutoComplete.EventType.DISMISS], this.handleEvent, false, this);
  this.token_ = null;
  this.rows_ = [];
  this.hiliteId_ = -1;
  this.firstRowId_ = 0;
  this.target_ = null;
  this.dismissTimer_ = null;
  this.inputToAnchorMap_ = {};
};
goog.inherits(goog.ui.ac.AutoComplete, goog.events.EventTarget);
goog.ui.ac.AutoComplete.prototype.maxMatches_ = 10;
goog.ui.ac.AutoComplete.prototype.autoHilite_ = true;
goog.ui.ac.AutoComplete.prototype.allowFreeSelect_ = false;
goog.ui.ac.AutoComplete.prototype.wrap_ = false;
goog.ui.ac.AutoComplete.prototype.triggerSuggestionsOnUpdate_ = false;
goog.ui.ac.AutoComplete.EventType = {ROW_HILITE:"rowhilite", HILITE:"hilite", SELECT:"select", DISMISS:"dismiss", CANCEL_DISMISS:"canceldismiss", UPDATE:"update", SUGGESTIONS_UPDATE:"suggestionsupdate"};
goog.ui.ac.AutoComplete.Matcher;
goog.ui.ac.AutoComplete.prototype.getMatcher = function() {
  return goog.asserts.assert(this.matcher_);
};
goog.ui.ac.AutoComplete.prototype.setMatcher = function(matcher) {
  this.matcher_ = matcher;
};
goog.ui.ac.AutoComplete.prototype.getSelectionHandler = function() {
  return goog.asserts.assert(this.selectionHandler_);
};
goog.ui.ac.AutoComplete.prototype.getRenderer = function() {
  return this.renderer_;
};
goog.ui.ac.AutoComplete.prototype.setRenderer = function(renderer) {
  this.renderer_ = renderer;
};
goog.ui.ac.AutoComplete.prototype.getToken = function() {
  return this.token_;
};
goog.ui.ac.AutoComplete.prototype.setTokenInternal = function(token) {
  this.token_ = token;
};
goog.ui.ac.AutoComplete.prototype.getSuggestion = function(index) {
  return this.rows_[index];
};
goog.ui.ac.AutoComplete.prototype.getAllSuggestions = function() {
  return goog.asserts.assert(this.rows_);
};
goog.ui.ac.AutoComplete.prototype.getSuggestionCount = function() {
  return this.rows_.length;
};
goog.ui.ac.AutoComplete.prototype.getHighlightedId = function() {
  return this.hiliteId_;
};
goog.ui.ac.AutoComplete.prototype.handleEvent = function(e) {
  var matcher = this.matcher_;
  if (e.target == this.renderer_) {
    switch(e.type) {
      case goog.ui.ac.AutoComplete.EventType.HILITE:
        this.hiliteId(e.row);
        break;
      case goog.ui.ac.AutoComplete.EventType.SELECT:
        var rowDisabled = false;
        if (typeof e.row === "number") {
          var rowId = e.row;
          var index = this.getIndexOfId(rowId);
          var row = this.rows_[index];
          rowDisabled = !!row && matcher.isRowDisabled && matcher.isRowDisabled(row);
          if (row && !rowDisabled && this.hiliteId_ != rowId) {
            this.hiliteId(rowId);
          }
        }
        if (!rowDisabled) {
          this.selectHilited();
        }
        break;
      case goog.ui.ac.AutoComplete.EventType.CANCEL_DISMISS:
        this.cancelDelayedDismiss();
        break;
      case goog.ui.ac.AutoComplete.EventType.DISMISS:
        this.dismissOnDelay();
        break;
    }
  }
};
goog.ui.ac.AutoComplete.prototype.setMaxMatches = function(max) {
  this.maxMatches_ = max;
};
goog.ui.ac.AutoComplete.prototype.setAutoHilite = function(autoHilite) {
  this.autoHilite_ = autoHilite;
};
goog.ui.ac.AutoComplete.prototype.setAllowFreeSelect = function(allowFreeSelect) {
  this.allowFreeSelect_ = allowFreeSelect;
};
goog.ui.ac.AutoComplete.prototype.setWrap = function(wrap) {
  this.wrap_ = wrap;
};
goog.ui.ac.AutoComplete.prototype.setTriggerSuggestionsOnUpdate = function(triggerSuggestionsOnUpdate) {
  this.triggerSuggestionsOnUpdate_ = triggerSuggestionsOnUpdate;
};
goog.ui.ac.AutoComplete.prototype.setToken = function(token, opt_fullString) {
  if (this.token_ == token) {
    return;
  }
  this.token_ = token;
  this.matcher_.requestMatchingRows(this.token_, this.maxMatches_, goog.bind(this.matchListener_, this), opt_fullString);
  this.cancelDelayedDismiss();
};
goog.ui.ac.AutoComplete.prototype.getTarget = function() {
  return this.target_;
};
goog.ui.ac.AutoComplete.prototype.setTarget = function(target) {
  this.target_ = target;
};
goog.ui.ac.AutoComplete.prototype.isOpen = function() {
  return this.renderer_.isVisible();
};
goog.ui.ac.AutoComplete.prototype.getRowCount = function() {
  return this.getSuggestionCount();
};
goog.ui.ac.AutoComplete.prototype.hiliteNext = function() {
  var lastId = this.firstRowId_ + this.rows_.length - 1;
  var toHilite = this.hiliteId_;
  for (var i = 0; i < this.rows_.length; i++) {
    if (toHilite >= this.firstRowId_ && toHilite < lastId) {
      toHilite++;
    } else {
      if (toHilite == -1) {
        toHilite = this.firstRowId_;
      } else {
        if (this.allowFreeSelect_ && toHilite == lastId) {
          this.hiliteId(-1);
          return false;
        } else {
          if (this.wrap_ && toHilite == lastId) {
            toHilite = this.firstRowId_;
          } else {
            return false;
          }
        }
      }
    }
    if (this.hiliteId(toHilite)) {
      return true;
    }
  }
  return false;
};
goog.ui.ac.AutoComplete.prototype.hilitePrev = function() {
  var lastId = this.firstRowId_ + this.rows_.length - 1;
  var toHilite = this.hiliteId_;
  for (var i = 0; i < this.rows_.length; i++) {
    if (toHilite > this.firstRowId_) {
      toHilite--;
    } else {
      if (this.allowFreeSelect_ && toHilite == this.firstRowId_) {
        this.hiliteId(-1);
        return false;
      } else {
        if (this.wrap_ && (toHilite == -1 || toHilite == this.firstRowId_)) {
          toHilite = lastId;
        } else {
          return false;
        }
      }
    }
    if (this.hiliteId(toHilite)) {
      return true;
    }
  }
  return false;
};
goog.ui.ac.AutoComplete.prototype.hiliteId = function(id) {
  var index = this.getIndexOfId(id);
  var row = this.rows_[index];
  var rowDisabled = !!row && this.matcher_.isRowDisabled && this.matcher_.isRowDisabled(row);
  if (!rowDisabled) {
    this.hiliteId_ = id;
    this.renderer_.hiliteId(id);
    return index != -1;
  }
  return false;
};
goog.ui.ac.AutoComplete.prototype.hiliteIndex = function(index) {
  return this.hiliteId(this.getIdOfIndex_(index));
};
goog.ui.ac.AutoComplete.prototype.selectHilited = function() {
  var index = this.getIndexOfId(this.hiliteId_);
  if (index != -1) {
    var selectedRow = this.rows_[index];
    var suppressUpdate = this.selectionHandler_.selectRow(selectedRow);
    if (this.triggerSuggestionsOnUpdate_) {
      this.token_ = null;
      this.dismissOnDelay();
    } else {
      this.dismiss();
    }
    if (!suppressUpdate) {
      this.dispatchEvent({type:goog.ui.ac.AutoComplete.EventType.UPDATE, row:selectedRow, index:index});
      if (this.triggerSuggestionsOnUpdate_) {
        this.selectionHandler_.update(true);
      }
    }
    return true;
  } else {
    this.dismiss();
    this.dispatchEvent({type:goog.ui.ac.AutoComplete.EventType.UPDATE, row:null, index:null});
    return false;
  }
};
goog.ui.ac.AutoComplete.prototype.hasHighlight = function() {
  return this.isOpen() && this.getIndexOfId(this.hiliteId_) != -1;
};
goog.ui.ac.AutoComplete.prototype.dismiss = function() {
  this.hiliteId_ = -1;
  this.token_ = null;
  this.firstRowId_ += this.rows_.length;
  this.rows_ = [];
  window.clearTimeout(this.dismissTimer_);
  this.dismissTimer_ = null;
  this.renderer_.dismiss();
  this.dispatchEvent(goog.ui.ac.AutoComplete.EventType.SUGGESTIONS_UPDATE);
  this.dispatchEvent(goog.ui.ac.AutoComplete.EventType.DISMISS);
};
goog.ui.ac.AutoComplete.prototype.dismissOnDelay = function() {
  if (!this.dismissTimer_) {
    this.dismissTimer_ = window.setTimeout(goog.bind(this.dismiss, this), 100);
  }
};
goog.ui.ac.AutoComplete.prototype.immediatelyCancelDelayedDismiss_ = function() {
  if (this.dismissTimer_) {
    window.clearTimeout(this.dismissTimer_);
    this.dismissTimer_ = null;
    return true;
  }
  return false;
};
goog.ui.ac.AutoComplete.prototype.cancelDelayedDismiss = function() {
  if (!this.immediatelyCancelDelayedDismiss_()) {
    window.setTimeout(goog.bind(this.immediatelyCancelDelayedDismiss_, this), 10);
  }
};
goog.ui.ac.AutoComplete.prototype.disposeInternal = function() {
  goog.ui.ac.AutoComplete.superClass_.disposeInternal.call(this);
  delete this.inputToAnchorMap_;
  this.renderer_.dispose();
  this.selectionHandler_.dispose();
  this.matcher_ = null;
};
goog.ui.ac.AutoComplete.prototype.matchListener_ = function(matchedToken, rows, opt_options) {
  if (this.token_ != matchedToken) {
    return;
  }
  this.renderRows(rows, opt_options);
};
goog.ui.ac.AutoComplete.prototype.renderRows = function(rows, opt_options) {
  var optionsObj = goog.typeOf(opt_options) == "object" && opt_options;
  var preserveHilited = optionsObj ? optionsObj.getPreserveHilited() : opt_options;
  var indexToHilite = preserveHilited ? this.getIndexOfId(this.hiliteId_) : -1;
  this.firstRowId_ += this.rows_.length;
  this.rows_ = rows;
  var rendRows = [];
  for (var i = 0; i < rows.length; ++i) {
    rendRows.push({id:this.getIdOfIndex_(i), data:rows[i]});
  }
  var anchor = null;
  if (this.target_) {
    anchor = this.inputToAnchorMap_[goog.getUid(this.target_)] || this.target_;
  }
  this.renderer_.setAnchorElement(anchor);
  this.renderer_.renderRows(rendRows, this.token_, this.target_);
  var autoHilite = this.autoHilite_;
  if (optionsObj && optionsObj.getAutoHilite() !== undefined) {
    autoHilite = optionsObj.getAutoHilite();
  }
  this.hiliteId_ = -1;
  if ((autoHilite || indexToHilite >= 0) && rendRows.length != 0 && this.token_) {
    if (indexToHilite >= 0) {
      this.hiliteId(this.getIdOfIndex_(indexToHilite));
    } else {
      this.hiliteNext();
    }
  }
  this.dispatchEvent(goog.ui.ac.AutoComplete.EventType.SUGGESTIONS_UPDATE);
};
goog.ui.ac.AutoComplete.prototype.getIndexOfId = function(id) {
  var index = id - this.firstRowId_;
  if (index < 0 || index >= this.rows_.length) {
    return -1;
  }
  return index;
};
goog.ui.ac.AutoComplete.prototype.getIdOfIndex_ = function(index) {
  return this.firstRowId_ + index;
};
goog.ui.ac.AutoComplete.prototype.attachInputs = function(var_args) {
  var inputHandler = this.selectionHandler_;
  inputHandler.attachInputs.apply(inputHandler, arguments);
};
goog.ui.ac.AutoComplete.prototype.detachInputs = function(var_args) {
  var inputHandler = this.selectionHandler_;
  inputHandler.detachInputs.apply(inputHandler, arguments);
  goog.array.forEach(arguments, function(input) {
    goog.object.remove(this.inputToAnchorMap_, goog.getUid(input));
  }, this);
};
goog.ui.ac.AutoComplete.prototype.attachInputWithAnchor = function(inputElement, anchorElement) {
  this.inputToAnchorMap_[goog.getUid(inputElement)] = anchorElement;
  this.attachInputs(inputElement);
};
goog.ui.ac.AutoComplete.prototype.update = function(opt_force) {
  var inputHandler = this.selectionHandler_;
  inputHandler.update(opt_force);
};
goog.provide("goog.Thenable");
goog.forwardDeclare("goog.Promise");
goog.Thenable = function() {
};
goog.Thenable.prototype.then = function(opt_onFulfilled, opt_onRejected, opt_context) {
};
goog.Thenable.IMPLEMENTED_BY_PROP = "$goog_Thenable";
goog.Thenable.addImplementation = function(ctor) {
  if (COMPILED) {
    ctor.prototype[goog.Thenable.IMPLEMENTED_BY_PROP] = true;
  } else {
    ctor.prototype.$goog_Thenable = true;
  }
};
goog.Thenable.isImplementedBy = function(object) {
  if (!object) {
    return false;
  }
  try {
    if (COMPILED) {
      return !!object[goog.Thenable.IMPLEMENTED_BY_PROP];
    }
    return !!object.$goog_Thenable;
  } catch (e) {
    return false;
  }
};
goog.provide("goog.async.FreeList");
goog.async.FreeList = class {
  constructor(create, reset, limit) {
    this.limit_ = limit;
    this.create_ = create;
    this.reset_ = reset;
    this.occupants_ = 0;
    this.head_ = null;
  }
  get() {
    let item;
    if (this.occupants_ > 0) {
      this.occupants_--;
      item = this.head_;
      this.head_ = item.next;
      item.next = null;
    } else {
      item = this.create_();
    }
    return item;
  }
  put(item) {
    this.reset_(item);
    if (this.occupants_ < this.limit_) {
      this.occupants_++;
      item.next = this.head_;
      this.head_ = item;
    }
  }
  occupants() {
    return this.occupants_;
  }
};
goog.provide("goog.async.WorkItem");
goog.provide("goog.async.WorkQueue");
goog.require("goog.asserts");
goog.require("goog.async.FreeList");
goog.async.WorkQueue = function() {
  this.workHead_ = null;
  this.workTail_ = null;
};
goog.async.WorkQueue.DEFAULT_MAX_UNUSED = goog.define("goog.async.WorkQueue.DEFAULT_MAX_UNUSED", 100);
goog.async.WorkQueue.freelist_ = new goog.async.FreeList(function() {
  return new goog.async.WorkItem;
}, function(item) {
  item.reset();
}, goog.async.WorkQueue.DEFAULT_MAX_UNUSED);
goog.async.WorkQueue.prototype.add = function(fn, scope) {
  var item = this.getUnusedItem_();
  item.set(fn, scope);
  if (this.workTail_) {
    this.workTail_.next = item;
    this.workTail_ = item;
  } else {
    goog.asserts.assert(!this.workHead_);
    this.workHead_ = item;
    this.workTail_ = item;
  }
};
goog.async.WorkQueue.prototype.remove = function() {
  var item = null;
  if (this.workHead_) {
    item = this.workHead_;
    this.workHead_ = this.workHead_.next;
    if (!this.workHead_) {
      this.workTail_ = null;
    }
    item.next = null;
  }
  return item;
};
goog.async.WorkQueue.prototype.returnUnused = function(item) {
  goog.async.WorkQueue.freelist_.put(item);
};
goog.async.WorkQueue.prototype.getUnusedItem_ = function() {
  return goog.async.WorkQueue.freelist_.get();
};
goog.async.WorkItem = function() {
  this.fn = null;
  this.scope = null;
  this.next = null;
};
goog.async.WorkItem.prototype.set = function(fn, scope) {
  this.fn = fn;
  this.scope = scope;
  this.next = null;
};
goog.async.WorkItem.prototype.reset = function() {
  this.fn = null;
  this.scope = null;
  this.next = null;
};
goog.provide("goog.async.run");
goog.require("goog.async.WorkQueue");
goog.require("goog.async.nextTick");
goog.require("goog.async.throwException");
goog.ASSUME_NATIVE_PROMISE = goog.define("goog.ASSUME_NATIVE_PROMISE", false);
goog.async.run = function(callback, opt_context) {
  if (!goog.async.run.schedule_) {
    goog.async.run.initializeRunner_();
  }
  if (!goog.async.run.workQueueScheduled_) {
    goog.async.run.schedule_();
    goog.async.run.workQueueScheduled_ = true;
  }
  goog.async.run.workQueue_.add(callback, opt_context);
};
goog.async.run.initializeRunner_ = function() {
  if (goog.ASSUME_NATIVE_PROMISE || goog.global.Promise && goog.global.Promise.resolve) {
    var promise = goog.global.Promise.resolve(undefined);
    goog.async.run.schedule_ = function() {
      promise.then(goog.async.run.processWorkQueue);
    };
  } else {
    goog.async.run.schedule_ = function() {
      goog.async.nextTick(goog.async.run.processWorkQueue);
    };
  }
};
goog.async.run.forceNextTick = function(opt_realSetTimeout) {
  goog.async.run.schedule_ = function() {
    goog.async.nextTick(goog.async.run.processWorkQueue);
    if (opt_realSetTimeout) {
      opt_realSetTimeout(goog.async.run.processWorkQueue);
    }
  };
};
goog.async.run.schedule_;
goog.async.run.workQueueScheduled_ = false;
goog.async.run.workQueue_ = new goog.async.WorkQueue;
if (goog.DEBUG) {
  goog.async.run.resetQueue = function() {
    goog.async.run.workQueueScheduled_ = false;
    goog.async.run.workQueue_ = new goog.async.WorkQueue;
  };
}
goog.async.run.processWorkQueue = function() {
  var item = null;
  while (item = goog.async.run.workQueue_.remove()) {
    try {
      item.fn.call(item.scope);
    } catch (e) {
      goog.async.throwException(e);
    }
    goog.async.run.workQueue_.returnUnused(item);
  }
  goog.async.run.workQueueScheduled_ = false;
};
goog.provide("goog.promise.Resolver");
goog.forwardDeclare("goog.Promise");
goog.promise.Resolver = function() {
};
goog.promise.Resolver.prototype.promise;
goog.promise.Resolver.prototype.resolve;
goog.promise.Resolver.prototype.reject;
goog.provide("goog.Promise");
goog.require("goog.Thenable");
goog.require("goog.asserts");
goog.require("goog.async.FreeList");
goog.require("goog.async.run");
goog.require("goog.async.throwException");
goog.require("goog.debug.Error");
goog.require("goog.promise.Resolver");
goog.Promise = function(resolver, opt_context) {
  this.state_ = goog.Promise.State_.PENDING;
  this.result_ = undefined;
  this.parent_ = null;
  this.callbackEntries_ = null;
  this.callbackEntriesTail_ = null;
  this.executing_ = false;
  if (goog.Promise.UNHANDLED_REJECTION_DELAY > 0) {
    this.unhandledRejectionId_ = 0;
  } else {
    if (goog.Promise.UNHANDLED_REJECTION_DELAY == 0) {
      this.hadUnhandledRejection_ = false;
    }
  }
  if (goog.Promise.LONG_STACK_TRACES) {
    this.stack_ = [];
    this.addStackTrace_(new Error("created"));
    this.currentStep_ = 0;
  }
  if (resolver != goog.nullFunction) {
    try {
      var self = this;
      resolver.call(opt_context, function(value) {
        self.resolve_(goog.Promise.State_.FULFILLED, value);
      }, function(reason) {
        if (goog.DEBUG && !(reason instanceof goog.Promise.CancellationError)) {
          try {
            if (reason instanceof Error) {
              throw reason;
            } else {
              throw new Error("Promise rejected.");
            }
          } catch (e) {
          }
        }
        self.resolve_(goog.Promise.State_.REJECTED, reason);
      });
    } catch (e) {
      this.resolve_(goog.Promise.State_.REJECTED, e);
    }
  }
};
goog.Promise.LONG_STACK_TRACES = goog.define("goog.Promise.LONG_STACK_TRACES", false);
goog.Promise.UNHANDLED_REJECTION_DELAY = goog.define("goog.Promise.UNHANDLED_REJECTION_DELAY", 0);
goog.Promise.State_ = {PENDING:0, BLOCKED:1, FULFILLED:2, REJECTED:3};
goog.Promise.CallbackEntry_ = function() {
  this.child = null;
  this.onFulfilled = null;
  this.onRejected = null;
  this.context = null;
  this.next = null;
  this.always = false;
};
goog.Promise.CallbackEntry_.prototype.reset = function() {
  this.child = null;
  this.onFulfilled = null;
  this.onRejected = null;
  this.context = null;
  this.always = false;
};
goog.Promise.DEFAULT_MAX_UNUSED = goog.define("goog.Promise.DEFAULT_MAX_UNUSED", 100);
goog.Promise.freelist_ = new goog.async.FreeList(function() {
  return new goog.Promise.CallbackEntry_;
}, function(item) {
  item.reset();
}, goog.Promise.DEFAULT_MAX_UNUSED);
goog.Promise.getCallbackEntry_ = function(onFulfilled, onRejected, context) {
  var entry = goog.Promise.freelist_.get();
  entry.onFulfilled = onFulfilled;
  entry.onRejected = onRejected;
  entry.context = context;
  return entry;
};
goog.Promise.returnEntry_ = function(entry) {
  goog.Promise.freelist_.put(entry);
};
goog.Promise.resolve = function(opt_value) {
  if (opt_value instanceof goog.Promise) {
    return opt_value;
  }
  var promise = new goog.Promise(goog.nullFunction);
  promise.resolve_(goog.Promise.State_.FULFILLED, opt_value);
  return promise;
};
goog.Promise.reject = function(opt_reason) {
  return new goog.Promise(function(resolve, reject) {
    reject(opt_reason);
  });
};
goog.Promise.resolveThen_ = function(value, onFulfilled, onRejected) {
  var isThenable = goog.Promise.maybeThen_(value, onFulfilled, onRejected, null);
  if (!isThenable) {
    goog.async.run(goog.partial(onFulfilled, value));
  }
};
goog.Promise.race = function(promises) {
  return new goog.Promise(function(resolve, reject) {
    if (!promises.length) {
      resolve(undefined);
    }
    for (var i = 0, promise; i < promises.length; i++) {
      promise = promises[i];
      goog.Promise.resolveThen_(promise, resolve, reject);
    }
  });
};
goog.Promise.all = function(promises) {
  return new goog.Promise(function(resolve, reject) {
    var toFulfill = promises.length;
    var values = [];
    if (!toFulfill) {
      resolve(values);
      return;
    }
    var onFulfill = function(index, value) {
      toFulfill--;
      values[index] = value;
      if (toFulfill == 0) {
        resolve(values);
      }
    };
    var onReject = function(reason) {
      reject(reason);
    };
    for (var i = 0, promise; i < promises.length; i++) {
      promise = promises[i];
      goog.Promise.resolveThen_(promise, goog.partial(onFulfill, i), onReject);
    }
  });
};
goog.Promise.allSettled = function(promises) {
  return new goog.Promise(function(resolve, reject) {
    var toSettle = promises.length;
    var results = [];
    if (!toSettle) {
      resolve(results);
      return;
    }
    var onSettled = function(index, fulfilled, result) {
      toSettle--;
      results[index] = fulfilled ? {fulfilled:true, value:result} : {fulfilled:false, reason:result};
      if (toSettle == 0) {
        resolve(results);
      }
    };
    for (var i = 0, promise; i < promises.length; i++) {
      promise = promises[i];
      goog.Promise.resolveThen_(promise, goog.partial(onSettled, i, true), goog.partial(onSettled, i, false));
    }
  });
};
goog.Promise.firstFulfilled = function(promises) {
  return new goog.Promise(function(resolve, reject) {
    var toReject = promises.length;
    var reasons = [];
    if (!toReject) {
      resolve(undefined);
      return;
    }
    var onFulfill = function(value) {
      resolve(value);
    };
    var onReject = function(index, reason) {
      toReject--;
      reasons[index] = reason;
      if (toReject == 0) {
        reject(reasons);
      }
    };
    for (var i = 0, promise; i < promises.length; i++) {
      promise = promises[i];
      goog.Promise.resolveThen_(promise, onFulfill, goog.partial(onReject, i));
    }
  });
};
goog.Promise.withResolver = function() {
  var resolve, reject;
  var promise = new goog.Promise(function(rs, rj) {
    resolve = rs;
    reject = rj;
  });
  return new goog.Promise.Resolver_(promise, resolve, reject);
};
goog.Promise.prototype.then = function(opt_onFulfilled, opt_onRejected, opt_context) {
  if (opt_onFulfilled != null) {
    goog.asserts.assertFunction(opt_onFulfilled, "opt_onFulfilled should be a function.");
  }
  if (opt_onRejected != null) {
    goog.asserts.assertFunction(opt_onRejected, "opt_onRejected should be a function. Did you pass opt_context " + "as the second argument instead of the third?");
  }
  if (goog.Promise.LONG_STACK_TRACES) {
    this.addStackTrace_(new Error("then"));
  }
  return this.addChildPromise_(goog.isFunction(opt_onFulfilled) ? opt_onFulfilled : null, goog.isFunction(opt_onRejected) ? opt_onRejected : null, opt_context);
};
goog.Thenable.addImplementation(goog.Promise);
goog.Promise.prototype.thenVoid = function(opt_onFulfilled, opt_onRejected, opt_context) {
  if (opt_onFulfilled != null) {
    goog.asserts.assertFunction(opt_onFulfilled, "opt_onFulfilled should be a function.");
  }
  if (opt_onRejected != null) {
    goog.asserts.assertFunction(opt_onRejected, "opt_onRejected should be a function. Did you pass opt_context " + "as the second argument instead of the third?");
  }
  if (goog.Promise.LONG_STACK_TRACES) {
    this.addStackTrace_(new Error("then"));
  }
  this.addCallbackEntry_(goog.Promise.getCallbackEntry_(opt_onFulfilled || goog.nullFunction, opt_onRejected || null, opt_context));
};
goog.Promise.prototype.thenAlways = function(onSettled, opt_context) {
  if (goog.Promise.LONG_STACK_TRACES) {
    this.addStackTrace_(new Error("thenAlways"));
  }
  var entry = goog.Promise.getCallbackEntry_(onSettled, onSettled, opt_context);
  entry.always = true;
  this.addCallbackEntry_(entry);
  return this;
};
goog.Promise.prototype.thenCatch = function(onRejected, opt_context) {
  if (goog.Promise.LONG_STACK_TRACES) {
    this.addStackTrace_(new Error("thenCatch"));
  }
  return this.addChildPromise_(null, onRejected, opt_context);
};
goog.Promise.prototype.cancel = function(opt_message) {
  if (this.state_ == goog.Promise.State_.PENDING) {
    var err = new goog.Promise.CancellationError(opt_message);
    goog.async.run(function() {
      this.cancelInternal_(err);
    }, this);
  }
};
goog.Promise.prototype.cancelInternal_ = function(err) {
  if (this.state_ == goog.Promise.State_.PENDING) {
    if (this.parent_) {
      this.parent_.cancelChild_(this, err);
      this.parent_ = null;
    } else {
      this.resolve_(goog.Promise.State_.REJECTED, err);
    }
  }
};
goog.Promise.prototype.cancelChild_ = function(childPromise, err) {
  if (!this.callbackEntries_) {
    return;
  }
  var childCount = 0;
  var childEntry = null;
  var beforeChildEntry = null;
  for (var entry = this.callbackEntries_; entry; entry = entry.next) {
    if (!entry.always) {
      childCount++;
      if (entry.child == childPromise) {
        childEntry = entry;
      }
      if (childEntry && childCount > 1) {
        break;
      }
    }
    if (!childEntry) {
      beforeChildEntry = entry;
    }
  }
  if (childEntry) {
    if (this.state_ == goog.Promise.State_.PENDING && childCount == 1) {
      this.cancelInternal_(err);
    } else {
      if (beforeChildEntry) {
        this.removeEntryAfter_(beforeChildEntry);
      } else {
        this.popEntry_();
      }
      this.executeCallback_(childEntry, goog.Promise.State_.REJECTED, err);
    }
  }
};
goog.Promise.prototype.addCallbackEntry_ = function(callbackEntry) {
  if (!this.hasEntry_() && (this.state_ == goog.Promise.State_.FULFILLED || this.state_ == goog.Promise.State_.REJECTED)) {
    this.scheduleCallbacks_();
  }
  this.queueEntry_(callbackEntry);
};
goog.Promise.prototype.addChildPromise_ = function(onFulfilled, onRejected, opt_context) {
  var callbackEntry = goog.Promise.getCallbackEntry_(null, null, null);
  callbackEntry.child = new goog.Promise(function(resolve, reject) {
    callbackEntry.onFulfilled = onFulfilled ? function(value) {
      try {
        var result = onFulfilled.call(opt_context, value);
        resolve(result);
      } catch (err) {
        reject(err);
      }
    } : resolve;
    callbackEntry.onRejected = onRejected ? function(reason) {
      try {
        var result = onRejected.call(opt_context, reason);
        if (result === undefined && reason instanceof goog.Promise.CancellationError) {
          reject(reason);
        } else {
          resolve(result);
        }
      } catch (err) {
        reject(err);
      }
    } : reject;
  });
  callbackEntry.child.parent_ = this;
  this.addCallbackEntry_(callbackEntry);
  return callbackEntry.child;
};
goog.Promise.prototype.unblockAndFulfill_ = function(value) {
  goog.asserts.assert(this.state_ == goog.Promise.State_.BLOCKED);
  this.state_ = goog.Promise.State_.PENDING;
  this.resolve_(goog.Promise.State_.FULFILLED, value);
};
goog.Promise.prototype.unblockAndReject_ = function(reason) {
  goog.asserts.assert(this.state_ == goog.Promise.State_.BLOCKED);
  this.state_ = goog.Promise.State_.PENDING;
  this.resolve_(goog.Promise.State_.REJECTED, reason);
};
goog.Promise.prototype.resolve_ = function(state, x) {
  if (this.state_ != goog.Promise.State_.PENDING) {
    return;
  }
  if (this === x) {
    state = goog.Promise.State_.REJECTED;
    x = new TypeError("Promise cannot resolve to itself");
  }
  this.state_ = goog.Promise.State_.BLOCKED;
  var isThenable = goog.Promise.maybeThen_(x, this.unblockAndFulfill_, this.unblockAndReject_, this);
  if (isThenable) {
    return;
  }
  this.result_ = x;
  this.state_ = state;
  this.parent_ = null;
  this.scheduleCallbacks_();
  if (state == goog.Promise.State_.REJECTED && !(x instanceof goog.Promise.CancellationError)) {
    goog.Promise.addUnhandledRejection_(this, x);
  }
};
goog.Promise.maybeThen_ = function(value, onFulfilled, onRejected, context) {
  if (value instanceof goog.Promise) {
    value.thenVoid(onFulfilled, onRejected, context);
    return true;
  } else {
    if (goog.Thenable.isImplementedBy(value)) {
      value = value;
      value.then(onFulfilled, onRejected, context);
      return true;
    } else {
      if (goog.isObject(value)) {
        try {
          var then = value["then"];
          if (goog.isFunction(then)) {
            goog.Promise.tryThen_(value, then, onFulfilled, onRejected, context);
            return true;
          }
        } catch (e) {
          onRejected.call(context, e);
          return true;
        }
      }
    }
  }
  return false;
};
goog.Promise.tryThen_ = function(thenable, then, onFulfilled, onRejected, context) {
  var called = false;
  var resolve = function(value) {
    if (!called) {
      called = true;
      onFulfilled.call(context, value);
    }
  };
  var reject = function(reason) {
    if (!called) {
      called = true;
      onRejected.call(context, reason);
    }
  };
  try {
    then.call(thenable, resolve, reject);
  } catch (e) {
    reject(e);
  }
};
goog.Promise.prototype.scheduleCallbacks_ = function() {
  if (!this.executing_) {
    this.executing_ = true;
    goog.async.run(this.executeCallbacks_, this);
  }
};
goog.Promise.prototype.hasEntry_ = function() {
  return !!this.callbackEntries_;
};
goog.Promise.prototype.queueEntry_ = function(entry) {
  goog.asserts.assert(entry.onFulfilled != null);
  if (this.callbackEntriesTail_) {
    this.callbackEntriesTail_.next = entry;
    this.callbackEntriesTail_ = entry;
  } else {
    this.callbackEntries_ = entry;
    this.callbackEntriesTail_ = entry;
  }
};
goog.Promise.prototype.popEntry_ = function() {
  var entry = null;
  if (this.callbackEntries_) {
    entry = this.callbackEntries_;
    this.callbackEntries_ = entry.next;
    entry.next = null;
  }
  if (!this.callbackEntries_) {
    this.callbackEntriesTail_ = null;
  }
  if (entry != null) {
    goog.asserts.assert(entry.onFulfilled != null);
  }
  return entry;
};
goog.Promise.prototype.removeEntryAfter_ = function(previous) {
  goog.asserts.assert(this.callbackEntries_);
  goog.asserts.assert(previous != null);
  if (previous.next == this.callbackEntriesTail_) {
    this.callbackEntriesTail_ = previous;
  }
  previous.next = previous.next.next;
};
goog.Promise.prototype.executeCallbacks_ = function() {
  var entry = null;
  while (entry = this.popEntry_()) {
    if (goog.Promise.LONG_STACK_TRACES) {
      this.currentStep_++;
    }
    this.executeCallback_(entry, this.state_, this.result_);
  }
  this.executing_ = false;
};
goog.Promise.prototype.executeCallback_ = function(callbackEntry, state, result) {
  if (state == goog.Promise.State_.REJECTED && callbackEntry.onRejected && !callbackEntry.always) {
    this.removeUnhandledRejection_();
  }
  if (callbackEntry.child) {
    callbackEntry.child.parent_ = null;
    goog.Promise.invokeCallback_(callbackEntry, state, result);
  } else {
    try {
      callbackEntry.always ? callbackEntry.onFulfilled.call(callbackEntry.context) : goog.Promise.invokeCallback_(callbackEntry, state, result);
    } catch (err) {
      goog.Promise.handleRejection_.call(null, err);
    }
  }
  goog.Promise.returnEntry_(callbackEntry);
};
goog.Promise.invokeCallback_ = function(callbackEntry, state, result) {
  if (state == goog.Promise.State_.FULFILLED) {
    callbackEntry.onFulfilled.call(callbackEntry.context, result);
  } else {
    if (callbackEntry.onRejected) {
      callbackEntry.onRejected.call(callbackEntry.context, result);
    }
  }
};
goog.Promise.prototype.addStackTrace_ = function(err) {
  if (goog.Promise.LONG_STACK_TRACES && typeof err.stack === "string") {
    var trace = err.stack.split("\n", 4)[3];
    var message = err.message;
    message += Array(11 - message.length).join(" ");
    this.stack_.push(message + trace);
  }
};
goog.Promise.prototype.appendLongStack_ = function(err) {
  if (goog.Promise.LONG_STACK_TRACES && err && typeof err.stack === "string" && this.stack_.length) {
    var longTrace = ["Promise trace:"];
    for (var promise = this; promise; promise = promise.parent_) {
      for (var i = this.currentStep_; i >= 0; i--) {
        longTrace.push(promise.stack_[i]);
      }
      longTrace.push("Value: " + "[" + (promise.state_ == goog.Promise.State_.REJECTED ? "REJECTED" : "FULFILLED") + "] " + "\x3c" + String(promise.result_) + "\x3e");
    }
    err.stack += "\n\n" + longTrace.join("\n");
  }
};
goog.Promise.prototype.removeUnhandledRejection_ = function() {
  if (goog.Promise.UNHANDLED_REJECTION_DELAY > 0) {
    for (var p = this; p && p.unhandledRejectionId_; p = p.parent_) {
      goog.global.clearTimeout(p.unhandledRejectionId_);
      p.unhandledRejectionId_ = 0;
    }
  } else {
    if (goog.Promise.UNHANDLED_REJECTION_DELAY == 0) {
      for (var p = this; p && p.hadUnhandledRejection_; p = p.parent_) {
        p.hadUnhandledRejection_ = false;
      }
    }
  }
};
goog.Promise.addUnhandledRejection_ = function(promise, reason) {
  if (goog.Promise.UNHANDLED_REJECTION_DELAY > 0) {
    promise.unhandledRejectionId_ = goog.global.setTimeout(function() {
      promise.appendLongStack_(reason);
      goog.Promise.handleRejection_.call(null, reason);
    }, goog.Promise.UNHANDLED_REJECTION_DELAY);
  } else {
    if (goog.Promise.UNHANDLED_REJECTION_DELAY == 0) {
      promise.hadUnhandledRejection_ = true;
      goog.async.run(function() {
        if (promise.hadUnhandledRejection_) {
          promise.appendLongStack_(reason);
          goog.Promise.handleRejection_.call(null, reason);
        }
      });
    }
  }
};
goog.Promise.handleRejection_ = goog.async.throwException;
goog.Promise.setUnhandledRejectionHandler = function(handler) {
  goog.Promise.handleRejection_ = handler;
};
goog.Promise.CancellationError = function(opt_message) {
  goog.Promise.CancellationError.base(this, "constructor", opt_message);
};
goog.inherits(goog.Promise.CancellationError, goog.debug.Error);
goog.Promise.CancellationError.prototype.name = "cancel";
goog.Promise.Resolver_ = function(promise, resolve, reject) {
  this.promise = promise;
  this.resolve = resolve;
  this.reject = reject;
};
goog.provide("goog.Timer");
goog.require("goog.Promise");
goog.require("goog.events.EventTarget");
goog.Timer = function(opt_interval, opt_timerObject) {
  goog.events.EventTarget.call(this);
  this.interval_ = opt_interval || 1;
  this.timerObject_ = opt_timerObject || goog.Timer.defaultTimerObject;
  this.boundTick_ = goog.bind(this.tick_, this);
  this.last_ = goog.now();
};
goog.inherits(goog.Timer, goog.events.EventTarget);
goog.Timer.MAX_TIMEOUT_ = 2147483647;
goog.Timer.INVALID_TIMEOUT_ID_ = -1;
goog.Timer.prototype.enabled = false;
goog.Timer.defaultTimerObject = goog.global;
goog.Timer.intervalScale = 0.8;
goog.Timer.prototype.timer_ = null;
goog.Timer.prototype.getInterval = function() {
  return this.interval_;
};
goog.Timer.prototype.setInterval = function(interval) {
  this.interval_ = interval;
  if (this.timer_ && this.enabled) {
    this.stop();
    this.start();
  } else {
    if (this.timer_) {
      this.stop();
    }
  }
};
goog.Timer.prototype.tick_ = function() {
  if (this.enabled) {
    var elapsed = goog.now() - this.last_;
    if (elapsed > 0 && elapsed < this.interval_ * goog.Timer.intervalScale) {
      this.timer_ = this.timerObject_.setTimeout(this.boundTick_, this.interval_ - elapsed);
      return;
    }
    if (this.timer_) {
      this.timerObject_.clearTimeout(this.timer_);
      this.timer_ = null;
    }
    this.dispatchTick();
    if (this.enabled) {
      this.stop();
      this.start();
    }
  }
};
goog.Timer.prototype.dispatchTick = function() {
  this.dispatchEvent(goog.Timer.TICK);
};
goog.Timer.prototype.start = function() {
  this.enabled = true;
  if (!this.timer_) {
    this.timer_ = this.timerObject_.setTimeout(this.boundTick_, this.interval_);
    this.last_ = goog.now();
  }
};
goog.Timer.prototype.stop = function() {
  this.enabled = false;
  if (this.timer_) {
    this.timerObject_.clearTimeout(this.timer_);
    this.timer_ = null;
  }
};
goog.Timer.prototype.disposeInternal = function() {
  goog.Timer.superClass_.disposeInternal.call(this);
  this.stop();
  delete this.timerObject_;
};
goog.Timer.TICK = "tick";
goog.Timer.callOnce = function(listener, opt_delay, opt_handler) {
  if (goog.isFunction(listener)) {
    if (opt_handler) {
      listener = goog.bind(listener, opt_handler);
    }
  } else {
    if (listener && typeof listener.handleEvent == "function") {
      listener = goog.bind(listener.handleEvent, listener);
    } else {
      throw new Error("Invalid listener argument");
    }
  }
  if (Number(opt_delay) > goog.Timer.MAX_TIMEOUT_) {
    return goog.Timer.INVALID_TIMEOUT_ID_;
  } else {
    return goog.Timer.defaultTimerObject.setTimeout(listener, opt_delay || 0);
  }
};
goog.Timer.clear = function(timerId) {
  goog.Timer.defaultTimerObject.clearTimeout(timerId);
};
goog.Timer.promise = function(delay, opt_result) {
  var timerKey = null;
  return (new goog.Promise(function(resolve, reject) {
    timerKey = goog.Timer.callOnce(function() {
      resolve(opt_result);
    }, delay);
    if (timerKey == goog.Timer.INVALID_TIMEOUT_ID_) {
      reject(new Error("Failed to schedule timer."));
    }
  })).thenCatch(function(error) {
    goog.Timer.clear(timerKey);
    throw error;
  });
};
goog.provide("goog.a11y.aria.Role");
goog.a11y.aria.Role = {ALERT:"alert", ALERTDIALOG:"alertdialog", APPLICATION:"application", ARTICLE:"article", BANNER:"banner", BUTTON:"button", CHECKBOX:"checkbox", COLUMNHEADER:"columnheader", COMBOBOX:"combobox", COMPLEMENTARY:"complementary", CONTENTINFO:"contentinfo", DEFINITION:"definition", DIALOG:"dialog", DIRECTORY:"directory", DOCUMENT:"document", FORM:"form", GRID:"grid", GRIDCELL:"gridcell", GROUP:"group", HEADING:"heading", IMG:"img", LINK:"link", LIST:"list", LISTBOX:"listbox", LISTITEM:"listitem", 
LOG:"log", MAIN:"main", MARQUEE:"marquee", MATH:"math", MENU:"menu", MENUBAR:"menubar", MENU_ITEM:"menuitem", MENU_ITEM_CHECKBOX:"menuitemcheckbox", MENU_ITEM_RADIO:"menuitemradio", NAVIGATION:"navigation", NOTE:"note", OPTION:"option", PRESENTATION:"presentation", PROGRESSBAR:"progressbar", RADIO:"radio", RADIOGROUP:"radiogroup", REGION:"region", ROW:"row", ROWGROUP:"rowgroup", ROWHEADER:"rowheader", SCROLLBAR:"scrollbar", SEARCH:"search", SEPARATOR:"separator", SLIDER:"slider", SPINBUTTON:"spinbutton", 
STATUS:"status", TAB:"tab", TAB_LIST:"tablist", TAB_PANEL:"tabpanel", TEXTBOX:"textbox", TEXTINFO:"textinfo", TIMER:"timer", TOOLBAR:"toolbar", TOOLTIP:"tooltip", TREE:"tree", TREEGRID:"treegrid", TREEITEM:"treeitem"};
goog.provide("goog.a11y.aria.AutoCompleteValues");
goog.provide("goog.a11y.aria.CheckedValues");
goog.provide("goog.a11y.aria.DropEffectValues");
goog.provide("goog.a11y.aria.ExpandedValues");
goog.provide("goog.a11y.aria.GrabbedValues");
goog.provide("goog.a11y.aria.InvalidValues");
goog.provide("goog.a11y.aria.LivePriority");
goog.provide("goog.a11y.aria.OrientationValues");
goog.provide("goog.a11y.aria.PressedValues");
goog.provide("goog.a11y.aria.RelevantValues");
goog.provide("goog.a11y.aria.SelectedValues");
goog.provide("goog.a11y.aria.SortValues");
goog.provide("goog.a11y.aria.State");
goog.a11y.aria.State = {ACTIVEDESCENDANT:"activedescendant", ATOMIC:"atomic", AUTOCOMPLETE:"autocomplete", BUSY:"busy", CHECKED:"checked", COLINDEX:"colindex", CONTROLS:"controls", DESCRIBEDBY:"describedby", DISABLED:"disabled", DROPEFFECT:"dropeffect", EXPANDED:"expanded", FLOWTO:"flowto", GRABBED:"grabbed", HASPOPUP:"haspopup", HIDDEN:"hidden", INVALID:"invalid", LABEL:"label", LABELLEDBY:"labelledby", LEVEL:"level", LIVE:"live", MULTILINE:"multiline", MULTISELECTABLE:"multiselectable", ORIENTATION:"orientation", 
OWNS:"owns", POSINSET:"posinset", PRESSED:"pressed", READONLY:"readonly", RELEVANT:"relevant", REQUIRED:"required", ROWINDEX:"rowindex", SELECTED:"selected", SETSIZE:"setsize", SORT:"sort", VALUEMAX:"valuemax", VALUEMIN:"valuemin", VALUENOW:"valuenow", VALUETEXT:"valuetext"};
goog.a11y.aria.AutoCompleteValues = {INLINE:"inline", LIST:"list", BOTH:"both", NONE:"none"};
goog.a11y.aria.DropEffectValues = {COPY:"copy", MOVE:"move", LINK:"link", EXECUTE:"execute", POPUP:"popup", NONE:"none"};
goog.a11y.aria.LivePriority = {OFF:"off", POLITE:"polite", ASSERTIVE:"assertive"};
goog.a11y.aria.OrientationValues = {VERTICAL:"vertical", HORIZONTAL:"horizontal"};
goog.a11y.aria.RelevantValues = {ADDITIONS:"additions", REMOVALS:"removals", TEXT:"text", ALL:"all"};
goog.a11y.aria.SortValues = {ASCENDING:"ascending", DESCENDING:"descending", NONE:"none", OTHER:"other"};
goog.a11y.aria.CheckedValues = {TRUE:"true", FALSE:"false", MIXED:"mixed", UNDEFINED:"undefined"};
goog.a11y.aria.ExpandedValues = {TRUE:"true", FALSE:"false", UNDEFINED:"undefined"};
goog.a11y.aria.GrabbedValues = {TRUE:"true", FALSE:"false", UNDEFINED:"undefined"};
goog.a11y.aria.InvalidValues = {FALSE:"false", TRUE:"true", GRAMMAR:"grammar", SPELLING:"spelling"};
goog.a11y.aria.PressedValues = {TRUE:"true", FALSE:"false", MIXED:"mixed", UNDEFINED:"undefined"};
goog.a11y.aria.SelectedValues = {TRUE:"true", FALSE:"false", UNDEFINED:"undefined"};
goog.provide("goog.a11y.aria.datatables");
goog.require("goog.a11y.aria.State");
goog.require("goog.object");
goog.a11y.aria.DefaultStateValueMap_;
goog.a11y.aria.datatables.getDefaultValuesMap = function() {
  if (!goog.a11y.aria.DefaultStateValueMap_) {
    goog.a11y.aria.DefaultStateValueMap_ = goog.object.create(goog.a11y.aria.State.ATOMIC, false, goog.a11y.aria.State.AUTOCOMPLETE, "none", goog.a11y.aria.State.DROPEFFECT, "none", goog.a11y.aria.State.HASPOPUP, false, goog.a11y.aria.State.LIVE, "off", goog.a11y.aria.State.MULTILINE, false, goog.a11y.aria.State.MULTISELECTABLE, false, goog.a11y.aria.State.ORIENTATION, "vertical", goog.a11y.aria.State.READONLY, false, goog.a11y.aria.State.RELEVANT, "additions text", goog.a11y.aria.State.REQUIRED, 
    false, goog.a11y.aria.State.SORT, "none", goog.a11y.aria.State.BUSY, false, goog.a11y.aria.State.DISABLED, false, goog.a11y.aria.State.HIDDEN, false, goog.a11y.aria.State.INVALID, "false");
  }
  return goog.a11y.aria.DefaultStateValueMap_;
};
goog.provide("goog.a11y.aria");
goog.require("goog.a11y.aria.Role");
goog.require("goog.a11y.aria.State");
goog.require("goog.a11y.aria.datatables");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.dom");
goog.require("goog.dom.TagName");
goog.require("goog.object");
goog.require("goog.string");
goog.a11y.aria.ARIA_PREFIX_ = "aria-";
goog.a11y.aria.ROLE_ATTRIBUTE_ = "role";
goog.a11y.aria.TAGS_WITH_ASSUMED_ROLES_ = goog.object.createSet([goog.dom.TagName.A, goog.dom.TagName.AREA, goog.dom.TagName.BUTTON, goog.dom.TagName.HEAD, goog.dom.TagName.INPUT, goog.dom.TagName.LINK, goog.dom.TagName.MENU, goog.dom.TagName.META, goog.dom.TagName.OPTGROUP, goog.dom.TagName.OPTION, goog.dom.TagName.PROGRESS, goog.dom.TagName.STYLE, goog.dom.TagName.SELECT, goog.dom.TagName.SOURCE, goog.dom.TagName.TEXTAREA, goog.dom.TagName.TITLE, goog.dom.TagName.TRACK]);
goog.a11y.aria.CONTAINER_ROLES_ = [goog.a11y.aria.Role.COMBOBOX, goog.a11y.aria.Role.GRID, goog.a11y.aria.Role.GROUP, goog.a11y.aria.Role.LISTBOX, goog.a11y.aria.Role.MENU, goog.a11y.aria.Role.MENUBAR, goog.a11y.aria.Role.RADIOGROUP, goog.a11y.aria.Role.ROW, goog.a11y.aria.Role.ROWGROUP, goog.a11y.aria.Role.TAB_LIST, goog.a11y.aria.Role.TEXTBOX, goog.a11y.aria.Role.TOOLBAR, goog.a11y.aria.Role.TREE, goog.a11y.aria.Role.TREEGRID];
goog.a11y.aria.setRole = function(element, roleName) {
  if (!roleName) {
    goog.a11y.aria.removeRole(element);
  } else {
    if (goog.asserts.ENABLE_ASSERTS) {
      goog.asserts.assert(goog.object.containsValue(goog.a11y.aria.Role, roleName), "No such ARIA role " + roleName);
    }
    element.setAttribute(goog.a11y.aria.ROLE_ATTRIBUTE_, roleName);
  }
};
goog.a11y.aria.getRole = function(element) {
  var role = element.getAttribute(goog.a11y.aria.ROLE_ATTRIBUTE_);
  return role || null;
};
goog.a11y.aria.removeRole = function(element) {
  element.removeAttribute(goog.a11y.aria.ROLE_ATTRIBUTE_);
};
goog.a11y.aria.setState = function(element, stateName, value) {
  if (goog.isArray(value)) {
    value = value.join(" ");
  }
  var attrStateName = goog.a11y.aria.getAriaAttributeName_(stateName);
  if (value === "" || value == undefined) {
    var defaultValueMap = goog.a11y.aria.datatables.getDefaultValuesMap();
    if (stateName in defaultValueMap) {
      element.setAttribute(attrStateName, defaultValueMap[stateName]);
    } else {
      element.removeAttribute(attrStateName);
    }
  } else {
    element.setAttribute(attrStateName, value);
  }
};
goog.a11y.aria.toggleState = function(el, attr) {
  var val = goog.a11y.aria.getState(el, attr);
  if (!goog.string.isEmptyOrWhitespace(goog.string.makeSafe(val)) && !(val == "true" || val == "false")) {
    goog.a11y.aria.removeState(el, attr);
    return;
  }
  goog.a11y.aria.setState(el, attr, val == "true" ? "false" : "true");
};
goog.a11y.aria.removeState = function(element, stateName) {
  element.removeAttribute(goog.a11y.aria.getAriaAttributeName_(stateName));
};
goog.a11y.aria.getState = function(element, stateName) {
  var attr = element.getAttribute(goog.a11y.aria.getAriaAttributeName_(stateName));
  var isNullOrUndefined = attr == null || attr == undefined;
  return isNullOrUndefined ? "" : String(attr);
};
goog.a11y.aria.getActiveDescendant = function(element) {
  var id = goog.a11y.aria.getState(element, goog.a11y.aria.State.ACTIVEDESCENDANT);
  return goog.dom.getOwnerDocument(element).getElementById(id);
};
goog.a11y.aria.setActiveDescendant = function(element, activeElement) {
  var id = "";
  if (activeElement) {
    id = activeElement.id;
    goog.asserts.assert(id, "The active element should have an id.");
  }
  goog.a11y.aria.setState(element, goog.a11y.aria.State.ACTIVEDESCENDANT, id);
};
goog.a11y.aria.getLabel = function(element) {
  return goog.a11y.aria.getState(element, goog.a11y.aria.State.LABEL);
};
goog.a11y.aria.setLabel = function(element, label) {
  goog.a11y.aria.setState(element, goog.a11y.aria.State.LABEL, label);
};
goog.a11y.aria.assertRoleIsSetInternalUtil = function(element, allowedRoles) {
  if (goog.a11y.aria.TAGS_WITH_ASSUMED_ROLES_[element.tagName]) {
    return;
  }
  var elementRole = goog.a11y.aria.getRole(element);
  goog.asserts.assert(elementRole != null, "The element ARIA role cannot be null.");
  goog.asserts.assert(goog.array.contains(allowedRoles, elementRole), "Non existing or incorrect role set for element." + 'The role set is "' + elementRole + '". The role should be any of "' + allowedRoles + '". Check the ARIA specification for more details ' + "http://www.w3.org/TR/wai-aria/roles.");
};
goog.a11y.aria.getStateBoolean = function(element, stateName) {
  var attr = element.getAttribute(goog.a11y.aria.getAriaAttributeName_(stateName));
  goog.asserts.assert(typeof attr === "boolean" || attr == null || attr == "true" || attr == "false");
  if (attr == null) {
    return attr;
  }
  return typeof attr === "boolean" ? attr : attr == "true";
};
goog.a11y.aria.getStateNumber = function(element, stateName) {
  var attr = element.getAttribute(goog.a11y.aria.getAriaAttributeName_(stateName));
  goog.asserts.assert((attr == null || !isNaN(Number(attr))) && typeof attr !== "boolean");
  return attr == null ? null : Number(attr);
};
goog.a11y.aria.getStateString = function(element, stateName) {
  var attr = element.getAttribute(goog.a11y.aria.getAriaAttributeName_(stateName));
  goog.asserts.assert((attr == null || typeof attr === "string") && (attr == "" || isNaN(Number(attr))) && attr != "true" && attr != "false");
  return attr == null || attr == "" ? null : attr;
};
goog.a11y.aria.getStringArrayStateInternalUtil = function(element, stateName) {
  var attrValue = element.getAttribute(goog.a11y.aria.getAriaAttributeName_(stateName));
  return goog.a11y.aria.splitStringOnWhitespace_(attrValue);
};
goog.a11y.aria.hasState = function(element, stateName) {
  return element.hasAttribute(goog.a11y.aria.getAriaAttributeName_(stateName));
};
goog.a11y.aria.isContainerRole = function(element) {
  var role = goog.a11y.aria.getRole(element);
  return goog.array.contains(goog.a11y.aria.CONTAINER_ROLES_, role);
};
goog.a11y.aria.splitStringOnWhitespace_ = function(stringValue) {
  return stringValue ? stringValue.split(/\s+/) : [];
};
goog.a11y.aria.getAriaAttributeName_ = function(ariaName) {
  if (goog.asserts.ENABLE_ASSERTS) {
    goog.asserts.assert(ariaName, "ARIA attribute cannot be empty.");
    goog.asserts.assert(goog.object.containsValue(goog.a11y.aria.State, ariaName), "No such ARIA attribute " + ariaName);
  }
  return goog.a11y.aria.ARIA_PREFIX_ + ariaName;
};
goog.provide("goog.dom.InputType");
goog.dom.InputType = {BUTTON:"button", CHECKBOX:"checkbox", COLOR:"color", DATE:"date", DATETIME:"datetime", DATETIME_LOCAL:"datetime-local", EMAIL:"email", FILE:"file", HIDDEN:"hidden", IMAGE:"image", MENU:"menu", MONTH:"month", NUMBER:"number", PASSWORD:"password", RADIO:"radio", RANGE:"range", RESET:"reset", SEARCH:"search", SELECT_MULTIPLE:"select-multiple", SELECT_ONE:"select-one", SUBMIT:"submit", TEL:"tel", TEXT:"text", TEXTAREA:"textarea", TIME:"time", URL:"url", WEEK:"week"};
goog.provide("goog.dom.selection");
goog.require("goog.dom.InputType");
goog.require("goog.string");
goog.require("goog.userAgent");
goog.dom.selection.setStart = function(textfield, pos) {
  if (goog.dom.selection.useSelectionProperties_(textfield)) {
    textfield.selectionStart = pos;
  } else {
    if (goog.dom.selection.isLegacyIe_()) {
      var tmp = goog.dom.selection.getRangeIe_(textfield);
      var range = tmp[0];
      var selectionRange = tmp[1];
      if (range.inRange(selectionRange)) {
        pos = goog.dom.selection.canonicalizePositionIe_(textfield, pos);
        range.collapse(true);
        range.move("character", pos);
        range.select();
      }
    }
  }
};
goog.dom.selection.getStart = function(textfield) {
  return goog.dom.selection.getEndPoints_(textfield, true)[0];
};
goog.dom.selection.getEndPointsTextareaIe_ = function(range, selRange, getOnlyStart) {
  var selectionRange = selRange.duplicate();
  var beforeSelectionText = range.text;
  var untrimmedBeforeSelectionText = beforeSelectionText;
  var selectionText = selectionRange.text;
  var untrimmedSelectionText = selectionText;
  var isRangeEndTrimmed = false;
  while (!isRangeEndTrimmed) {
    if (range.compareEndPoints("StartToEnd", range) == 0) {
      isRangeEndTrimmed = true;
    } else {
      range.moveEnd("character", -1);
      if (range.text == beforeSelectionText) {
        untrimmedBeforeSelectionText += "\r\n";
      } else {
        isRangeEndTrimmed = true;
      }
    }
  }
  if (getOnlyStart) {
    return [untrimmedBeforeSelectionText.length, -1];
  }
  var isSelectionRangeEndTrimmed = false;
  while (!isSelectionRangeEndTrimmed) {
    if (selectionRange.compareEndPoints("StartToEnd", selectionRange) == 0) {
      isSelectionRangeEndTrimmed = true;
    } else {
      selectionRange.moveEnd("character", -1);
      if (selectionRange.text == selectionText) {
        untrimmedSelectionText += "\r\n";
      } else {
        isSelectionRangeEndTrimmed = true;
      }
    }
  }
  return [untrimmedBeforeSelectionText.length, untrimmedBeforeSelectionText.length + untrimmedSelectionText.length];
};
goog.dom.selection.getEndPoints = function(textfield) {
  return goog.dom.selection.getEndPoints_(textfield, false);
};
goog.dom.selection.getEndPoints_ = function(textfield, getOnlyStart) {
  textfield = textfield;
  var startPos = 0;
  var endPos = 0;
  if (goog.dom.selection.useSelectionProperties_(textfield)) {
    startPos = textfield.selectionStart;
    endPos = getOnlyStart ? -1 : textfield.selectionEnd;
  } else {
    if (goog.dom.selection.isLegacyIe_()) {
      var tmp = goog.dom.selection.getRangeIe_(textfield);
      var range = tmp[0];
      var selectionRange = tmp[1];
      if (range.inRange(selectionRange)) {
        range.setEndPoint("EndToStart", selectionRange);
        if (textfield.type == goog.dom.InputType.TEXTAREA) {
          return goog.dom.selection.getEndPointsTextareaIe_(range, selectionRange, getOnlyStart);
        }
        startPos = range.text.length;
        if (!getOnlyStart) {
          endPos = range.text.length + selectionRange.text.length;
        } else {
          endPos = -1;
        }
      }
    }
  }
  return [startPos, endPos];
};
goog.dom.selection.setEnd = function(textfield, pos) {
  if (goog.dom.selection.useSelectionProperties_(textfield)) {
    textfield.selectionEnd = pos;
  } else {
    if (goog.dom.selection.isLegacyIe_()) {
      var tmp = goog.dom.selection.getRangeIe_(textfield);
      var range = tmp[0];
      var selectionRange = tmp[1];
      if (range.inRange(selectionRange)) {
        pos = goog.dom.selection.canonicalizePositionIe_(textfield, pos);
        var startCursorPos = goog.dom.selection.canonicalizePositionIe_(textfield, goog.dom.selection.getStart(textfield));
        selectionRange.collapse(true);
        selectionRange.moveEnd("character", pos - startCursorPos);
        selectionRange.select();
      }
    }
  }
};
goog.dom.selection.getEnd = function(textfield) {
  return goog.dom.selection.getEndPoints_(textfield, false)[1];
};
goog.dom.selection.setCursorPosition = function(textfield, pos) {
  if (goog.dom.selection.useSelectionProperties_(textfield)) {
    textfield.selectionStart = pos;
    textfield.selectionEnd = pos;
  } else {
    if (goog.dom.selection.isLegacyIe_()) {
      pos = goog.dom.selection.canonicalizePositionIe_(textfield, pos);
      var sel = textfield.createTextRange();
      sel.collapse(true);
      sel.move("character", pos);
      sel.select();
    }
  }
};
goog.dom.selection.setText = function(textfield, text) {
  textfield = textfield;
  if (goog.dom.selection.useSelectionProperties_(textfield)) {
    var value = textfield.value;
    var oldSelectionStart = textfield.selectionStart;
    var before = value.substr(0, oldSelectionStart);
    var after = value.substr(textfield.selectionEnd);
    textfield.value = before + text + after;
    textfield.selectionStart = oldSelectionStart;
    textfield.selectionEnd = oldSelectionStart + text.length;
  } else {
    if (goog.dom.selection.isLegacyIe_()) {
      var tmp = goog.dom.selection.getRangeIe_(textfield);
      var range = tmp[0];
      var selectionRange = tmp[1];
      if (!range.inRange(selectionRange)) {
        return;
      }
      var range2 = selectionRange.duplicate();
      selectionRange.text = text;
      selectionRange.setEndPoint("StartToStart", range2);
      selectionRange.select();
    } else {
      throw new Error("Cannot set the selection end");
    }
  }
};
goog.dom.selection.getText = function(textfield) {
  textfield = textfield;
  if (goog.dom.selection.useSelectionProperties_(textfield)) {
    var s = textfield.value;
    return s.substring(textfield.selectionStart, textfield.selectionEnd);
  }
  if (goog.dom.selection.isLegacyIe_()) {
    var tmp = goog.dom.selection.getRangeIe_(textfield);
    var range = tmp[0];
    var selectionRange = tmp[1];
    if (!range.inRange(selectionRange)) {
      return "";
    } else {
      if (textfield.type == goog.dom.InputType.TEXTAREA) {
        return goog.dom.selection.getSelectionRangeText_(selectionRange);
      }
    }
    return selectionRange.text;
  }
  throw new Error("Cannot get the selection text");
};
goog.dom.selection.getSelectionRangeText_ = function(selRange) {
  var selectionRange = selRange.duplicate();
  var selectionText = selectionRange.text;
  var untrimmedSelectionText = selectionText;
  var isSelectionRangeEndTrimmed = false;
  while (!isSelectionRangeEndTrimmed) {
    if (selectionRange.compareEndPoints("StartToEnd", selectionRange) == 0) {
      isSelectionRangeEndTrimmed = true;
    } else {
      selectionRange.moveEnd("character", -1);
      if (selectionRange.text == selectionText) {
        untrimmedSelectionText += "\r\n";
      } else {
        isSelectionRangeEndTrimmed = true;
      }
    }
  }
  return untrimmedSelectionText;
};
goog.dom.selection.getRangeIe_ = function(el) {
  var doc = el.ownerDocument || el.document;
  var selectionRange = doc.selection.createRange();
  var range;
  if (el.type == goog.dom.InputType.TEXTAREA) {
    range = doc.body.createTextRange();
    range.moveToElementText(el);
  } else {
    range = el.createTextRange();
  }
  return [range, selectionRange];
};
goog.dom.selection.canonicalizePositionIe_ = function(textfield, pos) {
  textfield = textfield;
  if (textfield.type == goog.dom.InputType.TEXTAREA) {
    var value = textfield.value.substring(0, pos);
    pos = goog.string.canonicalizeNewlines(value).length;
  }
  return pos;
};
goog.dom.selection.useSelectionProperties_ = function(el) {
  try {
    return typeof el.selectionStart == "number";
  } catch (e) {
    return false;
  }
};
goog.dom.selection.isLegacyIe_ = function() {
  return goog.userAgent.IE && !goog.userAgent.isVersionOrHigher("9");
};
goog.provide("goog.events.EventHandler");
goog.forwardDeclare("goog.events.EventWrapper");
goog.require("goog.Disposable");
goog.require("goog.events");
goog.require("goog.object");
goog.events.EventHandler = function(opt_scope) {
  goog.Disposable.call(this);
  this.handler_ = opt_scope;
  this.keys_ = {};
};
goog.inherits(goog.events.EventHandler, goog.Disposable);
goog.events.EventHandler.typeArray_ = [];
goog.events.EventHandler.prototype.listen = function(src, type, opt_fn, opt_options) {
  var self = this;
  return self.listen_(src, type, opt_fn, opt_options);
};
goog.events.EventHandler.prototype.listenWithScope = function(src, type, fn, options, scope) {
  var self = this;
  return self.listen_(src, type, fn, options, scope);
};
goog.events.EventHandler.prototype.listen_ = function(src, type, opt_fn, opt_options, opt_scope) {
  var self = this;
  if (!goog.isArray(type)) {
    if (type) {
      goog.events.EventHandler.typeArray_[0] = type.toString();
    }
    type = goog.events.EventHandler.typeArray_;
  }
  for (var i = 0; i < type.length; i++) {
    var listenerObj = goog.events.listen(src, type[i], opt_fn || self.handleEvent, opt_options || false, opt_scope || self.handler_ || self);
    if (!listenerObj) {
      return self;
    }
    var key = listenerObj.key;
    self.keys_[key] = listenerObj;
  }
  return self;
};
goog.events.EventHandler.prototype.listenOnce = function(src, type, opt_fn, opt_options) {
  var self = this;
  return self.listenOnce_(src, type, opt_fn, opt_options);
};
goog.events.EventHandler.prototype.listenOnceWithScope = function(src, type, fn, capture, scope) {
  var self = this;
  return self.listenOnce_(src, type, fn, capture, scope);
};
goog.events.EventHandler.prototype.listenOnce_ = function(src, type, opt_fn, opt_options, opt_scope) {
  var self = this;
  if (goog.isArray(type)) {
    for (var i = 0; i < type.length; i++) {
      self.listenOnce_(src, type[i], opt_fn, opt_options, opt_scope);
    }
  } else {
    var listenerObj = goog.events.listenOnce(src, type, opt_fn || self.handleEvent, opt_options, opt_scope || self.handler_ || self);
    if (!listenerObj) {
      return self;
    }
    var key = listenerObj.key;
    self.keys_[key] = listenerObj;
  }
  return self;
};
goog.events.EventHandler.prototype.listenWithWrapper = function(src, wrapper, listener, opt_capt) {
  var self = this;
  return self.listenWithWrapper_(src, wrapper, listener, opt_capt);
};
goog.events.EventHandler.prototype.listenWithWrapperAndScope = function(src, wrapper, listener, capture, scope) {
  var self = this;
  return self.listenWithWrapper_(src, wrapper, listener, capture, scope);
};
goog.events.EventHandler.prototype.listenWithWrapper_ = function(src, wrapper, listener, opt_capt, opt_scope) {
  var self = this;
  wrapper.listen(src, listener, opt_capt, opt_scope || self.handler_ || self, self);
  return self;
};
goog.events.EventHandler.prototype.getListenerCount = function() {
  var count = 0;
  for (var key in this.keys_) {
    if (Object.prototype.hasOwnProperty.call(this.keys_, key)) {
      count++;
    }
  }
  return count;
};
goog.events.EventHandler.prototype.unlisten = function(src, type, opt_fn, opt_options, opt_scope) {
  var self = this;
  if (goog.isArray(type)) {
    for (var i = 0; i < type.length; i++) {
      self.unlisten(src, type[i], opt_fn, opt_options, opt_scope);
    }
  } else {
    var capture = goog.isObject(opt_options) ? !!opt_options.capture : !!opt_options;
    var listener = goog.events.getListener(src, type, opt_fn || self.handleEvent, capture, opt_scope || self.handler_ || self);
    if (listener) {
      goog.events.unlistenByKey(listener);
      delete self.keys_[listener.key];
    }
  }
  return self;
};
goog.events.EventHandler.prototype.unlistenWithWrapper = function(src, wrapper, listener, opt_capt, opt_scope) {
  var self = this;
  wrapper.unlisten(src, listener, opt_capt, opt_scope || self.handler_ || self, self);
  return self;
};
goog.events.EventHandler.prototype.removeAll = function() {
  goog.object.forEach(this.keys_, function(listenerObj, key) {
    if (this.keys_.hasOwnProperty(key)) {
      goog.events.unlistenByKey(listenerObj);
    }
  }, this);
  this.keys_ = {};
};
goog.events.EventHandler.prototype.disposeInternal = function() {
  goog.events.EventHandler.superClass_.disposeInternal.call(this);
  this.removeAll();
};
goog.events.EventHandler.prototype.handleEvent = function(e) {
  throw new Error("EventHandler.handleEvent not implemented");
};
goog.provide("goog.events.KeyCodes");
goog.forwardDeclare("goog.events.BrowserEvent");
goog.require("goog.userAgent");
goog.events.KeyCodes = {WIN_KEY_FF_LINUX:0, MAC_ENTER:3, BACKSPACE:8, TAB:9, NUM_CENTER:12, ENTER:13, SHIFT:16, CTRL:17, ALT:18, PAUSE:19, CAPS_LOCK:20, ESC:27, SPACE:32, PAGE_UP:33, PAGE_DOWN:34, END:35, HOME:36, LEFT:37, UP:38, RIGHT:39, DOWN:40, PLUS_SIGN:43, PRINT_SCREEN:44, INSERT:45, DELETE:46, ZERO:48, ONE:49, TWO:50, THREE:51, FOUR:52, FIVE:53, SIX:54, SEVEN:55, EIGHT:56, NINE:57, FF_SEMICOLON:59, FF_EQUALS:61, FF_DASH:173, FF_HASH:163, QUESTION_MARK:63, AT_SIGN:64, A:65, B:66, C:67, D:68, 
E:69, F:70, G:71, H:72, I:73, J:74, K:75, L:76, M:77, N:78, O:79, P:80, Q:81, R:82, S:83, T:84, U:85, V:86, W:87, X:88, Y:89, Z:90, META:91, WIN_KEY_RIGHT:92, CONTEXT_MENU:93, NUM_ZERO:96, NUM_ONE:97, NUM_TWO:98, NUM_THREE:99, NUM_FOUR:100, NUM_FIVE:101, NUM_SIX:102, NUM_SEVEN:103, NUM_EIGHT:104, NUM_NINE:105, NUM_MULTIPLY:106, NUM_PLUS:107, NUM_MINUS:109, NUM_PERIOD:110, NUM_DIVISION:111, F1:112, F2:113, F3:114, F4:115, F5:116, F6:117, F7:118, F8:119, F9:120, F10:121, F11:122, F12:123, NUMLOCK:144, 
SCROLL_LOCK:145, FIRST_MEDIA_KEY:166, LAST_MEDIA_KEY:183, SEMICOLON:186, DASH:189, EQUALS:187, COMMA:188, PERIOD:190, SLASH:191, APOSTROPHE:192, TILDE:192, SINGLE_QUOTE:222, OPEN_SQUARE_BRACKET:219, BACKSLASH:220, CLOSE_SQUARE_BRACKET:221, WIN_KEY:224, MAC_FF_META:224, MAC_WK_CMD_LEFT:91, MAC_WK_CMD_RIGHT:93, WIN_IME:229, VK_NONAME:252, PHANTOM:255};
goog.events.KeyCodes.isTextModifyingKeyEvent = function(e) {
  if (e.altKey && !e.ctrlKey || e.metaKey || e.keyCode >= goog.events.KeyCodes.F1 && e.keyCode <= goog.events.KeyCodes.F12) {
    return false;
  }
  if (goog.events.KeyCodes.isCharacterKey(e.keyCode)) {
    return true;
  }
  switch(e.keyCode) {
    case goog.events.KeyCodes.ALT:
    case goog.events.KeyCodes.CAPS_LOCK:
    case goog.events.KeyCodes.CONTEXT_MENU:
    case goog.events.KeyCodes.CTRL:
    case goog.events.KeyCodes.DOWN:
    case goog.events.KeyCodes.END:
    case goog.events.KeyCodes.ESC:
    case goog.events.KeyCodes.HOME:
    case goog.events.KeyCodes.INSERT:
    case goog.events.KeyCodes.LEFT:
    case goog.events.KeyCodes.MAC_FF_META:
    case goog.events.KeyCodes.META:
    case goog.events.KeyCodes.NUMLOCK:
    case goog.events.KeyCodes.NUM_CENTER:
    case goog.events.KeyCodes.PAGE_DOWN:
    case goog.events.KeyCodes.PAGE_UP:
    case goog.events.KeyCodes.PAUSE:
    case goog.events.KeyCodes.PHANTOM:
    case goog.events.KeyCodes.PRINT_SCREEN:
    case goog.events.KeyCodes.RIGHT:
    case goog.events.KeyCodes.SCROLL_LOCK:
    case goog.events.KeyCodes.SHIFT:
    case goog.events.KeyCodes.UP:
    case goog.events.KeyCodes.VK_NONAME:
    case goog.events.KeyCodes.WIN_KEY:
    case goog.events.KeyCodes.WIN_KEY_RIGHT:
      return false;
    case goog.events.KeyCodes.WIN_KEY_FF_LINUX:
      return !goog.userAgent.GECKO;
    default:
      return e.keyCode < goog.events.KeyCodes.FIRST_MEDIA_KEY || e.keyCode > goog.events.KeyCodes.LAST_MEDIA_KEY;
  }
};
goog.events.KeyCodes.firesKeyPressEvent = function(keyCode, opt_heldKeyCode, opt_shiftKey, opt_ctrlKey, opt_altKey, opt_metaKey) {
  if (goog.userAgent.WEBKIT && !goog.userAgent.isVersionOrHigher("525")) {
    return true;
  }
  if (goog.userAgent.MAC && opt_altKey) {
    return goog.events.KeyCodes.isCharacterKey(keyCode);
  }
  if (opt_altKey && !opt_ctrlKey) {
    return false;
  }
  if (!goog.userAgent.GECKO) {
    if (typeof opt_heldKeyCode === "number") {
      opt_heldKeyCode = goog.events.KeyCodes.normalizeKeyCode(opt_heldKeyCode);
    }
    var heldKeyIsModifier = opt_heldKeyCode == goog.events.KeyCodes.CTRL || opt_heldKeyCode == goog.events.KeyCodes.ALT || goog.userAgent.MAC && opt_heldKeyCode == goog.events.KeyCodes.META;
    var modifiedShiftKey = opt_heldKeyCode == goog.events.KeyCodes.SHIFT && (opt_ctrlKey || opt_metaKey);
    if ((!opt_shiftKey || goog.userAgent.MAC) && heldKeyIsModifier || goog.userAgent.MAC && modifiedShiftKey) {
      return false;
    }
  }
  if ((goog.userAgent.WEBKIT || goog.userAgent.EDGE) && opt_ctrlKey && opt_shiftKey) {
    switch(keyCode) {
      case goog.events.KeyCodes.BACKSLASH:
      case goog.events.KeyCodes.OPEN_SQUARE_BRACKET:
      case goog.events.KeyCodes.CLOSE_SQUARE_BRACKET:
      case goog.events.KeyCodes.TILDE:
      case goog.events.KeyCodes.SEMICOLON:
      case goog.events.KeyCodes.DASH:
      case goog.events.KeyCodes.EQUALS:
      case goog.events.KeyCodes.COMMA:
      case goog.events.KeyCodes.PERIOD:
      case goog.events.KeyCodes.SLASH:
      case goog.events.KeyCodes.APOSTROPHE:
      case goog.events.KeyCodes.SINGLE_QUOTE:
        return false;
    }
  }
  if (goog.userAgent.IE && opt_ctrlKey && opt_heldKeyCode == keyCode) {
    return false;
  }
  switch(keyCode) {
    case goog.events.KeyCodes.ENTER:
      if (goog.userAgent.GECKO) {
        if (opt_metaKey || opt_altKey) {
          return false;
        }
        return !(opt_shiftKey && opt_ctrlKey);
      } else {
        return true;
      }
    case goog.events.KeyCodes.ESC:
      return !(goog.userAgent.WEBKIT || goog.userAgent.EDGE || goog.userAgent.GECKO);
  }
  if (goog.userAgent.GECKO && (opt_ctrlKey || opt_altKey || opt_metaKey)) {
    return false;
  } else {
    return goog.events.KeyCodes.isCharacterKey(keyCode);
  }
};
goog.events.KeyCodes.isCharacterKey = function(keyCode) {
  if (keyCode >= goog.events.KeyCodes.ZERO && keyCode <= goog.events.KeyCodes.NINE) {
    return true;
  }
  if (keyCode >= goog.events.KeyCodes.NUM_ZERO && keyCode <= goog.events.KeyCodes.NUM_MULTIPLY) {
    return true;
  }
  if (keyCode >= goog.events.KeyCodes.A && keyCode <= goog.events.KeyCodes.Z) {
    return true;
  }
  if ((goog.userAgent.WEBKIT || goog.userAgent.EDGE) && keyCode == 0) {
    return true;
  }
  switch(keyCode) {
    case goog.events.KeyCodes.SPACE:
    case goog.events.KeyCodes.PLUS_SIGN:
    case goog.events.KeyCodes.QUESTION_MARK:
    case goog.events.KeyCodes.AT_SIGN:
    case goog.events.KeyCodes.NUM_PLUS:
    case goog.events.KeyCodes.NUM_MINUS:
    case goog.events.KeyCodes.NUM_PERIOD:
    case goog.events.KeyCodes.NUM_DIVISION:
    case goog.events.KeyCodes.SEMICOLON:
    case goog.events.KeyCodes.FF_SEMICOLON:
    case goog.events.KeyCodes.DASH:
    case goog.events.KeyCodes.EQUALS:
    case goog.events.KeyCodes.FF_EQUALS:
    case goog.events.KeyCodes.COMMA:
    case goog.events.KeyCodes.PERIOD:
    case goog.events.KeyCodes.SLASH:
    case goog.events.KeyCodes.APOSTROPHE:
    case goog.events.KeyCodes.SINGLE_QUOTE:
    case goog.events.KeyCodes.OPEN_SQUARE_BRACKET:
    case goog.events.KeyCodes.BACKSLASH:
    case goog.events.KeyCodes.CLOSE_SQUARE_BRACKET:
    case goog.events.KeyCodes.FF_HASH:
      return true;
    case goog.events.KeyCodes.FF_DASH:
      return goog.userAgent.GECKO;
    default:
      return false;
  }
};
goog.events.KeyCodes.normalizeKeyCode = function(keyCode) {
  if (goog.userAgent.GECKO) {
    return goog.events.KeyCodes.normalizeGeckoKeyCode(keyCode);
  } else {
    if (goog.userAgent.MAC && goog.userAgent.WEBKIT) {
      return goog.events.KeyCodes.normalizeMacWebKitKeyCode(keyCode);
    } else {
      return keyCode;
    }
  }
};
goog.events.KeyCodes.normalizeGeckoKeyCode = function(keyCode) {
  switch(keyCode) {
    case goog.events.KeyCodes.FF_EQUALS:
      return goog.events.KeyCodes.EQUALS;
    case goog.events.KeyCodes.FF_SEMICOLON:
      return goog.events.KeyCodes.SEMICOLON;
    case goog.events.KeyCodes.FF_DASH:
      return goog.events.KeyCodes.DASH;
    case goog.events.KeyCodes.MAC_FF_META:
      return goog.events.KeyCodes.META;
    case goog.events.KeyCodes.WIN_KEY_FF_LINUX:
      return goog.events.KeyCodes.WIN_KEY;
    default:
      return keyCode;
  }
};
goog.events.KeyCodes.normalizeMacWebKitKeyCode = function(keyCode) {
  switch(keyCode) {
    case goog.events.KeyCodes.MAC_WK_CMD_RIGHT:
      return goog.events.KeyCodes.META;
    default:
      return keyCode;
  }
};
goog.provide("goog.events.KeyEvent");
goog.provide("goog.events.KeyHandler");
goog.provide("goog.events.KeyHandler.EventType");
goog.require("goog.events");
goog.require("goog.events.BrowserEvent");
goog.require("goog.events.EventTarget");
goog.require("goog.events.EventType");
goog.require("goog.events.KeyCodes");
goog.require("goog.userAgent");
goog.events.KeyHandler = function(opt_element, opt_capture) {
  goog.events.EventTarget.call(this);
  if (opt_element) {
    this.attach(opt_element, opt_capture);
  }
};
goog.inherits(goog.events.KeyHandler, goog.events.EventTarget);
goog.events.KeyHandler.prototype.element_ = null;
goog.events.KeyHandler.prototype.keyPressKey_ = null;
goog.events.KeyHandler.prototype.keyDownKey_ = null;
goog.events.KeyHandler.prototype.keyUpKey_ = null;
goog.events.KeyHandler.prototype.lastKey_ = -1;
goog.events.KeyHandler.prototype.keyCode_ = -1;
goog.events.KeyHandler.prototype.altKey_ = false;
goog.events.KeyHandler.EventType = {KEY:"key"};
goog.events.KeyHandler.safariKey_ = {3:goog.events.KeyCodes.ENTER, 12:goog.events.KeyCodes.NUMLOCK, 63232:goog.events.KeyCodes.UP, 63233:goog.events.KeyCodes.DOWN, 63234:goog.events.KeyCodes.LEFT, 63235:goog.events.KeyCodes.RIGHT, 63236:goog.events.KeyCodes.F1, 63237:goog.events.KeyCodes.F2, 63238:goog.events.KeyCodes.F3, 63239:goog.events.KeyCodes.F4, 63240:goog.events.KeyCodes.F5, 63241:goog.events.KeyCodes.F6, 63242:goog.events.KeyCodes.F7, 63243:goog.events.KeyCodes.F8, 63244:goog.events.KeyCodes.F9, 
63245:goog.events.KeyCodes.F10, 63246:goog.events.KeyCodes.F11, 63247:goog.events.KeyCodes.F12, 63248:goog.events.KeyCodes.PRINT_SCREEN, 63272:goog.events.KeyCodes.DELETE, 63273:goog.events.KeyCodes.HOME, 63275:goog.events.KeyCodes.END, 63276:goog.events.KeyCodes.PAGE_UP, 63277:goog.events.KeyCodes.PAGE_DOWN, 63289:goog.events.KeyCodes.NUMLOCK, 63302:goog.events.KeyCodes.INSERT};
goog.events.KeyHandler.keyIdentifier_ = {"Up":goog.events.KeyCodes.UP, "Down":goog.events.KeyCodes.DOWN, "Left":goog.events.KeyCodes.LEFT, "Right":goog.events.KeyCodes.RIGHT, "Enter":goog.events.KeyCodes.ENTER, "F1":goog.events.KeyCodes.F1, "F2":goog.events.KeyCodes.F2, "F3":goog.events.KeyCodes.F3, "F4":goog.events.KeyCodes.F4, "F5":goog.events.KeyCodes.F5, "F6":goog.events.KeyCodes.F6, "F7":goog.events.KeyCodes.F7, "F8":goog.events.KeyCodes.F8, "F9":goog.events.KeyCodes.F9, "F10":goog.events.KeyCodes.F10, 
"F11":goog.events.KeyCodes.F11, "F12":goog.events.KeyCodes.F12, "U+007F":goog.events.KeyCodes.DELETE, "Home":goog.events.KeyCodes.HOME, "End":goog.events.KeyCodes.END, "PageUp":goog.events.KeyCodes.PAGE_UP, "PageDown":goog.events.KeyCodes.PAGE_DOWN, "Insert":goog.events.KeyCodes.INSERT};
goog.events.KeyHandler.USES_KEYDOWN_ = !goog.userAgent.WEBKIT || goog.userAgent.isVersionOrHigher("525");
goog.events.KeyHandler.SAVE_ALT_FOR_KEYPRESS_ = goog.userAgent.MAC && goog.userAgent.GECKO;
goog.events.KeyHandler.prototype.handleKeyDown_ = function(e) {
  if (goog.userAgent.WEBKIT || goog.userAgent.EDGE) {
    if (this.lastKey_ == goog.events.KeyCodes.CTRL && !e.ctrlKey || this.lastKey_ == goog.events.KeyCodes.ALT && !e.altKey || goog.userAgent.MAC && this.lastKey_ == goog.events.KeyCodes.META && !e.metaKey) {
      this.resetState();
    }
  }
  if (this.lastKey_ == -1) {
    if (e.ctrlKey && e.keyCode != goog.events.KeyCodes.CTRL) {
      this.lastKey_ = goog.events.KeyCodes.CTRL;
    } else {
      if (e.altKey && e.keyCode != goog.events.KeyCodes.ALT) {
        this.lastKey_ = goog.events.KeyCodes.ALT;
      } else {
        if (e.metaKey && e.keyCode != goog.events.KeyCodes.META) {
          this.lastKey_ = goog.events.KeyCodes.META;
        }
      }
    }
  }
  if (goog.events.KeyHandler.USES_KEYDOWN_ && !goog.events.KeyCodes.firesKeyPressEvent(e.keyCode, this.lastKey_, e.shiftKey, e.ctrlKey, e.altKey, e.metaKey)) {
    this.handleEvent(e);
  } else {
    this.keyCode_ = goog.events.KeyCodes.normalizeKeyCode(e.keyCode);
    if (goog.events.KeyHandler.SAVE_ALT_FOR_KEYPRESS_) {
      this.altKey_ = e.altKey;
    }
  }
};
goog.events.KeyHandler.prototype.resetState = function() {
  this.lastKey_ = -1;
  this.keyCode_ = -1;
};
goog.events.KeyHandler.prototype.handleKeyup_ = function(e) {
  this.resetState();
  this.altKey_ = e.altKey;
};
goog.events.KeyHandler.prototype.handleEvent = function(e) {
  var be = e.getBrowserEvent();
  var keyCode, charCode;
  var altKey = be.altKey;
  if (goog.userAgent.IE && e.type == goog.events.EventType.KEYPRESS) {
    keyCode = this.keyCode_;
    charCode = keyCode != goog.events.KeyCodes.ENTER && keyCode != goog.events.KeyCodes.ESC ? be.keyCode : 0;
  } else {
    if ((goog.userAgent.WEBKIT || goog.userAgent.EDGE) && e.type == goog.events.EventType.KEYPRESS) {
      keyCode = this.keyCode_;
      charCode = be.charCode >= 0 && be.charCode < 63232 && goog.events.KeyCodes.isCharacterKey(keyCode) ? be.charCode : 0;
    } else {
      if (goog.userAgent.OPERA && !goog.userAgent.WEBKIT) {
        keyCode = this.keyCode_;
        charCode = goog.events.KeyCodes.isCharacterKey(keyCode) ? be.keyCode : 0;
      } else {
        if (e.type == goog.events.EventType.KEYPRESS) {
          if (goog.events.KeyHandler.SAVE_ALT_FOR_KEYPRESS_) {
            altKey = this.altKey_;
          }
          if (be.keyCode == be.charCode) {
            if (be.keyCode < 32) {
              keyCode = be.keyCode;
              charCode = 0;
            } else {
              keyCode = this.keyCode_;
              charCode = be.charCode;
            }
          } else {
            keyCode = be.keyCode || this.keyCode_;
            charCode = be.charCode || 0;
          }
        } else {
          keyCode = be.keyCode || this.keyCode_;
          charCode = be.charCode || 0;
        }
        if (goog.userAgent.MAC && charCode == goog.events.KeyCodes.QUESTION_MARK && keyCode == goog.events.KeyCodes.WIN_KEY) {
          keyCode = goog.events.KeyCodes.SLASH;
        }
      }
    }
  }
  keyCode = goog.events.KeyCodes.normalizeKeyCode(keyCode);
  var key = keyCode;
  if (keyCode) {
    if (keyCode >= 63232 && keyCode in goog.events.KeyHandler.safariKey_) {
      key = goog.events.KeyHandler.safariKey_[keyCode];
    } else {
      if (keyCode == 25 && e.shiftKey) {
        key = 9;
      }
    }
  } else {
    if (be.keyIdentifier && be.keyIdentifier in goog.events.KeyHandler.keyIdentifier_) {
      key = goog.events.KeyHandler.keyIdentifier_[be.keyIdentifier];
    }
  }
  if (goog.userAgent.GECKO && goog.events.KeyHandler.USES_KEYDOWN_ && e.type == goog.events.EventType.KEYPRESS && !goog.events.KeyCodes.firesKeyPressEvent(key, this.lastKey_, e.shiftKey, e.ctrlKey, altKey, e.metaKey)) {
    return;
  }
  var repeat = key == this.lastKey_;
  this.lastKey_ = key;
  var event = new goog.events.KeyEvent(key, charCode, repeat, be);
  event.altKey = altKey;
  this.dispatchEvent(event);
};
goog.events.KeyHandler.prototype.getElement = function() {
  return this.element_;
};
goog.events.KeyHandler.prototype.attach = function(element, opt_capture) {
  if (this.keyUpKey_) {
    this.detach();
  }
  this.element_ = element;
  this.keyPressKey_ = goog.events.listen(this.element_, goog.events.EventType.KEYPRESS, this, opt_capture);
  this.keyDownKey_ = goog.events.listen(this.element_, goog.events.EventType.KEYDOWN, this.handleKeyDown_, opt_capture, this);
  this.keyUpKey_ = goog.events.listen(this.element_, goog.events.EventType.KEYUP, this.handleKeyup_, opt_capture, this);
};
goog.events.KeyHandler.prototype.detach = function() {
  if (this.keyPressKey_) {
    goog.events.unlistenByKey(this.keyPressKey_);
    goog.events.unlistenByKey(this.keyDownKey_);
    goog.events.unlistenByKey(this.keyUpKey_);
    this.keyPressKey_ = null;
    this.keyDownKey_ = null;
    this.keyUpKey_ = null;
  }
  this.element_ = null;
  this.lastKey_ = -1;
  this.keyCode_ = -1;
};
goog.events.KeyHandler.prototype.disposeInternal = function() {
  goog.events.KeyHandler.superClass_.disposeInternal.call(this);
  this.detach();
};
goog.events.KeyEvent = function(keyCode, charCode, repeat, browserEvent) {
  goog.events.BrowserEvent.call(this, browserEvent);
  this.type = goog.events.KeyHandler.EventType.KEY;
  this.keyCode = keyCode;
  this.charCode = charCode;
  this.repeat = repeat;
};
goog.inherits(goog.events.KeyEvent, goog.events.BrowserEvent);
goog.provide("goog.userAgent.product");
goog.require("goog.labs.userAgent.browser");
goog.require("goog.labs.userAgent.platform");
goog.require("goog.userAgent");
goog.userAgent.product.ASSUME_FIREFOX = goog.define("goog.userAgent.product.ASSUME_FIREFOX", false);
goog.userAgent.product.ASSUME_IPHONE = goog.define("goog.userAgent.product.ASSUME_IPHONE", false);
goog.userAgent.product.ASSUME_IPAD = goog.define("goog.userAgent.product.ASSUME_IPAD", false);
goog.userAgent.product.ASSUME_ANDROID = goog.define("goog.userAgent.product.ASSUME_ANDROID", false);
goog.userAgent.product.ASSUME_CHROME = goog.define("goog.userAgent.product.ASSUME_CHROME", false);
goog.userAgent.product.ASSUME_SAFARI = goog.define("goog.userAgent.product.ASSUME_SAFARI", false);
goog.userAgent.product.PRODUCT_KNOWN_ = goog.userAgent.ASSUME_IE || goog.userAgent.ASSUME_EDGE || goog.userAgent.ASSUME_OPERA || goog.userAgent.product.ASSUME_FIREFOX || goog.userAgent.product.ASSUME_IPHONE || goog.userAgent.product.ASSUME_IPAD || goog.userAgent.product.ASSUME_ANDROID || goog.userAgent.product.ASSUME_CHROME || goog.userAgent.product.ASSUME_SAFARI;
goog.userAgent.product.OPERA = goog.userAgent.OPERA;
goog.userAgent.product.IE = goog.userAgent.IE;
goog.userAgent.product.EDGE = goog.userAgent.EDGE;
goog.userAgent.product.FIREFOX = goog.userAgent.product.PRODUCT_KNOWN_ ? goog.userAgent.product.ASSUME_FIREFOX : goog.labs.userAgent.browser.isFirefox();
goog.userAgent.product.isIphoneOrIpod_ = function() {
  return goog.labs.userAgent.platform.isIphone() || goog.labs.userAgent.platform.isIpod();
};
goog.userAgent.product.IPHONE = goog.userAgent.product.PRODUCT_KNOWN_ ? goog.userAgent.product.ASSUME_IPHONE : goog.userAgent.product.isIphoneOrIpod_();
goog.userAgent.product.IPAD = goog.userAgent.product.PRODUCT_KNOWN_ ? goog.userAgent.product.ASSUME_IPAD : goog.labs.userAgent.platform.isIpad();
goog.userAgent.product.ANDROID = goog.userAgent.product.PRODUCT_KNOWN_ ? goog.userAgent.product.ASSUME_ANDROID : goog.labs.userAgent.browser.isAndroidBrowser();
goog.userAgent.product.CHROME = goog.userAgent.product.PRODUCT_KNOWN_ ? goog.userAgent.product.ASSUME_CHROME : goog.labs.userAgent.browser.isChrome();
goog.userAgent.product.isSafariDesktop_ = function() {
  return goog.labs.userAgent.browser.isSafari() && !goog.labs.userAgent.platform.isIos();
};
goog.userAgent.product.SAFARI = goog.userAgent.product.PRODUCT_KNOWN_ ? goog.userAgent.product.ASSUME_SAFARI : goog.userAgent.product.isSafariDesktop_();
goog.provide("goog.ui.ac.InputHandler");
goog.require("goog.Disposable");
goog.require("goog.Timer");
goog.require("goog.a11y.aria");
goog.require("goog.a11y.aria.Role");
goog.require("goog.a11y.aria.State");
goog.require("goog.dom");
goog.require("goog.dom.selection");
goog.require("goog.events.EventHandler");
goog.require("goog.events.EventType");
goog.require("goog.events.KeyCodes");
goog.require("goog.events.KeyHandler");
goog.require("goog.string");
goog.require("goog.userAgent");
goog.require("goog.userAgent.product");
goog.ui.ac.InputHandler = function(opt_separators, opt_literals, opt_multi, opt_throttleTime) {
  goog.Disposable.call(this);
  var throttleTime = opt_throttleTime || 150;
  this.multi_ = opt_multi != null ? opt_multi : true;
  this.setSeparators(opt_separators || goog.ui.ac.InputHandler.STANDARD_LIST_SEPARATORS);
  this.literals_ = opt_literals || "";
  this.preventSelectionOnTab_ = false;
  this.preventDefaultOnTab_ = this.multi_;
  this.timer_ = throttleTime > 0 ? new goog.Timer(throttleTime) : null;
  this.eh_ = new goog.events.EventHandler(this);
  this.activateHandler_ = new goog.events.EventHandler(this);
  this.keyHandler_ = new goog.events.KeyHandler;
  this.lastKeyCode_ = -1;
};
goog.inherits(goog.ui.ac.InputHandler, goog.Disposable);
goog.tagUnsealableClass(goog.ui.ac.InputHandler);
goog.ui.ac.InputHandler.REQUIRES_ASYNC_BLUR_ = (goog.userAgent.product.IPHONE || goog.userAgent.product.IPAD) && !goog.userAgent.isVersionOrHigher("533.17.9");
goog.ui.ac.InputHandler.STANDARD_LIST_SEPARATORS = ",;";
goog.ui.ac.InputHandler.QUOTE_LITERALS = '"';
goog.ui.ac.InputHandler.prototype.ac_;
goog.ui.ac.InputHandler.prototype.separators_;
goog.ui.ac.InputHandler.prototype.defaultSeparator_;
goog.ui.ac.InputHandler.prototype.trimmer_;
goog.ui.ac.InputHandler.prototype.separatorCheck_;
goog.ui.ac.InputHandler.prototype.whitespaceWrapEntries_ = true;
goog.ui.ac.InputHandler.prototype.generateNewTokenOnLiteral_ = true;
goog.ui.ac.InputHandler.prototype.upsideDown_ = false;
goog.ui.ac.InputHandler.prototype.separatorUpdates_ = true;
goog.ui.ac.InputHandler.prototype.separatorSelects_ = true;
goog.ui.ac.InputHandler.prototype.activeTimeoutId_ = null;
goog.ui.ac.InputHandler.prototype.activeElement_ = null;
goog.ui.ac.InputHandler.prototype.lastValue_ = "";
goog.ui.ac.InputHandler.prototype.waitingForIme_ = false;
goog.ui.ac.InputHandler.prototype.rowJustSelected_ = false;
goog.ui.ac.InputHandler.prototype.updateDuringTyping_ = true;
goog.ui.ac.InputHandler.prototype.attachAutoComplete = function(ac) {
  this.ac_ = ac;
};
goog.ui.ac.InputHandler.prototype.getAutoComplete = function() {
  return this.ac_;
};
goog.ui.ac.InputHandler.prototype.getActiveElement = function() {
  return this.activeElement_;
};
goog.ui.ac.InputHandler.prototype.getValue = function() {
  return this.activeElement_.value;
};
goog.ui.ac.InputHandler.prototype.setValue = function(value) {
  this.activeElement_.value = value;
};
goog.ui.ac.InputHandler.prototype.getCursorPosition = function() {
  return goog.dom.selection.getStart(this.activeElement_);
};
goog.ui.ac.InputHandler.prototype.setCursorPosition = function(pos) {
  goog.dom.selection.setStart(this.activeElement_, pos);
  goog.dom.selection.setEnd(this.activeElement_, pos);
};
goog.ui.ac.InputHandler.prototype.attachInput = function(target) {
  if (goog.dom.isElement(target)) {
    var el = target;
    goog.a11y.aria.setRole(el, goog.a11y.aria.Role.COMBOBOX);
    goog.a11y.aria.setState(el, goog.a11y.aria.State.AUTOCOMPLETE, "list");
  }
  this.eh_.listen(target, goog.events.EventType.FOCUS, this.handleFocus);
  this.eh_.listen(target, goog.events.EventType.BLUR, this.handleBlur);
  if (!this.activeElement_) {
    this.activateHandler_.listen(target, goog.events.EventType.KEYDOWN, this.onKeyDownOnInactiveElement_);
    if (goog.dom.isElement(target)) {
      var ownerDocument = goog.dom.getOwnerDocument(target);
      if (goog.dom.getActiveElement(ownerDocument) == target) {
        this.processFocus(target);
      }
    }
  }
};
goog.ui.ac.InputHandler.prototype.detachInput = function(target) {
  if (goog.dom.isElement(target)) {
    var el = target;
    goog.a11y.aria.removeRole(el);
    goog.a11y.aria.removeState(el, goog.a11y.aria.State.AUTOCOMPLETE);
  }
  if (target == this.activeElement_) {
    this.handleBlur();
  }
  this.eh_.unlisten(target, goog.events.EventType.FOCUS, this.handleFocus);
  this.eh_.unlisten(target, goog.events.EventType.BLUR, this.handleBlur);
  if (!this.activeElement_) {
    this.activateHandler_.unlisten(target, goog.events.EventType.KEYDOWN, this.onKeyDownOnInactiveElement_);
  }
};
goog.ui.ac.InputHandler.prototype.attachInputs = function(var_args) {
  for (var i = 0; i < arguments.length; i++) {
    this.attachInput(arguments[i]);
  }
};
goog.ui.ac.InputHandler.prototype.detachInputs = function(var_args) {
  for (var i = 0; i < arguments.length; i++) {
    this.detachInput(arguments[i]);
  }
};
goog.ui.ac.InputHandler.prototype.selectRow = function(row, opt_multi) {
  if (this.activeElement_) {
    this.setTokenText(row.toString(), opt_multi);
  }
  return false;
};
goog.ui.ac.InputHandler.prototype.setTokenText = function(tokenText, opt_multi) {
  if (opt_multi !== undefined ? opt_multi : this.multi_) {
    var index = this.getTokenIndex_(this.getValue(), this.getCursorPosition());
    var entries = this.splitInput_(this.getValue());
    var replaceValue = tokenText;
    if (this.separatorCheck_ && !this.separatorCheck_.test(replaceValue)) {
      replaceValue = goog.string.trimRight(replaceValue) + this.defaultSeparator_;
    }
    if (this.whitespaceWrapEntries_) {
      if (index != 0 && !goog.string.isEmptyOrWhitespace(entries[index - 1])) {
        replaceValue = " " + replaceValue;
      }
      if (index == entries.length - 1) {
        replaceValue = replaceValue + " ";
      }
    }
    if (replaceValue != entries[index]) {
      entries[index] = replaceValue;
      var el = this.activeElement_;
      if (goog.userAgent.GECKO || goog.userAgent.IE && goog.userAgent.isVersionOrHigher("9")) {
        el.blur();
      }
      el.value = entries.join("");
      var pos = 0;
      for (var i = 0; i <= index; i++) {
        pos += entries[i].length;
      }
      el.focus();
      this.setCursorPosition(pos);
    }
  } else {
    this.setValue(tokenText);
  }
  this.rowJustSelected_ = true;
};
goog.ui.ac.InputHandler.prototype.disposeInternal = function() {
  goog.ui.ac.InputHandler.superClass_.disposeInternal.call(this);
  if (this.activeTimeoutId_ != null) {
    window.clearTimeout(this.activeTimeoutId_);
  }
  this.eh_.dispose();
  delete this.eh_;
  this.activateHandler_.dispose();
  this.keyHandler_.dispose();
  goog.dispose(this.timer_);
};
goog.ui.ac.InputHandler.prototype.setSeparators = function(separators, opt_defaultSeparators) {
  this.separators_ = separators;
  this.defaultSeparator_ = opt_defaultSeparators != null ? opt_defaultSeparators : this.separators_.substring(0, 1);
  var wspaceExp = this.multi_ ? "[\\s" + this.separators_ + "]+" : "[\\s]+";
  this.trimmer_ = new RegExp("^" + wspaceExp + "|" + wspaceExp + "$", "g");
  this.separatorCheck_ = new RegExp("\\s*[" + this.separators_ + "]$");
};
goog.ui.ac.InputHandler.prototype.setUpsideDown = function(upsideDown) {
  this.upsideDown_ = upsideDown;
};
goog.ui.ac.InputHandler.prototype.setWhitespaceWrapEntries = function(newValue) {
  this.whitespaceWrapEntries_ = newValue;
};
goog.ui.ac.InputHandler.prototype.setGenerateNewTokenOnLiteral = function(newValue) {
  this.generateNewTokenOnLiteral_ = newValue;
};
goog.ui.ac.InputHandler.prototype.setTrimmingRegExp = function(trimmer) {
  this.trimmer_ = trimmer;
};
goog.ui.ac.InputHandler.prototype.setEndsWithSeparatorRegExp = function(separatorCheck) {
  this.separatorCheck_ = separatorCheck;
};
goog.ui.ac.InputHandler.prototype.setPreventDefaultOnTab = function(newValue) {
  this.preventDefaultOnTab_ = newValue;
};
goog.ui.ac.InputHandler.prototype.setPreventSelectionOnTab = function(newValue) {
  this.preventSelectionOnTab_ = newValue;
};
goog.ui.ac.InputHandler.prototype.setSeparatorCompletes = function(newValue) {
  this.separatorUpdates_ = newValue;
  this.separatorSelects_ = newValue;
};
goog.ui.ac.InputHandler.prototype.setSeparatorSelects = function(newValue) {
  this.separatorSelects_ = newValue;
};
goog.ui.ac.InputHandler.prototype.getThrottleTime = function() {
  return this.timer_ ? this.timer_.getInterval() : -1;
};
goog.ui.ac.InputHandler.prototype.setRowJustSelected = function(justSelected) {
  this.rowJustSelected_ = justSelected;
};
goog.ui.ac.InputHandler.prototype.setThrottleTime = function(time) {
  if (time < 0) {
    this.timer_.dispose();
    this.timer_ = null;
    return;
  }
  if (this.timer_) {
    this.timer_.setInterval(time);
  } else {
    this.timer_ = new goog.Timer(time);
  }
};
goog.ui.ac.InputHandler.prototype.getUpdateDuringTyping = function() {
  return this.updateDuringTyping_;
};
goog.ui.ac.InputHandler.prototype.setUpdateDuringTyping = function(value) {
  this.updateDuringTyping_ = value;
};
goog.ui.ac.InputHandler.prototype.handleKeyEvent = function(e) {
  switch(e.keyCode) {
    case goog.events.KeyCodes.DOWN:
      if (this.ac_.isOpen()) {
        this.moveDown_();
        e.preventDefault();
        return true;
      } else {
        if (!this.multi_) {
          this.update(true);
          e.preventDefault();
          return true;
        }
      }
      break;
    case goog.events.KeyCodes.UP:
      if (this.ac_.isOpen()) {
        this.moveUp_();
        e.preventDefault();
        return true;
      }
      break;
    case goog.events.KeyCodes.TAB:
      if (this.ac_.isOpen() && !e.shiftKey && !this.preventSelectionOnTab_) {
        this.update();
        if (this.ac_.selectHilited() && this.preventDefaultOnTab_) {
          e.preventDefault();
          return true;
        }
      } else {
        this.ac_.dismiss();
      }
      break;
    case goog.events.KeyCodes.ENTER:
      if (this.ac_.isOpen()) {
        this.update();
        if (this.ac_.selectHilited()) {
          e.preventDefault();
          e.stopPropagation();
          return true;
        }
      } else {
        this.ac_.dismiss();
      }
      break;
    case goog.events.KeyCodes.ESC:
      if (this.ac_.isOpen()) {
        this.ac_.dismiss();
        e.preventDefault();
        e.stopPropagation();
        return true;
      }
      break;
    case goog.events.KeyCodes.WIN_IME:
      if (!this.waitingForIme_) {
        this.startWaitingForIme_();
        return true;
      }
      break;
    default:
      if (this.timer_ && !this.updateDuringTyping_) {
        this.timer_.stop();
        this.timer_.start();
      }
  }
  return this.handleSeparator_(e);
};
goog.ui.ac.InputHandler.prototype.handleSeparator_ = function(e) {
  var isSeparatorKey = this.multi_ && e.charCode && this.separators_.indexOf(String.fromCharCode(e.charCode)) != -1;
  if (this.separatorUpdates_ && isSeparatorKey) {
    this.update();
  }
  if (this.separatorSelects_ && isSeparatorKey) {
    if (this.ac_.selectHilited()) {
      e.preventDefault();
      return true;
    }
  }
  return false;
};
goog.ui.ac.InputHandler.prototype.needKeyUpListener = function() {
  return false;
};
goog.ui.ac.InputHandler.prototype.handleKeyUp = function(e) {
  return false;
};
goog.ui.ac.InputHandler.prototype.addEventHandlers_ = function() {
  this.keyHandler_.attach(this.activeElement_);
  this.eh_.listen(this.keyHandler_, goog.events.KeyHandler.EventType.KEY, this.onKey_);
  if (this.needKeyUpListener()) {
    this.eh_.listen(this.activeElement_, goog.events.EventType.KEYUP, this.handleKeyUp);
  }
  this.eh_.listen(this.activeElement_, goog.events.EventType.MOUSEDOWN, this.onMouseDown_);
  if (goog.userAgent.IE) {
    this.eh_.listen(this.activeElement_, goog.events.EventType.KEYPRESS, this.onIeKeyPress_);
  }
};
goog.ui.ac.InputHandler.prototype.removeEventHandlers_ = function() {
  this.eh_.unlisten(this.keyHandler_, goog.events.KeyHandler.EventType.KEY, this.onKey_);
  this.keyHandler_.detach();
  this.eh_.unlisten(this.activeElement_, goog.events.EventType.KEYUP, this.handleKeyUp);
  this.eh_.unlisten(this.activeElement_, goog.events.EventType.MOUSEDOWN, this.onMouseDown_);
  if (goog.userAgent.IE) {
    this.eh_.unlisten(this.activeElement_, goog.events.EventType.KEYPRESS, this.onIeKeyPress_);
  }
  if (this.waitingForIme_) {
    this.stopWaitingForIme_();
  }
};
goog.ui.ac.InputHandler.prototype.handleFocus = function(e) {
  this.processFocus(e.target || null);
};
goog.ui.ac.InputHandler.prototype.processFocus = function(target) {
  this.activateHandler_.removeAll();
  if (this.ac_) {
    this.ac_.cancelDelayedDismiss();
  }
  if (target != this.activeElement_) {
    this.activeElement_ = target;
    if (this.timer_) {
      this.timer_.start();
      this.eh_.listen(this.timer_, goog.Timer.TICK, this.onTick_);
    }
    this.lastValue_ = this.getValue();
    this.addEventHandlers_();
  }
};
goog.ui.ac.InputHandler.prototype.handleBlur = function(opt_e) {
  if (goog.ui.ac.InputHandler.REQUIRES_ASYNC_BLUR_) {
    this.activeTimeoutId_ = window.setTimeout(goog.bind(this.processBlur, this), 0);
    return;
  } else {
    this.processBlur();
  }
};
goog.ui.ac.InputHandler.prototype.processBlur = function() {
  if (this.activeElement_) {
    this.removeEventHandlers_();
    this.activeElement_ = null;
    if (this.timer_) {
      this.timer_.stop();
      this.eh_.unlisten(this.timer_, goog.Timer.TICK, this.onTick_);
    }
    if (this.ac_) {
      this.ac_.dismissOnDelay();
    }
  }
};
goog.ui.ac.InputHandler.prototype.onTick_ = function(e) {
  this.update();
};
goog.ui.ac.InputHandler.prototype.onKeyDownOnInactiveElement_ = function(e) {
  this.handleFocus(e);
};
goog.ui.ac.InputHandler.prototype.onKey_ = function(e) {
  this.lastKeyCode_ = e.keyCode;
  if (this.ac_) {
    this.handleKeyEvent(e);
  }
};
goog.ui.ac.InputHandler.prototype.onKeyPress_ = function(e) {
  if (this.waitingForIme_ && this.lastKeyCode_ != goog.events.KeyCodes.WIN_IME) {
    this.stopWaitingForIme_();
  }
};
goog.ui.ac.InputHandler.prototype.onKeyUp_ = function(e) {
  if (this.waitingForIme_ && (e.keyCode == goog.events.KeyCodes.ENTER || e.keyCode == goog.events.KeyCodes.M && e.ctrlKey)) {
    this.stopWaitingForIme_();
  }
};
goog.ui.ac.InputHandler.prototype.onMouseDown_ = function(e) {
  if (this.ac_) {
    this.handleMouseDown(e);
  }
};
goog.ui.ac.InputHandler.prototype.handleMouseDown = function(e) {
};
goog.ui.ac.InputHandler.prototype.startWaitingForIme_ = function() {
  if (this.waitingForIme_) {
    return;
  }
  this.eh_.listen(this.activeElement_, goog.events.EventType.KEYUP, this.onKeyUp_);
  this.eh_.listen(this.activeElement_, goog.events.EventType.KEYPRESS, this.onKeyPress_);
  this.waitingForIme_ = true;
};
goog.ui.ac.InputHandler.prototype.stopWaitingForIme_ = function() {
  if (!this.waitingForIme_) {
    return;
  }
  this.waitingForIme_ = false;
  this.eh_.unlisten(this.activeElement_, goog.events.EventType.KEYPRESS, this.onKeyPress_);
  this.eh_.unlisten(this.activeElement_, goog.events.EventType.KEYUP, this.onKeyUp_);
};
goog.ui.ac.InputHandler.prototype.onIeKeyPress_ = function(e) {
  this.handleSeparator_(e);
};
goog.ui.ac.InputHandler.prototype.update = function(opt_force) {
  if (this.activeElement_ && (opt_force || this.getValue() != this.lastValue_)) {
    if (opt_force || !this.rowJustSelected_) {
      var token = this.parseToken();
      if (this.ac_) {
        this.ac_.setTarget(this.activeElement_);
        this.ac_.setToken(token, this.getValue());
      }
    }
    this.lastValue_ = this.getValue();
  }
  this.rowJustSelected_ = false;
};
goog.ui.ac.InputHandler.prototype.parseToken = function() {
  return this.parseToken_();
};
goog.ui.ac.InputHandler.prototype.moveUp_ = function() {
  return this.upsideDown_ ? this.ac_.hiliteNext() : this.ac_.hilitePrev();
};
goog.ui.ac.InputHandler.prototype.moveDown_ = function() {
  return this.upsideDown_ ? this.ac_.hilitePrev() : this.ac_.hiliteNext();
};
goog.ui.ac.InputHandler.prototype.parseToken_ = function() {
  var caret = this.getCursorPosition();
  var text = this.getValue();
  return this.trim_(this.splitInput_(text)[this.getTokenIndex_(text, caret)]);
};
goog.ui.ac.InputHandler.prototype.trim_ = function(text) {
  return this.trimmer_ ? String(text).replace(this.trimmer_, "") : text;
};
goog.ui.ac.InputHandler.prototype.getTokenIndex_ = function(text, caret) {
  var entries = this.splitInput_(text);
  if (caret == text.length) {
    return entries.length - 1;
  }
  var current = 0;
  for (var i = 0, pos = 0; i < entries.length && pos <= caret; i++) {
    pos += entries[i].length;
    current = i;
  }
  return current;
};
goog.ui.ac.InputHandler.prototype.splitInput_ = function(text) {
  if (!this.multi_) {
    return [text];
  }
  var arr = String(text).split("");
  var parts = [];
  var cache = [];
  for (var i = 0, inLiteral = false; i < arr.length; i++) {
    if (this.literals_ && this.literals_.indexOf(arr[i]) != -1) {
      if (this.generateNewTokenOnLiteral_ && !inLiteral) {
        parts.push(cache.join(""));
        cache.length = 0;
      }
      cache.push(arr[i]);
      inLiteral = !inLiteral;
    } else {
      if (!inLiteral && this.separators_.indexOf(arr[i]) != -1) {
        cache.push(arr[i]);
        parts.push(cache.join(""));
        cache.length = 0;
      } else {
        cache.push(arr[i]);
      }
    }
  }
  parts.push(cache.join(""));
  return parts;
};
goog.provide("goog.dom.classlist");
goog.require("goog.array");
goog.dom.classlist.ALWAYS_USE_DOM_TOKEN_LIST = goog.define("goog.dom.classlist.ALWAYS_USE_DOM_TOKEN_LIST", false);
goog.dom.classlist.getClassName_ = function(element) {
  return typeof element.className == "string" ? element.className : element.getAttribute && element.getAttribute("class") || "";
};
goog.dom.classlist.get = function(element) {
  if (goog.dom.classlist.ALWAYS_USE_DOM_TOKEN_LIST || element.classList) {
    return element.classList;
  }
  return goog.dom.classlist.getClassName_(element).match(/\S+/g) || [];
};
goog.dom.classlist.set = function(element, className) {
  if (typeof element.className == "string") {
    element.className = className;
    return;
  } else {
    if (element.setAttribute) {
      element.setAttribute("class", className);
    }
  }
};
goog.dom.classlist.contains = function(element, className) {
  if (goog.dom.classlist.ALWAYS_USE_DOM_TOKEN_LIST || element.classList) {
    return element.classList.contains(className);
  }
  return goog.array.contains(goog.dom.classlist.get(element), className);
};
goog.dom.classlist.add = function(element, className) {
  if (goog.dom.classlist.ALWAYS_USE_DOM_TOKEN_LIST || element.classList) {
    element.classList.add(className);
    return;
  }
  if (!goog.dom.classlist.contains(element, className)) {
    var oldClassName = goog.dom.classlist.getClassName_(element);
    goog.dom.classlist.set(element, oldClassName + (oldClassName.length > 0 ? " " + className : className));
  }
};
goog.dom.classlist.addAll = function(element, classesToAdd) {
  if (goog.dom.classlist.ALWAYS_USE_DOM_TOKEN_LIST || element.classList) {
    goog.array.forEach(classesToAdd, function(className) {
      goog.dom.classlist.add(element, className);
    });
    return;
  }
  var classMap = {};
  goog.array.forEach(goog.dom.classlist.get(element), function(className) {
    classMap[className] = true;
  });
  goog.array.forEach(classesToAdd, function(className) {
    classMap[className] = true;
  });
  var newClassName = "";
  for (var className in classMap) {
    newClassName += newClassName.length > 0 ? " " + className : className;
  }
  goog.dom.classlist.set(element, newClassName);
};
goog.dom.classlist.remove = function(element, className) {
  if (goog.dom.classlist.ALWAYS_USE_DOM_TOKEN_LIST || element.classList) {
    element.classList.remove(className);
    return;
  }
  if (goog.dom.classlist.contains(element, className)) {
    goog.dom.classlist.set(element, goog.array.filter(goog.dom.classlist.get(element), function(c) {
      return c != className;
    }).join(" "));
  }
};
goog.dom.classlist.removeAll = function(element, classesToRemove) {
  if (goog.dom.classlist.ALWAYS_USE_DOM_TOKEN_LIST || element.classList) {
    goog.array.forEach(classesToRemove, function(className) {
      goog.dom.classlist.remove(element, className);
    });
    return;
  }
  goog.dom.classlist.set(element, goog.array.filter(goog.dom.classlist.get(element), function(className) {
    return !goog.array.contains(classesToRemove, className);
  }).join(" "));
};
goog.dom.classlist.enable = function(element, className, enabled) {
  if (enabled) {
    goog.dom.classlist.add(element, className);
  } else {
    goog.dom.classlist.remove(element, className);
  }
};
goog.dom.classlist.enableAll = function(element, classesToEnable, enabled) {
  var f = enabled ? goog.dom.classlist.addAll : goog.dom.classlist.removeAll;
  f(element, classesToEnable);
};
goog.dom.classlist.swap = function(element, fromClass, toClass) {
  if (goog.dom.classlist.contains(element, fromClass)) {
    goog.dom.classlist.remove(element, fromClass);
    goog.dom.classlist.add(element, toClass);
    return true;
  }
  return false;
};
goog.dom.classlist.toggle = function(element, className) {
  var add = !goog.dom.classlist.contains(element, className);
  goog.dom.classlist.enable(element, className, add);
  return add;
};
goog.dom.classlist.addRemove = function(element, classToRemove, classToAdd) {
  goog.dom.classlist.remove(element, classToRemove);
  goog.dom.classlist.add(element, classToAdd);
};
goog.provide("goog.color.names");
goog.color.names = {"aliceblue":"#f0f8ff", "antiquewhite":"#faebd7", "aqua":"#00ffff", "aquamarine":"#7fffd4", "azure":"#f0ffff", "beige":"#f5f5dc", "bisque":"#ffe4c4", "black":"#000000", "blanchedalmond":"#ffebcd", "blue":"#0000ff", "blueviolet":"#8a2be2", "brown":"#a52a2a", "burlywood":"#deb887", "cadetblue":"#5f9ea0", "chartreuse":"#7fff00", "chocolate":"#d2691e", "coral":"#ff7f50", "cornflowerblue":"#6495ed", "cornsilk":"#fff8dc", "crimson":"#dc143c", "cyan":"#00ffff", "darkblue":"#00008b", "darkcyan":"#008b8b", 
"darkgoldenrod":"#b8860b", "darkgray":"#a9a9a9", "darkgreen":"#006400", "darkgrey":"#a9a9a9", "darkkhaki":"#bdb76b", "darkmagenta":"#8b008b", "darkolivegreen":"#556b2f", "darkorange":"#ff8c00", "darkorchid":"#9932cc", "darkred":"#8b0000", "darksalmon":"#e9967a", "darkseagreen":"#8fbc8f", "darkslateblue":"#483d8b", "darkslategray":"#2f4f4f", "darkslategrey":"#2f4f4f", "darkturquoise":"#00ced1", "darkviolet":"#9400d3", "deeppink":"#ff1493", "deepskyblue":"#00bfff", "dimgray":"#696969", "dimgrey":"#696969", 
"dodgerblue":"#1e90ff", "firebrick":"#b22222", "floralwhite":"#fffaf0", "forestgreen":"#228b22", "fuchsia":"#ff00ff", "gainsboro":"#dcdcdc", "ghostwhite":"#f8f8ff", "gold":"#ffd700", "goldenrod":"#daa520", "gray":"#808080", "green":"#008000", "greenyellow":"#adff2f", "grey":"#808080", "honeydew":"#f0fff0", "hotpink":"#ff69b4", "indianred":"#cd5c5c", "indigo":"#4b0082", "ivory":"#fffff0", "khaki":"#f0e68c", "lavender":"#e6e6fa", "lavenderblush":"#fff0f5", "lawngreen":"#7cfc00", "lemonchiffon":"#fffacd", 
"lightblue":"#add8e6", "lightcoral":"#f08080", "lightcyan":"#e0ffff", "lightgoldenrodyellow":"#fafad2", "lightgray":"#d3d3d3", "lightgreen":"#90ee90", "lightgrey":"#d3d3d3", "lightpink":"#ffb6c1", "lightsalmon":"#ffa07a", "lightseagreen":"#20b2aa", "lightskyblue":"#87cefa", "lightslategray":"#778899", "lightslategrey":"#778899", "lightsteelblue":"#b0c4de", "lightyellow":"#ffffe0", "lime":"#00ff00", "limegreen":"#32cd32", "linen":"#faf0e6", "magenta":"#ff00ff", "maroon":"#800000", "mediumaquamarine":"#66cdaa", 
"mediumblue":"#0000cd", "mediumorchid":"#ba55d3", "mediumpurple":"#9370db", "mediumseagreen":"#3cb371", "mediumslateblue":"#7b68ee", "mediumspringgreen":"#00fa9a", "mediumturquoise":"#48d1cc", "mediumvioletred":"#c71585", "midnightblue":"#191970", "mintcream":"#f5fffa", "mistyrose":"#ffe4e1", "moccasin":"#ffe4b5", "navajowhite":"#ffdead", "navy":"#000080", "oldlace":"#fdf5e6", "olive":"#808000", "olivedrab":"#6b8e23", "orange":"#ffa500", "orangered":"#ff4500", "orchid":"#da70d6", "palegoldenrod":"#eee8aa", 
"palegreen":"#98fb98", "paleturquoise":"#afeeee", "palevioletred":"#db7093", "papayawhip":"#ffefd5", "peachpuff":"#ffdab9", "peru":"#cd853f", "pink":"#ffc0cb", "plum":"#dda0dd", "powderblue":"#b0e0e6", "purple":"#800080", "red":"#ff0000", "rosybrown":"#bc8f8f", "royalblue":"#4169e1", "saddlebrown":"#8b4513", "salmon":"#fa8072", "sandybrown":"#f4a460", "seagreen":"#2e8b57", "seashell":"#fff5ee", "sienna":"#a0522d", "silver":"#c0c0c0", "skyblue":"#87ceeb", "slateblue":"#6a5acd", "slategray":"#708090", 
"slategrey":"#708090", "snow":"#fffafa", "springgreen":"#00ff7f", "steelblue":"#4682b4", "tan":"#d2b48c", "teal":"#008080", "thistle":"#d8bfd8", "tomato":"#ff6347", "turquoise":"#40e0d0", "violet":"#ee82ee", "wheat":"#f5deb3", "white":"#ffffff", "whitesmoke":"#f5f5f5", "yellow":"#ffff00", "yellowgreen":"#9acd32"};
goog.provide("goog.color");
goog.provide("goog.color.Hsl");
goog.provide("goog.color.Hsv");
goog.provide("goog.color.Rgb");
goog.require("goog.color.names");
goog.require("goog.math");
goog.color.Rgb;
goog.color.Hsv;
goog.color.Hsl;
goog.color.parse = function(str) {
  var result = {};
  str = String(str);
  var maybeHex = goog.color.prependHashIfNecessaryHelper(str);
  if (goog.color.isValidHexColor_(maybeHex)) {
    result.hex = goog.color.normalizeHex(maybeHex);
    result.type = "hex";
    return result;
  } else {
    var rgb = goog.color.isValidRgbColor_(str);
    if (rgb.length) {
      result.hex = goog.color.rgbArrayToHex(rgb);
      result.type = "rgb";
      return result;
    } else {
      if (goog.color.names) {
        var hex = goog.color.names[str.toLowerCase()];
        if (hex) {
          result.hex = hex;
          result.type = "named";
          return result;
        }
      }
    }
  }
  throw Error(str + " is not a valid color string");
};
goog.color.isValidColor = function(str) {
  var maybeHex = goog.color.prependHashIfNecessaryHelper(str);
  return !!(goog.color.isValidHexColor_(maybeHex) || goog.color.isValidRgbColor_(str).length || goog.color.names && goog.color.names[str.toLowerCase()]);
};
goog.color.parseRgb = function(str) {
  var rgb = goog.color.isValidRgbColor_(str);
  if (!rgb.length) {
    throw Error(str + " is not a valid RGB color");
  }
  return rgb;
};
goog.color.hexToRgbStyle = function(hexColor) {
  return goog.color.rgbStyle_(goog.color.hexToRgb(hexColor));
};
goog.color.hexTripletRe_ = /#(.)(.)(.)/;
goog.color.normalizeHex = function(hexColor) {
  if (!goog.color.isValidHexColor_(hexColor)) {
    throw Error("'" + hexColor + "' is not a valid hex color");
  }
  if (hexColor.length == 4) {
    hexColor = hexColor.replace(goog.color.hexTripletRe_, "#$1$1$2$2$3$3");
  }
  return hexColor.toLowerCase();
};
goog.color.hexToRgb = function(hexColor) {
  hexColor = goog.color.normalizeHex(hexColor);
  var rgb = parseInt(hexColor.substr(1), 16);
  var r = rgb >> 16;
  var g = rgb >> 8 & 255;
  var b = rgb & 255;
  return [r, g, b];
};
goog.color.rgbToHex = function(r, g, b) {
  r = Number(r);
  g = Number(g);
  b = Number(b);
  if (r != (r & 255) || g != (g & 255) || b != (b & 255)) {
    throw Error('"(' + r + "," + g + "," + b + '") is not a valid RGB color');
  }
  var rgb = r << 16 | g << 8 | b;
  if (r < 16) {
    return "#" + (16777216 | rgb).toString(16).substr(1);
  }
  return "#" + rgb.toString(16);
};
goog.color.rgbArrayToHex = function(rgb) {
  return goog.color.rgbToHex(rgb[0], rgb[1], rgb[2]);
};
goog.color.rgbToHsl = function(r, g, b) {
  var normR = r / 255;
  var normG = g / 255;
  var normB = b / 255;
  var max = Math.max(normR, normG, normB);
  var min = Math.min(normR, normG, normB);
  var h = 0;
  var s = 0;
  var l = 0.5 * (max + min);
  if (max != min) {
    if (max == normR) {
      h = 60 * (normG - normB) / (max - min);
    } else {
      if (max == normG) {
        h = 60 * (normB - normR) / (max - min) + 120;
      } else {
        if (max == normB) {
          h = 60 * (normR - normG) / (max - min) + 240;
        }
      }
    }
    if (0 < l && l <= 0.5) {
      s = (max - min) / (2 * l);
    } else {
      s = (max - min) / (2 - 2 * l);
    }
  }
  return [Math.round(h + 360) % 360, s, l];
};
goog.color.rgbArrayToHsl = function(rgb) {
  return goog.color.rgbToHsl(rgb[0], rgb[1], rgb[2]);
};
goog.color.hueToRgb_ = function(v1, v2, vH) {
  if (vH < 0) {
    vH += 1;
  } else {
    if (vH > 1) {
      vH -= 1;
    }
  }
  if (6 * vH < 1) {
    return v1 + (v2 - v1) * 6 * vH;
  } else {
    if (2 * vH < 1) {
      return v2;
    } else {
      if (3 * vH < 2) {
        return v1 + (v2 - v1) * (2 / 3 - vH) * 6;
      }
    }
  }
  return v1;
};
goog.color.hslToRgb = function(h, s, l) {
  var r = 0;
  var g = 0;
  var b = 0;
  var normH = h / 360;
  if (s == 0) {
    r = g = b = l * 255;
  } else {
    var temp1 = 0;
    var temp2 = 0;
    if (l < 0.5) {
      temp2 = l * (1 + s);
    } else {
      temp2 = l + s - s * l;
    }
    temp1 = 2 * l - temp2;
    r = 255 * goog.color.hueToRgb_(temp1, temp2, normH + 1 / 3);
    g = 255 * goog.color.hueToRgb_(temp1, temp2, normH);
    b = 255 * goog.color.hueToRgb_(temp1, temp2, normH - 1 / 3);
  }
  return [Math.round(r), Math.round(g), Math.round(b)];
};
goog.color.hslArrayToRgb = function(hsl) {
  return goog.color.hslToRgb(hsl[0], hsl[1], hsl[2]);
};
goog.color.validHexColorRe_ = /^#(?:[0-9a-f]{3}){1,2}$/i;
goog.color.isValidHexColor_ = function(str) {
  return goog.color.validHexColorRe_.test(str);
};
goog.color.rgbColorRe_ = /^(?:rgb)?\((0|[1-9]\d{0,2}),\s?(0|[1-9]\d{0,2}),\s?(0|[1-9]\d{0,2})\)$/i;
goog.color.isValidRgbColor_ = function(str) {
  var regExpResultArray = str.match(goog.color.rgbColorRe_);
  if (regExpResultArray) {
    var r = Number(regExpResultArray[1]);
    var g = Number(regExpResultArray[2]);
    var b = Number(regExpResultArray[3]);
    if (r >= 0 && r <= 255 && g >= 0 && g <= 255 && b >= 0 && b <= 255) {
      return [r, g, b];
    }
  }
  return [];
};
goog.color.prependZeroIfNecessaryHelper = function(hex) {
  return hex.length == 1 ? "0" + hex : hex;
};
goog.color.prependHashIfNecessaryHelper = function(str) {
  return str.charAt(0) == "#" ? str : "#" + str;
};
goog.color.rgbStyle_ = function(rgb) {
  return "rgb(" + rgb.join(",") + ")";
};
goog.color.hsvToRgb = function(h, s, brightness) {
  var red = 0;
  var green = 0;
  var blue = 0;
  if (s == 0) {
    red = brightness;
    green = brightness;
    blue = brightness;
  } else {
    var sextant = Math.floor(h / 60);
    var remainder = h / 60 - sextant;
    var val1 = brightness * (1 - s);
    var val2 = brightness * (1 - s * remainder);
    var val3 = brightness * (1 - s * (1 - remainder));
    switch(sextant) {
      case 1:
        red = val2;
        green = brightness;
        blue = val1;
        break;
      case 2:
        red = val1;
        green = brightness;
        blue = val3;
        break;
      case 3:
        red = val1;
        green = val2;
        blue = brightness;
        break;
      case 4:
        red = val3;
        green = val1;
        blue = brightness;
        break;
      case 5:
        red = brightness;
        green = val1;
        blue = val2;
        break;
      case 6:
      case 0:
        red = brightness;
        green = val3;
        blue = val1;
        break;
    }
  }
  return [Math.round(red), Math.round(green), Math.round(blue)];
};
goog.color.rgbToHsv = function(red, green, blue) {
  var max = Math.max(Math.max(red, green), blue);
  var min = Math.min(Math.min(red, green), blue);
  var hue;
  var saturation;
  var value = max;
  if (min == max) {
    hue = 0;
    saturation = 0;
  } else {
    var delta = max - min;
    saturation = delta / max;
    if (red == max) {
      hue = (green - blue) / delta;
    } else {
      if (green == max) {
        hue = 2 + (blue - red) / delta;
      } else {
        hue = 4 + (red - green) / delta;
      }
    }
    hue *= 60;
    if (hue < 0) {
      hue += 360;
    }
    if (hue > 360) {
      hue -= 360;
    }
  }
  return [hue, saturation, value];
};
goog.color.rgbArrayToHsv = function(rgb) {
  return goog.color.rgbToHsv(rgb[0], rgb[1], rgb[2]);
};
goog.color.hsvArrayToRgb = function(hsv) {
  return goog.color.hsvToRgb(hsv[0], hsv[1], hsv[2]);
};
goog.color.hexToHsl = function(hex) {
  var rgb = goog.color.hexToRgb(hex);
  return goog.color.rgbToHsl(rgb[0], rgb[1], rgb[2]);
};
goog.color.hslToHex = function(h, s, l) {
  return goog.color.rgbArrayToHex(goog.color.hslToRgb(h, s, l));
};
goog.color.hslArrayToHex = function(hsl) {
  return goog.color.rgbArrayToHex(goog.color.hslToRgb(hsl[0], hsl[1], hsl[2]));
};
goog.color.hexToHsv = function(hex) {
  return goog.color.rgbArrayToHsv(goog.color.hexToRgb(hex));
};
goog.color.hsvToHex = function(h, s, v) {
  return goog.color.rgbArrayToHex(goog.color.hsvToRgb(h, s, v));
};
goog.color.hsvArrayToHex = function(hsv) {
  return goog.color.hsvToHex(hsv[0], hsv[1], hsv[2]);
};
goog.color.hslDistance = function(hsl1, hsl2) {
  var sl1, sl2;
  if (hsl1[2] <= 0.5) {
    sl1 = hsl1[1] * hsl1[2];
  } else {
    sl1 = hsl1[1] * (1.0 - hsl1[2]);
  }
  if (hsl2[2] <= 0.5) {
    sl2 = hsl2[1] * hsl2[2];
  } else {
    sl2 = hsl2[1] * (1.0 - hsl2[2]);
  }
  var h1 = hsl1[0] / 360.0;
  var h2 = hsl2[0] / 360.0;
  var dh = (h1 - h2) * 2.0 * Math.PI;
  return (hsl1[2] - hsl2[2]) * (hsl1[2] - hsl2[2]) + sl1 * sl1 + sl2 * sl2 - 2 * sl1 * sl2 * Math.cos(dh);
};
goog.color.blend = function(rgb1, rgb2, factor) {
  factor = goog.math.clamp(factor, 0, 1);
  return [Math.round(rgb2[0] + factor * (rgb1[0] - rgb2[0])), Math.round(rgb2[1] + factor * (rgb1[1] - rgb2[1])), Math.round(rgb2[2] + factor * (rgb1[2] - rgb2[2]))];
};
goog.color.darken = function(rgb, factor) {
  var black = [0, 0, 0];
  return goog.color.blend(black, rgb, factor);
};
goog.color.lighten = function(rgb, factor) {
  var white = [255, 255, 255];
  return goog.color.blend(white, rgb, factor);
};
goog.color.highContrast = function(prime, suggestions) {
  var suggestionsWithDiff = [];
  for (var i = 0; i < suggestions.length; i++) {
    suggestionsWithDiff.push({color:suggestions[i], diff:goog.color.yiqBrightnessDiff_(suggestions[i], prime) + goog.color.colorDiff_(suggestions[i], prime)});
  }
  suggestionsWithDiff.sort(function(a, b) {
    return b.diff - a.diff;
  });
  return suggestionsWithDiff[0].color;
};
goog.color.yiqBrightness_ = function(rgb) {
  return Math.round((rgb[0] * 299 + rgb[1] * 587 + rgb[2] * 114) / 1000);
};
goog.color.yiqBrightnessDiff_ = function(rgb1, rgb2) {
  return Math.abs(goog.color.yiqBrightness_(rgb1) - goog.color.yiqBrightness_(rgb2));
};
goog.color.colorDiff_ = function(rgb1, rgb2) {
  return Math.abs(rgb1[0] - rgb2[0]) + Math.abs(rgb1[1] - rgb2[1]) + Math.abs(rgb1[2] - rgb2[2]);
};
goog.provide("goog.fx.Transition");
goog.provide("goog.fx.Transition.EventType");
goog.fx.Transition = function() {
};
goog.fx.Transition.EventType = {PLAY:"play", BEGIN:"begin", RESUME:"resume", END:"end", STOP:"stop", FINISH:"finish", PAUSE:"pause"};
goog.fx.Transition.prototype.play;
goog.fx.Transition.prototype.stop;
goog.provide("goog.fx.TransitionBase");
goog.provide("goog.fx.TransitionBase.State");
goog.require("goog.events.EventTarget");
goog.require("goog.fx.Transition");
goog.fx.TransitionBase = function() {
  goog.fx.TransitionBase.base(this, "constructor");
  this.state_ = goog.fx.TransitionBase.State.STOPPED;
  this.startTime = null;
  this.endTime = null;
};
goog.inherits(goog.fx.TransitionBase, goog.events.EventTarget);
goog.fx.TransitionBase.State = {STOPPED:0, PAUSED:-1, PLAYING:1};
goog.fx.TransitionBase.prototype.play = goog.abstractMethod;
goog.fx.TransitionBase.prototype.stop = goog.abstractMethod;
goog.fx.TransitionBase.prototype.pause = goog.abstractMethod;
goog.fx.TransitionBase.prototype.getStateInternal = function() {
  return this.state_;
};
goog.fx.TransitionBase.prototype.setStatePlaying = function() {
  this.state_ = goog.fx.TransitionBase.State.PLAYING;
};
goog.fx.TransitionBase.prototype.setStatePaused = function() {
  this.state_ = goog.fx.TransitionBase.State.PAUSED;
};
goog.fx.TransitionBase.prototype.setStateStopped = function() {
  this.state_ = goog.fx.TransitionBase.State.STOPPED;
};
goog.fx.TransitionBase.prototype.isPlaying = function() {
  return this.state_ == goog.fx.TransitionBase.State.PLAYING;
};
goog.fx.TransitionBase.prototype.isPaused = function() {
  return this.state_ == goog.fx.TransitionBase.State.PAUSED;
};
goog.fx.TransitionBase.prototype.isStopped = function() {
  return this.state_ == goog.fx.TransitionBase.State.STOPPED;
};
goog.fx.TransitionBase.prototype.onBegin = function() {
  this.dispatchAnimationEvent(goog.fx.Transition.EventType.BEGIN);
};
goog.fx.TransitionBase.prototype.onEnd = function() {
  this.dispatchAnimationEvent(goog.fx.Transition.EventType.END);
};
goog.fx.TransitionBase.prototype.onFinish = function() {
  this.dispatchAnimationEvent(goog.fx.Transition.EventType.FINISH);
};
goog.fx.TransitionBase.prototype.onPause = function() {
  this.dispatchAnimationEvent(goog.fx.Transition.EventType.PAUSE);
};
goog.fx.TransitionBase.prototype.onPlay = function() {
  this.dispatchAnimationEvent(goog.fx.Transition.EventType.PLAY);
};
goog.fx.TransitionBase.prototype.onResume = function() {
  this.dispatchAnimationEvent(goog.fx.Transition.EventType.RESUME);
};
goog.fx.TransitionBase.prototype.onStop = function() {
  this.dispatchAnimationEvent(goog.fx.Transition.EventType.STOP);
};
goog.fx.TransitionBase.prototype.dispatchAnimationEvent = function(type) {
  this.dispatchEvent(type);
};
goog.provide("goog.async.AnimationDelay");
goog.require("goog.Disposable");
goog.require("goog.events");
goog.require("goog.functions");
goog.async.AnimationDelay = function(listener, opt_window, opt_handler) {
  goog.async.AnimationDelay.base(this, "constructor");
  this.id_ = null;
  this.usingListeners_ = false;
  this.listener_ = listener;
  this.handler_ = opt_handler;
  this.win_ = opt_window || window;
  this.callback_ = goog.bind(this.doAction_, this);
};
goog.inherits(goog.async.AnimationDelay, goog.Disposable);
goog.async.AnimationDelay.TIMEOUT = 20;
goog.async.AnimationDelay.MOZ_BEFORE_PAINT_EVENT_ = "MozBeforePaint";
goog.async.AnimationDelay.prototype.start = function() {
  this.stop();
  this.usingListeners_ = false;
  var raf = this.getRaf_();
  var cancelRaf = this.getCancelRaf_();
  if (raf && !cancelRaf && this.win_.mozRequestAnimationFrame) {
    this.id_ = goog.events.listen(this.win_, goog.async.AnimationDelay.MOZ_BEFORE_PAINT_EVENT_, this.callback_);
    this.win_.mozRequestAnimationFrame(null);
    this.usingListeners_ = true;
  } else {
    if (raf && cancelRaf) {
      this.id_ = raf.call(this.win_, this.callback_);
    } else {
      this.id_ = this.win_.setTimeout(goog.functions.lock(this.callback_), goog.async.AnimationDelay.TIMEOUT);
    }
  }
};
goog.async.AnimationDelay.prototype.startIfNotActive = function() {
  if (!this.isActive()) {
    this.start();
  }
};
goog.async.AnimationDelay.prototype.stop = function() {
  if (this.isActive()) {
    var raf = this.getRaf_();
    var cancelRaf = this.getCancelRaf_();
    if (raf && !cancelRaf && this.win_.mozRequestAnimationFrame) {
      goog.events.unlistenByKey(this.id_);
    } else {
      if (raf && cancelRaf) {
        cancelRaf.call(this.win_, this.id_);
      } else {
        this.win_.clearTimeout(this.id_);
      }
    }
  }
  this.id_ = null;
};
goog.async.AnimationDelay.prototype.fire = function() {
  this.stop();
  this.doAction_();
};
goog.async.AnimationDelay.prototype.fireIfActive = function() {
  if (this.isActive()) {
    this.fire();
  }
};
goog.async.AnimationDelay.prototype.isActive = function() {
  return this.id_ != null;
};
goog.async.AnimationDelay.prototype.doAction_ = function() {
  if (this.usingListeners_ && this.id_) {
    goog.events.unlistenByKey(this.id_);
  }
  this.id_ = null;
  this.listener_.call(this.handler_, goog.now());
};
goog.async.AnimationDelay.prototype.disposeInternal = function() {
  this.stop();
  goog.async.AnimationDelay.base(this, "disposeInternal");
};
goog.async.AnimationDelay.prototype.getRaf_ = function() {
  var win = this.win_;
  return win.requestAnimationFrame || win.webkitRequestAnimationFrame || win.mozRequestAnimationFrame || win.oRequestAnimationFrame || win.msRequestAnimationFrame || null;
};
goog.async.AnimationDelay.prototype.getCancelRaf_ = function() {
  var win = this.win_;
  return win.cancelAnimationFrame || win.cancelRequestAnimationFrame || win.webkitCancelRequestAnimationFrame || win.mozCancelRequestAnimationFrame || win.oCancelRequestAnimationFrame || win.msCancelRequestAnimationFrame || null;
};
goog.provide("goog.Delay");
goog.provide("goog.async.Delay");
goog.require("goog.Disposable");
goog.require("goog.Timer");
goog.async.Delay = function(listener, opt_interval, opt_handler) {
  goog.async.Delay.base(this, "constructor");
  this.listener_ = listener;
  this.interval_ = opt_interval || 0;
  this.handler_ = opt_handler;
  this.callback_ = goog.bind(this.doAction_, this);
};
goog.inherits(goog.async.Delay, goog.Disposable);
goog.Delay = goog.async.Delay;
goog.async.Delay.prototype.id_ = 0;
goog.async.Delay.prototype.disposeInternal = function() {
  goog.async.Delay.base(this, "disposeInternal");
  this.stop();
  delete this.listener_;
  delete this.handler_;
};
goog.async.Delay.prototype.start = function(opt_interval) {
  this.stop();
  this.id_ = goog.Timer.callOnce(this.callback_, opt_interval !== undefined ? opt_interval : this.interval_);
};
goog.async.Delay.prototype.startIfNotActive = function(opt_interval) {
  if (!this.isActive()) {
    this.start(opt_interval);
  }
};
goog.async.Delay.prototype.stop = function() {
  if (this.isActive()) {
    goog.Timer.clear(this.id_);
  }
  this.id_ = 0;
};
goog.async.Delay.prototype.fire = function() {
  this.stop();
  this.doAction_();
};
goog.async.Delay.prototype.fireIfActive = function() {
  if (this.isActive()) {
    this.fire();
  }
};
goog.async.Delay.prototype.isActive = function() {
  return this.id_ != 0;
};
goog.async.Delay.prototype.doAction_ = function() {
  this.id_ = 0;
  if (this.listener_) {
    this.listener_.call(this.handler_);
  }
};
goog.provide("goog.fx.anim");
goog.provide("goog.fx.anim.Animated");
goog.require("goog.async.AnimationDelay");
goog.require("goog.async.Delay");
goog.require("goog.object");
goog.fx.anim.Animated = function() {
};
goog.fx.anim.Animated.prototype.onAnimationFrame;
goog.fx.anim.TIMEOUT = goog.async.AnimationDelay.TIMEOUT;
goog.fx.anim.activeAnimations_ = {};
goog.fx.anim.animationWindow_ = null;
goog.fx.anim.animationDelay_ = null;
goog.fx.anim.registerAnimation = function(animation) {
  var uid = goog.getUid(animation);
  if (!(uid in goog.fx.anim.activeAnimations_)) {
    goog.fx.anim.activeAnimations_[uid] = animation;
  }
  goog.fx.anim.requestAnimationFrame_();
};
goog.fx.anim.unregisterAnimation = function(animation) {
  var uid = goog.getUid(animation);
  delete goog.fx.anim.activeAnimations_[uid];
  if (goog.object.isEmpty(goog.fx.anim.activeAnimations_)) {
    goog.fx.anim.cancelAnimationFrame_();
  }
};
goog.fx.anim.tearDown = function() {
  goog.fx.anim.animationWindow_ = null;
  goog.dispose(goog.fx.anim.animationDelay_);
  goog.fx.anim.animationDelay_ = null;
  goog.fx.anim.activeAnimations_ = {};
};
goog.fx.anim.setAnimationWindow = function(animationWindow) {
  var hasTimer = goog.fx.anim.animationDelay_ && goog.fx.anim.animationDelay_.isActive();
  goog.dispose(goog.fx.anim.animationDelay_);
  goog.fx.anim.animationDelay_ = null;
  goog.fx.anim.animationWindow_ = animationWindow;
  if (hasTimer) {
    goog.fx.anim.requestAnimationFrame_();
  }
};
goog.fx.anim.requestAnimationFrame_ = function() {
  if (!goog.fx.anim.animationDelay_) {
    if (goog.fx.anim.animationWindow_) {
      goog.fx.anim.animationDelay_ = new goog.async.AnimationDelay(function(now) {
        goog.fx.anim.cycleAnimations_(now);
      }, goog.fx.anim.animationWindow_);
    } else {
      goog.fx.anim.animationDelay_ = new goog.async.Delay(function() {
        goog.fx.anim.cycleAnimations_(goog.now());
      }, goog.fx.anim.TIMEOUT);
    }
  }
  var delay = goog.fx.anim.animationDelay_;
  if (!delay.isActive()) {
    delay.start();
  }
};
goog.fx.anim.cancelAnimationFrame_ = function() {
  if (goog.fx.anim.animationDelay_) {
    goog.fx.anim.animationDelay_.stop();
  }
};
goog.fx.anim.cycleAnimations_ = function(now) {
  goog.object.forEach(goog.fx.anim.activeAnimations_, function(anim) {
    anim.onAnimationFrame(now);
  });
  if (!goog.object.isEmpty(goog.fx.anim.activeAnimations_)) {
    goog.fx.anim.requestAnimationFrame_();
  }
};
goog.provide("goog.fx.Animation");
goog.provide("goog.fx.Animation.EventType");
goog.provide("goog.fx.Animation.State");
goog.provide("goog.fx.AnimationEvent");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.events.Event");
goog.require("goog.fx.Transition");
goog.require("goog.fx.TransitionBase");
goog.require("goog.fx.anim");
goog.require("goog.fx.anim.Animated");
goog.fx.Animation = function(start, end, duration, opt_acc) {
  goog.fx.Animation.base(this, "constructor");
  if (!goog.isArray(start) || !goog.isArray(end)) {
    throw new Error("Start and end parameters must be arrays");
  }
  if (start.length != end.length) {
    throw new Error("Start and end points must be the same length");
  }
  this.startPoint = start;
  this.endPoint = end;
  this.duration = duration;
  this.accel_ = opt_acc;
  this.coords = [];
  this.useRightPositioningForRtl_ = false;
  this.fps_ = 0;
  this.progress = 0;
  this.lastFrame = null;
};
goog.inherits(goog.fx.Animation, goog.fx.TransitionBase);
goog.fx.Animation.prototype.getDuration = function() {
  return this.duration;
};
goog.fx.Animation.prototype.enableRightPositioningForRtl = function(useRightPositioningForRtl) {
  this.useRightPositioningForRtl_ = useRightPositioningForRtl;
};
goog.fx.Animation.prototype.isRightPositioningForRtlEnabled = function() {
  return this.useRightPositioningForRtl_;
};
goog.fx.Animation.EventType = {PLAY:goog.fx.Transition.EventType.PLAY, BEGIN:goog.fx.Transition.EventType.BEGIN, RESUME:goog.fx.Transition.EventType.RESUME, END:goog.fx.Transition.EventType.END, STOP:goog.fx.Transition.EventType.STOP, FINISH:goog.fx.Transition.EventType.FINISH, PAUSE:goog.fx.Transition.EventType.PAUSE, ANIMATE:"animate", DESTROY:"destroy"};
goog.fx.Animation.TIMEOUT = goog.fx.anim.TIMEOUT;
goog.fx.Animation.State = goog.fx.TransitionBase.State;
goog.fx.Animation.setAnimationWindow = function(animationWindow) {
  goog.fx.anim.setAnimationWindow(animationWindow);
};
goog.fx.Animation.prototype.play = function(opt_restart) {
  if (opt_restart || this.isStopped()) {
    this.progress = 0;
    this.coords = this.startPoint;
  } else {
    if (this.isPlaying()) {
      return false;
    }
  }
  goog.fx.anim.unregisterAnimation(this);
  var now = goog.now();
  this.startTime = now;
  if (this.isPaused()) {
    this.startTime -= this.duration * this.progress;
  }
  this.endTime = this.startTime + this.duration;
  this.lastFrame = this.startTime;
  if (!this.progress) {
    this.onBegin();
  }
  this.onPlay();
  if (this.isPaused()) {
    this.onResume();
  }
  this.setStatePlaying();
  goog.fx.anim.registerAnimation(this);
  this.cycle(now);
  return true;
};
goog.fx.Animation.prototype.stop = function(opt_gotoEnd) {
  goog.fx.anim.unregisterAnimation(this);
  this.setStateStopped();
  if (opt_gotoEnd) {
    this.progress = 1;
  }
  this.updateCoords_(this.progress);
  this.onStop();
  this.onEnd();
};
goog.fx.Animation.prototype.pause = function() {
  if (this.isPlaying()) {
    goog.fx.anim.unregisterAnimation(this);
    this.setStatePaused();
    this.onPause();
  }
};
goog.fx.Animation.prototype.getProgress = function() {
  return this.progress;
};
goog.fx.Animation.prototype.setProgress = function(progress) {
  this.progress = progress;
  if (this.isPlaying()) {
    var now = goog.now();
    this.startTime = now - this.duration * this.progress;
    this.endTime = this.startTime + this.duration;
  }
};
goog.fx.Animation.prototype.disposeInternal = function() {
  if (!this.isStopped()) {
    this.stop(false);
  }
  this.onDestroy();
  goog.fx.Animation.base(this, "disposeInternal");
};
goog.fx.Animation.prototype.destroy = function() {
  this.dispose();
};
goog.fx.Animation.prototype.onAnimationFrame = function(now) {
  this.cycle(now);
};
goog.fx.Animation.prototype.cycle = function(now) {
  goog.asserts.assertNumber(this.startTime);
  goog.asserts.assertNumber(this.endTime);
  goog.asserts.assertNumber(this.lastFrame);
  if (now < this.startTime) {
    this.endTime = now + this.endTime - this.startTime;
    this.startTime = now;
  }
  this.progress = (now - this.startTime) / (this.endTime - this.startTime);
  if (this.progress > 1) {
    this.progress = 1;
  }
  this.fps_ = 1000 / (now - this.lastFrame);
  this.lastFrame = now;
  this.updateCoords_(this.progress);
  if (this.progress == 1) {
    this.setStateStopped();
    goog.fx.anim.unregisterAnimation(this);
    this.onFinish();
    this.onEnd();
  } else {
    if (this.isPlaying()) {
      this.onAnimate();
    }
  }
};
goog.fx.Animation.prototype.updateCoords_ = function(t) {
  if (goog.isFunction(this.accel_)) {
    t = this.accel_(t);
  }
  this.coords = new Array(this.startPoint.length);
  for (var i = 0; i < this.startPoint.length; i++) {
    this.coords[i] = (this.endPoint[i] - this.startPoint[i]) * t + this.startPoint[i];
  }
};
goog.fx.Animation.prototype.onAnimate = function() {
  this.dispatchAnimationEvent(goog.fx.Animation.EventType.ANIMATE);
};
goog.fx.Animation.prototype.onDestroy = function() {
  this.dispatchAnimationEvent(goog.fx.Animation.EventType.DESTROY);
};
goog.fx.Animation.prototype.dispatchAnimationEvent = function(type) {
  this.dispatchEvent(new goog.fx.AnimationEvent(type, this));
};
goog.fx.AnimationEvent = function(type, anim) {
  goog.fx.AnimationEvent.base(this, "constructor", type);
  this.coords = anim.coords;
  this.x = anim.coords[0];
  this.y = anim.coords[1];
  this.z = anim.coords[2];
  this.duration = anim.duration;
  this.progress = anim.getProgress();
  this.fps = anim.fps_;
  this.state = anim.getStateInternal();
  this.anim = anim;
};
goog.inherits(goog.fx.AnimationEvent, goog.events.Event);
goog.fx.AnimationEvent.prototype.coordsAsInts = function() {
  return goog.array.map(this.coords, Math.round);
};
goog.provide("goog.dom.vendor");
goog.require("goog.string");
goog.require("goog.userAgent");
goog.dom.vendor.getVendorJsPrefix = function() {
  if (goog.userAgent.WEBKIT) {
    return "Webkit";
  } else {
    if (goog.userAgent.GECKO) {
      return "Moz";
    } else {
      if (goog.userAgent.IE) {
        return "ms";
      } else {
        if (goog.userAgent.OPERA) {
          return "O";
        }
      }
    }
  }
  return null;
};
goog.dom.vendor.getVendorPrefix = function() {
  if (goog.userAgent.WEBKIT) {
    return "-webkit";
  } else {
    if (goog.userAgent.GECKO) {
      return "-moz";
    } else {
      if (goog.userAgent.IE) {
        return "-ms";
      } else {
        if (goog.userAgent.OPERA) {
          return "-o";
        }
      }
    }
  }
  return null;
};
goog.dom.vendor.getPrefixedPropertyName = function(propertyName, opt_object) {
  if (opt_object && propertyName in opt_object) {
    return propertyName;
  }
  var prefix = goog.dom.vendor.getVendorJsPrefix();
  if (prefix) {
    prefix = prefix.toLowerCase();
    var prefixedPropertyName = prefix + goog.string.toTitleCase(propertyName);
    return opt_object === undefined || prefixedPropertyName in opt_object ? prefixedPropertyName : null;
  }
  return null;
};
goog.dom.vendor.getPrefixedEventType = function(eventType) {
  var prefix = goog.dom.vendor.getVendorJsPrefix() || "";
  return (prefix + eventType).toLowerCase();
};
goog.provide("goog.math.Box");
goog.require("goog.asserts");
goog.require("goog.math.Coordinate");
goog.math.Box = function(top, right, bottom, left) {
  this.top = top;
  this.right = right;
  this.bottom = bottom;
  this.left = left;
};
goog.math.Box.boundingBox = function(var_args) {
  var box = new goog.math.Box(arguments[0].y, arguments[0].x, arguments[0].y, arguments[0].x);
  for (var i = 1; i < arguments.length; i++) {
    box.expandToIncludeCoordinate(arguments[i]);
  }
  return box;
};
goog.math.Box.prototype.getWidth = function() {
  return this.right - this.left;
};
goog.math.Box.prototype.getHeight = function() {
  return this.bottom - this.top;
};
goog.math.Box.prototype.clone = function() {
  return new goog.math.Box(this.top, this.right, this.bottom, this.left);
};
if (goog.DEBUG) {
  goog.math.Box.prototype.toString = function() {
    return "(" + this.top + "t, " + this.right + "r, " + this.bottom + "b, " + this.left + "l)";
  };
}
goog.math.Box.prototype.contains = function(other) {
  return goog.math.Box.contains(this, other);
};
goog.math.Box.prototype.expand = function(top, opt_right, opt_bottom, opt_left) {
  if (goog.isObject(top)) {
    this.top -= top.top;
    this.right += top.right;
    this.bottom += top.bottom;
    this.left -= top.left;
  } else {
    this.top -= top;
    this.right += Number(opt_right);
    this.bottom += Number(opt_bottom);
    this.left -= Number(opt_left);
  }
  return this;
};
goog.math.Box.prototype.expandToInclude = function(box) {
  this.left = Math.min(this.left, box.left);
  this.top = Math.min(this.top, box.top);
  this.right = Math.max(this.right, box.right);
  this.bottom = Math.max(this.bottom, box.bottom);
};
goog.math.Box.prototype.expandToIncludeCoordinate = function(coord) {
  this.top = Math.min(this.top, coord.y);
  this.right = Math.max(this.right, coord.x);
  this.bottom = Math.max(this.bottom, coord.y);
  this.left = Math.min(this.left, coord.x);
};
goog.math.Box.equals = function(a, b) {
  if (a == b) {
    return true;
  }
  if (!a || !b) {
    return false;
  }
  return a.top == b.top && a.right == b.right && a.bottom == b.bottom && a.left == b.left;
};
goog.math.Box.contains = function(box, other) {
  if (!box || !other) {
    return false;
  }
  if (other instanceof goog.math.Box) {
    return other.left >= box.left && other.right <= box.right && other.top >= box.top && other.bottom <= box.bottom;
  }
  return other.x >= box.left && other.x <= box.right && other.y >= box.top && other.y <= box.bottom;
};
goog.math.Box.relativePositionX = function(box, coord) {
  if (coord.x < box.left) {
    return coord.x - box.left;
  } else {
    if (coord.x > box.right) {
      return coord.x - box.right;
    }
  }
  return 0;
};
goog.math.Box.relativePositionY = function(box, coord) {
  if (coord.y < box.top) {
    return coord.y - box.top;
  } else {
    if (coord.y > box.bottom) {
      return coord.y - box.bottom;
    }
  }
  return 0;
};
goog.math.Box.distance = function(box, coord) {
  var x = goog.math.Box.relativePositionX(box, coord);
  var y = goog.math.Box.relativePositionY(box, coord);
  return Math.sqrt(x * x + y * y);
};
goog.math.Box.intersects = function(a, b) {
  return a.left <= b.right && b.left <= a.right && a.top <= b.bottom && b.top <= a.bottom;
};
goog.math.Box.intersectsWithPadding = function(a, b, padding) {
  return a.left <= b.right + padding && b.left <= a.right + padding && a.top <= b.bottom + padding && b.top <= a.bottom + padding;
};
goog.math.Box.prototype.ceil = function() {
  this.top = Math.ceil(this.top);
  this.right = Math.ceil(this.right);
  this.bottom = Math.ceil(this.bottom);
  this.left = Math.ceil(this.left);
  return this;
};
goog.math.Box.prototype.floor = function() {
  this.top = Math.floor(this.top);
  this.right = Math.floor(this.right);
  this.bottom = Math.floor(this.bottom);
  this.left = Math.floor(this.left);
  return this;
};
goog.math.Box.prototype.round = function() {
  this.top = Math.round(this.top);
  this.right = Math.round(this.right);
  this.bottom = Math.round(this.bottom);
  this.left = Math.round(this.left);
  return this;
};
goog.math.Box.prototype.translate = function(tx, opt_ty) {
  if (tx instanceof goog.math.Coordinate) {
    this.left += tx.x;
    this.right += tx.x;
    this.top += tx.y;
    this.bottom += tx.y;
  } else {
    goog.asserts.assertNumber(tx);
    this.left += tx;
    this.right += tx;
    if (typeof opt_ty === "number") {
      this.top += opt_ty;
      this.bottom += opt_ty;
    }
  }
  return this;
};
goog.math.Box.prototype.scale = function(sx, opt_sy) {
  var sy = typeof opt_sy === "number" ? opt_sy : sx;
  this.left *= sx;
  this.right *= sx;
  this.top *= sy;
  this.bottom *= sy;
  return this;
};
goog.provide("goog.math.IRect");
goog.math.IRect = function() {
};
goog.math.IRect.prototype.left;
goog.math.IRect.prototype.top;
goog.math.IRect.prototype.width;
goog.math.IRect.prototype.height;
goog.provide("goog.math.Rect");
goog.require("goog.asserts");
goog.require("goog.math.Box");
goog.require("goog.math.Coordinate");
goog.require("goog.math.IRect");
goog.require("goog.math.Size");
goog.math.Rect = function(x, y, w, h) {
  this.left = x;
  this.top = y;
  this.width = w;
  this.height = h;
};
goog.math.Rect.prototype.clone = function() {
  return new goog.math.Rect(this.left, this.top, this.width, this.height);
};
goog.math.Rect.prototype.toBox = function() {
  var right = this.left + this.width;
  var bottom = this.top + this.height;
  return new goog.math.Box(this.top, right, bottom, this.left);
};
goog.math.Rect.createFromPositionAndSize = function(position, size) {
  return new goog.math.Rect(position.x, position.y, size.width, size.height);
};
goog.math.Rect.createFromBox = function(box) {
  return new goog.math.Rect(box.left, box.top, box.right - box.left, box.bottom - box.top);
};
if (goog.DEBUG) {
  goog.math.Rect.prototype.toString = function() {
    return "(" + this.left + ", " + this.top + " - " + this.width + "w x " + this.height + "h)";
  };
}
goog.math.Rect.equals = function(a, b) {
  if (a == b) {
    return true;
  }
  if (!a || !b) {
    return false;
  }
  return a.left == b.left && a.width == b.width && a.top == b.top && a.height == b.height;
};
goog.math.Rect.prototype.intersection = function(rect) {
  var x0 = Math.max(this.left, rect.left);
  var x1 = Math.min(this.left + this.width, rect.left + rect.width);
  if (x0 <= x1) {
    var y0 = Math.max(this.top, rect.top);
    var y1 = Math.min(this.top + this.height, rect.top + rect.height);
    if (y0 <= y1) {
      this.left = x0;
      this.top = y0;
      this.width = x1 - x0;
      this.height = y1 - y0;
      return true;
    }
  }
  return false;
};
goog.math.Rect.intersection = function(a, b) {
  var x0 = Math.max(a.left, b.left);
  var x1 = Math.min(a.left + a.width, b.left + b.width);
  if (x0 <= x1) {
    var y0 = Math.max(a.top, b.top);
    var y1 = Math.min(a.top + a.height, b.top + b.height);
    if (y0 <= y1) {
      return new goog.math.Rect(x0, y0, x1 - x0, y1 - y0);
    }
  }
  return null;
};
goog.math.Rect.intersects = function(a, b) {
  return a.left <= b.left + b.width && b.left <= a.left + a.width && a.top <= b.top + b.height && b.top <= a.top + a.height;
};
goog.math.Rect.prototype.intersects = function(rect) {
  return goog.math.Rect.intersects(this, rect);
};
goog.math.Rect.difference = function(a, b) {
  var intersection = goog.math.Rect.intersection(a, b);
  if (!intersection || !intersection.height || !intersection.width) {
    return [a.clone()];
  }
  var result = [];
  var top = a.top;
  var height = a.height;
  var ar = a.left + a.width;
  var ab = a.top + a.height;
  var br = b.left + b.width;
  var bb = b.top + b.height;
  if (b.top > a.top) {
    result.push(new goog.math.Rect(a.left, a.top, a.width, b.top - a.top));
    top = b.top;
    height -= b.top - a.top;
  }
  if (bb < ab) {
    result.push(new goog.math.Rect(a.left, bb, a.width, ab - bb));
    height = bb - top;
  }
  if (b.left > a.left) {
    result.push(new goog.math.Rect(a.left, top, b.left - a.left, height));
  }
  if (br < ar) {
    result.push(new goog.math.Rect(br, top, ar - br, height));
  }
  return result;
};
goog.math.Rect.prototype.difference = function(rect) {
  return goog.math.Rect.difference(this, rect);
};
goog.math.Rect.prototype.boundingRect = function(rect) {
  var right = Math.max(this.left + this.width, rect.left + rect.width);
  var bottom = Math.max(this.top + this.height, rect.top + rect.height);
  this.left = Math.min(this.left, rect.left);
  this.top = Math.min(this.top, rect.top);
  this.width = right - this.left;
  this.height = bottom - this.top;
};
goog.math.Rect.boundingRect = function(a, b) {
  if (!a || !b) {
    return null;
  }
  var newRect = new goog.math.Rect(a.left, a.top, a.width, a.height);
  newRect.boundingRect(b);
  return newRect;
};
goog.math.Rect.prototype.contains = function(another) {
  if (another instanceof goog.math.Coordinate) {
    return another.x >= this.left && another.x <= this.left + this.width && another.y >= this.top && another.y <= this.top + this.height;
  } else {
    return this.left <= another.left && this.left + this.width >= another.left + another.width && this.top <= another.top && this.top + this.height >= another.top + another.height;
  }
};
goog.math.Rect.prototype.squaredDistance = function(point) {
  var dx = point.x < this.left ? this.left - point.x : Math.max(point.x - (this.left + this.width), 0);
  var dy = point.y < this.top ? this.top - point.y : Math.max(point.y - (this.top + this.height), 0);
  return dx * dx + dy * dy;
};
goog.math.Rect.prototype.distance = function(point) {
  return Math.sqrt(this.squaredDistance(point));
};
goog.math.Rect.prototype.getSize = function() {
  return new goog.math.Size(this.width, this.height);
};
goog.math.Rect.prototype.getTopLeft = function() {
  return new goog.math.Coordinate(this.left, this.top);
};
goog.math.Rect.prototype.getCenter = function() {
  return new goog.math.Coordinate(this.left + this.width / 2, this.top + this.height / 2);
};
goog.math.Rect.prototype.getBottomRight = function() {
  return new goog.math.Coordinate(this.left + this.width, this.top + this.height);
};
goog.math.Rect.prototype.ceil = function() {
  this.left = Math.ceil(this.left);
  this.top = Math.ceil(this.top);
  this.width = Math.ceil(this.width);
  this.height = Math.ceil(this.height);
  return this;
};
goog.math.Rect.prototype.floor = function() {
  this.left = Math.floor(this.left);
  this.top = Math.floor(this.top);
  this.width = Math.floor(this.width);
  this.height = Math.floor(this.height);
  return this;
};
goog.math.Rect.prototype.round = function() {
  this.left = Math.round(this.left);
  this.top = Math.round(this.top);
  this.width = Math.round(this.width);
  this.height = Math.round(this.height);
  return this;
};
goog.math.Rect.prototype.translate = function(tx, opt_ty) {
  if (tx instanceof goog.math.Coordinate) {
    this.left += tx.x;
    this.top += tx.y;
  } else {
    this.left += goog.asserts.assertNumber(tx);
    if (typeof opt_ty === "number") {
      this.top += opt_ty;
    }
  }
  return this;
};
goog.math.Rect.prototype.scale = function(sx, opt_sy) {
  var sy = typeof opt_sy === "number" ? opt_sy : sx;
  this.left *= sx;
  this.width *= sx;
  this.top *= sy;
  this.height *= sy;
  return this;
};
goog.provide("goog.style");
goog.forwardDeclare("goog.events.Event");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.dom");
goog.require("goog.dom.NodeType");
goog.require("goog.dom.TagName");
goog.require("goog.dom.vendor");
goog.require("goog.html.SafeStyleSheet");
goog.require("goog.math.Box");
goog.require("goog.math.Coordinate");
goog.require("goog.math.Rect");
goog.require("goog.math.Size");
goog.require("goog.object");
goog.require("goog.reflect");
goog.require("goog.string");
goog.require("goog.userAgent");
goog.style.setStyle = function(element, style, opt_value) {
  if (typeof style === "string") {
    goog.style.setStyle_(element, opt_value, style);
  } else {
    for (var key in style) {
      goog.style.setStyle_(element, style[key], key);
    }
  }
};
goog.style.setStyle_ = function(element, value, style) {
  var propertyName = goog.style.getVendorJsStyleName_(element, style);
  if (propertyName) {
    element.style[propertyName] = value;
  }
};
goog.style.styleNameCache_ = {};
goog.style.getVendorJsStyleName_ = function(element, style) {
  var propertyName = goog.style.styleNameCache_[style];
  if (!propertyName) {
    var camelStyle = goog.string.toCamelCase(style);
    propertyName = camelStyle;
    if (element.style[camelStyle] === undefined) {
      var prefixedStyle = goog.dom.vendor.getVendorJsPrefix() + goog.string.toTitleCase(camelStyle);
      if (element.style[prefixedStyle] !== undefined) {
        propertyName = prefixedStyle;
      }
    }
    goog.style.styleNameCache_[style] = propertyName;
  }
  return propertyName;
};
goog.style.getVendorStyleName_ = function(element, style) {
  var camelStyle = goog.string.toCamelCase(style);
  if (element.style[camelStyle] === undefined) {
    var prefixedStyle = goog.dom.vendor.getVendorJsPrefix() + goog.string.toTitleCase(camelStyle);
    if (element.style[prefixedStyle] !== undefined) {
      return goog.dom.vendor.getVendorPrefix() + "-" + style;
    }
  }
  return style;
};
goog.style.getStyle = function(element, property) {
  var styleValue = element.style[goog.string.toCamelCase(property)];
  if (typeof styleValue !== "undefined") {
    return styleValue;
  }
  return element.style[goog.style.getVendorJsStyleName_(element, property)] || "";
};
goog.style.getComputedStyle = function(element, property) {
  var doc = goog.dom.getOwnerDocument(element);
  if (doc.defaultView && doc.defaultView.getComputedStyle) {
    var styles = doc.defaultView.getComputedStyle(element, null);
    if (styles) {
      return styles[property] || styles.getPropertyValue(property) || "";
    }
  }
  return "";
};
goog.style.getCascadedStyle = function(element, style) {
  return element.currentStyle ? element.currentStyle[style] : null;
};
goog.style.getStyle_ = function(element, style) {
  return goog.style.getComputedStyle(element, style) || goog.style.getCascadedStyle(element, style) || element.style && element.style[style];
};
goog.style.getComputedBoxSizing = function(element) {
  return goog.style.getStyle_(element, "boxSizing") || goog.style.getStyle_(element, "MozBoxSizing") || goog.style.getStyle_(element, "WebkitBoxSizing") || null;
};
goog.style.getComputedPosition = function(element) {
  return goog.style.getStyle_(element, "position");
};
goog.style.getBackgroundColor = function(element) {
  return goog.style.getStyle_(element, "backgroundColor");
};
goog.style.getComputedOverflowX = function(element) {
  return goog.style.getStyle_(element, "overflowX");
};
goog.style.getComputedOverflowY = function(element) {
  return goog.style.getStyle_(element, "overflowY");
};
goog.style.getComputedZIndex = function(element) {
  return goog.style.getStyle_(element, "zIndex");
};
goog.style.getComputedTextAlign = function(element) {
  return goog.style.getStyle_(element, "textAlign");
};
goog.style.getComputedCursor = function(element) {
  return goog.style.getStyle_(element, "cursor");
};
goog.style.getComputedTransform = function(element) {
  var property = goog.style.getVendorStyleName_(element, "transform");
  return goog.style.getStyle_(element, property) || goog.style.getStyle_(element, "transform");
};
goog.style.setPosition = function(el, arg1, opt_arg2) {
  var x, y;
  if (arg1 instanceof goog.math.Coordinate) {
    x = arg1.x;
    y = arg1.y;
  } else {
    x = arg1;
    y = opt_arg2;
  }
  el.style.left = goog.style.getPixelStyleValue_(x, false);
  el.style.top = goog.style.getPixelStyleValue_(y, false);
};
goog.style.getPosition = function(element) {
  return new goog.math.Coordinate(element.offsetLeft, element.offsetTop);
};
goog.style.getClientViewportElement = function(opt_node) {
  var doc;
  if (opt_node) {
    doc = goog.dom.getOwnerDocument(opt_node);
  } else {
    doc = goog.dom.getDocument();
  }
  if (goog.userAgent.IE && !goog.userAgent.isDocumentModeOrHigher(9) && !goog.dom.getDomHelper(doc).isCss1CompatMode()) {
    return doc.body;
  }
  return doc.documentElement;
};
goog.style.getViewportPageOffset = function(doc) {
  var body = doc.body;
  var documentElement = doc.documentElement;
  var scrollLeft = body.scrollLeft || documentElement.scrollLeft;
  var scrollTop = body.scrollTop || documentElement.scrollTop;
  return new goog.math.Coordinate(scrollLeft, scrollTop);
};
goog.style.getBoundingClientRect_ = function(el) {
  var rect;
  try {
    rect = el.getBoundingClientRect();
  } catch (e) {
    return {"left":0, "top":0, "right":0, "bottom":0};
  }
  if (goog.userAgent.IE && el.ownerDocument.body) {
    var doc = el.ownerDocument;
    rect.left -= doc.documentElement.clientLeft + doc.body.clientLeft;
    rect.top -= doc.documentElement.clientTop + doc.body.clientTop;
  }
  return rect;
};
goog.style.getOffsetParent = function(element) {
  if (goog.userAgent.IE && !goog.userAgent.isDocumentModeOrHigher(8)) {
    goog.asserts.assert(element && "offsetParent" in element);
    return element.offsetParent;
  }
  var doc = goog.dom.getOwnerDocument(element);
  var positionStyle = goog.style.getStyle_(element, "position");
  var skipStatic = positionStyle == "fixed" || positionStyle == "absolute";
  for (var parent = element.parentNode; parent && parent != doc; parent = parent.parentNode) {
    if (parent.nodeType == goog.dom.NodeType.DOCUMENT_FRAGMENT && parent.host) {
      parent = parent.host;
    }
    positionStyle = goog.style.getStyle_(parent, "position");
    skipStatic = skipStatic && positionStyle == "static" && parent != doc.documentElement && parent != doc.body;
    if (!skipStatic && (parent.scrollWidth > parent.clientWidth || parent.scrollHeight > parent.clientHeight || positionStyle == "fixed" || positionStyle == "absolute" || positionStyle == "relative")) {
      return parent;
    }
  }
  return null;
};
goog.style.getVisibleRectForElement = function(element) {
  var visibleRect = new goog.math.Box(0, Infinity, Infinity, 0);
  var dom = goog.dom.getDomHelper(element);
  var body = dom.getDocument().body;
  var documentElement = dom.getDocument().documentElement;
  var scrollEl = dom.getDocumentScrollElement();
  for (var el = element; el = goog.style.getOffsetParent(el);) {
    if ((!goog.userAgent.IE || el.clientWidth != 0) && (!goog.userAgent.WEBKIT || el.clientHeight != 0 || el != body) && (el != body && el != documentElement && goog.style.getStyle_(el, "overflow") != "visible")) {
      var pos = goog.style.getPageOffset(el);
      var client = goog.style.getClientLeftTop(el);
      pos.x += client.x;
      pos.y += client.y;
      visibleRect.top = Math.max(visibleRect.top, pos.y);
      visibleRect.right = Math.min(visibleRect.right, pos.x + el.clientWidth);
      visibleRect.bottom = Math.min(visibleRect.bottom, pos.y + el.clientHeight);
      visibleRect.left = Math.max(visibleRect.left, pos.x);
    }
  }
  var scrollX = scrollEl.scrollLeft, scrollY = scrollEl.scrollTop;
  visibleRect.left = Math.max(visibleRect.left, scrollX);
  visibleRect.top = Math.max(visibleRect.top, scrollY);
  var winSize = dom.getViewportSize();
  visibleRect.right = Math.min(visibleRect.right, scrollX + winSize.width);
  visibleRect.bottom = Math.min(visibleRect.bottom, scrollY + winSize.height);
  return visibleRect.top >= 0 && visibleRect.left >= 0 && visibleRect.bottom > visibleRect.top && visibleRect.right > visibleRect.left ? visibleRect : null;
};
goog.style.getContainerOffsetToScrollInto = function(element, opt_container, opt_center) {
  var container = opt_container || goog.dom.getDocumentScrollElement();
  var elementPos = goog.style.getPageOffset(element);
  var containerPos = goog.style.getPageOffset(container);
  var containerBorder = goog.style.getBorderBox(container);
  if (container == goog.dom.getDocumentScrollElement()) {
    var relX = elementPos.x - container.scrollLeft;
    var relY = elementPos.y - container.scrollTop;
    if (goog.userAgent.IE && !goog.userAgent.isDocumentModeOrHigher(10)) {
      relX += containerBorder.left;
      relY += containerBorder.top;
    }
  } else {
    var relX = elementPos.x - containerPos.x - containerBorder.left;
    var relY = elementPos.y - containerPos.y - containerBorder.top;
  }
  var elementSize = goog.style.getSizeWithDisplay_(element);
  var spaceX = container.clientWidth - elementSize.width;
  var spaceY = container.clientHeight - elementSize.height;
  var scrollLeft = container.scrollLeft;
  var scrollTop = container.scrollTop;
  if (opt_center) {
    scrollLeft += relX - spaceX / 2;
    scrollTop += relY - spaceY / 2;
  } else {
    scrollLeft += Math.min(relX, Math.max(relX - spaceX, 0));
    scrollTop += Math.min(relY, Math.max(relY - spaceY, 0));
  }
  return new goog.math.Coordinate(scrollLeft, scrollTop);
};
goog.style.scrollIntoContainerView = function(element, opt_container, opt_center) {
  var container = opt_container || goog.dom.getDocumentScrollElement();
  var offset = goog.style.getContainerOffsetToScrollInto(element, container, opt_center);
  container.scrollLeft = offset.x;
  container.scrollTop = offset.y;
};
goog.style.getClientLeftTop = function(el) {
  return new goog.math.Coordinate(el.clientLeft, el.clientTop);
};
goog.style.getPageOffset = function(el) {
  var doc = goog.dom.getOwnerDocument(el);
  goog.asserts.assertObject(el, "Parameter is required");
  var pos = new goog.math.Coordinate(0, 0);
  var viewportElement = goog.style.getClientViewportElement(doc);
  if (el == viewportElement) {
    return pos;
  }
  var box = goog.style.getBoundingClientRect_(el);
  var scrollCoord = goog.dom.getDomHelper(doc).getDocumentScroll();
  pos.x = box.left + scrollCoord.x;
  pos.y = box.top + scrollCoord.y;
  return pos;
};
goog.style.getPageOffsetLeft = function(el) {
  return goog.style.getPageOffset(el).x;
};
goog.style.getPageOffsetTop = function(el) {
  return goog.style.getPageOffset(el).y;
};
goog.style.getFramedPageOffset = function(el, relativeWin) {
  var position = new goog.math.Coordinate(0, 0);
  var currentWin = goog.dom.getWindow(goog.dom.getOwnerDocument(el));
  if (!goog.reflect.canAccessProperty(currentWin, "parent")) {
    return position;
  }
  var currentEl = el;
  do {
    var offset = currentWin == relativeWin ? goog.style.getPageOffset(currentEl) : goog.style.getClientPositionForElement_(goog.asserts.assert(currentEl));
    position.x += offset.x;
    position.y += offset.y;
  } while (currentWin && currentWin != relativeWin && currentWin != currentWin.parent && (currentEl = currentWin.frameElement) && (currentWin = currentWin.parent));
  return position;
};
goog.style.translateRectForAnotherFrame = function(rect, origBase, newBase) {
  if (origBase.getDocument() != newBase.getDocument()) {
    var body = origBase.getDocument().body;
    var pos = goog.style.getFramedPageOffset(body, newBase.getWindow());
    pos = goog.math.Coordinate.difference(pos, goog.style.getPageOffset(body));
    if (goog.userAgent.IE && !goog.userAgent.isDocumentModeOrHigher(9) && !origBase.isCss1CompatMode()) {
      pos = goog.math.Coordinate.difference(pos, origBase.getDocumentScroll());
    }
    rect.left += pos.x;
    rect.top += pos.y;
  }
};
goog.style.getRelativePosition = function(a, b) {
  var ap = goog.style.getClientPosition(a);
  var bp = goog.style.getClientPosition(b);
  return new goog.math.Coordinate(ap.x - bp.x, ap.y - bp.y);
};
goog.style.getClientPositionForElement_ = function(el) {
  var box = goog.style.getBoundingClientRect_(el);
  return new goog.math.Coordinate(box.left, box.top);
};
goog.style.getClientPosition = function(el) {
  goog.asserts.assert(el);
  if (el.nodeType == goog.dom.NodeType.ELEMENT) {
    return goog.style.getClientPositionForElement_(el);
  } else {
    var targetEvent = el.changedTouches ? el.changedTouches[0] : el;
    return new goog.math.Coordinate(targetEvent.clientX, targetEvent.clientY);
  }
};
goog.style.setPageOffset = function(el, x, opt_y) {
  var cur = goog.style.getPageOffset(el);
  if (x instanceof goog.math.Coordinate) {
    opt_y = x.y;
    x = x.x;
  }
  var dx = goog.asserts.assertNumber(x) - cur.x;
  var dy = Number(opt_y) - cur.y;
  goog.style.setPosition(el, el.offsetLeft + dx, el.offsetTop + dy);
};
goog.style.setSize = function(element, w, opt_h) {
  var h;
  if (w instanceof goog.math.Size) {
    h = w.height;
    w = w.width;
  } else {
    if (opt_h == undefined) {
      throw new Error("missing height argument");
    }
    h = opt_h;
  }
  goog.style.setWidth(element, w);
  goog.style.setHeight(element, h);
};
goog.style.getPixelStyleValue_ = function(value, round) {
  if (typeof value == "number") {
    value = (round ? Math.round(value) : value) + "px";
  }
  return value;
};
goog.style.setHeight = function(element, height) {
  element.style.height = goog.style.getPixelStyleValue_(height, true);
};
goog.style.setWidth = function(element, width) {
  element.style.width = goog.style.getPixelStyleValue_(width, true);
};
goog.style.getSize = function(element) {
  return goog.style.evaluateWithTemporaryDisplay_(goog.style.getSizeWithDisplay_, element);
};
goog.style.evaluateWithTemporaryDisplay_ = function(fn, element) {
  if (goog.style.getStyle_(element, "display") != "none") {
    return fn(element);
  }
  var style = element.style;
  var originalDisplay = style.display;
  var originalVisibility = style.visibility;
  var originalPosition = style.position;
  style.visibility = "hidden";
  style.position = "absolute";
  style.display = "inline";
  var retVal = fn(element);
  style.display = originalDisplay;
  style.position = originalPosition;
  style.visibility = originalVisibility;
  return retVal;
};
goog.style.getSizeWithDisplay_ = function(element) {
  var offsetWidth = element.offsetWidth;
  var offsetHeight = element.offsetHeight;
  var webkitOffsetsZero = goog.userAgent.WEBKIT && !offsetWidth && !offsetHeight;
  if ((offsetWidth === undefined || webkitOffsetsZero) && element.getBoundingClientRect) {
    var clientRect = goog.style.getBoundingClientRect_(element);
    return new goog.math.Size(clientRect.right - clientRect.left, clientRect.bottom - clientRect.top);
  }
  return new goog.math.Size(offsetWidth, offsetHeight);
};
goog.style.getTransformedSize = function(element) {
  if (!element.getBoundingClientRect) {
    return null;
  }
  var clientRect = goog.style.evaluateWithTemporaryDisplay_(goog.style.getBoundingClientRect_, element);
  return new goog.math.Size(clientRect.right - clientRect.left, clientRect.bottom - clientRect.top);
};
goog.style.getBounds = function(element) {
  var o = goog.style.getPageOffset(element);
  var s = goog.style.getSize(element);
  return new goog.math.Rect(o.x, o.y, s.width, s.height);
};
goog.style.toCamelCase = function(selector) {
  return goog.string.toCamelCase(String(selector));
};
goog.style.toSelectorCase = function(selector) {
  return goog.string.toSelectorCase(selector);
};
goog.style.getOpacity = function(el) {
  goog.asserts.assert(el);
  var style = el.style;
  var result = "";
  if ("opacity" in style) {
    result = style.opacity;
  } else {
    if ("MozOpacity" in style) {
      result = style.MozOpacity;
    } else {
      if ("filter" in style) {
        var match = style.filter.match(/alpha\(opacity=([\d.]+)\)/);
        if (match) {
          result = String(match[1] / 100);
        }
      }
    }
  }
  return result == "" ? result : Number(result);
};
goog.style.setOpacity = function(el, alpha) {
  goog.asserts.assert(el);
  var style = el.style;
  if ("opacity" in style) {
    style.opacity = alpha;
  } else {
    if ("MozOpacity" in style) {
      style.MozOpacity = alpha;
    } else {
      if ("filter" in style) {
        if (alpha === "") {
          style.filter = "";
        } else {
          style.filter = "alpha(opacity\x3d" + Number(alpha) * 100 + ")";
        }
      }
    }
  }
};
goog.style.setTransparentBackgroundImage = function(el, src) {
  var style = el.style;
  if (goog.userAgent.IE && !goog.userAgent.isVersionOrHigher("8")) {
    style.filter = "progid:DXImageTransform.Microsoft.AlphaImageLoader(" + 'src\x3d"' + src + '", sizingMethod\x3d"crop")';
  } else {
    style.backgroundImage = "url(" + src + ")";
    style.backgroundPosition = "top left";
    style.backgroundRepeat = "no-repeat";
  }
};
goog.style.clearTransparentBackgroundImage = function(el) {
  var style = el.style;
  if ("filter" in style) {
    style.filter = "";
  } else {
    style.backgroundImage = "none";
  }
};
goog.style.showElement = function(el, display) {
  goog.style.setElementShown(el, display);
};
goog.style.setElementShown = function(el, isShown) {
  el.style.display = isShown ? "" : "none";
};
goog.style.isElementShown = function(el) {
  return el.style.display != "none";
};
goog.style.installSafeStyleSheet = function(safeStyleSheet, opt_node) {
  var dh = goog.dom.getDomHelper(opt_node);
  var doc = dh.getDocument();
  if (goog.userAgent.IE && doc.createStyleSheet) {
    var styleSheet = doc.createStyleSheet();
    goog.style.setSafeStyleSheet(styleSheet, safeStyleSheet);
    return styleSheet;
  } else {
    var head = dh.getElementsByTagNameAndClass(goog.dom.TagName.HEAD)[0];
    if (!head) {
      var body = dh.getElementsByTagNameAndClass(goog.dom.TagName.BODY)[0];
      head = dh.createDom(goog.dom.TagName.HEAD);
      body.parentNode.insertBefore(head, body);
    }
    var el = dh.createDom(goog.dom.TagName.STYLE);
    goog.style.setSafeStyleSheet(el, safeStyleSheet);
    dh.appendChild(head, el);
    return el;
  }
};
goog.style.uninstallStyles = function(styleSheet) {
  var node = styleSheet.ownerNode || styleSheet.owningElement || styleSheet;
  goog.dom.removeNode(node);
};
goog.style.setSafeStyleSheet = function(element, safeStyleSheet) {
  var stylesString = goog.html.SafeStyleSheet.unwrap(safeStyleSheet);
  if (goog.userAgent.IE && element.cssText !== undefined) {
    element.cssText = stylesString;
  } else {
    element.innerHTML = stylesString;
  }
};
goog.style.setPreWrap = function(el) {
  var style = el.style;
  if (goog.userAgent.IE && !goog.userAgent.isVersionOrHigher("8")) {
    style.whiteSpace = "pre";
    style.wordWrap = "break-word";
  } else {
    if (goog.userAgent.GECKO) {
      style.whiteSpace = "-moz-pre-wrap";
    } else {
      style.whiteSpace = "pre-wrap";
    }
  }
};
goog.style.setInlineBlock = function(el) {
  var style = el.style;
  style.position = "relative";
  if (goog.userAgent.IE && !goog.userAgent.isVersionOrHigher("8")) {
    style.zoom = "1";
    style.display = "inline";
  } else {
    style.display = "inline-block";
  }
};
goog.style.isRightToLeft = function(el) {
  return "rtl" == goog.style.getStyle_(el, "direction");
};
goog.style.unselectableStyle_ = goog.userAgent.GECKO ? "MozUserSelect" : goog.userAgent.WEBKIT || goog.userAgent.EDGE ? "WebkitUserSelect" : null;
goog.style.isUnselectable = function(el) {
  if (goog.style.unselectableStyle_) {
    return el.style[goog.style.unselectableStyle_].toLowerCase() == "none";
  } else {
    if (goog.userAgent.IE || goog.userAgent.OPERA) {
      return el.getAttribute("unselectable") == "on";
    }
  }
  return false;
};
goog.style.setUnselectable = function(el, unselectable, opt_noRecurse) {
  var descendants = !opt_noRecurse ? el.getElementsByTagName("*") : null;
  var name = goog.style.unselectableStyle_;
  if (name) {
    var value = unselectable ? "none" : "";
    if (el.style) {
      el.style[name] = value;
    }
    if (descendants) {
      for (var i = 0, descendant; descendant = descendants[i]; i++) {
        if (descendant.style) {
          descendant.style[name] = value;
        }
      }
    }
  } else {
    if (goog.userAgent.IE || goog.userAgent.OPERA) {
      var value = unselectable ? "on" : "";
      el.setAttribute("unselectable", value);
      if (descendants) {
        for (var i = 0, descendant; descendant = descendants[i]; i++) {
          descendant.setAttribute("unselectable", value);
        }
      }
    }
  }
};
goog.style.getBorderBoxSize = function(element) {
  return new goog.math.Size(element.offsetWidth, element.offsetHeight);
};
goog.style.setBorderBoxSize = function(element, size) {
  var doc = goog.dom.getOwnerDocument(element);
  var isCss1CompatMode = goog.dom.getDomHelper(doc).isCss1CompatMode();
  if (goog.userAgent.IE && !goog.userAgent.isVersionOrHigher("10") && (!isCss1CompatMode || !goog.userAgent.isVersionOrHigher("8"))) {
    var style = element.style;
    if (isCss1CompatMode) {
      var paddingBox = goog.style.getPaddingBox(element);
      var borderBox = goog.style.getBorderBox(element);
      style.pixelWidth = size.width - borderBox.left - paddingBox.left - paddingBox.right - borderBox.right;
      style.pixelHeight = size.height - borderBox.top - paddingBox.top - paddingBox.bottom - borderBox.bottom;
    } else {
      style.pixelWidth = size.width;
      style.pixelHeight = size.height;
    }
  } else {
    goog.style.setBoxSizingSize_(element, size, "border-box");
  }
};
goog.style.getContentBoxSize = function(element) {
  var doc = goog.dom.getOwnerDocument(element);
  var ieCurrentStyle = goog.userAgent.IE && element.currentStyle;
  if (ieCurrentStyle && goog.dom.getDomHelper(doc).isCss1CompatMode() && ieCurrentStyle.width != "auto" && ieCurrentStyle.height != "auto" && !ieCurrentStyle.boxSizing) {
    var width = goog.style.getIePixelValue_(element, ieCurrentStyle.width, "width", "pixelWidth");
    var height = goog.style.getIePixelValue_(element, ieCurrentStyle.height, "height", "pixelHeight");
    return new goog.math.Size(width, height);
  } else {
    var borderBoxSize = goog.style.getBorderBoxSize(element);
    var paddingBox = goog.style.getPaddingBox(element);
    var borderBox = goog.style.getBorderBox(element);
    return new goog.math.Size(borderBoxSize.width - borderBox.left - paddingBox.left - paddingBox.right - borderBox.right, borderBoxSize.height - borderBox.top - paddingBox.top - paddingBox.bottom - borderBox.bottom);
  }
};
goog.style.setContentBoxSize = function(element, size) {
  var doc = goog.dom.getOwnerDocument(element);
  var isCss1CompatMode = goog.dom.getDomHelper(doc).isCss1CompatMode();
  if (goog.userAgent.IE && !goog.userAgent.isVersionOrHigher("10") && (!isCss1CompatMode || !goog.userAgent.isVersionOrHigher("8"))) {
    var style = element.style;
    if (isCss1CompatMode) {
      style.pixelWidth = size.width;
      style.pixelHeight = size.height;
    } else {
      var paddingBox = goog.style.getPaddingBox(element);
      var borderBox = goog.style.getBorderBox(element);
      style.pixelWidth = size.width + borderBox.left + paddingBox.left + paddingBox.right + borderBox.right;
      style.pixelHeight = size.height + borderBox.top + paddingBox.top + paddingBox.bottom + borderBox.bottom;
    }
  } else {
    goog.style.setBoxSizingSize_(element, size, "content-box");
  }
};
goog.style.setBoxSizingSize_ = function(element, size, boxSizing) {
  var style = element.style;
  if (goog.userAgent.GECKO) {
    style.MozBoxSizing = boxSizing;
  } else {
    if (goog.userAgent.WEBKIT) {
      style.WebkitBoxSizing = boxSizing;
    } else {
      style.boxSizing = boxSizing;
    }
  }
  style.width = Math.max(size.width, 0) + "px";
  style.height = Math.max(size.height, 0) + "px";
};
goog.style.getIePixelValue_ = function(element, value, name, pixelName) {
  if (/^\d+px?$/.test(value)) {
    return parseInt(value, 10);
  } else {
    var oldStyleValue = element.style[name];
    var oldRuntimeValue = element.runtimeStyle[name];
    element.runtimeStyle[name] = element.currentStyle[name];
    element.style[name] = value;
    var pixelValue = element.style[pixelName];
    element.style[name] = oldStyleValue;
    element.runtimeStyle[name] = oldRuntimeValue;
    return +pixelValue;
  }
};
goog.style.getIePixelDistance_ = function(element, propName) {
  var value = goog.style.getCascadedStyle(element, propName);
  return value ? goog.style.getIePixelValue_(element, value, "left", "pixelLeft") : 0;
};
goog.style.getBox_ = function(element, stylePrefix) {
  if (goog.userAgent.IE) {
    var left = goog.style.getIePixelDistance_(element, stylePrefix + "Left");
    var right = goog.style.getIePixelDistance_(element, stylePrefix + "Right");
    var top = goog.style.getIePixelDistance_(element, stylePrefix + "Top");
    var bottom = goog.style.getIePixelDistance_(element, stylePrefix + "Bottom");
    return new goog.math.Box(top, right, bottom, left);
  } else {
    var left = goog.style.getComputedStyle(element, stylePrefix + "Left");
    var right = goog.style.getComputedStyle(element, stylePrefix + "Right");
    var top = goog.style.getComputedStyle(element, stylePrefix + "Top");
    var bottom = goog.style.getComputedStyle(element, stylePrefix + "Bottom");
    return new goog.math.Box(parseFloat(top), parseFloat(right), parseFloat(bottom), parseFloat(left));
  }
};
goog.style.getPaddingBox = function(element) {
  return goog.style.getBox_(element, "padding");
};
goog.style.getMarginBox = function(element) {
  return goog.style.getBox_(element, "margin");
};
goog.style.ieBorderWidthKeywords_ = {"thin":2, "medium":4, "thick":6};
goog.style.getIePixelBorder_ = function(element, prop) {
  if (goog.style.getCascadedStyle(element, prop + "Style") == "none") {
    return 0;
  }
  var width = goog.style.getCascadedStyle(element, prop + "Width");
  if (width in goog.style.ieBorderWidthKeywords_) {
    return goog.style.ieBorderWidthKeywords_[width];
  }
  return goog.style.getIePixelValue_(element, width, "left", "pixelLeft");
};
goog.style.getBorderBox = function(element) {
  if (goog.userAgent.IE && !goog.userAgent.isDocumentModeOrHigher(9)) {
    var left = goog.style.getIePixelBorder_(element, "borderLeft");
    var right = goog.style.getIePixelBorder_(element, "borderRight");
    var top = goog.style.getIePixelBorder_(element, "borderTop");
    var bottom = goog.style.getIePixelBorder_(element, "borderBottom");
    return new goog.math.Box(top, right, bottom, left);
  } else {
    var left = goog.style.getComputedStyle(element, "borderLeftWidth");
    var right = goog.style.getComputedStyle(element, "borderRightWidth");
    var top = goog.style.getComputedStyle(element, "borderTopWidth");
    var bottom = goog.style.getComputedStyle(element, "borderBottomWidth");
    return new goog.math.Box(parseFloat(top), parseFloat(right), parseFloat(bottom), parseFloat(left));
  }
};
goog.style.getFontFamily = function(el) {
  var doc = goog.dom.getOwnerDocument(el);
  var font = "";
  if (doc.body.createTextRange && goog.dom.contains(doc, el)) {
    var range = doc.body.createTextRange();
    range.moveToElementText(el);
    try {
      font = range.queryCommandValue("FontName");
    } catch (e) {
      font = "";
    }
  }
  if (!font) {
    font = goog.style.getStyle_(el, "fontFamily");
  }
  var fontsArray = font.split(",");
  if (fontsArray.length > 1) {
    font = fontsArray[0];
  }
  return goog.string.stripQuotes(font, "\"'");
};
goog.style.lengthUnitRegex_ = /[^\d]+$/;
goog.style.getLengthUnits = function(value) {
  var units = value.match(goog.style.lengthUnitRegex_);
  return units && units[0] || null;
};
goog.style.ABSOLUTE_CSS_LENGTH_UNITS_ = {"cm":1, "in":1, "mm":1, "pc":1, "pt":1};
goog.style.CONVERTIBLE_RELATIVE_CSS_UNITS_ = {"em":1, "ex":1};
goog.style.getFontSize = function(el) {
  var fontSize = goog.style.getStyle_(el, "fontSize");
  var sizeUnits = goog.style.getLengthUnits(fontSize);
  if (fontSize && "px" == sizeUnits) {
    return parseInt(fontSize, 10);
  }
  if (goog.userAgent.IE) {
    if (String(sizeUnits) in goog.style.ABSOLUTE_CSS_LENGTH_UNITS_) {
      return goog.style.getIePixelValue_(el, fontSize, "left", "pixelLeft");
    } else {
      if (el.parentNode && el.parentNode.nodeType == goog.dom.NodeType.ELEMENT && String(sizeUnits) in goog.style.CONVERTIBLE_RELATIVE_CSS_UNITS_) {
        var parentElement = el.parentNode;
        var parentSize = goog.style.getStyle_(parentElement, "fontSize");
        return goog.style.getIePixelValue_(parentElement, fontSize == parentSize ? "1em" : fontSize, "left", "pixelLeft");
      }
    }
  }
  var sizeElement = goog.dom.createDom(goog.dom.TagName.SPAN, {"style":"visibility:hidden;position:absolute;" + "line-height:0;padding:0;margin:0;border:0;height:1em;"});
  goog.dom.appendChild(el, sizeElement);
  fontSize = sizeElement.offsetHeight;
  goog.dom.removeNode(sizeElement);
  return fontSize;
};
goog.style.parseStyleAttribute = function(value) {
  var result = {};
  goog.array.forEach(value.split(/\s*;\s*/), function(pair) {
    var keyValue = pair.match(/\s*([\w-]+)\s*:(.+)/);
    if (keyValue) {
      var styleName = keyValue[1];
      var styleValue = goog.string.trim(keyValue[2]);
      result[goog.string.toCamelCase(styleName.toLowerCase())] = styleValue;
    }
  });
  return result;
};
goog.style.toStyleAttribute = function(obj) {
  var buffer = [];
  goog.object.forEach(obj, function(value, key) {
    buffer.push(goog.string.toSelectorCase(key), ":", value, ";");
  });
  return buffer.join("");
};
goog.style.setFloat = function(el, value) {
  el.style[goog.userAgent.IE ? "styleFloat" : "cssFloat"] = value;
};
goog.style.getFloat = function(el) {
  return el.style[goog.userAgent.IE ? "styleFloat" : "cssFloat"] || "";
};
goog.style.getScrollbarWidth = function(opt_className) {
  var outerDiv = goog.dom.createElement(goog.dom.TagName.DIV);
  if (opt_className) {
    outerDiv.className = opt_className;
  }
  outerDiv.style.cssText = "overflow:auto;" + "position:absolute;top:0;width:100px;height:100px";
  var innerDiv = goog.dom.createElement(goog.dom.TagName.DIV);
  goog.style.setSize(innerDiv, "200px", "200px");
  outerDiv.appendChild(innerDiv);
  goog.dom.appendChild(goog.dom.getDocument().body, outerDiv);
  var width = outerDiv.offsetWidth - outerDiv.clientWidth;
  goog.dom.removeNode(outerDiv);
  return width;
};
goog.style.MATRIX_TRANSLATION_REGEX_ = new RegExp("matrix\\([0-9\\.\\-]+, [0-9\\.\\-]+, " + "[0-9\\.\\-]+, [0-9\\.\\-]+, " + "([0-9\\.\\-]+)p?x?, ([0-9\\.\\-]+)p?x?\\)");
goog.style.getCssTranslation = function(element) {
  var transform = goog.style.getComputedTransform(element);
  if (!transform) {
    return new goog.math.Coordinate(0, 0);
  }
  var matches = transform.match(goog.style.MATRIX_TRANSLATION_REGEX_);
  if (!matches) {
    return new goog.math.Coordinate(0, 0);
  }
  return new goog.math.Coordinate(parseFloat(matches[1]), parseFloat(matches[2]));
};
goog.provide("goog.userAgent.platform");
goog.require("goog.string");
goog.require("goog.userAgent");
goog.userAgent.platform.determineVersion_ = function() {
  var re;
  if (goog.userAgent.WINDOWS) {
    re = /Windows NT ([0-9.]+)/;
    var match = re.exec(goog.userAgent.getUserAgentString());
    if (match) {
      return match[1];
    } else {
      return "0";
    }
  } else {
    if (goog.userAgent.MAC) {
      re = /10[_.][0-9_.]+/;
      var match = re.exec(goog.userAgent.getUserAgentString());
      return match ? match[0].replace(/_/g, ".") : "10";
    } else {
      if (goog.userAgent.ANDROID) {
        re = /Android\s+([^\);]+)(\)|;)/;
        var match = re.exec(goog.userAgent.getUserAgentString());
        return match ? match[1] : "";
      } else {
        if (goog.userAgent.IPHONE || goog.userAgent.IPAD || goog.userAgent.IPOD) {
          re = /(?:iPhone|CPU)\s+OS\s+(\S+)/;
          var match = re.exec(goog.userAgent.getUserAgentString());
          return match ? match[1].replace(/_/g, ".") : "";
        }
      }
    }
  }
  return "";
};
goog.userAgent.platform.VERSION = goog.userAgent.platform.determineVersion_();
goog.userAgent.platform.isVersion = function(version) {
  return goog.string.compareVersions(goog.userAgent.platform.VERSION, version) >= 0;
};
goog.provide("goog.userAgent.product.isVersion");
goog.require("goog.labs.userAgent.platform");
goog.require("goog.string");
goog.require("goog.userAgent");
goog.require("goog.userAgent.product");
goog.userAgent.product.determineVersion_ = function() {
  if (goog.userAgent.product.FIREFOX) {
    return goog.userAgent.product.getFirstRegExpGroup_(/Firefox\/([0-9.]+)/);
  }
  if (goog.userAgent.product.IE || goog.userAgent.product.EDGE || goog.userAgent.product.OPERA) {
    return goog.userAgent.VERSION;
  }
  if (goog.userAgent.product.CHROME) {
    if (goog.labs.userAgent.platform.isIos()) {
      return goog.userAgent.product.getFirstRegExpGroup_(/CriOS\/([0-9.]+)/);
    }
    return goog.userAgent.product.getFirstRegExpGroup_(/Chrome\/([0-9.]+)/);
  }
  if (goog.userAgent.product.SAFARI && !goog.labs.userAgent.platform.isIos()) {
    return goog.userAgent.product.getFirstRegExpGroup_(/Version\/([0-9.]+)/);
  }
  if (goog.userAgent.product.IPHONE || goog.userAgent.product.IPAD) {
    var arr = goog.userAgent.product.execRegExp_(/Version\/(\S+).*Mobile\/(\S+)/);
    if (arr) {
      return arr[1] + "." + arr[2];
    }
  } else {
    if (goog.userAgent.product.ANDROID) {
      var version = goog.userAgent.product.getFirstRegExpGroup_(/Android\s+([0-9.]+)/);
      if (version) {
        return version;
      }
      return goog.userAgent.product.getFirstRegExpGroup_(/Version\/([0-9.]+)/);
    }
  }
  return "";
};
goog.userAgent.product.getFirstRegExpGroup_ = function(re) {
  var arr = goog.userAgent.product.execRegExp_(re);
  return arr ? arr[1] : "";
};
goog.userAgent.product.execRegExp_ = function(re) {
  return re.exec(goog.userAgent.getUserAgentString());
};
goog.userAgent.product.VERSION = goog.userAgent.product.determineVersion_();
goog.userAgent.product.isVersion = function(version) {
  return goog.string.compareVersions(goog.userAgent.product.VERSION, version) >= 0;
};
goog.provide("goog.style.bidi");
goog.require("goog.dom");
goog.require("goog.style");
goog.require("goog.userAgent");
goog.require("goog.userAgent.platform");
goog.require("goog.userAgent.product");
goog.require("goog.userAgent.product.isVersion");
goog.style.bidi.getScrollLeft = function(element) {
  var isRtl = goog.style.isRightToLeft(element);
  if (isRtl && goog.style.bidi.usesNegativeScrollLeftInRtl_()) {
    return -element.scrollLeft;
  } else {
    if (isRtl && !(goog.userAgent.EDGE_OR_IE && goog.userAgent.isVersionOrHigher("8"))) {
      var overflowX = goog.style.getComputedOverflowX(element);
      if (overflowX == "visible") {
        return element.scrollLeft;
      } else {
        return element.scrollWidth - element.clientWidth - element.scrollLeft;
      }
    }
  }
  return element.scrollLeft;
};
goog.style.bidi.getOffsetStart = function(element) {
  element = element;
  var offsetLeftForReal = element.offsetLeft;
  var bestParent = element.offsetParent;
  if (!bestParent && goog.style.getComputedPosition(element) == "fixed") {
    bestParent = goog.dom.getOwnerDocument(element).documentElement;
  }
  if (!bestParent) {
    return offsetLeftForReal;
  }
  if (goog.userAgent.GECKO && !goog.userAgent.isVersionOrHigher(58)) {
    var borderWidths = goog.style.getBorderBox(bestParent);
    offsetLeftForReal += borderWidths.left;
  } else {
    if (goog.userAgent.isDocumentModeOrHigher(8) && !goog.userAgent.isDocumentModeOrHigher(9)) {
      var borderWidths = goog.style.getBorderBox(bestParent);
      offsetLeftForReal -= borderWidths.left;
    }
  }
  if (goog.style.isRightToLeft(bestParent)) {
    var elementRightOffset = offsetLeftForReal + element.offsetWidth;
    return bestParent.clientWidth - elementRightOffset;
  }
  return offsetLeftForReal;
};
goog.style.bidi.setScrollOffset = function(element, offsetStart) {
  offsetStart = Math.max(offsetStart, 0);
  if (!goog.style.isRightToLeft(element)) {
    element.scrollLeft = offsetStart;
  } else {
    if (goog.style.bidi.usesNegativeScrollLeftInRtl_()) {
      element.scrollLeft = -offsetStart;
    } else {
      if (!(goog.userAgent.EDGE_OR_IE && goog.userAgent.isVersionOrHigher("8"))) {
        element.scrollLeft = element.scrollWidth - offsetStart - element.clientWidth;
      } else {
        element.scrollLeft = offsetStart;
      }
    }
  }
};
goog.style.bidi.usesNegativeScrollLeftInRtl_ = function() {
  var isSafari10Plus = goog.userAgent.product.SAFARI && goog.userAgent.product.isVersion(10);
  var isIOS10Plus = goog.userAgent.IOS && goog.userAgent.platform.isVersion(10);
  return goog.userAgent.GECKO || isSafari10Plus || isIOS10Plus;
};
goog.style.bidi.setPosition = function(elem, left, top, isRtl) {
  if (top !== null) {
    elem.style.top = top + "px";
  }
  if (isRtl) {
    elem.style.right = left + "px";
    elem.style.left = "";
  } else {
    elem.style.left = left + "px";
    elem.style.right = "";
  }
};
goog.provide("goog.fx.dom");
goog.provide("goog.fx.dom.BgColorTransform");
goog.provide("goog.fx.dom.ColorTransform");
goog.provide("goog.fx.dom.Fade");
goog.provide("goog.fx.dom.FadeIn");
goog.provide("goog.fx.dom.FadeInAndShow");
goog.provide("goog.fx.dom.FadeOut");
goog.provide("goog.fx.dom.FadeOutAndHide");
goog.provide("goog.fx.dom.PredefinedEffect");
goog.provide("goog.fx.dom.Resize");
goog.provide("goog.fx.dom.ResizeHeight");
goog.provide("goog.fx.dom.ResizeWidth");
goog.provide("goog.fx.dom.Scroll");
goog.provide("goog.fx.dom.Slide");
goog.provide("goog.fx.dom.SlideFrom");
goog.provide("goog.fx.dom.Swipe");
goog.forwardDeclare("goog.events.EventHandler");
goog.require("goog.color");
goog.require("goog.events");
goog.require("goog.fx.Animation");
goog.require("goog.fx.Transition");
goog.require("goog.style");
goog.require("goog.style.bidi");
goog.fx.dom.PredefinedEffect = function(element, start, end, time, opt_acc) {
  goog.fx.dom.PredefinedEffect.base(this, "constructor", start, end, time, opt_acc);
  this.element = element;
  this.rightToLeft_;
};
goog.inherits(goog.fx.dom.PredefinedEffect, goog.fx.Animation);
goog.fx.dom.PredefinedEffect.prototype.updateStyle = goog.nullFunction;
goog.fx.dom.PredefinedEffect.prototype.isRightToLeft = function() {
  if (this.rightToLeft_ === undefined) {
    this.rightToLeft_ = goog.style.isRightToLeft(this.element);
  }
  return this.rightToLeft_;
};
goog.fx.dom.PredefinedEffect.prototype.onAnimate = function() {
  this.updateStyle();
  goog.fx.dom.PredefinedEffect.superClass_.onAnimate.call(this);
};
goog.fx.dom.PredefinedEffect.prototype.onEnd = function() {
  this.updateStyle();
  goog.fx.dom.PredefinedEffect.superClass_.onEnd.call(this);
};
goog.fx.dom.PredefinedEffect.prototype.onBegin = function() {
  this.updateStyle();
  goog.fx.dom.PredefinedEffect.superClass_.onBegin.call(this);
};
goog.fx.dom.Slide = function(element, start, end, time, opt_acc) {
  if (start.length != 2 || end.length != 2) {
    throw new Error("Start and end points must be 2D");
  }
  goog.fx.dom.Slide.base(this, "constructor", element, start, end, time, opt_acc);
};
goog.inherits(goog.fx.dom.Slide, goog.fx.dom.PredefinedEffect);
goog.fx.dom.Slide.prototype.updateStyle = function() {
  var pos = this.isRightPositioningForRtlEnabled() && this.isRightToLeft() ? "right" : "left";
  this.element.style[pos] = Math.round(this.coords[0]) + "px";
  this.element.style.top = Math.round(this.coords[1]) + "px";
};
goog.fx.dom.SlideFrom = function(element, end, time, opt_acc) {
  var offsetLeft = element.offsetLeft;
  var start = [offsetLeft, element.offsetTop];
  goog.fx.dom.SlideFrom.base(this, "constructor", element, start, end, time, opt_acc);
  this.startPoint;
};
goog.inherits(goog.fx.dom.SlideFrom, goog.fx.dom.Slide);
goog.fx.dom.SlideFrom.prototype.onBegin = function() {
  var offsetLeft = this.isRightPositioningForRtlEnabled() ? goog.style.bidi.getOffsetStart(this.element) : this.element.offsetLeft;
  this.startPoint = [offsetLeft, this.element.offsetTop];
  goog.fx.dom.SlideFrom.superClass_.onBegin.call(this);
};
goog.fx.dom.Swipe = function(element, start, end, time, opt_acc) {
  if (start.length != 2 || end.length != 2) {
    throw new Error("Start and end points must be 2D");
  }
  goog.fx.dom.Swipe.base(this, "constructor", element, start, end, time, opt_acc);
  this.maxWidth_ = Math.max(this.endPoint[0], this.startPoint[0]);
  this.maxHeight_ = Math.max(this.endPoint[1], this.startPoint[1]);
};
goog.inherits(goog.fx.dom.Swipe, goog.fx.dom.PredefinedEffect);
goog.fx.dom.Swipe.prototype.updateStyle = function() {
  var x = this.coords[0];
  var y = this.coords[1];
  this.clip_(Math.round(x), Math.round(y), this.maxWidth_, this.maxHeight_);
  this.element.style.width = Math.round(x) + "px";
  var marginX = this.isRightPositioningForRtlEnabled() && this.isRightToLeft() ? "marginRight" : "marginLeft";
  this.element.style[marginX] = Math.round(x) - this.maxWidth_ + "px";
  this.element.style.marginTop = Math.round(y) - this.maxHeight_ + "px";
};
goog.fx.dom.Swipe.prototype.clip_ = function(x, y, w, h) {
  this.element.style.clip = "rect(" + (h - y) + "px " + w + "px " + h + "px " + (w - x) + "px)";
};
goog.fx.dom.Scroll = function(element, start, end, time, opt_acc) {
  if (start.length != 2 || end.length != 2) {
    throw new Error("Start and end points must be 2D");
  }
  goog.fx.dom.Scroll.base(this, "constructor", element, start, end, time, opt_acc);
};
goog.inherits(goog.fx.dom.Scroll, goog.fx.dom.PredefinedEffect);
goog.fx.dom.Scroll.prototype.updateStyle = function() {
  if (this.isRightPositioningForRtlEnabled()) {
    goog.style.bidi.setScrollOffset(this.element, Math.round(this.coords[0]));
  } else {
    this.element.scrollLeft = Math.round(this.coords[0]);
  }
  this.element.scrollTop = Math.round(this.coords[1]);
};
goog.fx.dom.Resize = function(element, start, end, time, opt_acc) {
  if (start.length != 2 || end.length != 2) {
    throw new Error("Start and end points must be 2D");
  }
  goog.fx.dom.Resize.base(this, "constructor", element, start, end, time, opt_acc);
};
goog.inherits(goog.fx.dom.Resize, goog.fx.dom.PredefinedEffect);
goog.fx.dom.Resize.prototype.updateStyle = function() {
  this.element.style.width = Math.round(this.coords[0]) + "px";
  this.element.style.height = Math.round(this.coords[1]) + "px";
};
goog.fx.dom.ResizeWidth = function(element, start, end, time, opt_acc) {
  goog.fx.dom.ResizeWidth.base(this, "constructor", element, [start], [end], time, opt_acc);
};
goog.inherits(goog.fx.dom.ResizeWidth, goog.fx.dom.PredefinedEffect);
goog.fx.dom.ResizeWidth.prototype.updateStyle = function() {
  this.element.style.width = Math.round(this.coords[0]) + "px";
};
goog.fx.dom.ResizeHeight = function(element, start, end, time, opt_acc) {
  goog.fx.dom.ResizeHeight.base(this, "constructor", element, [start], [end], time, opt_acc);
};
goog.inherits(goog.fx.dom.ResizeHeight, goog.fx.dom.PredefinedEffect);
goog.fx.dom.ResizeHeight.prototype.updateStyle = function() {
  this.element.style.height = Math.round(this.coords[0]) + "px";
};
goog.fx.dom.Fade = function(element, start, end, time, opt_acc) {
  if (typeof start === "number") {
    start = [start];
  }
  if (typeof end === "number") {
    end = [end];
  }
  goog.fx.dom.Fade.base(this, "constructor", element, start, end, time, opt_acc);
  if (start.length != 1 || end.length != 1) {
    throw new Error("Start and end points must be 1D");
  }
  this.lastOpacityUpdate_ = goog.fx.dom.Fade.OPACITY_UNSET_;
};
goog.inherits(goog.fx.dom.Fade, goog.fx.dom.PredefinedEffect);
goog.fx.dom.Fade.TOLERANCE_ = 1.0 / 1024;
goog.fx.dom.Fade.OPACITY_UNSET_ = -1;
goog.fx.dom.Fade.prototype.updateStyle = function() {
  var opacity = this.coords[0];
  var delta = Math.abs(opacity - this.lastOpacityUpdate_);
  if (delta >= goog.fx.dom.Fade.TOLERANCE_) {
    goog.style.setOpacity(this.element, opacity);
    this.lastOpacityUpdate_ = opacity;
  }
};
goog.fx.dom.Fade.prototype.onBegin = function() {
  this.lastOpacityUpdate_ = goog.fx.dom.Fade.OPACITY_UNSET_;
  goog.fx.dom.Fade.base(this, "onBegin");
};
goog.fx.dom.Fade.prototype.onEnd = function() {
  this.lastOpacityUpdate_ = goog.fx.dom.Fade.OPACITY_UNSET_;
  goog.fx.dom.Fade.base(this, "onEnd");
};
goog.fx.dom.Fade.prototype.show = function() {
  this.element.style.display = "";
};
goog.fx.dom.Fade.prototype.hide = function() {
  this.element.style.display = "none";
};
goog.fx.dom.FadeOut = function(element, time, opt_acc) {
  goog.fx.dom.FadeOut.base(this, "constructor", element, 1, 0, time, opt_acc);
};
goog.inherits(goog.fx.dom.FadeOut, goog.fx.dom.Fade);
goog.fx.dom.FadeIn = function(element, time, opt_acc) {
  goog.fx.dom.FadeIn.base(this, "constructor", element, 0, 1, time, opt_acc);
};
goog.inherits(goog.fx.dom.FadeIn, goog.fx.dom.Fade);
goog.fx.dom.FadeOutAndHide = function(element, time, opt_acc) {
  goog.fx.dom.FadeOutAndHide.base(this, "constructor", element, 1, 0, time, opt_acc);
};
goog.inherits(goog.fx.dom.FadeOutAndHide, goog.fx.dom.Fade);
goog.fx.dom.FadeOutAndHide.prototype.onBegin = function() {
  this.show();
  goog.fx.dom.FadeOutAndHide.superClass_.onBegin.call(this);
};
goog.fx.dom.FadeOutAndHide.prototype.onEnd = function() {
  this.hide();
  goog.fx.dom.FadeOutAndHide.superClass_.onEnd.call(this);
};
goog.fx.dom.FadeInAndShow = function(element, time, opt_acc) {
  goog.fx.dom.FadeInAndShow.base(this, "constructor", element, 0, 1, time, opt_acc);
};
goog.inherits(goog.fx.dom.FadeInAndShow, goog.fx.dom.Fade);
goog.fx.dom.FadeInAndShow.prototype.onBegin = function() {
  this.show();
  goog.fx.dom.FadeInAndShow.superClass_.onBegin.call(this);
};
goog.fx.dom.BgColorTransform = function(element, start, end, time, opt_acc) {
  if (start.length != 3 || end.length != 3) {
    throw new Error("Start and end points must be 3D");
  }
  goog.fx.dom.BgColorTransform.base(this, "constructor", element, start, end, time, opt_acc);
};
goog.inherits(goog.fx.dom.BgColorTransform, goog.fx.dom.PredefinedEffect);
goog.fx.dom.BgColorTransform.prototype.setColor = function() {
  var coordsAsInts = [];
  for (var i = 0; i < this.coords.length; i++) {
    coordsAsInts[i] = Math.round(this.coords[i]);
  }
  var color = "rgb(" + coordsAsInts.join(",") + ")";
  this.element.style.backgroundColor = color;
};
goog.fx.dom.BgColorTransform.prototype.updateStyle = function() {
  this.setColor();
};
goog.fx.dom.bgColorFadeIn = function(element, start, time, opt_eventHandler) {
  var initialBgColor = element.style.backgroundColor || "";
  var computedBgColor = goog.style.getBackgroundColor(element);
  var end;
  if (computedBgColor && computedBgColor != "transparent" && computedBgColor != "rgba(0, 0, 0, 0)") {
    end = goog.color.hexToRgb(goog.color.parse(computedBgColor).hex);
  } else {
    end = [255, 255, 255];
  }
  var anim = new goog.fx.dom.BgColorTransform(element, start, end, time);
  function setBgColor() {
    element.style.backgroundColor = initialBgColor;
  }
  if (opt_eventHandler) {
    opt_eventHandler.listen(anim, goog.fx.Transition.EventType.END, setBgColor);
  } else {
    goog.events.listen(anim, goog.fx.Transition.EventType.END, setBgColor);
  }
  anim.play();
};
goog.fx.dom.ColorTransform = function(element, start, end, time, opt_acc) {
  if (start.length != 3 || end.length != 3) {
    throw new Error("Start and end points must be 3D");
  }
  goog.fx.dom.ColorTransform.base(this, "constructor", element, start, end, time, opt_acc);
};
goog.inherits(goog.fx.dom.ColorTransform, goog.fx.dom.PredefinedEffect);
goog.fx.dom.ColorTransform.prototype.updateStyle = function() {
  var coordsAsInts = [];
  for (var i = 0; i < this.coords.length; i++) {
    coordsAsInts[i] = Math.round(this.coords[i]);
  }
  var color = "rgb(" + coordsAsInts.join(",") + ")";
  this.element.style.color = color;
};
goog.provide("goog.positioning");
goog.provide("goog.positioning.Corner");
goog.provide("goog.positioning.CornerBit");
goog.provide("goog.positioning.Overflow");
goog.provide("goog.positioning.OverflowStatus");
goog.require("goog.asserts");
goog.require("goog.dom");
goog.require("goog.dom.TagName");
goog.require("goog.math.Coordinate");
goog.require("goog.math.Rect");
goog.require("goog.math.Size");
goog.require("goog.style");
goog.require("goog.style.bidi");
goog.positioning.CornerBit = {BOTTOM:1, CENTER:2, RIGHT:4, FLIP_RTL:8};
goog.positioning.Corner = {TOP_LEFT:0, TOP_RIGHT:goog.positioning.CornerBit.RIGHT, BOTTOM_LEFT:goog.positioning.CornerBit.BOTTOM, BOTTOM_RIGHT:goog.positioning.CornerBit.BOTTOM | goog.positioning.CornerBit.RIGHT, TOP_START:goog.positioning.CornerBit.FLIP_RTL, TOP_END:goog.positioning.CornerBit.FLIP_RTL | goog.positioning.CornerBit.RIGHT, BOTTOM_START:goog.positioning.CornerBit.BOTTOM | goog.positioning.CornerBit.FLIP_RTL, BOTTOM_END:goog.positioning.CornerBit.BOTTOM | goog.positioning.CornerBit.RIGHT | 
goog.positioning.CornerBit.FLIP_RTL, TOP_CENTER:goog.positioning.CornerBit.CENTER, BOTTOM_CENTER:goog.positioning.CornerBit.BOTTOM | goog.positioning.CornerBit.CENTER};
goog.positioning.Overflow = {IGNORE:0, ADJUST_X:1, FAIL_X:2, ADJUST_Y:4, FAIL_Y:8, RESIZE_WIDTH:16, RESIZE_HEIGHT:32, ADJUST_X_EXCEPT_OFFSCREEN:64 | 1, ADJUST_Y_EXCEPT_OFFSCREEN:128 | 4};
goog.positioning.OverflowStatus = {NONE:0, ADJUSTED_X:1, ADJUSTED_Y:2, WIDTH_ADJUSTED:4, HEIGHT_ADJUSTED:8, FAILED_LEFT:16, FAILED_RIGHT:32, FAILED_TOP:64, FAILED_BOTTOM:128, FAILED_OUTSIDE_VIEWPORT:256};
goog.positioning.OverflowStatus.FAILED = goog.positioning.OverflowStatus.FAILED_LEFT | goog.positioning.OverflowStatus.FAILED_RIGHT | goog.positioning.OverflowStatus.FAILED_TOP | goog.positioning.OverflowStatus.FAILED_BOTTOM | goog.positioning.OverflowStatus.FAILED_OUTSIDE_VIEWPORT;
goog.positioning.OverflowStatus.FAILED_HORIZONTAL = goog.positioning.OverflowStatus.FAILED_LEFT | goog.positioning.OverflowStatus.FAILED_RIGHT;
goog.positioning.OverflowStatus.FAILED_VERTICAL = goog.positioning.OverflowStatus.FAILED_TOP | goog.positioning.OverflowStatus.FAILED_BOTTOM;
goog.positioning.positionAtAnchor = function(anchorElement, anchorElementCorner, movableElement, movableElementCorner, opt_offset, opt_margin, opt_overflow, opt_preferredSize, opt_viewport) {
  goog.asserts.assert(movableElement);
  var movableParentTopLeft = goog.positioning.getOffsetParentPageOffset(movableElement);
  var anchorRect = goog.positioning.getVisiblePart_(anchorElement);
  goog.style.translateRectForAnotherFrame(anchorRect, goog.dom.getDomHelper(anchorElement), goog.dom.getDomHelper(movableElement));
  var corner = goog.positioning.getEffectiveCorner(anchorElement, anchorElementCorner);
  var offsetLeft = anchorRect.left;
  if (corner & goog.positioning.CornerBit.RIGHT) {
    offsetLeft += anchorRect.width;
  } else {
    if (corner & goog.positioning.CornerBit.CENTER) {
      offsetLeft += anchorRect.width / 2;
    }
  }
  var absolutePos = new goog.math.Coordinate(offsetLeft, anchorRect.top + (corner & goog.positioning.CornerBit.BOTTOM ? anchorRect.height : 0));
  absolutePos = goog.math.Coordinate.difference(absolutePos, movableParentTopLeft);
  if (opt_offset) {
    absolutePos.x += (corner & goog.positioning.CornerBit.RIGHT ? -1 : 1) * opt_offset.x;
    absolutePos.y += (corner & goog.positioning.CornerBit.BOTTOM ? -1 : 1) * opt_offset.y;
  }
  var viewport;
  if (opt_overflow) {
    if (opt_viewport) {
      viewport = opt_viewport;
    } else {
      viewport = goog.style.getVisibleRectForElement(movableElement);
      if (viewport) {
        viewport.top -= movableParentTopLeft.y;
        viewport.right -= movableParentTopLeft.x;
        viewport.bottom -= movableParentTopLeft.y;
        viewport.left -= movableParentTopLeft.x;
      }
    }
  }
  return goog.positioning.positionAtCoordinate(absolutePos, movableElement, movableElementCorner, opt_margin, viewport, opt_overflow, opt_preferredSize);
};
goog.positioning.getOffsetParentPageOffset = function(movableElement) {
  var movableParentTopLeft;
  var parent = movableElement.offsetParent;
  if (parent) {
    var isBody = parent.tagName == goog.dom.TagName.HTML || parent.tagName == goog.dom.TagName.BODY;
    if (!isBody || goog.style.getComputedPosition(parent) != "static") {
      movableParentTopLeft = goog.style.getPageOffset(parent);
      if (!isBody) {
        movableParentTopLeft = goog.math.Coordinate.difference(movableParentTopLeft, new goog.math.Coordinate(goog.style.bidi.getScrollLeft(parent), parent.scrollTop));
      }
    }
  }
  return movableParentTopLeft || new goog.math.Coordinate;
};
goog.positioning.getVisiblePart_ = function(el) {
  var rect = goog.style.getBounds(el);
  var visibleBox = goog.style.getVisibleRectForElement(el);
  if (visibleBox) {
    rect.intersection(goog.math.Rect.createFromBox(visibleBox));
  }
  return rect;
};
goog.positioning.positionAtCoordinate = function(absolutePos, movableElement, movableElementCorner, opt_margin, opt_viewport, opt_overflow, opt_preferredSize) {
  absolutePos = absolutePos.clone();
  var corner = goog.positioning.getEffectiveCorner(movableElement, movableElementCorner);
  var elementSize = goog.style.getSize(movableElement);
  var size = opt_preferredSize ? opt_preferredSize.clone() : elementSize.clone();
  var positionResult = goog.positioning.getPositionAtCoordinate(absolutePos, size, corner, opt_margin, opt_viewport, opt_overflow);
  if (positionResult.status & goog.positioning.OverflowStatus.FAILED) {
    return positionResult.status;
  }
  goog.style.setPosition(movableElement, positionResult.rect.getTopLeft());
  size = positionResult.rect.getSize();
  if (!goog.math.Size.equals(elementSize, size)) {
    goog.style.setBorderBoxSize(movableElement, size);
  }
  return positionResult.status;
};
goog.positioning.getPositionAtCoordinate = function(absolutePos, elementSize, elementCorner, opt_margin, opt_viewport, opt_overflow) {
  absolutePos = absolutePos.clone();
  elementSize = elementSize.clone();
  var status = goog.positioning.OverflowStatus.NONE;
  if (opt_margin || elementCorner != goog.positioning.Corner.TOP_LEFT) {
    if (elementCorner & goog.positioning.CornerBit.RIGHT) {
      absolutePos.x -= elementSize.width + (opt_margin ? opt_margin.right : 0);
    } else {
      if (elementCorner & goog.positioning.CornerBit.CENTER) {
        absolutePos.x -= elementSize.width / 2;
      } else {
        if (opt_margin) {
          absolutePos.x += opt_margin.left;
        }
      }
    }
    if (elementCorner & goog.positioning.CornerBit.BOTTOM) {
      absolutePos.y -= elementSize.height + (opt_margin ? opt_margin.bottom : 0);
    } else {
      if (opt_margin) {
        absolutePos.y += opt_margin.top;
      }
    }
  }
  if (opt_overflow) {
    status = opt_viewport ? goog.positioning.adjustForViewport_(absolutePos, elementSize, opt_viewport, opt_overflow) : goog.positioning.OverflowStatus.FAILED_OUTSIDE_VIEWPORT;
  }
  var rect = new goog.math.Rect(0, 0, 0, 0);
  rect.left = absolutePos.x;
  rect.top = absolutePos.y;
  rect.width = elementSize.width;
  rect.height = elementSize.height;
  return {rect:rect, status:status};
};
goog.positioning.adjustForViewport_ = function(pos, size, viewport, overflow) {
  var status = goog.positioning.OverflowStatus.NONE;
  var ADJUST_X_EXCEPT_OFFSCREEN = goog.positioning.Overflow.ADJUST_X_EXCEPT_OFFSCREEN;
  var ADJUST_Y_EXCEPT_OFFSCREEN = goog.positioning.Overflow.ADJUST_Y_EXCEPT_OFFSCREEN;
  if ((overflow & ADJUST_X_EXCEPT_OFFSCREEN) == ADJUST_X_EXCEPT_OFFSCREEN && (pos.x < viewport.left || pos.x >= viewport.right)) {
    overflow &= ~goog.positioning.Overflow.ADJUST_X;
  }
  if ((overflow & ADJUST_Y_EXCEPT_OFFSCREEN) == ADJUST_Y_EXCEPT_OFFSCREEN && (pos.y < viewport.top || pos.y >= viewport.bottom)) {
    overflow &= ~goog.positioning.Overflow.ADJUST_Y;
  }
  if (pos.x < viewport.left && overflow & goog.positioning.Overflow.ADJUST_X) {
    pos.x = viewport.left;
    status |= goog.positioning.OverflowStatus.ADJUSTED_X;
  }
  if (overflow & goog.positioning.Overflow.RESIZE_WIDTH) {
    var originalX = pos.x;
    if (pos.x < viewport.left) {
      pos.x = viewport.left;
      status |= goog.positioning.OverflowStatus.WIDTH_ADJUSTED;
    }
    if (pos.x + size.width > viewport.right) {
      size.width = Math.min(viewport.right - pos.x, originalX + size.width - viewport.left);
      size.width = Math.max(size.width, 0);
      status |= goog.positioning.OverflowStatus.WIDTH_ADJUSTED;
    }
  }
  if (pos.x + size.width > viewport.right && overflow & goog.positioning.Overflow.ADJUST_X) {
    pos.x = Math.max(viewport.right - size.width, viewport.left);
    status |= goog.positioning.OverflowStatus.ADJUSTED_X;
  }
  if (overflow & goog.positioning.Overflow.FAIL_X) {
    status |= (pos.x < viewport.left ? goog.positioning.OverflowStatus.FAILED_LEFT : 0) | (pos.x + size.width > viewport.right ? goog.positioning.OverflowStatus.FAILED_RIGHT : 0);
  }
  if (pos.y < viewport.top && overflow & goog.positioning.Overflow.ADJUST_Y) {
    pos.y = viewport.top;
    status |= goog.positioning.OverflowStatus.ADJUSTED_Y;
  }
  if (overflow & goog.positioning.Overflow.RESIZE_HEIGHT) {
    var originalY = pos.y;
    if (pos.y < viewport.top) {
      pos.y = viewport.top;
      status |= goog.positioning.OverflowStatus.HEIGHT_ADJUSTED;
    }
    if (pos.y + size.height > viewport.bottom) {
      size.height = Math.min(viewport.bottom - pos.y, originalY + size.height - viewport.top);
      size.height = Math.max(size.height, 0);
      status |= goog.positioning.OverflowStatus.HEIGHT_ADJUSTED;
    }
  }
  if (pos.y + size.height > viewport.bottom && overflow & goog.positioning.Overflow.ADJUST_Y) {
    pos.y = Math.max(viewport.bottom - size.height, viewport.top);
    status |= goog.positioning.OverflowStatus.ADJUSTED_Y;
  }
  if (overflow & goog.positioning.Overflow.FAIL_Y) {
    status |= (pos.y < viewport.top ? goog.positioning.OverflowStatus.FAILED_TOP : 0) | (pos.y + size.height > viewport.bottom ? goog.positioning.OverflowStatus.FAILED_BOTTOM : 0);
  }
  return status;
};
goog.positioning.getEffectiveCorner = function(element, corner) {
  return (corner & goog.positioning.CornerBit.FLIP_RTL && goog.style.isRightToLeft(element) ? corner ^ goog.positioning.CornerBit.RIGHT : corner) & ~goog.positioning.CornerBit.FLIP_RTL;
};
goog.positioning.flipCornerHorizontal = function(corner) {
  return corner ^ goog.positioning.CornerBit.RIGHT;
};
goog.positioning.flipCornerVertical = function(corner) {
  return corner ^ goog.positioning.CornerBit.BOTTOM;
};
goog.positioning.flipCorner = function(corner) {
  return corner ^ goog.positioning.CornerBit.BOTTOM ^ goog.positioning.CornerBit.RIGHT;
};
goog.provide("goog.ui.IdGenerator");
goog.ui.IdGenerator = function() {
};
goog.addSingletonGetter(goog.ui.IdGenerator);
goog.ui.IdGenerator.prototype.nextId_ = 0;
goog.ui.IdGenerator.prototype.idPrefix_ = "";
goog.ui.IdGenerator.prototype.setIdPrefix = function(idPrefix) {
  this.idPrefix_ = idPrefix;
};
goog.ui.IdGenerator.prototype.getNextUniqueId = function() {
  return this.idPrefix_ + ":" + (this.nextId_++).toString(36);
};
goog.provide("goog.ui.ac.Renderer");
goog.provide("goog.ui.ac.Renderer.CustomRenderer");
goog.require("goog.a11y.aria");
goog.require("goog.a11y.aria.Role");
goog.require("goog.a11y.aria.State");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.dispose");
goog.require("goog.dom");
goog.require("goog.dom.NodeType");
goog.require("goog.dom.TagName");
goog.require("goog.dom.classlist");
goog.require("goog.events");
goog.require("goog.events.EventTarget");
goog.require("goog.events.EventType");
goog.require("goog.fx.dom.FadeInAndShow");
goog.require("goog.fx.dom.FadeOutAndHide");
goog.require("goog.positioning");
goog.require("goog.positioning.Corner");
goog.require("goog.positioning.Overflow");
goog.require("goog.string");
goog.require("goog.style");
goog.require("goog.ui.IdGenerator");
goog.require("goog.ui.ac.AutoComplete");
goog.ui.ac.Renderer = function(opt_parentNode, opt_customRenderer, opt_rightAlign, opt_useStandardHighlighting) {
  goog.ui.ac.Renderer.base(this, "constructor");
  this.parent_ = opt_parentNode || goog.dom.getDocument().body;
  this.dom_ = goog.dom.getDomHelper(this.parent_);
  this.reposition_ = !opt_parentNode;
  this.element_ = null;
  this.token_ = "";
  this.rows_ = [];
  this.rowDivs_ = [];
  this.hilitedRow_ = -1;
  this.startRenderingRows_ = -1;
  this.visible_ = false;
  this.className = goog.getCssName("ac-renderer");
  this.rowClassName = goog.getCssName("ac-row");
  this.legacyActiveClassName_ = goog.getCssName("active");
  this.activeClassName = goog.getCssName("ac-active");
  this.highlightedClassName = goog.getCssName("ac-highlighted");
  this.customRenderer_ = opt_customRenderer || null;
  this.useStandardHighlighting_ = opt_useStandardHighlighting != null ? opt_useStandardHighlighting : true;
  this.matchWordBoundary_ = true;
  this.highlightAllTokens_ = false;
  this.rightAlign_ = !!opt_rightAlign;
  this.topAlign_ = false;
  this.menuFadeDuration_ = 0;
  this.showScrollbarsIfTooLarge_ = false;
  this.animation_;
};
goog.inherits(goog.ui.ac.Renderer, goog.events.EventTarget);
goog.ui.ac.Renderer.prototype.anchorElement_;
goog.ui.ac.Renderer.prototype.target_;
goog.ui.ac.Renderer.prototype.widthProvider_;
goog.ui.ac.Renderer.prototype.maxWidthProvider_;
goog.ui.ac.Renderer.prototype.borderWidth_ = 0;
goog.ui.ac.Renderer.prototype.wasHighlightedAtLeastOnce_;
goog.ui.ac.Renderer.DELAY_BEFORE_MOUSEOVER = 300;
goog.ui.ac.Renderer.prototype.getElement = function() {
  return this.element_;
};
goog.ui.ac.Renderer.prototype.setWidthProvider = function(widthProvider, opt_borderWidth, maxWidthProvider = undefined) {
  this.widthProvider_ = widthProvider;
  if (opt_borderWidth) {
    this.borderWidth_ = opt_borderWidth;
  }
  if (maxWidthProvider) {
    this.maxWidthProvider_ = maxWidthProvider;
  }
};
goog.ui.ac.Renderer.prototype.setTopAlign = function(align) {
  this.topAlign_ = align;
};
goog.ui.ac.Renderer.prototype.getTopAlign = function() {
  return this.topAlign_;
};
goog.ui.ac.Renderer.prototype.setRightAlign = function(align) {
  this.rightAlign_ = align;
};
goog.ui.ac.Renderer.prototype.getRightAlign = function() {
  return this.rightAlign_;
};
goog.ui.ac.Renderer.prototype.setShowScrollbarsIfTooLarge = function(show) {
  this.showScrollbarsIfTooLarge_ = show;
};
goog.ui.ac.Renderer.prototype.setUseStandardHighlighting = function(useStandardHighlighting) {
  this.useStandardHighlighting_ = useStandardHighlighting;
};
goog.ui.ac.Renderer.prototype.setMatchWordBoundary = function(matchWordBoundary) {
  this.matchWordBoundary_ = matchWordBoundary;
};
goog.ui.ac.Renderer.prototype.setHighlightAllTokens = function(highlightAllTokens) {
  this.highlightAllTokens_ = highlightAllTokens;
};
goog.ui.ac.Renderer.prototype.setMenuFadeDuration = function(duration) {
  this.menuFadeDuration_ = duration;
};
goog.ui.ac.Renderer.prototype.setAnchorElement = function(anchor) {
  this.anchorElement_ = anchor;
};
goog.ui.ac.Renderer.prototype.getAnchorElement = function() {
  return this.anchorElement_;
};
goog.ui.ac.Renderer.prototype.renderRows = function(rows, token, opt_target) {
  this.token_ = token;
  this.rows_ = rows;
  this.hilitedRow_ = -1;
  this.startRenderingRows_ = goog.now();
  this.target_ = opt_target;
  this.rowDivs_ = [];
  this.redraw();
};
goog.ui.ac.Renderer.prototype.dismiss = function() {
  if (this.visible_) {
    this.visible_ = false;
    this.toggleAriaMarkup_(false);
    if (this.menuFadeDuration_ > 0) {
      goog.dispose(this.animation_);
      this.animation_ = new goog.fx.dom.FadeOutAndHide(this.element_, this.menuFadeDuration_);
      this.animation_.play();
    } else {
      goog.style.setElementShown(this.element_, false);
    }
  }
};
goog.ui.ac.Renderer.prototype.show = function() {
  if (!this.visible_) {
    this.visible_ = true;
    this.toggleAriaMarkup_(true);
    if (this.menuFadeDuration_ > 0) {
      goog.dispose(this.animation_);
      this.animation_ = new goog.fx.dom.FadeInAndShow(this.element_, this.menuFadeDuration_);
      this.animation_.play();
    } else {
      goog.style.setElementShown(this.element_, true);
    }
  }
};
goog.ui.ac.Renderer.prototype.toggleAriaMarkup_ = function(isShown) {
  if (!this.target_) {
    return;
  }
  goog.a11y.aria.setState(this.target_, goog.a11y.aria.State.HASPOPUP, isShown);
  goog.a11y.aria.setState(goog.asserts.assert(this.element_), goog.a11y.aria.State.EXPANDED, isShown);
  goog.a11y.aria.setState(this.target_, goog.a11y.aria.State.EXPANDED, isShown);
  if (isShown) {
    goog.a11y.aria.setState(this.target_, goog.a11y.aria.State.OWNS, this.element_.id);
  } else {
    goog.a11y.aria.removeState(this.target_, goog.a11y.aria.State.OWNS);
    goog.a11y.aria.setActiveDescendant(this.target_, null);
  }
};
goog.ui.ac.Renderer.prototype.isVisible = function() {
  return this.visible_;
};
goog.ui.ac.Renderer.prototype.hiliteRow = function(index) {
  var row = index >= 0 && index < this.rows_.length ? this.rows_[index] : undefined;
  var rowDiv = index >= 0 && index < this.rowDivs_.length ? this.rowDivs_[index] : undefined;
  var evtObj = {type:goog.ui.ac.AutoComplete.EventType.ROW_HILITE, rowNode:rowDiv, row:row ? row.data : null};
  if (this.dispatchEvent(evtObj)) {
    this.hiliteNone();
    this.hilitedRow_ = index;
    if (rowDiv) {
      goog.dom.classlist.addAll(rowDiv, [this.activeClassName, this.legacyActiveClassName_]);
      if (this.target_) {
        goog.a11y.aria.setActiveDescendant(this.target_, rowDiv);
      }
      goog.style.scrollIntoContainerView(rowDiv, this.element_);
    }
  }
};
goog.ui.ac.Renderer.prototype.hiliteNone = function() {
  if (this.hilitedRow_ >= 0) {
    goog.dom.classlist.removeAll(goog.asserts.assert(this.rowDivs_[this.hilitedRow_]), [this.activeClassName, this.legacyActiveClassName_]);
  }
};
goog.ui.ac.Renderer.prototype.hiliteId = function(id) {
  if (id == -1) {
    this.hiliteRow(-1);
  } else {
    for (var i = 0; i < this.rows_.length; i++) {
      if (this.rows_[i].id == id) {
        this.hiliteRow(i);
        return;
      }
    }
  }
};
goog.ui.ac.Renderer.prototype.setMenuClasses_ = function(elem) {
  goog.asserts.assert(elem);
  goog.dom.classlist.addAll(elem, goog.string.trim(this.className).split(" "));
};
goog.ui.ac.Renderer.prototype.maybeCreateElement_ = function() {
  if (!this.element_) {
    var el = this.dom_.createDom(goog.dom.TagName.DIV, {style:"display:none"});
    if (this.showScrollbarsIfTooLarge_) {
      el.style.overflowY = "auto";
    }
    this.element_ = el;
    this.setMenuClasses_(el);
    goog.a11y.aria.setRole(el, goog.a11y.aria.Role.LISTBOX);
    el.id = goog.ui.IdGenerator.getInstance().getNextUniqueId();
    this.dom_.appendChild(this.parent_, el);
    goog.events.listen(el, goog.events.EventType.CLICK, this.handleClick_, false, this);
    goog.events.listen(el, goog.events.EventType.MOUSEDOWN, this.handleMouseDown_, false, this);
    goog.events.listen(el, goog.events.EventType.MOUSEOVER, this.handleMouseOver_, false, this);
  }
};
goog.ui.ac.Renderer.prototype.redraw = function() {
  this.maybeCreateElement_();
  if (this.topAlign_) {
    this.element_.style.visibility = "hidden";
  }
  if (this.widthProvider_) {
    var width = this.widthProvider_.clientWidth - this.borderWidth_ + "px";
    this.element_.style.minWidth = width;
  }
  if (this.maxWidthProvider_) {
    const maxWidth = this.maxWidthProvider_.clientWidth - this.borderWidth_ + "px";
    this.element_.style.maxWidth = maxWidth;
  }
  this.rowDivs_.length = 0;
  this.dom_.removeChildren(this.element_);
  if (this.customRenderer_ && this.customRenderer_.render) {
    this.customRenderer_.render(this, this.element_, this.rows_, this.token_);
  } else {
    var curRow = null;
    goog.array.forEach(this.rows_, function(row) {
      row = this.renderRowHtml(row, this.token_);
      if (this.topAlign_) {
        this.element_.insertBefore(row, curRow);
      } else {
        this.dom_.appendChild(this.element_, row);
      }
      curRow = row;
    }, this);
  }
  if (this.rows_.length == 0) {
    this.dismiss();
    return;
  } else {
    this.show();
  }
  this.reposition();
  goog.style.setUnselectable(this.element_, true);
};
goog.ui.ac.Renderer.prototype.getAnchorCorner = function() {
  var anchorCorner = this.rightAlign_ ? goog.positioning.Corner.BOTTOM_RIGHT : goog.positioning.Corner.BOTTOM_LEFT;
  if (this.topAlign_) {
    anchorCorner = goog.positioning.flipCornerVertical(anchorCorner);
  }
  return anchorCorner;
};
goog.ui.ac.Renderer.prototype.reposition = function() {
  if (this.target_ && this.reposition_) {
    var anchorElement = this.anchorElement_ || this.target_;
    var anchorCorner = this.getAnchorCorner();
    var overflowMode = goog.positioning.Overflow.ADJUST_X_EXCEPT_OFFSCREEN;
    if (this.showScrollbarsIfTooLarge_) {
      this.element_.style.height = "";
      overflowMode |= goog.positioning.Overflow.RESIZE_HEIGHT;
    }
    goog.positioning.positionAtAnchor(anchorElement, anchorCorner, this.element_, goog.positioning.flipCornerVertical(anchorCorner), null, null, overflowMode);
    if (this.topAlign_) {
      this.element_.style.visibility = "visible";
    }
  }
};
goog.ui.ac.Renderer.prototype.setAutoPosition = function(auto) {
  this.reposition_ = auto;
};
goog.ui.ac.Renderer.prototype.getAutoPosition = function() {
  return this.reposition_;
};
goog.ui.ac.Renderer.prototype.getTarget = function() {
  return this.target_ || null;
};
goog.ui.ac.Renderer.prototype.disposeInternal = function() {
  if (this.element_) {
    goog.events.unlisten(this.element_, goog.events.EventType.CLICK, this.handleClick_, false, this);
    goog.events.unlisten(this.element_, goog.events.EventType.MOUSEDOWN, this.handleMouseDown_, false, this);
    goog.events.unlisten(this.element_, goog.events.EventType.MOUSEOVER, this.handleMouseOver_, false, this);
    this.dom_.removeNode(this.element_);
    this.element_ = null;
    this.visible_ = false;
  }
  goog.dispose(this.animation_);
  this.parent_ = null;
  goog.ui.ac.Renderer.base(this, "disposeInternal");
};
goog.ui.ac.Renderer.prototype.renderRowContents_ = function(row, token, node) {
  goog.dom.setTextContent(node, row.data.toString());
};
goog.ui.ac.Renderer.prototype.startHiliteMatchingText_ = function(node, tokenOrArray) {
  this.wasHighlightedAtLeastOnce_ = false;
  this.hiliteMatchingText_(node, tokenOrArray);
};
goog.ui.ac.Renderer.prototype.hiliteMatchingText_ = function(node, tokenOrArray) {
  if (!this.highlightAllTokens_ && this.wasHighlightedAtLeastOnce_) {
    return;
  }
  if (node.nodeType == goog.dom.NodeType.TEXT) {
    var rest = null;
    if (goog.isArray(tokenOrArray) && tokenOrArray.length > 1 && !this.highlightAllTokens_) {
      rest = goog.array.slice(tokenOrArray, 1);
    }
    var token = this.getTokenRegExp_(tokenOrArray);
    if (token.length == 0) {
      return;
    }
    var text = node.nodeValue;
    var re = this.matchWordBoundary_ ? new RegExp("\\b(?:" + token + ")", "gi") : new RegExp(token, "gi");
    var textNodes = [];
    var lastIndex = 0;
    var match = re.exec(text);
    var numMatches = 0;
    while (match) {
      numMatches++;
      textNodes.push(text.substring(lastIndex, match.index));
      textNodes.push(text.substring(match.index, re.lastIndex));
      lastIndex = re.lastIndex;
      match = re.exec(text);
    }
    textNodes.push(text.substring(lastIndex));
    if (textNodes.length > 1) {
      var maxNumToBold = !this.highlightAllTokens_ ? 1 : numMatches;
      for (var i = 0; i < maxNumToBold; i++) {
        var idx = 2 * i;
        node.nodeValue = textNodes[idx];
        var boldTag = this.dom_.createElement(goog.dom.TagName.B);
        boldTag.className = this.highlightedClassName;
        this.dom_.appendChild(boldTag, this.dom_.createTextNode(textNodes[idx + 1]));
        boldTag = node.parentNode.insertBefore(boldTag, node.nextSibling);
        node.parentNode.insertBefore(this.dom_.createTextNode(""), boldTag.nextSibling);
        node = boldTag.nextSibling;
      }
      var remainingTextNodes = goog.array.slice(textNodes, maxNumToBold * 2);
      node.nodeValue = remainingTextNodes.join("");
      this.wasHighlightedAtLeastOnce_ = true;
    } else {
      if (rest) {
        this.hiliteMatchingText_(node, rest);
      }
    }
  } else {
    var child = node.firstChild;
    while (child) {
      var nextChild = child.nextSibling;
      this.hiliteMatchingText_(child, tokenOrArray);
      child = nextChild;
    }
  }
};
goog.ui.ac.Renderer.prototype.getTokenRegExp_ = function(tokenOrArray) {
  var token = "";
  if (!tokenOrArray) {
    return token;
  }
  if (goog.isArray(tokenOrArray)) {
    tokenOrArray = goog.array.filter(tokenOrArray, function(str) {
      return !goog.string.isEmptyOrWhitespace(goog.string.makeSafe(str));
    });
  }
  if (this.highlightAllTokens_) {
    if (goog.isArray(tokenOrArray)) {
      var tokenArray = goog.array.map(tokenOrArray, goog.string.regExpEscape);
      token = tokenArray.join("|");
    } else {
      token = goog.string.collapseWhitespace(tokenOrArray);
      token = goog.string.regExpEscape(token);
      token = token.replace(/ /g, "|");
    }
  } else {
    if (goog.isArray(tokenOrArray)) {
      token = tokenOrArray.length > 0 ? goog.string.regExpEscape(tokenOrArray[0]) : "";
    } else {
      if (!/^\W/.test(tokenOrArray)) {
        token = goog.string.regExpEscape(tokenOrArray);
      }
    }
  }
  return token;
};
goog.ui.ac.Renderer.prototype.renderRowHtml = function(row, token) {
  var elem = this.dom_.createDom(goog.dom.TagName.DIV, {className:this.rowClassName, id:goog.ui.IdGenerator.getInstance().getNextUniqueId()});
  goog.a11y.aria.setRole(elem, goog.a11y.aria.Role.OPTION);
  if (this.customRenderer_ && this.customRenderer_.renderRow) {
    this.customRenderer_.renderRow(row, token, elem);
  } else {
    this.renderRowContents_(row, token, elem);
  }
  if (token && this.useStandardHighlighting_) {
    this.startHiliteMatchingText_(elem, token);
  }
  goog.dom.classlist.add(elem, this.rowClassName);
  this.rowDivs_.push(elem);
  return elem;
};
goog.ui.ac.Renderer.prototype.getRowFromEventTarget_ = function(et) {
  while (et && et != this.element_ && !goog.dom.classlist.contains(et, this.rowClassName)) {
    et = et.parentNode;
  }
  return et ? goog.array.indexOf(this.rowDivs_, et) : -1;
};
goog.ui.ac.Renderer.prototype.handleClick_ = function(e) {
  var index = this.getRowFromEventTarget_(e.target);
  if (index >= 0) {
    this.dispatchEvent({type:goog.ui.ac.AutoComplete.EventType.SELECT, row:this.rows_[index].id});
  }
  e.stopPropagation();
};
goog.ui.ac.Renderer.prototype.handleMouseDown_ = function(e) {
  e.stopPropagation();
  e.preventDefault();
};
goog.ui.ac.Renderer.prototype.handleMouseOver_ = function(e) {
  var index = this.getRowFromEventTarget_(e.target);
  if (index >= 0) {
    if (goog.now() - this.startRenderingRows_ < goog.ui.ac.Renderer.DELAY_BEFORE_MOUSEOVER) {
      return;
    }
    this.dispatchEvent({type:goog.ui.ac.AutoComplete.EventType.HILITE, row:this.rows_[index].id});
  }
};
goog.ui.ac.Renderer.CustomRenderer = function() {
};
goog.ui.ac.Renderer.CustomRenderer.prototype.render = function(renderer, element, rows, token) {
};
goog.ui.ac.Renderer.CustomRenderer.prototype.renderRow = function(row, token, node) {
};
goog.provide("goog.ui.ac");
goog.require("goog.ui.ac.ArrayMatcher");
goog.require("goog.ui.ac.AutoComplete");
goog.require("goog.ui.ac.InputHandler");
goog.require("goog.ui.ac.Renderer");
goog.ui.ac.createSimpleAutoComplete = function(data, input, opt_multi, opt_useSimilar) {
  var matcher = new goog.ui.ac.ArrayMatcher(data, !opt_useSimilar);
  var renderer = new goog.ui.ac.Renderer;
  var inputHandler = new goog.ui.ac.InputHandler(null, null, !!opt_multi);
  var autoComplete = new goog.ui.ac.AutoComplete(matcher, renderer, inputHandler);
  inputHandler.attachAutoComplete(autoComplete);
  inputHandler.attachInputs(input);
  return autoComplete;
};
goog.provide("weather_canvas.events");
goog.require("cljs.core");
goog.require("dommy.core");
goog.require("cljs.core.async");
weather_canvas.events.listen = function weather_canvas$events$listen(el, type) {
  var c = cljs.core.async.chan.call(null);
  dommy.core.listen_BANG_.call(null, el, type, function(ev) {
    ev.preventDefault();
    ev.stopPropagation();
    return cljs.core.async.put_BANG_.call(null, c, ev);
  });
  return c;
};
goog.provide("weather_canvas.gradient");
goog.require("cljs.core");
weather_canvas.gradient.temperature = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "direction", "direction", -633359395), new cljs.core.Keyword(null, "up", "up", -269712113), new cljs.core.Keyword(null, "colors", "colors", 1157174732), new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "range", "range", 1639692286), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
[-100, -50], null), new cljs.core.Keyword(null, "from", "from", 1815293044), cljs.core.list(255, 255, 255), new cljs.core.Keyword(null, "to", "to", 192099007), cljs.core.list(255, 255, 255)], null), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "range", "range", 1639692286), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [-50, 0], null), new cljs.core.Keyword(null, "from", "from", 1815293044), cljs.core.list(0, 0, 255), new cljs.core.Keyword(null, 
"to", "to", 192099007), cljs.core.list(255, 255, 255)], null), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "range", "range", 1639692286), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, 15], null), new cljs.core.Keyword(null, "from", "from", 1815293044), cljs.core.list(255, 255, 255), new cljs.core.Keyword(null, "to", "to", 192099007), cljs.core.list(255, 255, 102)], null), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, 
"range", "range", 1639692286), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [15, 30], null), new cljs.core.Keyword(null, "from", "from", 1815293044), cljs.core.list(255, 255, 102), new cljs.core.Keyword(null, "to", "to", 192099007), cljs.core.list(255, 0, 0)], null)], null)], null);
weather_canvas.gradient.rain = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "direction", "direction", -633359395), new cljs.core.Keyword(null, "up", "up", -269712113), new cljs.core.Keyword(null, "colors", "colors", 1157174732), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "range", "range", 1639692286), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
[-1, 0], null), new cljs.core.Keyword(null, "from", "from", 1815293044), cljs.core.list(17, 17, 17), new cljs.core.Keyword(null, "to", "to", 192099007), cljs.core.list(17, 17, 17)], null), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "range", "range", 1639692286), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, 200], null), new cljs.core.Keyword(null, "from", "from", 1815293044), cljs.core.list(34, 34, 68), new cljs.core.Keyword(null, 
"to", "to", 192099007), cljs.core.list(238, 238, 255)], null)], null)], null);
weather_canvas.gradient.snow = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "direction", "direction", -633359395), new cljs.core.Keyword(null, "up", "up", -269712113), new cljs.core.Keyword(null, "colors", "colors", 1157174732), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "range", "range", 1639692286), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
[-1, 0], null), new cljs.core.Keyword(null, "from", "from", 1815293044), cljs.core.list(17, 17, 17), new cljs.core.Keyword(null, "to", "to", 192099007), cljs.core.list(17, 17, 17)], null), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "range", "range", 1639692286), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, 130], null), new cljs.core.Keyword(null, "from", "from", 1815293044), cljs.core.list(63, 62, 85), new cljs.core.Keyword(null, 
"to", "to", 192099007), cljs.core.list(238, 238, 255)], null)], null)], null);
goog.provide("weather_canvas.sheet");
goog.require("cljs.core");
goog.require("weather_canvas.gradient");
goog.require("weather_canvas.canvas_buffer");
goog.require("dommy.utils");
goog.require("dommy.core");
weather_canvas.sheet.sheet = function weather_canvas$sheet$sheet(layer_specs) {
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "sheet", "sheet", -2059155794), new cljs.core.Keyword(null, "layers", "layers", 1944875032), layer_specs], null);
};
weather_canvas.sheet.group = function weather_canvas$sheet$group(var_args) {
  var args__4742__auto__ = [];
  var len__4736__auto___2428 = arguments.length;
  var i__4737__auto___2429 = 0;
  while (true) {
    if (i__4737__auto___2429 < len__4736__auto___2428) {
      args__4742__auto__.push(arguments[i__4737__auto___2429]);
      var G__2430 = i__4737__auto___2429 + 1;
      i__4737__auto___2429 = G__2430;
      continue;
    } else {
    }
    break;
  }
  var argseq__4743__auto__ = 1 < args__4742__auto__.length ? new cljs.core.IndexedSeq(args__4742__auto__.slice(1), 0, null) : null;
  return weather_canvas.sheet.group.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__4743__auto__);
};
weather_canvas.sheet.group.cljs$core$IFn$_invoke$arity$variadic = function(direction, p__2425) {
  var map__2426 = p__2425;
  var map__2426__$1 = (!(map__2426 == null) ? map__2426.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === map__2426.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__2426) : map__2426;
  var interleave = cljs.core.get.call(null, map__2426__$1, new cljs.core.Keyword(null, "interleave", "interleave", -1475043421));
  var content = cljs.core.get.call(null, map__2426__$1, new cljs.core.Keyword(null, "content", "content", 15833224));
  var offset = cljs.core.get.call(null, map__2426__$1, new cljs.core.Keyword(null, "offset", "offset", 296498311));
  return new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "group", "group", 582596132), new cljs.core.Keyword(null, "drawn", "drawn", 2034398063), false, new cljs.core.Keyword(null, "dimensions", "dimensions", -254818097), cljs.core.PersistentVector.EMPTY, new cljs.core.Keyword(null, "direction", "direction", -633359395), weather_canvas.sheet.make_direction.call(null, direction), new cljs.core.Keyword(null, "interleave", 
  "interleave", -1475043421), interleave, new cljs.core.Keyword(null, "content", "content", 15833224), content], null);
};
weather_canvas.sheet.group.cljs$lang$maxFixedArity = 1;
weather_canvas.sheet.group.cljs$lang$applyTo = function(seq2423) {
  var G__2424 = cljs.core.first.call(null, seq2423);
  var seq2423__$1 = cljs.core.next.call(null, seq2423);
  var self__4723__auto__ = this;
  return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__2424, seq2423__$1);
};
weather_canvas.sheet.gap = function weather_canvas$sheet$gap(size) {
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "gap", "gap", 80255254), new cljs.core.Keyword(null, "size", "size", 1098693007), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [size, size], null)], null);
};
weather_canvas.sheet.square = function weather_canvas$sheet$square(size, color) {
  return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "square", "square", 812434677), new cljs.core.Keyword(null, "size", "size", 1098693007), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [size, size], null), new cljs.core.Keyword(null, "color", "color", 1011675173), color], null);
};
weather_canvas.sheet.text = function weather_canvas$sheet$text(contents, size, color) {
  return new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "text", "text", -1790561697), new cljs.core.Keyword(null, "string", "string", -1989541586), contents, new cljs.core.Keyword(null, "font-size", "font-size", -1847940346), size, new cljs.core.Keyword(null, "color", "color", 1011675173), color], null);
};
if (typeof weather_canvas !== "undefined" && typeof weather_canvas.sheet !== "undefined" && typeof weather_canvas.sheet.draw_BANG_ !== "undefined") {
} else {
  weather_canvas.sheet.draw_BANG_ = function() {
    var method_table__4619__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var prefer_table__4620__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var method_cache__4621__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var cached_hierarchy__4622__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var hierarchy__4623__auto__ = cljs.core.get.call(null, cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "hierarchy", "hierarchy", -1053470341), cljs.core.get_global_hierarchy.call(null));
    return new cljs.core.MultiFn(cljs.core.symbol.call(null, "weather-canvas.sheet", "draw!"), function() {
      var G__2434__delegate = function(shape, canvas_buffer, offset, p__2431) {
        var map__2432 = p__2431;
        var map__2432__$1 = (!(map__2432 == null) ? map__2432.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === map__2432.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__2432) : map__2432;
        return (new cljs.core.Keyword(null, "type", "type", 1174270348)).cljs$core$IFn$_invoke$arity$1(shape);
      };
      var G__2434 = function(shape, canvas_buffer, offset, var_args) {
        var p__2431 = null;
        if (arguments.length > 3) {
          var G__2435__i = 0, G__2435__a = new Array(arguments.length - 3);
          while (G__2435__i < G__2435__a.length) {
            G__2435__a[G__2435__i] = arguments[G__2435__i + 3];
            ++G__2435__i;
          }
          p__2431 = new cljs.core.IndexedSeq(G__2435__a, 0, null);
        }
        return G__2434__delegate.call(this, shape, canvas_buffer, offset, p__2431);
      };
      G__2434.cljs$lang$maxFixedArity = 3;
      G__2434.cljs$lang$applyTo = function(arglist__2436) {
        var shape = cljs.core.first(arglist__2436);
        arglist__2436 = cljs.core.next(arglist__2436);
        var canvas_buffer = cljs.core.first(arglist__2436);
        arglist__2436 = cljs.core.next(arglist__2436);
        var offset = cljs.core.first(arglist__2436);
        var p__2431 = cljs.core.rest(arglist__2436);
        return G__2434__delegate(shape, canvas_buffer, offset, p__2431);
      };
      G__2434.cljs$core$IFn$_invoke$arity$variadic = G__2434__delegate;
      return G__2434;
    }(), new cljs.core.Keyword(null, "default", "default", -1987822328), hierarchy__4623__auto__, method_table__4619__auto__, prefer_table__4620__auto__, method_cache__4621__auto__, cached_hierarchy__4622__auto__);
  }();
}
cljs.core._add_method.call(null, weather_canvas.sheet.draw_BANG_, new cljs.core.Keyword(null, "sheet", "sheet", -2059155794), function(sheet, buffer, offset) {
  var subdimensions = function() {
    var iter__4529__auto__ = function weather_canvas$sheet$iter__2437(s__2438) {
      return new cljs.core.LazySeq(null, function() {
        var s__2438__$1 = s__2438;
        while (true) {
          var temp__5735__auto__ = cljs.core.seq.call(null, s__2438__$1);
          if (temp__5735__auto__) {
            var s__2438__$2 = temp__5735__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, s__2438__$2)) {
              var c__4527__auto__ = cljs.core.chunk_first.call(null, s__2438__$2);
              var size__4528__auto__ = cljs.core.count.call(null, c__4527__auto__);
              var b__2440 = cljs.core.chunk_buffer.call(null, size__4528__auto__);
              if (function() {
                var i__2439 = 0;
                while (true) {
                  if (i__2439 < size__4528__auto__) {
                    var vec__2441 = cljs.core._nth.call(null, c__4527__auto__, i__2439);
                    var layer_name = cljs.core.nth.call(null, vec__2441, 0, null);
                    var sub_offset = cljs.core.nth.call(null, vec__2441, 1, null);
                    var contents = cljs.core.nth.call(null, vec__2441, 2, null);
                    cljs.core.chunk_append.call(null, b__2440, weather_canvas.sheet.draw_BANG_.call(null, contents, buffer, cljs.core.map.call(null, cljs.core._PLUS_, sub_offset, offset)));
                    var G__2447 = i__2439 + 1;
                    i__2439 = G__2447;
                    continue;
                  } else {
                    return true;
                  }
                  break;
                }
              }()) {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__2440), weather_canvas$sheet$iter__2437.call(null, cljs.core.chunk_rest.call(null, s__2438__$2)));
              } else {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__2440), null);
              }
            } else {
              var vec__2444 = cljs.core.first.call(null, s__2438__$2);
              var layer_name = cljs.core.nth.call(null, vec__2444, 0, null);
              var sub_offset = cljs.core.nth.call(null, vec__2444, 1, null);
              var contents = cljs.core.nth.call(null, vec__2444, 2, null);
              return cljs.core.cons.call(null, weather_canvas.sheet.draw_BANG_.call(null, contents, buffer, cljs.core.map.call(null, cljs.core._PLUS_, sub_offset, offset)), weather_canvas$sheet$iter__2437.call(null, cljs.core.rest.call(null, s__2438__$2)));
            }
          } else {
            return null;
          }
          break;
        }
      }, null, null);
    };
    return iter__4529__auto__.call(null, cljs.core.reverse.call(null, (new cljs.core.Keyword(null, "layers", "layers", 1944875032)).cljs$core$IFn$_invoke$arity$1(sheet)));
  }();
  return cljs.core.apply.call(null, cljs.core.map, cljs.core.max, subdimensions);
});
cljs.core._add_method.call(null, weather_canvas.sheet.draw_BANG_, new cljs.core.Keyword(null, "group", "group", 582596132), function(shape, buffer, offset) {
  if (cljs.core.truth_((new cljs.core.Keyword(null, "drawn", "drawn", 2034398063)).cljs$core$IFn$_invoke$arity$1(shape))) {
    (new cljs.core.Keyword(null, "dimensions", "dimensions", -254818097)).cljs$core$IFn$_invoke$arity$1(shape);
  } else {
  }
  var dir = (new cljs.core.Keyword(null, "direction", "direction", -633359395)).cljs$core$IFn$_invoke$arity$1(shape);
  var forward = weather_canvas.sheet.make_projection.call(null, dir);
  var sideways = function(dim) {
    return cljs.core.map.call(null, function(p1__2448_SHARP_) {
      return Math.abs(p1__2448_SHARP_);
    }, weather_canvas.sheet.make_projection.call(null, 1 + dir).call(null, dim));
  };
  var between = (new cljs.core.Keyword(null, "interleave", "interleave", -1475043421)).cljs$core$IFn$_invoke$arity$1(shape);
  var contents = cljs.core.not.call(null, between) ? (new cljs.core.Keyword(null, "content", "content", 15833224)).cljs$core$IFn$_invoke$arity$1(shape) : cljs.core.butlast.call(null, cljs.core.flatten.call(null, cljs.core.map.call(null, cljs.core.vector, (new cljs.core.Keyword(null, "content", "content", 15833224)).cljs$core$IFn$_invoke$arity$1(shape), cljs.core.repeat.call(null, between))));
  var subshapes = contents;
  var suboffset = offset;
  var dimensions = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, 0], null);
  while (true) {
    if (cljs.core.not.call(null, cljs.core.first.call(null, subshapes))) {
      return (new cljs.core.Keyword(null, "dimensions", "dimensions", -254818097)).cljs$core$IFn$_invoke$arity$1(cljs.core.assoc.call(null, shape, new cljs.core.Keyword(null, "dimensions", "dimensions", -254818097), dimensions, new cljs.core.Keyword(null, "drawn", "drawn", 2034398063), true));
    } else {
      var sub_dimension = weather_canvas.sheet.draw_BANG_.call(null, cljs.core.first.call(null, subshapes), buffer, suboffset);
      var new_width = function() {
        var x__4214__auto__ = sideways.call(null, sub_dimension);
        var y__4215__auto__ = sideways.call(null, dimensions);
        return x__4214__auto__ > y__4215__auto__ ? x__4214__auto__ : y__4215__auto__;
      }();
      var G__2449 = cljs.core.rest.call(null, subshapes);
      var G__2450 = cljs.core.map.call(null, cljs.core._PLUS_, forward.call(null, sub_dimension), suboffset);
      var G__2451 = cljs.core.map.call(null, cljs.core._PLUS_, forward.call(null, dimensions), cljs.core.map.call(null, cljs.core._PLUS_, forward.call(null, sub_dimension), new_width));
      subshapes = G__2449;
      suboffset = G__2450;
      dimensions = G__2451;
      continue;
    }
    break;
  }
});
cljs.core._add_method.call(null, weather_canvas.sheet.draw_BANG_, new cljs.core.Keyword(null, "text", "text", -1790561697), function(shape, buffer, offset) {
  return weather_canvas.canvas_buffer.draw_text.call(null, buffer, (new cljs.core.Keyword(null, "string", "string", -1989541586)).cljs$core$IFn$_invoke$arity$1(shape), offset, (new cljs.core.Keyword(null, "font-size", "font-size", -1847940346)).cljs$core$IFn$_invoke$arity$1(shape), (new cljs.core.Keyword(null, "color", "color", 1011675173)).cljs$core$IFn$_invoke$arity$1(shape));
});
cljs.core._add_method.call(null, weather_canvas.sheet.draw_BANG_, new cljs.core.Keyword(null, "gap", "gap", 80255254), function(shape, buffer, offset) {
  return (new cljs.core.Keyword(null, "size", "size", 1098693007)).cljs$core$IFn$_invoke$arity$1(shape);
});
cljs.core._add_method.call(null, weather_canvas.sheet.draw_BANG_, new cljs.core.Keyword(null, "square", "square", 812434677), function(shape, buffer, offset) {
  weather_canvas.canvas_buffer.draw_rectangle.call(null, buffer, offset, (new cljs.core.Keyword(null, "size", "size", 1098693007)).cljs$core$IFn$_invoke$arity$1(shape), (new cljs.core.Keyword(null, "color", "color", 1011675173)).cljs$core$IFn$_invoke$arity$1(shape));
  return (new cljs.core.Keyword(null, "size", "size", 1098693007)).cljs$core$IFn$_invoke$arity$1(shape);
});
weather_canvas.sheet.unit_vector = function weather_canvas$sheet$unit_vector(direction) {
  return cljs.core.get.call(null, new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, 0], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, -1], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [-1, 0], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, 1], null)], 
  null), cljs.core.mod.call(null, direction, 4));
};
weather_canvas.sheet.make_direction = new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "right", "right", -452581833), 0, new cljs.core.Keyword(null, "up", "up", -269712113), 1, new cljs.core.Keyword(null, "left", "left", -399115937), 2, new cljs.core.Keyword(null, "down", "down", 1565245570), 3], null);
weather_canvas.sheet.make_projection = function weather_canvas$sheet$make_projection(direction) {
  return function(dimension) {
    return cljs.core.map.call(null, cljs.core._STAR_, weather_canvas.sheet.unit_vector.call(null, direction), dimension);
  };
};
goog.provide("weather_canvas.weather");
goog.require("cljs.core");
goog.require("dommy.core");
goog.require("hipo.core");
goog.require("weather_canvas.gradient");
goog.require("cljs.core.async");
goog.require("weather_canvas.events");
goog.require("weather_canvas.canvas_buffer");
goog.require("weather_canvas.sheet");
weather_canvas.weather.year_data = cljs.core.atom.call(null, cljs.core.PersistentVector.EMPTY);
weather_canvas.weather.years_to_fetch = cljs.core.atom.call(null, 0);
weather_canvas.weather.main_group = cljs.core.atom.call(null, null);
weather_canvas.weather.value_at_point = function weather_canvas$weather$value_at_point(x, y) {
  var i = function() {
    var x__4214__auto__ = 0;
    var y__4215__auto__ = x;
    return x__4214__auto__ > y__4215__auto__ ? x__4214__auto__ : y__4215__auto__;
  }() / weather_canvas.canvas_buffer.size_x | 0;
  var j = function() {
    var x__4214__auto__ = 0;
    var y__4215__auto__ = y;
    return x__4214__auto__ > y__4215__auto__ ? x__4214__auto__ : y__4215__auto__;
  }() / weather_canvas.canvas_buffer.size_y | 0;
  var d = cljs.core.get.call(null, cljs.core.get.call(null, cljs.core.deref.call(null, weather_canvas.weather.year_data), j), i);
  if (cljs.core.truth_(d)) {
    var v72094 = new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "id", "id", -1388402092), "data"], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", -2030961996), 
    "weekday"], null), (new cljs.core.Keyword(null, "weekday", "weekday", -1413046442)).cljs$core$IFn$_invoke$arity$1(d)], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", -2030961996), "day"], null), [cljs.core.str.cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "day", "day", -274800446)).cljs$core$IFn$_invoke$arity$1(d)), 
    "."].join("")], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", -2030961996), "month"], null), [cljs.core.str.cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "month", "month", -1960248533)).cljs$core$IFn$_invoke$arity$1(d)), "."].join("")], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, 
    [new cljs.core.Keyword(null, "div", "div", 1057191632), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", -2030961996), "year"], null), (new cljs.core.Keyword(null, "year", "year", 335913393)).cljs$core$IFn$_invoke$arity$1(d)], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", 
    -2030961996), "description"], null), (new cljs.core.Keyword(null, "description", "description", -1428560544)).cljs$core$IFn$_invoke$arity$1(d)], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", -2030961996), "value"], null), (new cljs.core.Keyword(null, "value", "value", 305978217)).cljs$core$IFn$_invoke$arity$1(d)], 
    null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", -2030961996), "unit"], null), (new cljs.core.Keyword(null, "unit", "unit", 375175175)).cljs$core$IFn$_invoke$arity$1(d)], null)], null);
    var el__2842__auto__ = hipo.interpreter.create.call(null, v72094, null);
    hipo.core.set_hiccup_BANG_.call(null, el__2842__auto__, v72094);
    return el__2842__auto__;
  } else {
    var v72095 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "id", "id", -1388402092), "data"], null)], null);
    var el__2842__auto__ = hipo.interpreter.create.call(null, v72095, null);
    hipo.core.set_hiccup_BANG_.call(null, el__2842__auto__, v72095);
    return el__2842__auto__;
  }
};
weather_canvas.weather.init_cursor_listener_BANG_ = function weather_canvas$weather$init_cursor_listener_BANG_(canvas) {
  var cc = weather_canvas.events.listen.call(null, canvas, new cljs.core.Keyword(null, "mousemove", "mousemove", -1077794734));
  var c__4636__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function() {
    var f__4637__auto__ = function() {
      var switch__4605__auto__ = function(state_72117) {
        var state_val_72118 = state_72117[1];
        if (state_val_72118 === 1) {
          var state_72117__$1 = state_72117;
          var statearr_72119_72131 = state_72117__$1;
          statearr_72119_72131[2] = null;
          statearr_72119_72131[1] = 2;
          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
        } else {
          if (state_val_72118 === 2) {
            var state_72117__$1 = state_72117;
            var statearr_72120_72132 = state_72117__$1;
            statearr_72120_72132[1] = 4;
            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
          } else {
            if (state_val_72118 === 3) {
              var inst_72115 = state_72117[2];
              var state_72117__$1 = state_72117;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_72117__$1, inst_72115);
            } else {
              if (state_val_72118 === 4) {
                var state_72117__$1 = state_72117;
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_72117__$1, 7, cc);
              } else {
                if (state_val_72118 === 5) {
                  var state_72117__$1 = state_72117;
                  var statearr_72122_72133 = state_72117__$1;
                  statearr_72122_72133[2] = null;
                  statearr_72122_72133[1] = 6;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_72118 === 6) {
                    var inst_72113 = state_72117[2];
                    var state_72117__$1 = state_72117;
                    var statearr_72123_72134 = state_72117__$1;
                    statearr_72123_72134[2] = inst_72113;
                    statearr_72123_72134[1] = 3;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_72118 === 7) {
                      var inst_72099 = state_72117[2];
                      var inst_72100 = inst_72099.target;
                      var inst_72101 = inst_72099.pageX;
                      var inst_72102 = inst_72100.offsetLeft;
                      var inst_72103 = inst_72101 - inst_72102;
                      var inst_72104 = inst_72099.pageY;
                      var inst_72105 = inst_72100.offsetTop;
                      var inst_72106 = inst_72104 - inst_72105;
                      var inst_72107 = document.getElementById("data");
                      var inst_72108 = weather_canvas.weather.value_at_point.call(null, inst_72103, inst_72106);
                      var inst_72109 = dommy.core.replace_BANG_.call(null, inst_72107, inst_72108);
                      var state_72117__$1 = function() {
                        var statearr_72124 = state_72117;
                        statearr_72124[7] = inst_72109;
                        return statearr_72124;
                      }();
                      var statearr_72125_72135 = state_72117__$1;
                      statearr_72125_72135[2] = null;
                      statearr_72125_72135[1] = 2;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      return null;
                    }
                  }
                }
              }
            }
          }
        }
      };
      return function() {
        var weather_canvas$weather$init_cursor_listener_BANG__$_state_machine__4606__auto__ = null;
        var weather_canvas$weather$init_cursor_listener_BANG__$_state_machine__4606__auto____0 = function() {
          var statearr_72126 = [null, null, null, null, null, null, null, null];
          statearr_72126[0] = weather_canvas$weather$init_cursor_listener_BANG__$_state_machine__4606__auto__;
          statearr_72126[1] = 1;
          return statearr_72126;
        };
        var weather_canvas$weather$init_cursor_listener_BANG__$_state_machine__4606__auto____1 = function(state_72117) {
          while (true) {
            var ret_value__4607__auto__ = function() {
              try {
                while (true) {
                  var result__4608__auto__ = switch__4605__auto__.call(null, state_72117);
                  if (cljs.core.keyword_identical_QMARK_.call(null, result__4608__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    continue;
                  } else {
                    return result__4608__auto__;
                  }
                  break;
                }
              } catch (e72127) {
                var ex__4609__auto__ = e72127;
                var statearr_72128_72136 = state_72117;
                statearr_72128_72136[2] = ex__4609__auto__;
                if (cljs.core.seq.call(null, state_72117[4])) {
                  var statearr_72129_72137 = state_72117;
                  statearr_72129_72137[1] = cljs.core.first.call(null, state_72117[4]);
                } else {
                  throw ex__4609__auto__;
                }
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              }
            }();
            if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__4607__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
              var G__72138 = state_72117;
              state_72117 = G__72138;
              continue;
            } else {
              return ret_value__4607__auto__;
            }
            break;
          }
        };
        weather_canvas$weather$init_cursor_listener_BANG__$_state_machine__4606__auto__ = function(state_72117) {
          switch(arguments.length) {
            case 0:
              return weather_canvas$weather$init_cursor_listener_BANG__$_state_machine__4606__auto____0.call(this);
            case 1:
              return weather_canvas$weather$init_cursor_listener_BANG__$_state_machine__4606__auto____1.call(this, state_72117);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        weather_canvas$weather$init_cursor_listener_BANG__$_state_machine__4606__auto__.cljs$core$IFn$_invoke$arity$0 = weather_canvas$weather$init_cursor_listener_BANG__$_state_machine__4606__auto____0;
        weather_canvas$weather$init_cursor_listener_BANG__$_state_machine__4606__auto__.cljs$core$IFn$_invoke$arity$1 = weather_canvas$weather$init_cursor_listener_BANG__$_state_machine__4606__auto____1;
        return weather_canvas$weather$init_cursor_listener_BANG__$_state_machine__4606__auto__;
      }();
    }();
    var state__4638__auto__ = function() {
      var statearr_72130 = f__4637__auto__.call(null);
      statearr_72130[6] = c__4636__auto__;
      return statearr_72130;
    }();
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__4638__auto__);
  });
  return c__4636__auto__;
};
weather_canvas.weather.report_status = function weather_canvas$weather$report_status(ready) {
  var status_report = document.getElementById("status-report");
  if (cljs.core.truth_(ready)) {
    dommy.core.remove_class_BANG_.call(null, status_report, "processing");
    dommy.core.add_class_BANG_.call(null, status_report, "ready");
    weather_canvas.weather.init_cursor_listener_BANG_.call(null, document.getElementById("weather-canvas"));
    return cljs.core.reset_BANG_.call(null, weather_canvas.weather.years_to_fetch, 0);
  } else {
    return null;
  }
};
weather_canvas.weather.leap_year_QMARK_ = function weather_canvas$weather$leap_year_QMARK_(year) {
  return cljs.core._EQ_.call(null, 0, cljs.core.mod.call(null, year, 400)) || !cljs.core._EQ_.call(null, 0, cljs.core.mod.call(null, year, 100)) && cljs.core._EQ_.call(null, 0, cljs.core.mod.call(null, year, 4));
};
weather_canvas.weather.c = cljs.core.async.chan.call(null);
weather_canvas.weather.c_msg = cljs.core.async.chan.call(null);
var c__4636__auto___72179 = cljs.core.async.chan.call(null, 1);
cljs.core.async.impl.dispatch.run.call(null, function() {
  var f__4637__auto__ = function() {
    var switch__4605__auto__ = function(state_72160) {
      var state_val_72161 = state_72160[1];
      if (state_val_72161 === 7) {
        var inst_72143 = state_72160[2];
        var state_72160__$1 = function() {
          var statearr_72162 = state_72160;
          statearr_72162[7] = inst_72143;
          return statearr_72162;
        }();
        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_72160__$1, 8, weather_canvas.weather.c_msg);
      } else {
        if (state_val_72161 === 1) {
          var state_72160__$1 = state_72160;
          var statearr_72163_72180 = state_72160__$1;
          statearr_72163_72180[2] = null;
          statearr_72163_72180[1] = 2;
          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
        } else {
          if (state_val_72161 === 4) {
            var inst_72141 = cljs.core.async.timeout.call(null, 10);
            var state_72160__$1 = state_72160;
            return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_72160__$1, 7, inst_72141);
          } else {
            if (state_val_72161 === 6) {
              var inst_72156 = state_72160[2];
              var state_72160__$1 = state_72160;
              var statearr_72164_72181 = state_72160__$1;
              statearr_72164_72181[2] = inst_72156;
              statearr_72164_72181[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_72161 === 3) {
                var inst_72158 = state_72160[2];
                var state_72160__$1 = state_72160;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_72160__$1, inst_72158);
              } else {
                if (state_val_72161 === 2) {
                  var state_72160__$1 = state_72160;
                  var statearr_72165_72182 = state_72160__$1;
                  statearr_72165_72182[1] = 4;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_72161 === 11) {
                    var inst_72152 = state_72160[2];
                    var state_72160__$1 = function() {
                      var statearr_72167 = state_72160;
                      statearr_72167[8] = inst_72152;
                      return statearr_72167;
                    }();
                    var statearr_72168_72183 = state_72160__$1;
                    statearr_72168_72183[2] = null;
                    statearr_72168_72183[1] = 2;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_72161 === 9) {
                      var inst_72147 = cljs.core.deref.call(null, weather_canvas.weather.years_to_fetch);
                      var inst_72148 = inst_72147 <= 0;
                      var inst_72149 = weather_canvas.weather.report_status.call(null, inst_72148);
                      var state_72160__$1 = state_72160;
                      var statearr_72169_72184 = state_72160__$1;
                      statearr_72169_72184[2] = inst_72149;
                      statearr_72169_72184[1] = 11;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_72161 === 5) {
                        var state_72160__$1 = state_72160;
                        var statearr_72170_72185 = state_72160__$1;
                        statearr_72170_72185[2] = null;
                        statearr_72170_72185[1] = 6;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_72161 === 10) {
                          var state_72160__$1 = state_72160;
                          var statearr_72171_72186 = state_72160__$1;
                          statearr_72171_72186[2] = null;
                          statearr_72171_72186[1] = 11;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_72161 === 8) {
                            var inst_72145 = state_72160[2];
                            var state_72160__$1 = state_72160;
                            if (cljs.core.truth_(inst_72145)) {
                              var statearr_72172_72187 = state_72160__$1;
                              statearr_72172_72187[1] = 9;
                            } else {
                              var statearr_72173_72188 = state_72160__$1;
                              statearr_72173_72188[1] = 10;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            return null;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    };
    return function() {
      var weather_canvas$weather$state_machine__4606__auto__ = null;
      var weather_canvas$weather$state_machine__4606__auto____0 = function() {
        var statearr_72174 = [null, null, null, null, null, null, null, null, null];
        statearr_72174[0] = weather_canvas$weather$state_machine__4606__auto__;
        statearr_72174[1] = 1;
        return statearr_72174;
      };
      var weather_canvas$weather$state_machine__4606__auto____1 = function(state_72160) {
        while (true) {
          var ret_value__4607__auto__ = function() {
            try {
              while (true) {
                var result__4608__auto__ = switch__4605__auto__.call(null, state_72160);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__4608__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__4608__auto__;
                }
                break;
              }
            } catch (e72175) {
              var ex__4609__auto__ = e72175;
              var statearr_72176_72189 = state_72160;
              statearr_72176_72189[2] = ex__4609__auto__;
              if (cljs.core.seq.call(null, state_72160[4])) {
                var statearr_72177_72190 = state_72160;
                statearr_72177_72190[1] = cljs.core.first.call(null, state_72160[4]);
              } else {
                throw ex__4609__auto__;
              }
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            }
          }();
          if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__4607__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
            var G__72191 = state_72160;
            state_72160 = G__72191;
            continue;
          } else {
            return ret_value__4607__auto__;
          }
          break;
        }
      };
      weather_canvas$weather$state_machine__4606__auto__ = function(state_72160) {
        switch(arguments.length) {
          case 0:
            return weather_canvas$weather$state_machine__4606__auto____0.call(this);
          case 1:
            return weather_canvas$weather$state_machine__4606__auto____1.call(this, state_72160);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      weather_canvas$weather$state_machine__4606__auto__.cljs$core$IFn$_invoke$arity$0 = weather_canvas$weather$state_machine__4606__auto____0;
      weather_canvas$weather$state_machine__4606__auto__.cljs$core$IFn$_invoke$arity$1 = weather_canvas$weather$state_machine__4606__auto____1;
      return weather_canvas$weather$state_machine__4606__auto__;
    }();
  }();
  var state__4638__auto__ = function() {
    var statearr_72178 = f__4637__auto__.call(null);
    statearr_72178[6] = c__4636__auto___72179;
    return statearr_72178;
  }();
  return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__4638__auto__);
});
weather_canvas.weather.filled = function weather_canvas$weather$filled(data, expected, predicate, filler) {
  if (cljs.core.empty_QMARK_.call(null, expected)) {
    return cljs.core.PersistentVector.EMPTY;
  } else {
    if (cljs.core._EQ_.call(null, cljs.core.count.call(null, data), cljs.core.count.call(null, expected))) {
      return data;
    } else {
      if (cljs.core.truth_(predicate.call(null, cljs.core.first.call(null, data), cljs.core.first.call(null, expected)))) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, data), new cljs.core.LazySeq(null, function() {
          return weather_canvas.weather.filled.call(null, cljs.core.rest.call(null, data), cljs.core.rest.call(null, expected), predicate, filler);
        }, null, null));
      } else {
        return cljs.core.cons.call(null, filler.call(null, cljs.core.first.call(null, expected)), new cljs.core.LazySeq(null, function() {
          return weather_canvas.weather.filled.call(null, data, cljs.core.rest.call(null, expected), predicate, filler);
        }, null, null));
      }
    }
  }
};
weather_canvas.weather.weekday = new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, ["su", "ma", "ti", "ke", "to", "pe", "la"], null);
weather_canvas.weather.scale = new cljs.core.PersistentArrayMap(null, 5, ["tday", "C", "tmax", "C", "tmin", "C", "rrday", "mm", "snow", "cm"], null);
weather_canvas.weather.description = new cljs.core.PersistentArrayMap(null, 5, ["tday", "keskilämpötila", "tmax", "maksimilämpötila", "tmin", "minimilämpötila", "rrday", "sademäärä", "snow", "lumensyvyys"], null);
weather_canvas.weather.grad = new cljs.core.PersistentArrayMap(null, 5, ["tday", weather_canvas.gradient.temperature, "tmax", weather_canvas.gradient.temperature, "tmin", weather_canvas.gradient.temperature, "rrday", weather_canvas.gradient.rain, "snow", weather_canvas.gradient.snow], null);
weather_canvas.weather.key_a = function weather_canvas$weather$key_a(el) {
  if (cljs.core.truth_(function() {
    var or__4126__auto__ = cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "missing", "missing", 362507769), el);
    if (or__4126__auto__) {
      return or__4126__auto__;
    } else {
      return isNaN(el);
    }
  }())) {
    return null;
  } else {
    return el;
  }
};
weather_canvas.weather.key_b = function weather_canvas$weather$key_b(el) {
  return weather_canvas.weather.key_a.call(null, (new cljs.core.Keyword(null, "value", "value", 305978217)).cljs$core$IFn$_invoke$arity$1(el));
};
weather_canvas.weather.listen_results_async = function weather_canvas$weather$listen_results_async() {
  var c__4636__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function() {
    var f__4637__auto__ = function() {
      var switch__4605__auto__ = function(state_72420) {
        var state_val_72421 = state_72420[1];
        if (state_val_72421 === 65) {
          var inst_72346 = state_72420[7];
          var inst_72377 = state_72420[2];
          var inst_72378 = cljs.core.next.call(null, inst_72346);
          var inst_72312 = inst_72378;
          var inst_72313 = null;
          var inst_72314 = 0;
          var inst_72315 = 0;
          var state_72420__$1 = function() {
            var statearr_72422 = state_72420;
            statearr_72422[8] = inst_72312;
            statearr_72422[9] = inst_72314;
            statearr_72422[10] = inst_72313;
            statearr_72422[11] = inst_72377;
            statearr_72422[12] = inst_72315;
            return statearr_72422;
          }();
          var statearr_72423_72538 = state_72420__$1;
          statearr_72423_72538[2] = null;
          statearr_72423_72538[1] = 43;
          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
        } else {
          if (state_val_72421 === 62) {
            var inst_72366 = state_72420[2];
            var inst_72367 = cljs.core.not.call(null, inst_72366);
            var state_72420__$1 = state_72420;
            if (inst_72367) {
              var statearr_72424_72539 = state_72420__$1;
              statearr_72424_72539[1] = 63;
            } else {
              var statearr_72425_72540 = state_72420__$1;
              statearr_72425_72540[1] = 64;
            }
            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
          } else {
            if (state_val_72421 === 7) {
              var inst_72196 = state_72420[13];
              var inst_72204 = (new cljs.core.Keyword(null, "data", "data", -232669377)).cljs$core$IFn$_invoke$arity$1(inst_72196);
              var inst_72205 = inst_72204 == null;
              var inst_72206 = cljs.core.not.call(null, inst_72205);
              var state_72420__$1 = state_72420;
              if (inst_72206) {
                var statearr_72426_72541 = state_72420__$1;
                statearr_72426_72541[1] = 10;
              } else {
                var statearr_72427_72542 = state_72420__$1;
                statearr_72427_72542[1] = 11;
              }
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_72421 === 59) {
                var inst_72381 = state_72420[2];
                var state_72420__$1 = state_72420;
                var statearr_72428_72543 = state_72420__$1;
                statearr_72428_72543[2] = inst_72381;
                statearr_72428_72543[1] = 56;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_72421 === 20) {
                  var state_72420__$1 = state_72420;
                  var statearr_72429_72544 = state_72420__$1;
                  statearr_72429_72544[2] = null;
                  statearr_72429_72544[1] = 21;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_72421 === 58) {
                    var inst_72346 = state_72420[7];
                    var inst_72361 = state_72420[14];
                    var inst_72360 = state_72420[15];
                    var inst_72358 = cljs.core.first.call(null, inst_72346);
                    var inst_72359 = cljs.core.nth.call(null, inst_72358, 0, null);
                    var inst_72360__$1 = cljs.core.nth.call(null, inst_72358, 1, null);
                    var inst_72361__$1 = cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "missing", "missing", 362507769), inst_72360__$1);
                    var state_72420__$1 = function() {
                      var statearr_72430 = state_72420;
                      statearr_72430[16] = inst_72359;
                      statearr_72430[14] = inst_72361__$1;
                      statearr_72430[15] = inst_72360__$1;
                      return statearr_72430;
                    }();
                    if (inst_72361__$1) {
                      var statearr_72431_72545 = state_72420__$1;
                      statearr_72431_72545[1] = 60;
                    } else {
                      var statearr_72432_72546 = state_72420__$1;
                      statearr_72432_72546[1] = 61;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_72421 === 60) {
                      var inst_72361 = state_72420[14];
                      var state_72420__$1 = state_72420;
                      var statearr_72433_72547 = state_72420__$1;
                      statearr_72433_72547[2] = inst_72361;
                      statearr_72433_72547[1] = 62;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_72421 === 27) {
                        var inst_72237 = state_72420[2];
                        var state_72420__$1 = state_72420;
                        var statearr_72434_72548 = state_72420__$1;
                        statearr_72434_72548[2] = inst_72237;
                        statearr_72434_72548[1] = 24;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_72421 === 1) {
                          var inst_72196 = null;
                          var state_72420__$1 = function() {
                            var statearr_72435 = state_72420;
                            statearr_72435[13] = inst_72196;
                            return statearr_72435;
                          }();
                          var statearr_72436_72549 = state_72420__$1;
                          statearr_72436_72549[2] = null;
                          statearr_72436_72549[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_72421 === 69) {
                            var inst_72418 = state_72420[2];
                            var state_72420__$1 = state_72420;
                            return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_72420__$1, inst_72418);
                          } else {
                            if (state_val_72421 === 24) {
                              var inst_72240 = state_72420[2];
                              var state_72420__$1 = state_72420;
                              if (cljs.core.truth_(inst_72240)) {
                                var statearr_72437_72550 = state_72420__$1;
                                statearr_72437_72550[1] = 28;
                              } else {
                                var statearr_72438_72551 = state_72420__$1;
                                statearr_72438_72551[1] = 29;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_72421 === 55) {
                                var state_72420__$1 = state_72420;
                                var statearr_72439_72552 = state_72420__$1;
                                statearr_72439_72552[2] = null;
                                statearr_72439_72552[1] = 56;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_72421 === 39) {
                                  var inst_72257 = state_72420[17];
                                  var inst_72245 = state_72420[18];
                                  var inst_72247 = state_72420[19];
                                  var inst_72271 = state_72420[20];
                                  var inst_72252 = state_72420[21];
                                  var inst_72262 = state_72420[22];
                                  var inst_72246 = state_72420[23];
                                  var inst_72251 = state_72420[24];
                                  var inst_72265 = state_72420[25];
                                  var inst_72272 = state_72420[26];
                                  var inst_72248 = state_72420[27];
                                  var inst_72196 = state_72420[13];
                                  var inst_72250 = state_72420[28];
                                  var inst_72249 = state_72420[29];
                                  var inst_72277 = state_72420[2];
                                  var inst_72278 = cljs.core.range.call(null, 0, inst_72277);
                                  var inst_72279 = cljs.core.map.call(null, inst_72272, inst_72278);
                                  var inst_72280 = cljs.core.apply.call(null, cljs.core.vector, inst_72279);
                                  var inst_72281 = function() {
                                    var sorting = inst_72251;
                                    var parameters = inst_72196;
                                    var preprocess_data = inst_72262;
                                    var map__72224 = inst_72245;
                                    var data = inst_72246;
                                    var attribute = inst_72248;
                                    var errors = inst_72247;
                                    var first_date = inst_72265;
                                    var offset = inst_72249;
                                    var year = inst_72252;
                                    var preprocess = inst_72257;
                                    var context = inst_72250;
                                    return function(got, exp) {
                                      return !(got == null) && cljs.core._EQ_.call(null, got.time, exp);
                                    };
                                  }();
                                  var inst_72282 = function() {
                                    var sorting = inst_72251;
                                    var parameters = inst_72196;
                                    var preprocess_data = inst_72262;
                                    var map__72224 = inst_72245;
                                    var data = inst_72246;
                                    var attribute = inst_72248;
                                    var errors = inst_72247;
                                    var first_date = inst_72265;
                                    var offset = inst_72249;
                                    var year = inst_72252;
                                    var preprocess = inst_72257;
                                    var context = inst_72250;
                                    return function(d) {
                                      var obj = new Object;
                                      obj.time = d;
                                      obj.value = new cljs.core.Keyword(null, "missing", "missing", 362507769);
                                      return obj;
                                    };
                                  }();
                                  var inst_72283 = weather_canvas.weather.filled.call(null, inst_72271, inst_72280, inst_72281, inst_72282);
                                  var inst_72284 = 31 + 28;
                                  var inst_72285 = weather_canvas.weather.leap_year_QMARK_.call(null, inst_72252);
                                  var inst_72286 = !inst_72285;
                                  var state_72420__$1 = function() {
                                    var statearr_72440 = state_72420;
                                    statearr_72440[30] = inst_72284;
                                    statearr_72440[31] = inst_72283;
                                    return statearr_72440;
                                  }();
                                  if (inst_72286) {
                                    var statearr_72441_72553 = state_72420__$1;
                                    statearr_72441_72553[1] = 40;
                                  } else {
                                    var statearr_72442_72554 = state_72420__$1;
                                    statearr_72442_72554[1] = 41;
                                  }
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_72421 === 46) {
                                    var inst_72312 = state_72420[8];
                                    var inst_72346 = state_72420[7];
                                    var inst_72346__$1 = cljs.core.seq.call(null, inst_72312);
                                    var state_72420__$1 = function() {
                                      var statearr_72443 = state_72420;
                                      statearr_72443[7] = inst_72346__$1;
                                      return statearr_72443;
                                    }();
                                    if (inst_72346__$1) {
                                      var statearr_72444_72555 = state_72420__$1;
                                      statearr_72444_72555[1] = 54;
                                    } else {
                                      var statearr_72445_72556 = state_72420__$1;
                                      statearr_72445_72556[1] = 55;
                                    }
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_72421 === 4) {
                                      var inst_72196 = state_72420[13];
                                      var inst_72199 = function() {
                                        var parameters = inst_72196;
                                        return function(p1__72192_SHARP_) {
                                          return p1__72192_SHARP_ - 1;
                                        };
                                      }();
                                      var inst_72200 = cljs.core.swap_BANG_.call(null, weather_canvas.weather.years_to_fetch, inst_72199);
                                      var inst_72201 = inst_72196 == null;
                                      var inst_72202 = cljs.core.not.call(null, inst_72201);
                                      var state_72420__$1 = function() {
                                        var statearr_72446 = state_72420;
                                        statearr_72446[32] = inst_72200;
                                        return statearr_72446;
                                      }();
                                      if (inst_72202) {
                                        var statearr_72447_72557 = state_72420__$1;
                                        statearr_72447_72557[1] = 7;
                                      } else {
                                        var statearr_72448_72558 = state_72420__$1;
                                        statearr_72448_72558[1] = 8;
                                      }
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_72421 === 54) {
                                        var inst_72346 = state_72420[7];
                                        var inst_72348 = cljs.core.chunked_seq_QMARK_.call(null, inst_72346);
                                        var state_72420__$1 = state_72420;
                                        if (inst_72348) {
                                          var statearr_72449_72559 = state_72420__$1;
                                          statearr_72449_72559[1] = 57;
                                        } else {
                                          var statearr_72450_72560 = state_72420__$1;
                                          statearr_72450_72560[1] = 58;
                                        }
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_72421 === 15) {
                                          var inst_72397 = state_72420[2];
                                          var state_72420__$1 = state_72420;
                                          var statearr_72451_72561 = state_72420__$1;
                                          statearr_72451_72561[2] = inst_72397;
                                          statearr_72451_72561[1] = 12;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_72421 === 48) {
                                            var inst_72326 = state_72420[33];
                                            var state_72420__$1 = state_72420;
                                            var statearr_72452_72562 = state_72420__$1;
                                            statearr_72452_72562[2] = inst_72326;
                                            statearr_72452_72562[1] = 50;
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_72421 === 50) {
                                              var inst_72331 = state_72420[2];
                                              var inst_72332 = cljs.core.not.call(null, inst_72331);
                                              var state_72420__$1 = state_72420;
                                              if (inst_72332) {
                                                var statearr_72453_72563 = state_72420__$1;
                                                statearr_72453_72563[1] = 51;
                                              } else {
                                                var statearr_72454_72564 = state_72420__$1;
                                                statearr_72454_72564[1] = 52;
                                              }
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_72421 === 21) {
                                                var inst_72391 = state_72420[2];
                                                var state_72420__$1 = state_72420;
                                                var statearr_72455_72565 = state_72420__$1;
                                                statearr_72455_72565[2] = inst_72391;
                                                statearr_72455_72565[1] = 18;
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_72421 === 31) {
                                                  var inst_72254 = cljs.core.partial.call(null, cljs.core.sort_by, weather_canvas.weather.key_a);
                                                  var state_72420__$1 = state_72420;
                                                  var statearr_72456_72566 = state_72420__$1;
                                                  statearr_72456_72566[2] = inst_72254;
                                                  statearr_72456_72566[1] = 33;
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_72421 === 32) {
                                                    var state_72420__$1 = state_72420;
                                                    var statearr_72457_72567 = state_72420__$1;
                                                    statearr_72457_72567[2] = cljs.core.identity;
                                                    statearr_72457_72567[1] = 33;
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_72421 === 40) {
                                                      var inst_72284 = state_72420[30];
                                                      var inst_72283 = state_72420[31];
                                                      var inst_72288 = cljs.core.take.call(null, inst_72284, inst_72283);
                                                      var inst_72289 = cljs.core.PersistentVector.EMPTY_NODE;
                                                      var inst_72290 = inst_72284 - 1;
                                                      var inst_72291 = cljs.core.nth.call(null, inst_72283, inst_72290);
                                                      var inst_72292 = [inst_72291];
                                                      var inst_72293 = new cljs.core.PersistentVector(null, 1, 5, inst_72289, inst_72292, null);
                                                      var inst_72294 = cljs.core.concat.call(null, inst_72288, inst_72293);
                                                      var inst_72295 = cljs.core.drop.call(null, inst_72284, inst_72283);
                                                      var inst_72296 = cljs.core.concat.call(null, inst_72294, inst_72295);
                                                      var state_72420__$1 = state_72420;
                                                      var statearr_72458_72568 = state_72420__$1;
                                                      statearr_72458_72568[2] = inst_72296;
                                                      statearr_72458_72568[1] = 42;
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      if (state_val_72421 === 56) {
                                                        var inst_72384 = state_72420[2];
                                                        var state_72420__$1 = state_72420;
                                                        var statearr_72459_72569 = state_72420__$1;
                                                        statearr_72459_72569[2] = inst_72384;
                                                        statearr_72459_72569[1] = 47;
                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                      } else {
                                                        if (state_val_72421 === 33) {
                                                          var inst_72251 = state_72420[24];
                                                          var inst_72257 = state_72420[2];
                                                          var state_72420__$1 = function() {
                                                            var statearr_72460 = state_72420;
                                                            statearr_72460[17] = inst_72257;
                                                            return statearr_72460;
                                                          }();
                                                          if (cljs.core.truth_(inst_72251)) {
                                                            var statearr_72461_72570 = state_72420__$1;
                                                            statearr_72461_72570[1] = 34;
                                                          } else {
                                                            var statearr_72462_72571 = state_72420__$1;
                                                            statearr_72462_72571[1] = 35;
                                                          }
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          if (state_val_72421 === 13) {
                                                            var inst_72196 = state_72420[13];
                                                            var inst_72213 = (new cljs.core.Keyword(null, "data", "data", -232669377)).cljs$core$IFn$_invoke$arity$1(inst_72196);
                                                            var inst_72214 = inst_72213.locations;
                                                            var inst_72215 = cljs.core.count.call(null, inst_72214);
                                                            var inst_72216 = 0 < inst_72215;
                                                            var state_72420__$1 = state_72420;
                                                            if (cljs.core.truth_(inst_72216)) {
                                                              var statearr_72463_72572 = state_72420__$1;
                                                              statearr_72463_72572[1] = 16;
                                                            } else {
                                                              var statearr_72464_72573 = state_72420__$1;
                                                              statearr_72464_72573[1] = 17;
                                                            }
                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                          } else {
                                                            if (state_val_72421 === 22) {
                                                              var inst_72196 = state_72420[13];
                                                              var inst_72229 = inst_72196.cljs$lang$protocol_mask$partition0$;
                                                              var inst_72230 = inst_72229 & 64;
                                                              var inst_72231 = inst_72196.cljs$core$ISeq$;
                                                              var inst_72232 = cljs.core.PROTOCOL_SENTINEL === inst_72231;
                                                              var inst_72233 = inst_72230 || inst_72232;
                                                              var state_72420__$1 = state_72420;
                                                              if (cljs.core.truth_(inst_72233)) {
                                                                var statearr_72465_72574 = state_72420__$1;
                                                                statearr_72465_72574[1] = 25;
                                                              } else {
                                                                var statearr_72466_72575 = state_72420__$1;
                                                                statearr_72466_72575[1] = 26;
                                                              }
                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                            } else {
                                                              if (state_val_72421 === 36) {
                                                                var inst_72257 = state_72420[17];
                                                                var inst_72245 = state_72420[18];
                                                                var inst_72247 = state_72420[19];
                                                                var inst_72252 = state_72420[21];
                                                                var inst_72262 = state_72420[22];
                                                                var inst_72246 = state_72420[23];
                                                                var inst_72251 = state_72420[24];
                                                                var inst_72265 = state_72420[25];
                                                                var inst_72248 = state_72420[27];
                                                                var inst_72196 = state_72420[13];
                                                                var inst_72250 = state_72420[28];
                                                                var inst_72249 = state_72420[29];
                                                                var inst_72262__$1 = state_72420[2];
                                                                var inst_72263 = [cljs.core.str.cljs$core$IFn$_invoke$arity$1(inst_72252), "-01-01T00:00:00Z"].join("");
                                                                var inst_72264 = new Date(inst_72263);
                                                                var inst_72265__$1 = inst_72264.getTime();
                                                                var inst_72266 = inst_72246.locations;
                                                                var inst_72267 = cljs.core.nth.call(null, inst_72266, 0);
                                                                var inst_72268 = inst_72267.data;
                                                                var inst_72269 = inst_72268[inst_72248];
                                                                var inst_72270 = inst_72269.timeValuePairs;
                                                                var inst_72271 = cljs.core.apply.call(null, cljs.core.vector, inst_72270);
                                                                var inst_72272 = function() {
                                                                  var sorting = inst_72251;
                                                                  var parameters = inst_72196;
                                                                  var preprocess_data = inst_72262__$1;
                                                                  var map__72224 = inst_72245;
                                                                  var data = inst_72246;
                                                                  var attribute = inst_72248;
                                                                  var errors = inst_72247;
                                                                  var first_date = inst_72265__$1;
                                                                  var offset = inst_72249;
                                                                  var year = inst_72252;
                                                                  var preprocess = inst_72257;
                                                                  var context = inst_72250;
                                                                  return function(p1__72193_SHARP_) {
                                                                    return first_date + p1__72193_SHARP_ * 1000 * 60 * 60 * 24;
                                                                  };
                                                                }();
                                                                var inst_72273 = weather_canvas.weather.leap_year_QMARK_.call(null, inst_72252);
                                                                var state_72420__$1 = function() {
                                                                  var statearr_72467 = state_72420;
                                                                  statearr_72467[20] = inst_72271;
                                                                  statearr_72467[22] = inst_72262__$1;
                                                                  statearr_72467[25] = inst_72265__$1;
                                                                  statearr_72467[26] = inst_72272;
                                                                  return statearr_72467;
                                                                }();
                                                                if (inst_72273) {
                                                                  var statearr_72468_72576 = state_72420__$1;
                                                                  statearr_72468_72576[1] = 37;
                                                                } else {
                                                                  var statearr_72469_72577 = state_72420__$1;
                                                                  statearr_72469_72577[1] = 38;
                                                                }
                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                              } else {
                                                                if (state_val_72421 === 41) {
                                                                  var inst_72283 = state_72420[31];
                                                                  var state_72420__$1 = state_72420;
                                                                  var statearr_72470_72578 = state_72420__$1;
                                                                  statearr_72470_72578[2] = inst_72283;
                                                                  statearr_72470_72578[1] = 42;
                                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                } else {
                                                                  if (state_val_72421 === 43) {
                                                                    var inst_72314 = state_72420[9];
                                                                    var inst_72315 = state_72420[12];
                                                                    var inst_72317 = inst_72315 < inst_72314;
                                                                    var inst_72318 = inst_72317;
                                                                    var state_72420__$1 = state_72420;
                                                                    if (cljs.core.truth_(inst_72318)) {
                                                                      var statearr_72471_72579 = state_72420__$1;
                                                                      statearr_72471_72579[1] = 45;
                                                                    } else {
                                                                      var statearr_72472_72580 = state_72420__$1;
                                                                      statearr_72472_72580[1] = 46;
                                                                    }
                                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                  } else {
                                                                    if (state_val_72421 === 61) {
                                                                      var inst_72360 = state_72420[15];
                                                                      var inst_72364 = isNaN(inst_72360);
                                                                      var state_72420__$1 = state_72420;
                                                                      var statearr_72473_72581 = state_72420__$1;
                                                                      statearr_72473_72581[2] = inst_72364;
                                                                      statearr_72473_72581[1] = 62;
                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                    } else {
                                                                      if (state_val_72421 === 29) {
                                                                        var inst_72196 = state_72420[13];
                                                                        var state_72420__$1 = state_72420;
                                                                        var statearr_72474_72582 = state_72420__$1;
                                                                        statearr_72474_72582[2] = inst_72196;
                                                                        statearr_72474_72582[1] = 30;
                                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                      } else {
                                                                        if (state_val_72421 === 44) {
                                                                          var inst_72388 = state_72420[2];
                                                                          var state_72420__$1 = state_72420;
                                                                          var statearr_72475_72583 = state_72420__$1;
                                                                          statearr_72475_72583[2] = inst_72388;
                                                                          statearr_72475_72583[1] = 21;
                                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                        } else {
                                                                          if (state_val_72421 === 6) {
                                                                            var inst_72406 = state_72420[2];
                                                                            var state_72420__$1 = function() {
                                                                              var statearr_72476 = state_72420;
                                                                              statearr_72476[34] = inst_72406;
                                                                              return statearr_72476;
                                                                            }();
                                                                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_72420__$1, 66, weather_canvas.weather.c_msg, "done");
                                                                          } else {
                                                                            if (state_val_72421 === 28) {
                                                                              var inst_72196 = state_72420[13];
                                                                              var inst_72242 = cljs.core.apply.call(null, cljs.core.hash_map, inst_72196);
                                                                              var state_72420__$1 = state_72420;
                                                                              var statearr_72477_72584 = state_72420__$1;
                                                                              statearr_72477_72584[2] = inst_72242;
                                                                              statearr_72477_72584[1] = 30;
                                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                            } else {
                                                                              if (state_val_72421 === 64) {
                                                                                var state_72420__$1 = state_72420;
                                                                                var statearr_72478_72585 = state_72420__$1;
                                                                                statearr_72478_72585[2] = null;
                                                                                statearr_72478_72585[1] = 65;
                                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                              } else {
                                                                                if (state_val_72421 === 51) {
                                                                                  var inst_72325 = state_72420[35];
                                                                                  var inst_72248 = state_72420[27];
                                                                                  var inst_72250 = state_72420[28];
                                                                                  var inst_72249 = state_72420[29];
                                                                                  var inst_72324 = state_72420[36];
                                                                                  var inst_72334 = weather_canvas.weather.grad.call(null, inst_72248);
                                                                                  var inst_72335 = weather_canvas.weather.temperature_to_color.call(null, inst_72325, inst_72334);
                                                                                  var inst_72336 = inst_72250.fillStyle = inst_72335;
                                                                                  var inst_72337 = weather_canvas.canvas_buffer.size_x * inst_72324;
                                                                                  var inst_72338 = weather_canvas.canvas_buffer.size_y * inst_72249;
                                                                                  var inst_72339 = inst_72250.fillRect(inst_72337, inst_72338, weather_canvas.canvas_buffer.size_x, weather_canvas.canvas_buffer.size_y);
                                                                                  var state_72420__$1 = function() {
                                                                                    var statearr_72479 = state_72420;
                                                                                    statearr_72479[37] = inst_72336;
                                                                                    return statearr_72479;
                                                                                  }();
                                                                                  var statearr_72480_72586 = state_72420__$1;
                                                                                  statearr_72480_72586[2] = inst_72339;
                                                                                  statearr_72480_72586[1] = 53;
                                                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                } else {
                                                                                  if (state_val_72421 === 25) {
                                                                                    var state_72420__$1 = state_72420;
                                                                                    var statearr_72481_72587 = state_72420__$1;
                                                                                    statearr_72481_72587[2] = true;
                                                                                    statearr_72481_72587[1] = 27;
                                                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                  } else {
                                                                                    if (state_val_72421 === 34) {
                                                                                      var inst_72259 = cljs.core.partial.call(null, cljs.core.sort_by, weather_canvas.weather.key_b);
                                                                                      var state_72420__$1 = state_72420;
                                                                                      var statearr_72482_72588 = state_72420__$1;
                                                                                      statearr_72482_72588[2] = inst_72259;
                                                                                      statearr_72482_72588[1] = 36;
                                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                    } else {
                                                                                      if (state_val_72421 === 17) {
                                                                                        var state_72420__$1 = state_72420;
                                                                                        var statearr_72483_72589 = state_72420__$1;
                                                                                        statearr_72483_72589[2] = null;
                                                                                        statearr_72483_72589[1] = 18;
                                                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                      } else {
                                                                                        if (state_val_72421 === 3) {
                                                                                          var inst_72416 = state_72420[2];
                                                                                          var state_72420__$1 = function() {
                                                                                            var statearr_72484 = state_72420;
                                                                                            statearr_72484[38] = inst_72416;
                                                                                            return statearr_72484;
                                                                                          }();
                                                                                          return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_72420__$1, 69, weather_canvas.weather.c_msg, "done");
                                                                                        } else {
                                                                                          if (state_val_72421 === 12) {
                                                                                            var inst_72400 = state_72420[2];
                                                                                            var state_72420__$1 = state_72420;
                                                                                            var statearr_72485_72590 = state_72420__$1;
                                                                                            statearr_72485_72590[2] = inst_72400;
                                                                                            statearr_72485_72590[1] = 9;
                                                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                          } else {
                                                                                            if (state_val_72421 === 2) {
                                                                                              var inst_72196 = state_72420[13];
                                                                                              var state_72420__$1 = state_72420;
                                                                                              if (cljs.core.truth_(inst_72196)) {
                                                                                                var statearr_72486_72591 = state_72420__$1;
                                                                                                statearr_72486_72591[1] = 4;
                                                                                              } else {
                                                                                                var statearr_72487_72592 = state_72420__$1;
                                                                                                statearr_72487_72592[1] = 5;
                                                                                              }
                                                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                            } else {
                                                                                              if (state_val_72421 === 66) {
                                                                                                var inst_72408 = state_72420[2];
                                                                                                var inst_72409 = cljs.core.async.timeout.call(null, 10);
                                                                                                var state_72420__$1 = function() {
                                                                                                  var statearr_72488 = state_72420;
                                                                                                  statearr_72488[39] = inst_72408;
                                                                                                  return statearr_72488;
                                                                                                }();
                                                                                                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_72420__$1, 67, inst_72409);
                                                                                              } else {
                                                                                                if (state_val_72421 === 23) {
                                                                                                  var state_72420__$1 = state_72420;
                                                                                                  var statearr_72489_72593 = state_72420__$1;
                                                                                                  statearr_72489_72593[2] = false;
                                                                                                  statearr_72489_72593[1] = 24;
                                                                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                } else {
                                                                                                  if (state_val_72421 === 47) {
                                                                                                    var inst_72386 = state_72420[2];
                                                                                                    var state_72420__$1 = state_72420;
                                                                                                    var statearr_72490_72594 = state_72420__$1;
                                                                                                    statearr_72490_72594[2] = inst_72386;
                                                                                                    statearr_72490_72594[1] = 44;
                                                                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                  } else {
                                                                                                    if (state_val_72421 === 35) {
                                                                                                      var state_72420__$1 = state_72420;
                                                                                                      var statearr_72491_72595 = state_72420__$1;
                                                                                                      statearr_72491_72595[2] = cljs.core.identity;
                                                                                                      statearr_72491_72595[1] = 36;
                                                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                    } else {
                                                                                                      if (state_val_72421 === 19) {
                                                                                                        var inst_72196 = state_72420[13];
                                                                                                        var inst_72226 = inst_72196 == null;
                                                                                                        var inst_72227 = cljs.core.not.call(null, inst_72226);
                                                                                                        var state_72420__$1 = state_72420;
                                                                                                        if (inst_72227) {
                                                                                                          var statearr_72492_72596 = state_72420__$1;
                                                                                                          statearr_72492_72596[1] = 22;
                                                                                                        } else {
                                                                                                          var statearr_72493_72597 = state_72420__$1;
                                                                                                          statearr_72493_72597[1] = 23;
                                                                                                        }
                                                                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                      } else {
                                                                                                        if (state_val_72421 === 57) {
                                                                                                          var inst_72346 = state_72420[7];
                                                                                                          var inst_72350 = cljs.core.chunk_first.call(null, inst_72346);
                                                                                                          var inst_72351 = cljs.core.chunk_rest.call(null, inst_72346);
                                                                                                          var inst_72352 = cljs.core.count.call(null, inst_72350);
                                                                                                          var inst_72312 = inst_72351;
                                                                                                          var inst_72313 = inst_72350;
                                                                                                          var inst_72314 = inst_72352;
                                                                                                          var inst_72315 = 0;
                                                                                                          var state_72420__$1 = function() {
                                                                                                            var statearr_72494 = state_72420;
                                                                                                            statearr_72494[8] = inst_72312;
                                                                                                            statearr_72494[9] = inst_72314;
                                                                                                            statearr_72494[10] = inst_72313;
                                                                                                            statearr_72494[12] = inst_72315;
                                                                                                            return statearr_72494;
                                                                                                          }();
                                                                                                          var statearr_72495_72598 = state_72420__$1;
                                                                                                          statearr_72495_72598[2] = null;
                                                                                                          statearr_72495_72598[1] = 43;
                                                                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                        } else {
                                                                                                          if (state_val_72421 === 68) {
                                                                                                            var inst_72413 = state_72420[2];
                                                                                                            var inst_72196 = inst_72413;
                                                                                                            var state_72420__$1 = function() {
                                                                                                              var statearr_72496 = state_72420;
                                                                                                              statearr_72496[13] = inst_72196;
                                                                                                              return statearr_72496;
                                                                                                            }();
                                                                                                            var statearr_72497_72599 = state_72420__$1;
                                                                                                            statearr_72497_72599[2] = null;
                                                                                                            statearr_72497_72599[1] = 2;
                                                                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                          } else {
                                                                                                            if (state_val_72421 === 11) {
                                                                                                              var state_72420__$1 = state_72420;
                                                                                                              var statearr_72498_72600 = state_72420__$1;
                                                                                                              statearr_72498_72600[2] = null;
                                                                                                              statearr_72498_72600[1] = 12;
                                                                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                            } else {
                                                                                                              if (state_val_72421 === 9) {
                                                                                                                var inst_72403 = state_72420[2];
                                                                                                                var state_72420__$1 = state_72420;
                                                                                                                var statearr_72499_72601 = state_72420__$1;
                                                                                                                statearr_72499_72601[2] = inst_72403;
                                                                                                                statearr_72499_72601[1] = 6;
                                                                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                              } else {
                                                                                                                if (state_val_72421 === 5) {
                                                                                                                  var state_72420__$1 = state_72420;
                                                                                                                  var statearr_72500_72602 = state_72420__$1;
                                                                                                                  statearr_72500_72602[2] = null;
                                                                                                                  statearr_72500_72602[1] = 6;
                                                                                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                                } else {
                                                                                                                  if (state_val_72421 === 14) {
                                                                                                                    var state_72420__$1 = state_72420;
                                                                                                                    var statearr_72504_72603 = state_72420__$1;
                                                                                                                    statearr_72504_72603[2] = null;
                                                                                                                    statearr_72504_72603[1] = 15;
                                                                                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                                  } else {
                                                                                                                    if (state_val_72421 === 45) {
                                                                                                                      var inst_72325 = state_72420[35];
                                                                                                                      var inst_72313 = state_72420[10];
                                                                                                                      var inst_72326 = state_72420[33];
                                                                                                                      var inst_72315 = state_72420[12];
                                                                                                                      var inst_72323 = cljs.core._nth.call(null, inst_72313, inst_72315);
                                                                                                                      var inst_72324 = cljs.core.nth.call(null, inst_72323, 0, null);
                                                                                                                      var inst_72325__$1 = cljs.core.nth.call(null, inst_72323, 1, null);
                                                                                                                      var inst_72326__$1 = cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "missing", "missing", 362507769), inst_72325__$1);
                                                                                                                      var state_72420__$1 = function() {
                                                                                                                        var statearr_72505 = state_72420;
                                                                                                                        statearr_72505[35] = inst_72325__$1;
                                                                                                                        statearr_72505[33] = inst_72326__$1;
                                                                                                                        statearr_72505[36] = inst_72324;
                                                                                                                        return statearr_72505;
                                                                                                                      }();
                                                                                                                      if (inst_72326__$1) {
                                                                                                                        var statearr_72506_72604 = state_72420__$1;
                                                                                                                        statearr_72506_72604[1] = 48;
                                                                                                                      } else {
                                                                                                                        var statearr_72507_72605 = state_72420__$1;
                                                                                                                        statearr_72507_72605[1] = 49;
                                                                                                                      }
                                                                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                                    } else {
                                                                                                                      if (state_val_72421 === 53) {
                                                                                                                        var inst_72312 = state_72420[8];
                                                                                                                        var inst_72314 = state_72420[9];
                                                                                                                        var inst_72313 = state_72420[10];
                                                                                                                        var inst_72315 = state_72420[12];
                                                                                                                        var inst_72342 = state_72420[2];
                                                                                                                        var inst_72343 = inst_72315 + 1;
                                                                                                                        var tmp72501 = inst_72312;
                                                                                                                        var tmp72502 = inst_72314;
                                                                                                                        var tmp72503 = inst_72313;
                                                                                                                        var inst_72312__$1 = tmp72501;
                                                                                                                        var inst_72313__$1 = tmp72503;
                                                                                                                        var inst_72314__$1 = tmp72502;
                                                                                                                        var inst_72315__$1 = inst_72343;
                                                                                                                        var state_72420__$1 = function() {
                                                                                                                          var statearr_72508 = state_72420;
                                                                                                                          statearr_72508[8] = inst_72312__$1;
                                                                                                                          statearr_72508[9] = inst_72314__$1;
                                                                                                                          statearr_72508[10] = inst_72313__$1;
                                                                                                                          statearr_72508[40] = inst_72342;
                                                                                                                          statearr_72508[12] = inst_72315__$1;
                                                                                                                          return statearr_72508;
                                                                                                                        }();
                                                                                                                        var statearr_72509_72606 = state_72420__$1;
                                                                                                                        statearr_72509_72606[2] = null;
                                                                                                                        statearr_72509_72606[1] = 43;
                                                                                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                                      } else {
                                                                                                                        if (state_val_72421 === 26) {
                                                                                                                          var state_72420__$1 = state_72420;
                                                                                                                          var statearr_72510_72607 = state_72420__$1;
                                                                                                                          statearr_72510_72607[2] = false;
                                                                                                                          statearr_72510_72607[1] = 27;
                                                                                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                                        } else {
                                                                                                                          if (state_val_72421 === 16) {
                                                                                                                            var inst_72196 = state_72420[13];
                                                                                                                            var inst_72218 = (new cljs.core.Keyword(null, "data", "data", -232669377)).cljs$core$IFn$_invoke$arity$1(inst_72196);
                                                                                                                            var inst_72219 = inst_72218.locations;
                                                                                                                            var inst_72220 = cljs.core.nth.call(null, inst_72219, 0);
                                                                                                                            var inst_72221 = inst_72220 == null;
                                                                                                                            var inst_72222 = cljs.core.not.call(null, inst_72221);
                                                                                                                            var state_72420__$1 = state_72420;
                                                                                                                            if (inst_72222) {
                                                                                                                              var statearr_72511_72608 = state_72420__$1;
                                                                                                                              statearr_72511_72608[1] = 19;
                                                                                                                            } else {
                                                                                                                              var statearr_72512_72609 = state_72420__$1;
                                                                                                                              statearr_72512_72609[1] = 20;
                                                                                                                            }
                                                                                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                                          } else {
                                                                                                                            if (state_val_72421 === 38) {
                                                                                                                              var state_72420__$1 = state_72420;
                                                                                                                              var statearr_72513_72610 = state_72420__$1;
                                                                                                                              statearr_72513_72610[2] = 365;
                                                                                                                              statearr_72513_72610[1] = 39;
                                                                                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                                            } else {
                                                                                                                              if (state_val_72421 === 30) {
                                                                                                                                var inst_72245 = state_72420[18];
                                                                                                                                var inst_72251 = state_72420[24];
                                                                                                                                var inst_72245__$1 = state_72420[2];
                                                                                                                                var inst_72246 = cljs.core.get.call(null, inst_72245__$1, new cljs.core.Keyword(null, "data", "data", -232669377));
                                                                                                                                var inst_72247 = cljs.core.get.call(null, inst_72245__$1, new cljs.core.Keyword(null, "errors", "errors", -908790718));
                                                                                                                                var inst_72248 = cljs.core.get.call(null, inst_72245__$1, new cljs.core.Keyword(null, "attribute", "attribute", -2074029119));
                                                                                                                                var inst_72249 = cljs.core.get.call(null, inst_72245__$1, new cljs.core.Keyword(null, "offset", "offset", 296498311));
                                                                                                                                var inst_72250 = cljs.core.get.call(null, inst_72245__$1, new cljs.core.Keyword(null, "context", "context", -830191113));
                                                                                                                                var inst_72251__$1 = cljs.core.get.call(null, inst_72245__$1, new cljs.core.Keyword(null, "sorting", "sorting", 622249690));
                                                                                                                                var inst_72252 = cljs.core.get.call(null, inst_72245__$1, new cljs.core.Keyword(null, "year", "year", 335913393));
                                                                                                                                var state_72420__$1 = function() {
                                                                                                                                  var statearr_72514 = state_72420;
                                                                                                                                  statearr_72514[18] = inst_72245__$1;
                                                                                                                                  statearr_72514[19] = inst_72247;
                                                                                                                                  statearr_72514[21] = inst_72252;
                                                                                                                                  statearr_72514[23] = inst_72246;
                                                                                                                                  statearr_72514[24] = inst_72251__$1;
                                                                                                                                  statearr_72514[27] = inst_72248;
                                                                                                                                  statearr_72514[28] = inst_72250;
                                                                                                                                  statearr_72514[29] = inst_72249;
                                                                                                                                  return statearr_72514;
                                                                                                                                }();
                                                                                                                                if (cljs.core.truth_(inst_72251__$1)) {
                                                                                                                                  var statearr_72515_72611 = state_72420__$1;
                                                                                                                                  statearr_72515_72611[1] = 31;
                                                                                                                                } else {
                                                                                                                                  var statearr_72516_72612 = state_72420__$1;
                                                                                                                                  statearr_72516_72612[1] = 32;
                                                                                                                                }
                                                                                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                                              } else {
                                                                                                                                if (state_val_72421 === 10) {
                                                                                                                                  var inst_72196 = state_72420[13];
                                                                                                                                  var inst_72208 = (new cljs.core.Keyword(null, "data", "data", -232669377)).cljs$core$IFn$_invoke$arity$1(inst_72196);
                                                                                                                                  var inst_72209 = inst_72208.locations;
                                                                                                                                  var inst_72210 = inst_72209 == null;
                                                                                                                                  var inst_72211 = cljs.core.not.call(null, inst_72210);
                                                                                                                                  var state_72420__$1 = state_72420;
                                                                                                                                  if (inst_72211) {
                                                                                                                                    var statearr_72517_72613 = state_72420__$1;
                                                                                                                                    statearr_72517_72613[1] = 13;
                                                                                                                                  } else {
                                                                                                                                    var statearr_72518_72614 = state_72420__$1;
                                                                                                                                    statearr_72518_72614[1] = 14;
                                                                                                                                  }
                                                                                                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                                                } else {
                                                                                                                                  if (state_val_72421 === 18) {
                                                                                                                                    var inst_72394 = state_72420[2];
                                                                                                                                    var state_72420__$1 = state_72420;
                                                                                                                                    var statearr_72519_72615 = state_72420__$1;
                                                                                                                                    statearr_72519_72615[2] = inst_72394;
                                                                                                                                    statearr_72519_72615[1] = 15;
                                                                                                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                                                  } else {
                                                                                                                                    if (state_val_72421 === 52) {
                                                                                                                                      var state_72420__$1 = state_72420;
                                                                                                                                      var statearr_72520_72616 = state_72420__$1;
                                                                                                                                      statearr_72520_72616[2] = null;
                                                                                                                                      statearr_72520_72616[1] = 53;
                                                                                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                                                    } else {
                                                                                                                                      if (state_val_72421 === 67) {
                                                                                                                                        var inst_72411 = state_72420[2];
                                                                                                                                        var state_72420__$1 = function() {
                                                                                                                                          var statearr_72521 = state_72420;
                                                                                                                                          statearr_72521[41] = inst_72411;
                                                                                                                                          return statearr_72521;
                                                                                                                                        }();
                                                                                                                                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_72420__$1, 68, weather_canvas.weather.c);
                                                                                                                                      } else {
                                                                                                                                        if (state_val_72421 === 42) {
                                                                                                                                          var inst_72257 = state_72420[17];
                                                                                                                                          var inst_72245 = state_72420[18];
                                                                                                                                          var inst_72247 = state_72420[19];
                                                                                                                                          var inst_72252 = state_72420[21];
                                                                                                                                          var inst_72262 = state_72420[22];
                                                                                                                                          var inst_72246 = state_72420[23];
                                                                                                                                          var inst_72251 = state_72420[24];
                                                                                                                                          var inst_72265 = state_72420[25];
                                                                                                                                          var inst_72248 = state_72420[27];
                                                                                                                                          var inst_72284 = state_72420[30];
                                                                                                                                          var inst_72196 = state_72420[13];
                                                                                                                                          var inst_72250 = state_72420[28];
                                                                                                                                          var inst_72249 = state_72420[29];
                                                                                                                                          var inst_72283 = state_72420[31];
                                                                                                                                          var inst_72299 = state_72420[2];
                                                                                                                                          var inst_72300 = function() {
                                                                                                                                            var sorting = inst_72251;
                                                                                                                                            var parameters = inst_72196;
                                                                                                                                            var preprocess_data = inst_72262;
                                                                                                                                            var map__72224 = inst_72245;
                                                                                                                                            var data = inst_72246;
                                                                                                                                            var attribute = inst_72248;
                                                                                                                                            var errors = inst_72247;
                                                                                                                                            var first_date = inst_72265;
                                                                                                                                            var offset = inst_72249;
                                                                                                                                            var data_seq = inst_72283;
                                                                                                                                            var year = inst_72252;
                                                                                                                                            var preprocess = inst_72257;
                                                                                                                                            var jan_and_feb = inst_72284;
                                                                                                                                            var uniform_data_seq = inst_72299;
                                                                                                                                            var context = inst_72250;
                                                                                                                                            return function(p1__72194_SHARP_) {
                                                                                                                                              return p1__72194_SHARP_.value;
                                                                                                                                            };
                                                                                                                                          }();
                                                                                                                                          var inst_72301 = cljs.core.map.call(null, inst_72300, inst_72299);
                                                                                                                                          var inst_72302 = inst_72257.call(null, inst_72301);
                                                                                                                                          var inst_72303 = function() {
                                                                                                                                            var sorting = inst_72251;
                                                                                                                                            var parameters = inst_72196;
                                                                                                                                            var preprocess_data = inst_72262;
                                                                                                                                            var map__72224 = inst_72245;
                                                                                                                                            var data = inst_72246;
                                                                                                                                            var attribute = inst_72248;
                                                                                                                                            var errors = inst_72247;
                                                                                                                                            var first_date = inst_72265;
                                                                                                                                            var offset = inst_72249;
                                                                                                                                            var data_seq = inst_72283;
                                                                                                                                            var year = inst_72252;
                                                                                                                                            var uniform_days = inst_72302;
                                                                                                                                            var preprocess = inst_72257;
                                                                                                                                            var jan_and_feb = inst_72284;
                                                                                                                                            var uniform_data_seq = inst_72299;
                                                                                                                                            var context = inst_72250;
                                                                                                                                            return function(p1__72195_SHARP_) {
                                                                                                                                              return cljs.core.assoc.call(null, p1__72195_SHARP_, offset, cljs.core.apply.call(null, cljs.core.vector, preprocess_data.call(null, function() {
                                                                                                                                                var iter__4529__auto__ = function weather_canvas$weather$listen_results_async_$_iter__72522(s__72523) {
                                                                                                                                                  return new cljs.core.LazySeq(null, function() {
                                                                                                                                                    var s__72523__$1 = s__72523;
                                                                                                                                                    while (true) {
                                                                                                                                                      var temp__5735__auto__ = cljs.core.seq.call(null, s__72523__$1);
                                                                                                                                                      if (temp__5735__auto__) {
                                                                                                                                                        var s__72523__$2 = temp__5735__auto__;
                                                                                                                                                        if (cljs.core.chunked_seq_QMARK_.call(null, s__72523__$2)) {
                                                                                                                                                          var c__4527__auto__ = cljs.core.chunk_first.call(null, s__72523__$2);
                                                                                                                                                          var size__4528__auto__ = cljs.core.count.call(null, c__4527__auto__);
                                                                                                                                                          var b__72525 = cljs.core.chunk_buffer.call(null, size__4528__auto__);
                                                                                                                                                          if (function() {
                                                                                                                                                            var i__72524 = 0;
                                                                                                                                                            while (true) {
                                                                                                                                                              if (i__72524 < size__4528__auto__) {
                                                                                                                                                                var el = cljs.core._nth.call(null, c__4527__auto__, i__72524);
                                                                                                                                                                cljs.core.chunk_append.call(null, b__72525, function() {
                                                                                                                                                                  var date = new Date(el.time);
                                                                                                                                                                  var value = cljs.core.truth_(isNaN(el.value)) ? new cljs.core.Keyword(null, "missing", "missing", 362507769) : el.value;
                                                                                                                                                                  return new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(null, "day", "day", -274800446), date.getDate(), new cljs.core.Keyword(null, "weekday", "weekday", -1413046442), weather_canvas.weather.weekday.call(null, date.getDay()), new cljs.core.Keyword(null, "month", "month", -1960248533), 1 + date.getMonth(), new cljs.core.Keyword(null, 
                                                                                                                                                                  "year", "year", 335913393), date.getFullYear(), new cljs.core.Keyword(null, "unit", "unit", 375175175), cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "missing", "missing", 362507769), value) ? "" : weather_canvas.weather.scale.call(null, attribute), new cljs.core.Keyword(null, "description", "description", -1428560544), weather_canvas.weather.description.call(null, 
                                                                                                                                                                  attribute), new cljs.core.Keyword(null, "value", "value", 305978217), cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "missing", "missing", 362507769), value) ? "mittaus puuttuu" : value], null);
                                                                                                                                                                }());
                                                                                                                                                                var G__72617 = i__72524 + 1;
                                                                                                                                                                i__72524 = G__72617;
                                                                                                                                                                continue;
                                                                                                                                                              } else {
                                                                                                                                                                return true;
                                                                                                                                                              }
                                                                                                                                                              break;
                                                                                                                                                            }
                                                                                                                                                          }()) {
                                                                                                                                                            return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__72525), weather_canvas$weather$listen_results_async_$_iter__72522.call(null, cljs.core.chunk_rest.call(null, s__72523__$2)));
                                                                                                                                                          } else {
                                                                                                                                                            return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__72525), null);
                                                                                                                                                          }
                                                                                                                                                        } else {
                                                                                                                                                          var el = cljs.core.first.call(null, s__72523__$2);
                                                                                                                                                          return cljs.core.cons.call(null, function() {
                                                                                                                                                            var date = new Date(el.time);
                                                                                                                                                            var value = cljs.core.truth_(isNaN(el.value)) ? new cljs.core.Keyword(null, "missing", "missing", 362507769) : el.value;
                                                                                                                                                            return new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(null, "day", "day", -274800446), date.getDate(), new cljs.core.Keyword(null, "weekday", "weekday", -1413046442), weather_canvas.weather.weekday.call(null, date.getDay()), new cljs.core.Keyword(null, "month", "month", -1960248533), 1 + date.getMonth(), new cljs.core.Keyword(null, 
                                                                                                                                                            "year", "year", 335913393), date.getFullYear(), new cljs.core.Keyword(null, "unit", "unit", 375175175), cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "missing", "missing", 362507769), value) ? "" : weather_canvas.weather.scale.call(null, attribute), new cljs.core.Keyword(null, "description", "description", -1428560544), weather_canvas.weather.description.call(null, 
                                                                                                                                                            attribute), new cljs.core.Keyword(null, "value", "value", 305978217), cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "missing", "missing", 362507769), value) ? "mittaus puuttuu" : value], null);
                                                                                                                                                          }(), weather_canvas$weather$listen_results_async_$_iter__72522.call(null, cljs.core.rest.call(null, s__72523__$2)));
                                                                                                                                                        }
                                                                                                                                                      } else {
                                                                                                                                                        return null;
                                                                                                                                                      }
                                                                                                                                                      break;
                                                                                                                                                    }
                                                                                                                                                  }, null, null);
                                                                                                                                                };
                                                                                                                                                return iter__4529__auto__.call(null, uniform_data_seq);
                                                                                                                                              }())));
                                                                                                                                            };
                                                                                                                                          }();
                                                                                                                                          var inst_72304 = cljs.core.swap_BANG_.call(null, weather_canvas.weather.year_data, inst_72303);
                                                                                                                                          var inst_72309 = cljs.core.range.call(null);
                                                                                                                                          var inst_72310 = cljs.core.map.call(null, cljs.core.list, inst_72309, inst_72302);
                                                                                                                                          var inst_72311 = cljs.core.seq.call(null, inst_72310);
                                                                                                                                          var inst_72312 = inst_72311;
                                                                                                                                          var inst_72313 = null;
                                                                                                                                          var inst_72314 = 0;
                                                                                                                                          var inst_72315 = 0;
                                                                                                                                          var state_72420__$1 = function() {
                                                                                                                                            var statearr_72526 = state_72420;
                                                                                                                                            statearr_72526[42] = inst_72304;
                                                                                                                                            statearr_72526[8] = inst_72312;
                                                                                                                                            statearr_72526[9] = inst_72314;
                                                                                                                                            statearr_72526[10] = inst_72313;
                                                                                                                                            statearr_72526[12] = inst_72315;
                                                                                                                                            return statearr_72526;
                                                                                                                                          }();
                                                                                                                                          var statearr_72527_72618 = state_72420__$1;
                                                                                                                                          statearr_72527_72618[2] = null;
                                                                                                                                          statearr_72527_72618[1] = 43;
                                                                                                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                                                        } else {
                                                                                                                                          if (state_val_72421 === 37) {
                                                                                                                                            var state_72420__$1 = state_72420;
                                                                                                                                            var statearr_72528_72619 = state_72420__$1;
                                                                                                                                            statearr_72528_72619[2] = 366;
                                                                                                                                            statearr_72528_72619[1] = 39;
                                                                                                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                                                          } else {
                                                                                                                                            if (state_val_72421 === 63) {
                                                                                                                                              var inst_72359 = state_72420[16];
                                                                                                                                              var inst_72248 = state_72420[27];
                                                                                                                                              var inst_72250 = state_72420[28];
                                                                                                                                              var inst_72249 = state_72420[29];
                                                                                                                                              var inst_72360 = state_72420[15];
                                                                                                                                              var inst_72369 = weather_canvas.weather.grad.call(null, inst_72248);
                                                                                                                                              var inst_72370 = weather_canvas.weather.temperature_to_color.call(null, inst_72360, inst_72369);
                                                                                                                                              var inst_72371 = inst_72250.fillStyle = inst_72370;
                                                                                                                                              var inst_72372 = weather_canvas.canvas_buffer.size_x * inst_72359;
                                                                                                                                              var inst_72373 = weather_canvas.canvas_buffer.size_y * inst_72249;
                                                                                                                                              var inst_72374 = inst_72250.fillRect(inst_72372, inst_72373, weather_canvas.canvas_buffer.size_x, weather_canvas.canvas_buffer.size_y);
                                                                                                                                              var state_72420__$1 = function() {
                                                                                                                                                var statearr_72529 = state_72420;
                                                                                                                                                statearr_72529[43] = inst_72371;
                                                                                                                                                return statearr_72529;
                                                                                                                                              }();
                                                                                                                                              var statearr_72530_72620 = state_72420__$1;
                                                                                                                                              statearr_72530_72620[2] = inst_72374;
                                                                                                                                              statearr_72530_72620[1] = 65;
                                                                                                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                                                            } else {
                                                                                                                                              if (state_val_72421 === 8) {
                                                                                                                                                var state_72420__$1 = state_72420;
                                                                                                                                                var statearr_72531_72621 = state_72420__$1;
                                                                                                                                                statearr_72531_72621[2] = null;
                                                                                                                                                statearr_72531_72621[1] = 9;
                                                                                                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                                                              } else {
                                                                                                                                                if (state_val_72421 === 49) {
                                                                                                                                                  var inst_72325 = state_72420[35];
                                                                                                                                                  var inst_72329 = isNaN(inst_72325);
                                                                                                                                                  var state_72420__$1 = state_72420;
                                                                                                                                                  var statearr_72532_72622 = state_72420__$1;
                                                                                                                                                  statearr_72532_72622[2] = inst_72329;
                                                                                                                                                  statearr_72532_72622[1] = 50;
                                                                                                                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                                                                } else {
                                                                                                                                                  return null;
                                                                                                                                                }
                                                                                                                                              }
                                                                                                                                            }
                                                                                                                                          }
                                                                                                                                        }
                                                                                                                                      }
                                                                                                                                    }
                                                                                                                                  }
                                                                                                                                }
                                                                                                                              }
                                                                                                                            }
                                                                                                                          }
                                                                                                                        }
                                                                                                                      }
                                                                                                                    }
                                                                                                                  }
                                                                                                                }
                                                                                                              }
                                                                                                            }
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      return function() {
        var weather_canvas$weather$listen_results_async_$_state_machine__4606__auto__ = null;
        var weather_canvas$weather$listen_results_async_$_state_machine__4606__auto____0 = function() {
          var statearr_72533 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
          statearr_72533[0] = weather_canvas$weather$listen_results_async_$_state_machine__4606__auto__;
          statearr_72533[1] = 1;
          return statearr_72533;
        };
        var weather_canvas$weather$listen_results_async_$_state_machine__4606__auto____1 = function(state_72420) {
          while (true) {
            var ret_value__4607__auto__ = function() {
              try {
                while (true) {
                  var result__4608__auto__ = switch__4605__auto__.call(null, state_72420);
                  if (cljs.core.keyword_identical_QMARK_.call(null, result__4608__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    continue;
                  } else {
                    return result__4608__auto__;
                  }
                  break;
                }
              } catch (e72534) {
                var ex__4609__auto__ = e72534;
                var statearr_72535_72623 = state_72420;
                statearr_72535_72623[2] = ex__4609__auto__;
                if (cljs.core.seq.call(null, state_72420[4])) {
                  var statearr_72536_72624 = state_72420;
                  statearr_72536_72624[1] = cljs.core.first.call(null, state_72420[4]);
                } else {
                  throw ex__4609__auto__;
                }
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              }
            }();
            if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__4607__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
              var G__72625 = state_72420;
              state_72420 = G__72625;
              continue;
            } else {
              return ret_value__4607__auto__;
            }
            break;
          }
        };
        weather_canvas$weather$listen_results_async_$_state_machine__4606__auto__ = function(state_72420) {
          switch(arguments.length) {
            case 0:
              return weather_canvas$weather$listen_results_async_$_state_machine__4606__auto____0.call(this);
            case 1:
              return weather_canvas$weather$listen_results_async_$_state_machine__4606__auto____1.call(this, state_72420);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        weather_canvas$weather$listen_results_async_$_state_machine__4606__auto__.cljs$core$IFn$_invoke$arity$0 = weather_canvas$weather$listen_results_async_$_state_machine__4606__auto____0;
        weather_canvas$weather$listen_results_async_$_state_machine__4606__auto__.cljs$core$IFn$_invoke$arity$1 = weather_canvas$weather$listen_results_async_$_state_machine__4606__auto____1;
        return weather_canvas$weather$listen_results_async_$_state_machine__4606__auto__;
      }();
    }();
    var state__4638__auto__ = function() {
      var statearr_72537 = f__4637__auto__.call(null);
      statearr_72537[6] = c__4636__auto__;
      return statearr_72537;
    }();
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__4638__auto__);
  });
  return c__4636__auto__;
};
weather_canvas.weather.listen_results_async_fake = function weather_canvas$weather$listen_results_async_fake() {
  var c__4636__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function() {
    var f__4637__auto__ = function() {
      var switch__4605__auto__ = function(state_72677) {
        var state_val_72678 = state_72677[1];
        if (state_val_72678 === 7) {
          var inst_72626 = state_72677[7];
          var inst_72636 = inst_72626.cljs$lang$protocol_mask$partition0$;
          var inst_72637 = inst_72636 & 64;
          var inst_72638 = inst_72626.cljs$core$ISeq$;
          var inst_72639 = cljs.core.PROTOCOL_SENTINEL === inst_72638;
          var inst_72640 = inst_72637 || inst_72639;
          var state_72677__$1 = state_72677;
          if (cljs.core.truth_(inst_72640)) {
            var statearr_72679_72713 = state_72677__$1;
            statearr_72679_72713[1] = 10;
          } else {
            var statearr_72680_72714 = state_72677__$1;
            statearr_72680_72714[1] = 11;
          }
          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
        } else {
          if (state_val_72678 === 20) {
            var inst_72670 = state_72677[2];
            var state_72677__$1 = function() {
              var statearr_72681 = state_72677;
              statearr_72681[8] = inst_72670;
              return statearr_72681;
            }();
            return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_72677__$1, 21, weather_canvas.weather.c);
          } else {
            if (state_val_72678 === 1) {
              var inst_72626 = null;
              var state_72677__$1 = function() {
                var statearr_72682 = state_72677;
                statearr_72682[7] = inst_72626;
                return statearr_72682;
              }();
              var statearr_72683_72715 = state_72677__$1;
              statearr_72683_72715[2] = null;
              statearr_72683_72715[1] = 2;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_72678 === 4) {
                var inst_72626 = state_72677[7];
                var inst_72633 = inst_72626 == null;
                var inst_72634 = cljs.core.not.call(null, inst_72633);
                var state_72677__$1 = state_72677;
                if (inst_72634) {
                  var statearr_72684_72716 = state_72677__$1;
                  statearr_72684_72716[1] = 7;
                } else {
                  var statearr_72685_72717 = state_72677__$1;
                  statearr_72685_72717[1] = 8;
                }
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_72678 === 15) {
                  var inst_72652 = state_72677[2];
                  var inst_72653 = cljs.core.get.call(null, inst_72652, new cljs.core.Keyword(null, "data", "data", -232669377));
                  var inst_72654 = cljs.core.get.call(null, inst_72652, new cljs.core.Keyword(null, "errors", "errors", -908790718));
                  var inst_72655 = cljs.core.get.call(null, inst_72652, new cljs.core.Keyword(null, "attribute", "attribute", -2074029119));
                  var inst_72656 = cljs.core.get.call(null, inst_72652, new cljs.core.Keyword(null, "offset", "offset", 296498311));
                  var inst_72657 = cljs.core.get.call(null, inst_72652, new cljs.core.Keyword(null, "context", "context", -830191113));
                  var inst_72658 = cljs.core.get.call(null, inst_72652, new cljs.core.Keyword(null, "sorting", "sorting", 622249690));
                  var state_72677__$1 = function() {
                    var statearr_72686 = state_72677;
                    statearr_72686[9] = inst_72653;
                    statearr_72686[10] = inst_72654;
                    statearr_72686[11] = inst_72655;
                    statearr_72686[12] = inst_72656;
                    statearr_72686[13] = inst_72657;
                    return statearr_72686;
                  }();
                  if (cljs.core.truth_(inst_72658)) {
                    var statearr_72687_72718 = state_72677__$1;
                    statearr_72687_72718[1] = 16;
                  } else {
                    var statearr_72688_72719 = state_72677__$1;
                    statearr_72688_72719[1] = 17;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_72678 === 21) {
                    var inst_72672 = state_72677[2];
                    var inst_72626 = inst_72672;
                    var state_72677__$1 = function() {
                      var statearr_72689 = state_72677;
                      statearr_72689[7] = inst_72626;
                      return statearr_72689;
                    }();
                    var statearr_72690_72720 = state_72677__$1;
                    statearr_72690_72720[2] = null;
                    statearr_72690_72720[1] = 2;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_72678 === 13) {
                      var inst_72626 = state_72677[7];
                      var inst_72649 = cljs.core.apply.call(null, cljs.core.hash_map, inst_72626);
                      var state_72677__$1 = state_72677;
                      var statearr_72691_72721 = state_72677__$1;
                      statearr_72691_72721[2] = inst_72649;
                      statearr_72691_72721[1] = 15;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_72678 === 6) {
                        var inst_72665 = state_72677[2];
                        var inst_72666 = cljs.core.async.timeout.call(null, 20);
                        var state_72677__$1 = function() {
                          var statearr_72692 = state_72677;
                          statearr_72692[14] = inst_72665;
                          return statearr_72692;
                        }();
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_72677__$1, 19, inst_72666);
                      } else {
                        if (state_val_72678 === 17) {
                          var state_72677__$1 = state_72677;
                          var statearr_72693_72722 = state_72677__$1;
                          statearr_72693_72722[2] = cljs.core.identity;
                          statearr_72693_72722[1] = 18;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_72678 === 3) {
                            var inst_72675 = state_72677[2];
                            var state_72677__$1 = state_72677;
                            return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_72677__$1, inst_72675);
                          } else {
                            if (state_val_72678 === 12) {
                              var inst_72644 = state_72677[2];
                              var state_72677__$1 = state_72677;
                              var statearr_72694_72723 = state_72677__$1;
                              statearr_72694_72723[2] = inst_72644;
                              statearr_72694_72723[1] = 9;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_72678 === 2) {
                                var inst_72626 = state_72677[7];
                                var inst_72628 = inst_72626 == null;
                                var inst_72629 = cljs.core.not.call(null, inst_72628);
                                var state_72677__$1 = state_72677;
                                if (inst_72629) {
                                  var statearr_72695_72724 = state_72677__$1;
                                  statearr_72695_72724[1] = 4;
                                } else {
                                  var statearr_72696_72725 = state_72677__$1;
                                  statearr_72696_72725[1] = 5;
                                }
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_72678 === 19) {
                                  var inst_72668 = state_72677[2];
                                  var state_72677__$1 = function() {
                                    var statearr_72697 = state_72677;
                                    statearr_72697[15] = inst_72668;
                                    return statearr_72697;
                                  }();
                                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_72677__$1, 20, weather_canvas.weather.c_msg, "done");
                                } else {
                                  if (state_val_72678 === 11) {
                                    var state_72677__$1 = state_72677;
                                    var statearr_72698_72726 = state_72677__$1;
                                    statearr_72698_72726[2] = false;
                                    statearr_72698_72726[1] = 12;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_72678 === 9) {
                                      var inst_72647 = state_72677[2];
                                      var state_72677__$1 = state_72677;
                                      if (cljs.core.truth_(inst_72647)) {
                                        var statearr_72699_72727 = state_72677__$1;
                                        statearr_72699_72727[1] = 13;
                                      } else {
                                        var statearr_72700_72728 = state_72677__$1;
                                        statearr_72700_72728[1] = 14;
                                      }
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_72678 === 5) {
                                        var state_72677__$1 = state_72677;
                                        var statearr_72701_72729 = state_72677__$1;
                                        statearr_72701_72729[2] = null;
                                        statearr_72701_72729[1] = 6;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_72678 === 14) {
                                          var inst_72626 = state_72677[7];
                                          var state_72677__$1 = state_72677;
                                          var statearr_72702_72730 = state_72677__$1;
                                          statearr_72702_72730[2] = inst_72626;
                                          statearr_72702_72730[1] = 15;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_72678 === 16) {
                                            var state_72677__$1 = state_72677;
                                            var statearr_72703_72731 = state_72677__$1;
                                            statearr_72703_72731[2] = cljs.core.sort;
                                            statearr_72703_72731[1] = 18;
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_72678 === 10) {
                                              var state_72677__$1 = state_72677;
                                              var statearr_72704_72732 = state_72677__$1;
                                              statearr_72704_72732[2] = true;
                                              statearr_72704_72732[1] = 12;
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_72678 === 18) {
                                                var inst_72662 = state_72677[2];
                                                var state_72677__$1 = function() {
                                                  var statearr_72705 = state_72677;
                                                  statearr_72705[16] = inst_72662;
                                                  return statearr_72705;
                                                }();
                                                var statearr_72706_72733 = state_72677__$1;
                                                statearr_72706_72733[2] = null;
                                                statearr_72706_72733[1] = 6;
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_72678 === 8) {
                                                  var state_72677__$1 = state_72677;
                                                  var statearr_72707_72734 = state_72677__$1;
                                                  statearr_72707_72734[2] = false;
                                                  statearr_72707_72734[1] = 9;
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  return null;
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      return function() {
        var weather_canvas$weather$listen_results_async_fake_$_state_machine__4606__auto__ = null;
        var weather_canvas$weather$listen_results_async_fake_$_state_machine__4606__auto____0 = function() {
          var statearr_72708 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
          statearr_72708[0] = weather_canvas$weather$listen_results_async_fake_$_state_machine__4606__auto__;
          statearr_72708[1] = 1;
          return statearr_72708;
        };
        var weather_canvas$weather$listen_results_async_fake_$_state_machine__4606__auto____1 = function(state_72677) {
          while (true) {
            var ret_value__4607__auto__ = function() {
              try {
                while (true) {
                  var result__4608__auto__ = switch__4605__auto__.call(null, state_72677);
                  if (cljs.core.keyword_identical_QMARK_.call(null, result__4608__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    continue;
                  } else {
                    return result__4608__auto__;
                  }
                  break;
                }
              } catch (e72709) {
                var ex__4609__auto__ = e72709;
                var statearr_72710_72735 = state_72677;
                statearr_72710_72735[2] = ex__4609__auto__;
                if (cljs.core.seq.call(null, state_72677[4])) {
                  var statearr_72711_72736 = state_72677;
                  statearr_72711_72736[1] = cljs.core.first.call(null, state_72677[4]);
                } else {
                  throw ex__4609__auto__;
                }
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              }
            }();
            if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__4607__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
              var G__72737 = state_72677;
              state_72677 = G__72737;
              continue;
            } else {
              return ret_value__4607__auto__;
            }
            break;
          }
        };
        weather_canvas$weather$listen_results_async_fake_$_state_machine__4606__auto__ = function(state_72677) {
          switch(arguments.length) {
            case 0:
              return weather_canvas$weather$listen_results_async_fake_$_state_machine__4606__auto____0.call(this);
            case 1:
              return weather_canvas$weather$listen_results_async_fake_$_state_machine__4606__auto____1.call(this, state_72677);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        weather_canvas$weather$listen_results_async_fake_$_state_machine__4606__auto__.cljs$core$IFn$_invoke$arity$0 = weather_canvas$weather$listen_results_async_fake_$_state_machine__4606__auto____0;
        weather_canvas$weather$listen_results_async_fake_$_state_machine__4606__auto__.cljs$core$IFn$_invoke$arity$1 = weather_canvas$weather$listen_results_async_fake_$_state_machine__4606__auto____1;
        return weather_canvas$weather$listen_results_async_fake_$_state_machine__4606__auto__;
      }();
    }();
    var state__4638__auto__ = function() {
      var statearr_72712 = f__4637__auto__.call(null);
      statearr_72712[6] = c__4636__auto__;
      return statearr_72712;
    }();
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__4638__auto__);
  });
  return c__4636__auto__;
};
weather_canvas.weather.in_range = function weather_canvas$weather$in_range(point, segment) {
  var range = (new cljs.core.Keyword(null, "range", "range", 1639692286)).cljs$core$IFn$_invoke$arity$1(segment);
  return point >= cljs.core.first.call(null, range) && point <= cljs.core.second.call(null, range);
};
weather_canvas.weather.color_string = function weather_canvas$weather$color_string(rgb_seq) {
  return cljs.core.apply.call(null, cljs.core.str, cljs.core.concat.call(null, "#", cljs.core.map.call(null, function(p1__72738_SHARP_) {
    return weather_canvas.weather.pad_with.call(null, (p1__72738_SHARP_ | 0).toString(16), "0", 2);
  }, rgb_seq)));
};
weather_canvas.weather.memo_color_string = cljs.core.memoize.call(null, weather_canvas.weather.color_string);
weather_canvas.weather.pad_with = function weather_canvas$weather$pad_with(string, char$, width) {
  return cljs.core.apply.call(null, cljs.core.str, cljs.core.reverse.call(null, cljs.core.take.call(null, width, cljs.core.concat.call(null, cljs.core.reverse.call(null, string), cljs.core.repeat.call(null, char$)))));
};
weather_canvas.weather.temperature_to_color = function weather_canvas$weather$temperature_to_color(point, gradient) {
  var segment = cljs.core.first.call(null, cljs.core.filter.call(null, cljs.core.partial.call(null, weather_canvas.weather.in_range, point), (new cljs.core.Keyword(null, "colors", "colors", 1157174732)).cljs$core$IFn$_invoke$arity$1(gradient)));
  var color_from = (new cljs.core.Keyword(null, "from", "from", 1815293044)).cljs$core$IFn$_invoke$arity$1(segment);
  var color_to = (new cljs.core.Keyword(null, "to", "to", 192099007)).cljs$core$IFn$_invoke$arity$1(segment);
  var range = (new cljs.core.Keyword(null, "range", "range", 1639692286)).cljs$core$IFn$_invoke$arity$1(segment);
  var range_start = cljs.core.first.call(null, range);
  var range_end = cljs.core.second.call(null, range);
  var point_in_range = (point - range_start) / (range_end - range_start);
  return weather_canvas.weather.memo_color_string.call(null, cljs.core.map.call(null, cljs.core._PLUS_, color_from, cljs.core.map.call(null, function(p1__72739_SHARP_) {
    return point_in_range * p1__72739_SHARP_;
  }, cljs.core.map.call(null, cljs.core._, color_to, color_from))));
};
weather_canvas.weather.today_minus = function weather_canvas$weather$today_minus(days) {
  var d = new Date;
  d.setDate(d.getDate() - days);
  return d.getTime();
};
weather_canvas.weather.make_date = function weather_canvas$weather$make_date(year, month, day) {
  var date = new Date([cljs.core.str.cljs$core$IFn$_invoke$arity$1(year), "-", cljs.core.str.cljs$core$IFn$_invoke$arity$1(month), "-", cljs.core.str.cljs$core$IFn$_invoke$arity$1(day)].join(""));
  return new Date(date.valueOf());
};
weather_canvas.weather.draw_async = function weather_canvas$weather$draw_async(canvas, from, to, location_id, quantity, sorting) {
  cljs.core.reset_BANG_.call(null, weather_canvas.weather.years_to_fetch, 1 + (to - from));
  weather_canvas.canvas_buffer.init_canvas.call(null, canvas, cljs.core.deref.call(null, weather_canvas.weather.years_to_fetch));
  cljs.core.reset_BANG_.call(null, weather_canvas.weather.year_data, cljs.core.apply.call(null, cljs.core.vector, cljs.core.repeat.call(null, cljs.core.deref.call(null, weather_canvas.weather.years_to_fetch), cljs.core.PersistentVector.EMPTY)));
  weather_canvas.weather.listen_results_async.call(null);
  if (cljs.core.truth_(location_id)) {
    var context = canvas.getContext("2d");
    dommy.core.add_class_BANG_.call(null, document.getElementById("status-report"), "processing");
    window.debugData = Array();
    var seq__72740 = cljs.core.seq.call(null, cljs.core.range.call(null, from, 1 + to));
    var chunk__72741 = null;
    var count__72742 = 0;
    var i__72743 = 0;
    while (true) {
      if (i__72743 < count__72742) {
        var year = cljs.core._nth.call(null, chunk__72741, i__72743);
        var connection_72828 = new fi.fmi.metoclient.metolib.WfsConnection;
        var stored_query_id_72829 = "fmi::observations::weather::daily::multipointcoverage";
        var url_72830 = "https://opendata.fmi.fi/wfs";
        var parameters_72831 = function() {
          var obj72787 = {"fmisid":location_id, "requestParameter":"rrday,tday,snow,tmin,tmax", "begin":weather_canvas.weather.make_date.call(null, cljs.core.str.cljs$core$IFn$_invoke$arity$1(year), "01", "01"), "end":weather_canvas.weather.make_date.call(null, cljs.core.str.cljs$core$IFn$_invoke$arity$1(year), "12", "31"), "callback":function(seq__72740, chunk__72741, count__72742, i__72743, connection_72828, stored_query_id_72829, url_72830, year, context) {
            return function(data, errors) {
              if (cljs.core.truth_(data)) {
                var c__4636__auto__ = cljs.core.async.chan.call(null, 1);
                cljs.core.async.impl.dispatch.run.call(null, function(seq__72740, chunk__72741, count__72742, i__72743, c__4636__auto__, connection_72828, stored_query_id_72829, url_72830, year, context) {
                  return function() {
                    var f__4637__auto__ = function() {
                      var switch__4605__auto__ = function(seq__72740, chunk__72741, count__72742, i__72743, c__4636__auto__, connection_72828, stored_query_id_72829, url_72830, year, context) {
                        return function(state_72798) {
                          var state_val_72799 = state_72798[1];
                          if (state_val_72799 === 1) {
                            var inst_72788 = window.debugData;
                            var inst_72789 = inst_72788.push(data);
                            var inst_72790 = [new cljs.core.Keyword(null, "data", "data", -232669377), new cljs.core.Keyword(null, "errors", "errors", -908790718), new cljs.core.Keyword(null, "attribute", "attribute", -2074029119), new cljs.core.Keyword(null, "offset", "offset", 296498311), new cljs.core.Keyword(null, "year", "year", 335913393), new cljs.core.Keyword(null, "context", "context", -830191113), new cljs.core.Keyword(null, "sorting", "sorting", 622249690)];
                            var inst_72791 = year - from;
                            var inst_72792 = [data, errors, quantity, inst_72791, year, context, sorting];
                            var inst_72793 = cljs.core.PersistentHashMap.fromArrays(inst_72790, inst_72792);
                            var state_72798__$1 = function() {
                              var statearr_72800 = state_72798;
                              statearr_72800[7] = inst_72789;
                              return statearr_72800;
                            }();
                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_72798__$1, 2, weather_canvas.weather.c, inst_72793);
                          } else {
                            if (state_val_72799 === 2) {
                              var inst_72795 = state_72798[2];
                              var inst_72796 = connection_72828.disconnect();
                              var state_72798__$1 = function() {
                                var statearr_72801 = state_72798;
                                statearr_72801[8] = inst_72795;
                                return statearr_72801;
                              }();
                              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_72798__$1, inst_72796);
                            } else {
                              return null;
                            }
                          }
                        };
                      }(seq__72740, chunk__72741, count__72742, i__72743, c__4636__auto__, connection_72828, stored_query_id_72829, url_72830, year, context);
                      return function(seq__72740, chunk__72741, count__72742, i__72743, switch__4605__auto__, c__4636__auto__, connection_72828, stored_query_id_72829, url_72830, year, context) {
                        return function() {
                          var weather_canvas$weather$draw_async_$_state_machine__4606__auto__ = null;
                          var weather_canvas$weather$draw_async_$_state_machine__4606__auto____0 = function() {
                            var statearr_72802 = [null, null, null, null, null, null, null, null, null];
                            statearr_72802[0] = weather_canvas$weather$draw_async_$_state_machine__4606__auto__;
                            statearr_72802[1] = 1;
                            return statearr_72802;
                          };
                          var weather_canvas$weather$draw_async_$_state_machine__4606__auto____1 = function(state_72798) {
                            while (true) {
                              var ret_value__4607__auto__ = function() {
                                try {
                                  while (true) {
                                    var result__4608__auto__ = switch__4605__auto__.call(null, state_72798);
                                    if (cljs.core.keyword_identical_QMARK_.call(null, result__4608__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                                      continue;
                                    } else {
                                      return result__4608__auto__;
                                    }
                                    break;
                                  }
                                } catch (e72803) {
                                  var ex__4609__auto__ = e72803;
                                  var statearr_72804_72832 = state_72798;
                                  statearr_72804_72832[2] = ex__4609__auto__;
                                  if (cljs.core.seq.call(null, state_72798[4])) {
                                    var statearr_72805_72833 = state_72798;
                                    statearr_72805_72833[1] = cljs.core.first.call(null, state_72798[4]);
                                  } else {
                                    throw ex__4609__auto__;
                                  }
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                }
                              }();
                              if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__4607__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                                var G__72834 = state_72798;
                                state_72798 = G__72834;
                                continue;
                              } else {
                                return ret_value__4607__auto__;
                              }
                              break;
                            }
                          };
                          weather_canvas$weather$draw_async_$_state_machine__4606__auto__ = function(state_72798) {
                            switch(arguments.length) {
                              case 0:
                                return weather_canvas$weather$draw_async_$_state_machine__4606__auto____0.call(this);
                              case 1:
                                return weather_canvas$weather$draw_async_$_state_machine__4606__auto____1.call(this, state_72798);
                            }
                            throw new Error("Invalid arity: " + arguments.length);
                          };
                          weather_canvas$weather$draw_async_$_state_machine__4606__auto__.cljs$core$IFn$_invoke$arity$0 = weather_canvas$weather$draw_async_$_state_machine__4606__auto____0;
                          weather_canvas$weather$draw_async_$_state_machine__4606__auto__.cljs$core$IFn$_invoke$arity$1 = weather_canvas$weather$draw_async_$_state_machine__4606__auto____1;
                          return weather_canvas$weather$draw_async_$_state_machine__4606__auto__;
                        }();
                      }(seq__72740, chunk__72741, count__72742, i__72743, switch__4605__auto__, c__4636__auto__, connection_72828, stored_query_id_72829, url_72830, year, context);
                    }();
                    var state__4638__auto__ = function() {
                      var statearr_72806 = f__4637__auto__.call(null);
                      statearr_72806[6] = c__4636__auto__;
                      return statearr_72806;
                    }();
                    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__4638__auto__);
                  };
                }(seq__72740, chunk__72741, count__72742, i__72743, c__4636__auto__, connection_72828, stored_query_id_72829, url_72830, year, context));
                return c__4636__auto__;
              } else {
                return null;
              }
            };
          }(seq__72740, chunk__72741, count__72742, i__72743, connection_72828, stored_query_id_72829, url_72830, year, context)};
          return obj72787;
        }();
        if (cljs.core.truth_(connection_72828.connect(url_72830, stored_query_id_72829))) {
          connection_72828.getData(parameters_72831);
        } else {
        }
        var G__72835 = seq__72740;
        var G__72836 = chunk__72741;
        var G__72837 = count__72742;
        var G__72838 = i__72743 + 1;
        seq__72740 = G__72835;
        chunk__72741 = G__72836;
        count__72742 = G__72837;
        i__72743 = G__72838;
        continue;
      } else {
        var temp__5735__auto__ = cljs.core.seq.call(null, seq__72740);
        if (temp__5735__auto__) {
          var seq__72740__$1 = temp__5735__auto__;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__72740__$1)) {
            var c__4556__auto__ = cljs.core.chunk_first.call(null, seq__72740__$1);
            var G__72839 = cljs.core.chunk_rest.call(null, seq__72740__$1);
            var G__72840 = c__4556__auto__;
            var G__72841 = cljs.core.count.call(null, c__4556__auto__);
            var G__72842 = 0;
            seq__72740 = G__72839;
            chunk__72741 = G__72840;
            count__72742 = G__72841;
            i__72743 = G__72842;
            continue;
          } else {
            var year = cljs.core.first.call(null, seq__72740__$1);
            var connection_72843 = new fi.fmi.metoclient.metolib.WfsConnection;
            var stored_query_id_72844 = "fmi::observations::weather::daily::multipointcoverage";
            var url_72845 = "https://opendata.fmi.fi/wfs";
            var parameters_72846 = function() {
              var obj72808 = {"fmisid":location_id, "requestParameter":"rrday,tday,snow,tmin,tmax", "begin":weather_canvas.weather.make_date.call(null, cljs.core.str.cljs$core$IFn$_invoke$arity$1(year), "01", "01"), "end":weather_canvas.weather.make_date.call(null, cljs.core.str.cljs$core$IFn$_invoke$arity$1(year), "12", "31"), "callback":function(seq__72740, chunk__72741, count__72742, i__72743, connection_72843, stored_query_id_72844, url_72845, year, seq__72740__$1, temp__5735__auto__, context) {
                return function(data, errors) {
                  if (cljs.core.truth_(data)) {
                    var c__4636__auto__ = cljs.core.async.chan.call(null, 1);
                    cljs.core.async.impl.dispatch.run.call(null, function(seq__72740, chunk__72741, count__72742, i__72743, c__4636__auto__, connection_72843, stored_query_id_72844, url_72845, year, seq__72740__$1, temp__5735__auto__, context) {
                      return function() {
                        var f__4637__auto__ = function() {
                          var switch__4605__auto__ = function(seq__72740, chunk__72741, count__72742, i__72743, c__4636__auto__, connection_72843, stored_query_id_72844, url_72845, year, seq__72740__$1, temp__5735__auto__, context) {
                            return function(state_72819) {
                              var state_val_72820 = state_72819[1];
                              if (state_val_72820 === 1) {
                                var inst_72809 = window.debugData;
                                var inst_72810 = inst_72809.push(data);
                                var inst_72811 = [new cljs.core.Keyword(null, "data", "data", -232669377), new cljs.core.Keyword(null, "errors", "errors", -908790718), new cljs.core.Keyword(null, "attribute", "attribute", -2074029119), new cljs.core.Keyword(null, "offset", "offset", 296498311), new cljs.core.Keyword(null, "year", "year", 335913393), new cljs.core.Keyword(null, "context", "context", -830191113), new cljs.core.Keyword(null, "sorting", "sorting", 622249690)];
                                var inst_72812 = year - from;
                                var inst_72813 = [data, errors, quantity, inst_72812, year, context, sorting];
                                var inst_72814 = cljs.core.PersistentHashMap.fromArrays(inst_72811, inst_72813);
                                var state_72819__$1 = function() {
                                  var statearr_72821 = state_72819;
                                  statearr_72821[7] = inst_72810;
                                  return statearr_72821;
                                }();
                                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_72819__$1, 2, weather_canvas.weather.c, inst_72814);
                              } else {
                                if (state_val_72820 === 2) {
                                  var inst_72816 = state_72819[2];
                                  var inst_72817 = connection_72843.disconnect();
                                  var state_72819__$1 = function() {
                                    var statearr_72822 = state_72819;
                                    statearr_72822[8] = inst_72816;
                                    return statearr_72822;
                                  }();
                                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_72819__$1, inst_72817);
                                } else {
                                  return null;
                                }
                              }
                            };
                          }(seq__72740, chunk__72741, count__72742, i__72743, c__4636__auto__, connection_72843, stored_query_id_72844, url_72845, year, seq__72740__$1, temp__5735__auto__, context);
                          return function(seq__72740, chunk__72741, count__72742, i__72743, switch__4605__auto__, c__4636__auto__, connection_72843, stored_query_id_72844, url_72845, year, seq__72740__$1, temp__5735__auto__, context) {
                            return function() {
                              var weather_canvas$weather$draw_async_$_state_machine__4606__auto__ = null;
                              var weather_canvas$weather$draw_async_$_state_machine__4606__auto____0 = function() {
                                var statearr_72823 = [null, null, null, null, null, null, null, null, null];
                                statearr_72823[0] = weather_canvas$weather$draw_async_$_state_machine__4606__auto__;
                                statearr_72823[1] = 1;
                                return statearr_72823;
                              };
                              var weather_canvas$weather$draw_async_$_state_machine__4606__auto____1 = function(state_72819) {
                                while (true) {
                                  var ret_value__4607__auto__ = function() {
                                    try {
                                      while (true) {
                                        var result__4608__auto__ = switch__4605__auto__.call(null, state_72819);
                                        if (cljs.core.keyword_identical_QMARK_.call(null, result__4608__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                                          continue;
                                        } else {
                                          return result__4608__auto__;
                                        }
                                        break;
                                      }
                                    } catch (e72824) {
                                      var ex__4609__auto__ = e72824;
                                      var statearr_72825_72847 = state_72819;
                                      statearr_72825_72847[2] = ex__4609__auto__;
                                      if (cljs.core.seq.call(null, state_72819[4])) {
                                        var statearr_72826_72848 = state_72819;
                                        statearr_72826_72848[1] = cljs.core.first.call(null, state_72819[4]);
                                      } else {
                                        throw ex__4609__auto__;
                                      }
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    }
                                  }();
                                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__4607__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                                    var G__72849 = state_72819;
                                    state_72819 = G__72849;
                                    continue;
                                  } else {
                                    return ret_value__4607__auto__;
                                  }
                                  break;
                                }
                              };
                              weather_canvas$weather$draw_async_$_state_machine__4606__auto__ = function(state_72819) {
                                switch(arguments.length) {
                                  case 0:
                                    return weather_canvas$weather$draw_async_$_state_machine__4606__auto____0.call(this);
                                  case 1:
                                    return weather_canvas$weather$draw_async_$_state_machine__4606__auto____1.call(this, state_72819);
                                }
                                throw new Error("Invalid arity: " + arguments.length);
                              };
                              weather_canvas$weather$draw_async_$_state_machine__4606__auto__.cljs$core$IFn$_invoke$arity$0 = weather_canvas$weather$draw_async_$_state_machine__4606__auto____0;
                              weather_canvas$weather$draw_async_$_state_machine__4606__auto__.cljs$core$IFn$_invoke$arity$1 = weather_canvas$weather$draw_async_$_state_machine__4606__auto____1;
                              return weather_canvas$weather$draw_async_$_state_machine__4606__auto__;
                            }();
                          }(seq__72740, chunk__72741, count__72742, i__72743, switch__4605__auto__, c__4636__auto__, connection_72843, stored_query_id_72844, url_72845, year, seq__72740__$1, temp__5735__auto__, context);
                        }();
                        var state__4638__auto__ = function() {
                          var statearr_72827 = f__4637__auto__.call(null);
                          statearr_72827[6] = c__4636__auto__;
                          return statearr_72827;
                        }();
                        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__4638__auto__);
                      };
                    }(seq__72740, chunk__72741, count__72742, i__72743, c__4636__auto__, connection_72843, stored_query_id_72844, url_72845, year, seq__72740__$1, temp__5735__auto__, context));
                    return c__4636__auto__;
                  } else {
                    return null;
                  }
                };
              }(seq__72740, chunk__72741, count__72742, i__72743, connection_72843, stored_query_id_72844, url_72845, year, seq__72740__$1, temp__5735__auto__, context)};
              return obj72808;
            }();
            if (cljs.core.truth_(connection_72843.connect(url_72845, stored_query_id_72844))) {
              connection_72843.getData(parameters_72846);
            } else {
            }
            var G__72850 = cljs.core.next.call(null, seq__72740__$1);
            var G__72851 = null;
            var G__72852 = 0;
            var G__72853 = 0;
            seq__72740 = G__72850;
            chunk__72741 = G__72851;
            count__72742 = G__72852;
            i__72743 = G__72853;
            continue;
          }
        } else {
          return null;
        }
      }
      break;
    }
  } else {
    return null;
  }
};
goog.provide("observation_data.observation_points");
goog.require("cljs.core");
observation_data.observation_points.metadata = cljs.core.PersistentVector.fromArray([new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1970, new cljs.core.Keyword(null, "end", "end", -268185958), 1970, new cljs.core.Keyword(null, "title", "title", 636505583), "Lohja Immula 1970-1970", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [60.25009, 60.25019], null), 
new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [24.16339, 24.16349], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 100984], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1970, new cljs.core.Keyword(null, "end", "end", -268185958), 1970, new cljs.core.Keyword(null, "title", "title", 636505583), "Suomussalmi Hulkonniemi 1970-1970", new cljs.core.Keyword(null, 
"lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [64.91708, 64.91718], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [28.94642, 28.94652], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101816], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1972, new cljs.core.Keyword(null, 
"end", "end", -268185958), 1972, new cljs.core.Keyword(null, "title", "title", 636505583), "Piikkiö Yltöinen vertailuas 1972-1972", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [60.38339, 60.38349], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [22.54665, 22.54675], null), new cljs.core.Keyword(null, "id", "id", 
-1388402092), 100942], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1999, new cljs.core.Keyword(null, "end", "end", -268185958), 2006, new cljs.core.Keyword(null, "title", "title", 636505583), "Enontekiö Hetta lentoasema 1999-2006", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [68.36238, 68.36248], null), new cljs.core.Keyword(null, "lon", "lon", 
522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [23.42715, 23.42725], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101976], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1959, new cljs.core.Keyword(null, "end", "end", -268185958), 2006, new cljs.core.Keyword(null, "title", "title", 636505583), "Helsinki Malmi lentoasema 1959-2006", new cljs.core.Keyword(null, "lat", "lat", 
-580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [60.25345, 60.25355], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [25.0451, 25.0452], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101009], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 2006, new cljs.core.Keyword(null, "end", "end", 
-268185958), 2006, new cljs.core.Keyword(null, "title", "title", 636505583), "Porvoo Lehtimäki 2006-2006", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [60.36847, 60.36857], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [25.62375, 25.62385], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101027], 
null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1959, new cljs.core.Keyword(null, "end", "end", -268185958), 2011, new cljs.core.Keyword(null, "title", "title", 636505583), "Turku lentoasema 1959-2011", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [60.51534, 60.51544], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 
2, 5, cljs.core.PersistentVector.EMPTY_NODE, [22.2741, 22.2742], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101065], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1959, new cljs.core.Keyword(null, "end", "end", -268185958), 2011, new cljs.core.Keyword(null, "title", "title", 636505583), "Oulu lentoasema 1959-2011", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
[64.92894, 64.92904], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [25.34705, 25.34715], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101786], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1959, new cljs.core.Keyword(null, "end", "end", -268185958), 2011, new cljs.core.Keyword(null, "title", "title", 636505583), "Vaasa lentoasema 1959-2011", 
new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [63.04192, 63.04202], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [21.76407, 21.76417], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101462], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 
1959, new cljs.core.Keyword(null, "end", "end", -268185958), 2011, new cljs.core.Keyword(null, "title", "title", 636505583), "Pori lentoasema 1959-2011", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [61.46564, 61.46574], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [21.7934, 21.7935], null), new cljs.core.Keyword(null, 
"id", "id", -1388402092), 101044], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1968, new cljs.core.Keyword(null, "end", "end", -268185958), 2013, new cljs.core.Keyword(null, "title", "title", 636505583), "Närpiö Alamarkku 1968-2013", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [62.65012, 62.65022], null), new cljs.core.Keyword(null, "lon", "lon", 
522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [21.54632, 21.54642], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101468], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1982, new cljs.core.Keyword(null, "end", "end", -268185958), 2013, new cljs.core.Keyword(null, "title", "title", 636505583), "Karttula Kallioranta 1982-2013", new cljs.core.Keyword(null, "lat", "lat", -580793929), 
new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [62.85029, 62.85039], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [27.27994, 27.28004], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101579], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1965, new cljs.core.Keyword(null, "end", "end", -268185958), 
2013, new cljs.core.Keyword(null, "title", "title", 636505583), "Kangasniemi kirkonkylä 1965-2013", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [61.98, 61.98], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [26.63, 26.64], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101385], null), new cljs.core.PersistentArrayMap(null, 
6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1970, new cljs.core.Keyword(null, "end", "end", -268185958), 2013, new cljs.core.Keyword(null, "title", "title", 636505583), "Savonlinna Savonranta 1970-2013", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [62.16892, 62.18374], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
[29.19679, 29.27718], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101448], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1969, new cljs.core.Keyword(null, "end", "end", -268185958), 2013, new cljs.core.Keyword(null, "title", "title", 636505583), "Utsjoki Leppälä 1969-2013", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [69.66364, 
69.66374], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [27.07354, 27.07364], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 102040], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1959, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Liperi Joensuun lentoasema 1959-", 
new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [62.65989, 62.65999], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [29.61143, 29.61153], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101608], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 
1959, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Lemland Nyhamn 1959-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [59.95905, 59.96674], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [19.94658, 19.96336], null), new cljs.core.Keyword(null, 
"id", "id", -1388402092), 100909], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1959, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Hailuoto Ojakylä 1959-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [65.01698, 65.03374], null), new cljs.core.Keyword(null, "lon", "lon", 
522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [24.71281, 24.77957], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101776], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1959, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Kaarina Yltöinen 1959-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 
2, 5, cljs.core.PersistentVector.EMPTY_NODE, [60.38339, 60.38683], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [22.54665, 22.55147], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 100934], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1959, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, 
"title", "title", 636505583), "Jokioinen Jokioisten observatorio 1959-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [60.81396, 60.81406], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [23.49756, 23.49766], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101104], null), new cljs.core.PersistentArrayMap(null, 
6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1959, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Kouvola Utti lentokenttä 1959-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [60.89048, 60.9003], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
[26.93014, 26.94109], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101191], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1959, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Ähtäri Myllymäki 1959-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [62.53352, 62.53501], 
null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [24.11314, 24.2174], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101520], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1959, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Salo Kärkkä 1959-", new cljs.core.Keyword(null, 
"lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [60.36674, 60.37378], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [23.09668, 23.11289], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 100955], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1959, new cljs.core.Keyword(null, 
"end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Sodankylä Lokka 1959-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [67.82049, 67.82156], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [27.73688, 27.7464], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 102E3], 
null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1959, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Sodankylä Vuotso 1959-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [68.08417, 68.10259], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 
2, 5, cljs.core.PersistentVector.EMPTY_NODE, [27.1221, 27.18823], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 102001], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1959, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Kajaani lentoasema 1959-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
[64.2827, 64.2828], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [27.67327, 27.67337], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101725], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1959, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Savonlinna Punkaharju Laukansaari 1959-", 
new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [61.8003, 61.80209], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [29.31512, 29.33027], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101441], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 
1959, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Vesanto Sonkari 1959-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [62.92173, 62.94831], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [26.39766, 26.42475], null), new cljs.core.Keyword(null, 
"id", "id", -1388402092), 101555], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1959, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Jomala Maarianhaminan lentoasema 1959-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [60.11665, 60.1248], null), new cljs.core.Keyword(null, 
"lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [19.89656, 19.90349], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 100907], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1959, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Tohmajärvi Kemie 1959-", new cljs.core.Keyword(null, "lat", "lat", 
-580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [62.23534, 62.23544], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [30.34657, 30.34667], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101459], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1959, new cljs.core.Keyword(null, "end", 
"end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Heinola Asemantaus 1959-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [61.2, 61.2001], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [26.04945, 26.04955], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101196], null), 
new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1959, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Kankaanpää Niinisalo Puolustusvoimat 1959-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [61.83856, 61.83866], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 
2, 5, cljs.core.PersistentVector.EMPTY_NODE, [22.4634, 22.4635], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101270], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1959, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Joutsa Leivonmäki Savenaho 1959-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, 
cljs.core.PersistentVector.EMPTY_NODE, [61.87937, 61.87947], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [26.09473, 26.09483], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101367], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1959, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", 
"title", 636505583), "Seinäjoki Pelmaa 1959-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [62.93699, 62.93813], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [22.48736, 22.48883], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101486], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, 
"start", "start", -355208981), 1959, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Mustasaari Valassaaret 1959-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [63.43543, 63.43553], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [21.0645, 21.0646], 
null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101464], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1959, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Kokemäki Rausenkulma 1959-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [61.25997, 61.27102], null), new cljs.core.Keyword(null, 
"lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [22.22747, 22.24883], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101068], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1959, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Rautjärvi Simpele Kangaskoski 1959-", new cljs.core.Keyword(null, "lat", 
"lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [61.42265, 61.43371], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [29.34689, 29.39166], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101253], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1959, new cljs.core.Keyword(null, 
"end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Lappeenranta lentoasema 1959-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [61.04416, 61.08367], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [28.14686, 28.15104], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 
101237], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1959, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Kouvola Anjala 1959-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [60.69658, 60.71696], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 
2, 5, cljs.core.PersistentVector.EMPTY_NODE, [26.79683, 26.81054], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101194], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1959, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Hyvinkää Hyvinkäänkylä 1959-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
[60.59596, 60.59606], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [24.80313, 24.80323], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101130], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1959, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Lohja Porla 1959-", 
new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [60.24399, 60.2502], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [24.04674, 24.04934], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 100974], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 
1959, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Kauhava lentokenttä 1959-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [63.10018, 63.1205], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [23.02966, 23.04371], null), new cljs.core.Keyword(null, 
"id", "id", -1388402092), 101503], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1959, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Vaala Pelso 1959-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [64.49185, 64.50149], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), 
new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [26.42381, 26.47027], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101800], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1959, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Vihti Maasoja 1959-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 
2, 5, cljs.core.PersistentVector.EMPTY_NODE, [60.41678, 60.41882], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [24.39674, 24.39851], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 100976], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1959, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, 
"title", "title", 636505583), "Mikkeli lentoasema 1959-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [61.66813, 61.7349], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [27.1968, 27.3049], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101398], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, 
"start", "start", -355208981), 1959, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Kotka Rankki 1959-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [60.3754, 60.3755], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [26.95843, 26.95853], null), 
new cljs.core.Keyword(null, "id", "id", -1388402092), 101030], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1959, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Rovaniemi lentoasema 1959-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [66.5588, 66.5589], null), new cljs.core.Keyword(null, 
"lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [25.83144, 25.83154], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101920], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1959, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Rovaniemi Apukka 1959-", new cljs.core.Keyword(null, "lat", "lat", 
-580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [66.57856, 66.57941], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [26.01085, 26.01474], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101933], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1959, new cljs.core.Keyword(null, "end", 
"end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Kuusamo lentoasema 1959-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [65.98255, 65.99629], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [29.18061, 29.22429], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101886], 
null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1959, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Juupajoki Hyytiälä 1959-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [61.84563, 61.85026], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 
2, 5, cljs.core.PersistentVector.EMPTY_NODE, [24.27989, 24.2873], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101317], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1959, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Siilinjärvi Kuopion lentoasema 1959-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 
2, 5, cljs.core.PersistentVector.EMPTY_NODE, [63.00836, 63.00846], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [27.79913, 27.79923], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101570], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1959, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, 
"title", "title", 636505583), "Parainen Utö 1959-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [59.78334, 59.78428], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [21.36778, 21.3801], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 100908], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, 
"start", "start", -355208981), 1959, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Jyväskylä lentoasema 1959-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [62.39753, 62.39763], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [25.67082, 25.67092], 
null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101339], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1959, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Hanko Russarö 1959-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [59.77356, 59.77366], null), new cljs.core.Keyword(null, 
"lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [22.95189, 22.95199], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 100932], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1959, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Kaskinen Sälgrund 1959-", new cljs.core.Keyword(null, "lat", "lat", 
-580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [62.33344, 62.3337], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [21.17965, 21.1904], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101256], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1844, new cljs.core.Keyword(null, "end", "end", 
-268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Helsinki Kaisaniemi 1844-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [60.17518, 60.17528], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [24.94454, 24.94464], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 100971], null), 
new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1959, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Maaninka Halola 1959-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [63.14338, 63.14348], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 
2, 5, cljs.core.PersistentVector.EMPTY_NODE, [27.31312, 27.31322], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101572], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1959, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Haapavesi Mustikkamäki 1959-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
[64.1421, 64.15039], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [25.4245, 25.42974], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101695], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1959, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Vieremä Kaarakkala 1959-", 
new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [63.83365, 63.84118], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [27.19646, 27.22062], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101726], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 
1959, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Muonio Alamuonio 1959-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [67.96934, 67.96944], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [23.67164, 23.67174], null), new cljs.core.Keyword(null, 
"id", "id", -1388402092), 101969], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1891, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Sodankylä Lapin ilmatieteellinen tutkimuskeskus 1891-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [67.36658, 67.37974], null), new cljs.core.Keyword(null, 
"lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [26.62868, 26.646], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101932], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1959, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Inari Ivalo lentoasema 1959-", new cljs.core.Keyword(null, "lat", "lat", 
-580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [68.59916, 68.61732], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [27.41242, 27.43392], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 102033], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1959, new cljs.core.Keyword(null, "end", 
"end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Keminmaa Kemi-Tornion lentoasema 1959-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [65.78367, 65.78377], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [24.57935, 24.57945], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 
101840], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1959, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Siikajoki Revonlahti 1959-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [64.68363, 64.68401], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 
2, 5, cljs.core.PersistentVector.EMPTY_NODE, [25.08871, 25.09631], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101787], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1959, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Vantaa Helsinki-Vantaan lentoasema 1959-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 
2, 5, cljs.core.PersistentVector.EMPTY_NODE, [60.32734, 60.32744], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [24.95706, 24.95716], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 100968], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1961, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, 
"title", "title", 636505583), "Enonkoski Simanala 1961-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [62.0503, 62.05568], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [29.04402, 29.0469], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101446], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, 
"start", "start", -355208981), 1961, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Lahti Laune 1961-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [60.96206, 60.96694], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [25.63007, 25.63095], null), 
new cljs.core.Keyword(null, "id", "id", -1388402092), 101152], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1961, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Enontekiö Näkkälä 1961-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [68.60298, 68.60308], null), new cljs.core.Keyword(null, 
"lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [23.57594, 23.57604], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 102019], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1961, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Kruunupyy lentoasema 1961-", new cljs.core.Keyword(null, "lat", "lat", 
-580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [63.71688, 63.71759], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [23.13869, 23.14635], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101662], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1962, new cljs.core.Keyword(null, "end", 
"end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Juuka Niemelä 1962-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [63.21702, 63.25045], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [29.21333, 29.24677], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101609], null), 
new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1962, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Utsjoki Kevo 1962-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [69.75632, 69.75642], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 
2, 5, cljs.core.PersistentVector.EMPTY_NODE, [27.00673, 27.00683], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 102035], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1962, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Inkoo Bågaskär 1962-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
[59.93105, 59.93351], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [24.01344, 24.01412], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 100969], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1963, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Hanko Tvärminne 1963-", 
new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [59.84395, 59.84405], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [23.2484, 23.2485], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 100953], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 
1963, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Hausjärvi Lavinto 1963-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [60.80514, 60.81691], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [24.84361, 24.84682], null), new cljs.core.Keyword(null, 
"id", "id", -1388402092), 101139], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1963, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Hämeenlinna Lammi Pappila 1963-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [61.05403, 61.05413], null), new cljs.core.Keyword(null, "lon", 
"lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [25.03839, 25.03849], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101154], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1964, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Ylitornio Meltosjärvi 1964-", new cljs.core.Keyword(null, "lat", "lat", -580793929), 
new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [66.52947, 66.53127], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [24.64955, 24.64972], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101908], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1964, new cljs.core.Keyword(null, "end", "end", -268185958), 
1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Heinävesi Palokki 1964-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [62.56698, 62.57058], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [28.56338, 28.59253], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101589], null), new cljs.core.PersistentArrayMap(null, 
6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1964, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Savukoski kk 1964-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [67.28383, 67.28604], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
[28.1627, 28.1801], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101952], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1964, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Jämsä Halli lentokenttä 1964-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [61.85018, 
61.85667], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [24.78576, 24.79669], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101315], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1965, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Teuva Kauppilankylä 1965-", 
new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [62.46678, 62.49189], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [21.61301, 21.76312], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101262], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 
1965, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Sysmä Joutsjärvi 1965-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [61.51091, 61.51696], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [25.81133, 25.81346], null), new cljs.core.Keyword(null, 
"id", "id", -1388402092), 101342], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1965, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Lavia Riiho 1965-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [61.61454, 61.61688], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), 
new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [22.54094, 22.5466], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101273], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1965, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Ylöjärvi Metsäkylä 1965-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 
2, 5, cljs.core.PersistentVector.EMPTY_NODE, [61.60013, 61.6169], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [23.49655, 23.50415], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101295], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1965, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, 
"title", "title", 636505583), "Ikaalinen Vahojärvi 1965-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [61.92119, 61.92129], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [23.09238, 23.09248], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101298], null), new cljs.core.PersistentArrayMap(null, 6, 
[new cljs.core.Keyword(null, "start", "start", -355208981), 1965, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Sulkava Halttula 1965-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [61.91695, 61.92371], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
[28.31344, 28.3202], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101425], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1965, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Köyliö Yttilä 1965-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [61.10008, 61.11018], 
null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [22.36323, 22.37416], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101077], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1965, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Viitasaari Kolima Kärnä 1965-", 
new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [63.16693, 63.16758], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [25.92981, 25.93602], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101545], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 
1965, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Äänekoski Kalaniemi 1965-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [62.86692, 62.88368], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [25.82984, 25.86329], null), new cljs.core.Keyword(null, 
"id", "id", -1388402092), 101541], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1965, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Siikalatva Kestilä 1965-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [64.35032, 64.3557], null), new cljs.core.Keyword(null, "lon", "lon", 
522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [26.27967, 26.29894], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101717], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1965, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Kauhajoki kaupunki 1965-", new cljs.core.Keyword(null, "lat", "lat", -580793929), 
new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [62.41546, 62.4169], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [22.16305, 22.18992], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101284], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1965, new cljs.core.Keyword(null, "end", "end", -268185958), 
1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Nokia Tottijärvi 1965-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [61.39643, 61.39653], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [23.33632, 23.33642], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101116], null), new cljs.core.PersistentArrayMap(null, 
6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1965, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Vihti Hiiskula 1965-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [60.51679, 60.52494], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
[24.5134, 24.51572], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101135], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1965, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Pöytyä Yläne 1965-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [60.87136, 60.87146], 
null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [22.38795, 22.38805], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101093], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1965, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Lieto Tammentaka 1965-", new cljs.core.Keyword(null, 
"lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [60.56673, 60.57391], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [22.42996, 22.44673], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101070], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1965, new cljs.core.Keyword(null, 
"end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Jyväskylä Muuratjärvi 1965-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [62.15021, 62.15503], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [25.34658, 25.42475], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 
101352], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1965, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Toholampi Oravala 1965-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [63.76357, 63.76701], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 
2, 5, cljs.core.PersistentVector.EMPTY_NODE, [24.28074, 24.29641], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101679], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1965, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Mikkeli Rantakylä 1965-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
[61.66691, 61.67467], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [27.21341, 27.22234], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101402], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1965, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Uusikaupunki Nervanderinpuisto 1965-", 
new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [60.80004, 60.802], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [21.42463, 21.42999], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101049], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 
1965, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Utajärvi Särkijärvi 1965-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [64.9277, 64.9338], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [27.18862, 27.19641], null), new cljs.core.Keyword(null, 
"id", "id", -1388402092), 101809], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1965, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Kaustinen Tastula 1965-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [63.59356, 63.59366], null), new cljs.core.Keyword(null, "lon", "lon", 
522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [23.71657, 23.71667], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101665], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1965, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Joensuu Pyhäselkä 1965-", new cljs.core.Keyword(null, "lat", "lat", -580793929), 
new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [62.51701, 62.51716], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [29.79679, 29.80783], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101610], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1965, new cljs.core.Keyword(null, "end", "end", -268185958), 
1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Joensuu Huhtilampi 1965-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [62.41702, 62.43656], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [30.39683, 30.40832], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101460], null), new cljs.core.PersistentArrayMap(null, 
6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1965, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Outokumpu Viuruniemi 1965-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [62.61699, 62.61736], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
[28.94229, 28.94683], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101590], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1965, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Kalajoki Metsäkylä 1965-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [64.27359, 
64.28369], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [24.19622, 24.20743], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101685], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1965, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Kärsämäki Venetpalo 1965-", 
new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [63.88362, 63.90039], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [25.76304, 25.7848], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101700], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 
1965, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Kiuruvesi Korpijoki 1965-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [63.72863, 63.73373], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [26.34643, 26.36986], null), new cljs.core.Keyword(null, 
"id", "id", -1388402092), 101712], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1965, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Inari Raja-Jooseppi Akujärvi 1965-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [68.47062, 68.47072], null), new cljs.core.Keyword(null, "lon", 
"lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [28.31614, 28.31624], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 102008], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1965, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Pello Konttajärvi 1965-", new cljs.core.Keyword(null, "lat", "lat", -580793929), 
new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [66.83372, 66.84132], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [24.3625, 24.39594], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101909], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1965, new cljs.core.Keyword(null, "end", "end", -268185958), 
1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Salla Kelloselkä 1965-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [66.93383, 66.94589], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [28.96281, 28.97596], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101956], null), new cljs.core.PersistentArrayMap(null, 
6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1965, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Huittinen Sallila 1965-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [61.02331, 61.02358], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
[22.69858, 22.6987], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101075], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1966, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Alavus Sulkavankylä 1966-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [62.44928, 
62.45027], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [23.54645, 23.55497], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101305], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1966, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Ikaalinen Vehuvarpee 1966-", 
new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [61.73345, 61.73911], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [22.81317, 22.82993], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101277], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 
1966, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Karvia Alkkia 1966-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [62.1832, 62.19066], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [22.70373, 22.79977], null), new cljs.core.Keyword(null, 
"id", "id", -1388402092), 101272], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1966, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Laitila Haukka 1966-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [60.83311, 60.83321], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), 
new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [21.75685, 21.75695], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101050], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1966, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Hämeenlinna Pirttikoski 1966-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 
2, 5, cljs.core.PersistentVector.EMPTY_NODE, [61.00651, 61.08356], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [23.92004, 24.11342], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101143], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1966, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, 
"title", "title", 636505583), "Nurmes Mujejärvi 1966-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [63.78371, 63.82492], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [29.4466, 29.46338], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101763], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, 
"start", "start", -355208981), 1966, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Kuusamo Kiutaköngäs 1966-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [66.36994, 66.37004], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [29.31188, 29.31198], 
null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101887], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1967, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Merikarvia Tuorila Alakylä 1967-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [61.84842, 61.84852], null), 
new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [21.65087, 21.65097], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101257], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1967, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Halsua Kanala Purola 1967-", new cljs.core.Keyword(null, 
"lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [63.44559, 63.45033], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [24.44417, 24.44646], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101528], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1967, new cljs.core.Keyword(null, 
"end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Sotkamo Saviaho 1967-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [63.95036, 63.95518], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [28.42596, 28.42995], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101745], 
null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1967, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Tyrnävä Temmes 1967-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [64.65032, 64.65848], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 
2, 5, cljs.core.PersistentVector.EMPTY_NODE, [25.59625, 25.61718], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101790], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1967, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Kuusamo Toranginaho 1967-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
[65.95046, 65.95334], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [29.12963, 29.16307], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101891], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1967, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Joutsa Pärnämäki 1967-", 
new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [61.76605, 61.76699], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [26.39225, 26.39679], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101390], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 
1968, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Utsjoki Nuorgam 1968-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [70.08198, 70.08888], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [27.89135, 27.9406], null), new cljs.core.Keyword(null, 
"id", "id", -1388402092), 102036], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1968, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Luhanka Tammijärvi 1968-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [61.83532, 61.83542], null), new cljs.core.Keyword(null, "lon", "lon", 
522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [25.85365, 25.85375], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101348], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1968, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Savonlinna Laukansaari 1968-", new cljs.core.Keyword(null, "lat", "lat", -580793929), 
new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [61.79598, 61.80039], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [28.83015, 28.84617], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101423], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1968, new cljs.core.Keyword(null, "end", "end", -268185958), 
1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Isojoki Kärjenkoski 1968-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [62.13283, 62.13293], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [21.67357, 21.67367], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101258], null), new cljs.core.PersistentArrayMap(null, 
6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1968, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Kokkola Korplax 1968-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [63.85021, 63.88365], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
[23.19623, 23.23466], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101667], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1968, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Posio Raistakka 1968-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [65.97877, 65.98387], 
null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [28.1629, 28.17105], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101881], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1968, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Ristijärvi Hiisijärvi 1968-", new cljs.core.Keyword(null, 
"lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [64.36621, 64.36715], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [28.5798, 28.60769], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101748], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1969, new cljs.core.Keyword(null, 
"end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Mustasaari Riimala 1969-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [62.96681, 62.98357], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [21.74628, 21.77971], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 
101474], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1969, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Kalajoki Pitkäsenkylä 1969-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [64.23108, 64.23368], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 
2, 5, cljs.core.PersistentVector.EMPTY_NODE, [24.01289, 24.01576], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101683], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1969, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Lohja Nummi-Pusula Leppäkorpi 1969-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 
2, 5, cljs.core.PersistentVector.EMPTY_NODE, [60.49121, 60.49131], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [23.76612, 23.76622], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 100963], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1969, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, 
"title", "title", 636505583), "Savukoski Ruuvaoja 1969-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [67.65053, 67.65624], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [28.70901, 28.71278], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 102007], null), new cljs.core.PersistentArrayMap(null, 6, 
[new cljs.core.Keyword(null, "start", "start", -355208981), 1970, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Inari Angeli 1970-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [68.90959, 68.90969], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
[25.66231, 25.66241], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 102024], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1970, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Taivalkoski Inkee 1970-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [65.73377, 65.7346], 
null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [28.54629, 28.56086], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101882], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1970, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Suomussalmi Näljänkä 1970-", new cljs.core.Keyword(null, 
"lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [65.21708, 65.23969], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [28.41302, 28.44839], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101822], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1970, new cljs.core.Keyword(null, 
"end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Mikkeli Pitkähiekka 1970-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [62.01692, 62.03424], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [27.19392, 27.1968], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 
101410], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1970, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Iitti Kausala 1970-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [60.88765, 60.93361], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 
2, 5, cljs.core.PersistentVector.EMPTY_NODE, [26.26344, 26.35349], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101210], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1970, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Oripää Teinikivi 1970-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
[60.90008, 60.90435], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [22.6966, 22.7117], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101081], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1970, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Pelkosenniemi kirkonkylä 1970-", 
new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [67.1002, 67.10058], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [27.49601, 27.51], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101947], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1970, 
new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Jalasjärvi Hirvijärvi 1970-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [62.47293, 62.47303], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [22.91002, 22.91012], null), new cljs.core.Keyword(null, 
"id", "id", -1388402092), 101285], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1970, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Valtimo kk 1970-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [63.66703, 63.66735], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), 
new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [28.82922, 28.83001], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101743], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1970, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Asikkala Urajärvi 1970-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 
2, 5, cljs.core.PersistentVector.EMPTY_NODE, [61.13351, 61.13722], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [25.79256, 25.79683], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101168], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1970, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, 
"title", "title", 636505583), "Mäntsälä Hirvihaara 1970-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [60.62486, 60.63357], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [25.22432, 25.31353], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101166], null), new cljs.core.PersistentArrayMap(null, 6, 
[new cljs.core.Keyword(null, "start", "start", -355208981), 1970, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Viitasaari Haapaniemi 1970-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [63.0767, 63.08254], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
[25.8482, 25.85867], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101537], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1970, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Pudasjärvi Sarakylä 1970-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [65.78985, 
65.80051], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [27.32952, 27.33297], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101877], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1970, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Rautavaara Ala-Luosta 1970-", 
new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [63.267, 63.27154], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [28.46328, 28.47004], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101599], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 
1970, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Kouvola Voikoski 1970-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [61.25132, 61.25142], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [26.77899, 26.77909], null), new cljs.core.Keyword(null, 
"id", "id", -1388402092), 101211], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1970, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Lieksa Koli 1970-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [63.10877, 63.10887], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), 
new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [29.75841, 29.75851], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101616], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1970, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Lieksa Lampela 1970-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 
2, 5, cljs.core.PersistentVector.EMPTY_NODE, [63.30532, 63.32113], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [30.02397, 30.04583], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101636], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1970, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, 
"title", "title", 636505583), "Ilomantsi Naarva 1970-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [63.03244, 63.03254], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [31.05916, 31.05926], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101641], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, 
"start", "start", -355208981), 1970, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Kajaani Saaresmäki 1970-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [64.05116, 64.0671], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [26.92531, 26.92984], 
null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101721], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1970, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Pudasjärvi Jaurakkajärvi 1970-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [65.16067, 65.16716], null), 
new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [27.61297, 27.64669], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101812], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1970, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Kolari Kattilamaa 1970-", new cljs.core.Keyword(null, 
"lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [67.3843, 67.40051], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [24.01183, 24.17916], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101913], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1970, new cljs.core.Keyword(null, 
"end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Nurmijärvi geofysiikan observatorio 1970-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [60.50873, 60.51689], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [24.64674, 24.65378], null), new cljs.core.Keyword(null, "id", "id", 
-1388402092), 101149], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1970, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Lapinlahti Lamminkäyrä 1970-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [63.37753, 63.38374], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), 
new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [27.36987, 27.37996], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101577], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1970, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Pello kk Museotie 1970-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 
2, 5, cljs.core.PersistentVector.EMPTY_NODE, [66.7667, 66.77283], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [23.96298, 23.9688], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101914], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1971, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, 
"title", "title", 636505583), "Rääkkylä kk 1971-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [62.31132, 62.31142], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [29.6293, 29.6294], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101450], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, 
"start", "start", -355208981), 1971, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Jomala Jomalaby 1971-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [60.17831, 60.18341], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [19.97989, 19.98638], 
null), new cljs.core.Keyword(null, "id", "id", -1388402092), 100917], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1971, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Kittilä Pokka 1971-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [68.16967, 68.16977], null), new cljs.core.Keyword(null, 
"lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [25.78301, 25.78311], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101994], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1974, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Salla Värriötunturi 1974-", new cljs.core.Keyword(null, "lat", "lat", 
-580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [67.74806, 67.74816], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [29.61107, 29.61117], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 102012], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1974, new cljs.core.Keyword(null, "end", 
"end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Savonlinna lentoasema 1974-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [61.9464, 61.95039], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [28.93153, 28.94691], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101430], 
null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1976, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Rautavaara Ylä-Luosta 1976-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [63.37801, 63.38377], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 
2, 5, cljs.core.PersistentVector.EMPTY_NODE, [28.66161, 28.66338], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101603], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1976, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Inari Saariselkä matkailukeskus 1976-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 
2, 5, cljs.core.PersistentVector.EMPTY_NODE, [68.41501, 68.41833], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [27.41097, 27.41331], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 102005], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1977, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, 
"title", "title", 636505583), "Virolahti Koivuniemi 1977-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [60.51688, 60.53364], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [27.67268, 27.68033], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101231], null), new cljs.core.PersistentArrayMap(null, 6, 
[new cljs.core.Keyword(null, "start", "start", -355208981), 1978, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Suonenjoki Iisvesi 1978-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [62.66444, 62.66704], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
[27.02994, 27.04699], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101578], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1978, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Ristijärvi Mustavaara 1978-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [64.45039, 
64.46966], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [28.61314, 28.61823], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101753], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1978, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Enontekiö Kilpisjärvi kyläkeskus 1978-", 
new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [69.04942, 69.04952], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [20.79112, 20.79122], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 102016], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 
1979, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Pirkkala Tampere-Pirkkalan lentoasema 1979-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [61.42069, 61.42079], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [23.61991, 23.62001], null), 
new cljs.core.Keyword(null, "id", "id", -1388402092), 101118], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1980, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Kurikka Pyörni 1980-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [62.73346, 62.73384], null), new cljs.core.Keyword(null, 
"lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [21.95939, 21.97976], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101478], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1981, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Suomussalmi Pesiö 1981-", new cljs.core.Keyword(null, "lat", "lat", 
-580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [64.93122, 64.93132], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [28.74668, 28.74678], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101826], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1981, new cljs.core.Keyword(null, "end", 
"end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Kemi I majakka 1981-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [65.38364, 65.38541], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [24.09605, 24.09615], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101783], 
null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1981, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Porvoo Kalbådagrund 1981-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [59.98513, 59.98523], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 
2, 5, cljs.core.PersistentVector.EMPTY_NODE, [25.5985, 25.5986], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101022], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1981, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Kalajoki Ulkokalla 1981-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
[64.33099, 64.33367], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [23.44617, 23.44652], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101673], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1981, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Hammarland Märket 1981-", 
new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [60.29996, 60.30103], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [19.12984, 19.13147], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 100919], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 
1981, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Ilomantsi Pötsönvaara 1981-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [63.14228, 63.14238], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [31.04419, 31.04429], null), new cljs.core.Keyword(null, 
"id", "id", -1388402092), 101649], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1983, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Enontekiö Hetta 1983-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [68.38601, 68.40055], null), new cljs.core.Keyword(null, "lon", "lon", 
522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [23.58773, 23.72894], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101974], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1984, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Kemi Ajos 1984-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 
2, 5, cljs.core.PersistentVector.EMPTY_NODE, [65.67287, 65.73377], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [24.51269, 24.5153], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101846], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1984, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, 
"title", "title", 636505583), "Hailuoto Marjaniemi 1984-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [65.03364, 65.03999], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [24.56144, 24.5629], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101784], null), new cljs.core.PersistentArrayMap(null, 6, 
[new cljs.core.Keyword(null, "start", "start", -355208981), 1984, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Loviisa Orrengrund 1984-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [60.27483, 60.27493], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
[26.44452, 26.44462], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101039], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1984, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Porvoo Emäsalo 1984-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [60.20375, 60.21691], 
null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [25.62543, 25.63025], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101023], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1984, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Kökar Bogskär 1984-", new cljs.core.Keyword(null, 
"lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [59.50551, 59.50561], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [20.35551, 20.35561], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 100921], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1984, new cljs.core.Keyword(null, 
"end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Kustavi Isokari 1984-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [60.7167, 60.72235], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [21.01322, 21.02679], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101059], 
null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1986, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Kotka Haapasaari 1986-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [60.28657, 60.28667], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 
2, 5, cljs.core.PersistentVector.EMPTY_NODE, [27.18522, 27.18532], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101042], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1987, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Pielavesi Venetmäki 1987-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
[63.31502, 63.31707], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [26.97902, 26.97995], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101569], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1990, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Hanko Tulliniemi 1990-", 
new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [59.80856, 59.80866], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [22.91578, 22.91588], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 100946], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 
1991, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Multia Pirttiperä 1991-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [62.41041, 62.41056], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [25.04991, 25.05061], null), new cljs.core.Keyword(null, 
"id", "id", -1388402092), 101363], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1991, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Kemiönsaari Vänö 1991-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [59.8667, 59.86957], null), new cljs.core.Keyword(null, "lon", "lon", 
522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [22.19336, 22.19679], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 100945], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1991, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Raasepori Jussarö 1991-", new cljs.core.Keyword(null, "lat", "lat", -580793929), 
new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [59.82051, 59.82061], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [23.57634, 23.57644], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 100965], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1991, new cljs.core.Keyword(null, "end", "end", -268185958), 
1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Raahe Lapaluoto 1991-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [64.65, 64.68], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [24.41, 24.46], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101785], null), new cljs.core.PersistentArrayMap(null, 
6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1991, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Inari Nellim 1991-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [68.84915, 68.84925], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
[28.29905, 28.29915], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 102052], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1991, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Kuopio Ritoniemi 1991-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [62.79888, 62.8004], 
null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [27.90492, 27.91341], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101580], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1991, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Rauma Kylmäpihlaja 1991-", new cljs.core.Keyword(null, 
"lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [61.14472, 61.15015], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [21.29651, 21.30278], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101061], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1991, new cljs.core.Keyword(null, 
"end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Enontekiö Kilpisjärvi Saana 1991-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [69.04269, 69.04279], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [20.85128, 20.85138], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 
102017], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1991, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Inari Väylä 1991-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [69.07214, 69.07224], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 
2, 5, cljs.core.PersistentVector.EMPTY_NODE, [27.49245, 27.49255], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 102042], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1991, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Luhanka Judinsalo 1991-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
[61.70019, 61.70448], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [25.49665, 25.50525], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101362], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1992, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Asikkala Pulkkilanharju 1992-", 
new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [61.26506, 61.26694], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [25.52014, 25.53013], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101185], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 
1992, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Turku Rajakari 1992-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [60.37783, 60.38347], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [22.0133, 22.09645], null), new cljs.core.Keyword(null, 
"id", "id", -1388402092), 100947], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1992, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Korsnäs Bredskäret 1992-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [62.93428, 62.93438], null), new cljs.core.Keyword(null, "lon", "lon", 
522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [21.1852, 21.1853], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101479], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1992, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Enontekiö Karesuvanto 1992-", new cljs.core.Keyword(null, "lat", "lat", -580793929), 
new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [68.4504, 68.4505], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [22.49539, 22.49549], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101968], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1992, new cljs.core.Keyword(null, "end", "end", -268185958), 
1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Sotkamo Kuolaniemi 1992-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [64.11148, 64.11714], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [28.32982, 28.33881], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101756], null), new cljs.core.PersistentArrayMap(null, 
6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1992, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Kirkkonummi Mäkiluoto 1992-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [59.91676, 59.92019], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
[24.34679, 24.34939], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 100997], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1992, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Virrat Äijänneva 1992-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [62.32778, 62.32788], 
null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [23.54223, 23.54233], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101310], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1992, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Kauhajoki Kuja-Kokko 1992-", new cljs.core.Keyword(null, 
"lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [62.4134, 62.4135], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [22.18367, 22.18377], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101289], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1992, new cljs.core.Keyword(null, 
"end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Juva Partala 1992-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [61.89225, 61.89235], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [27.88523, 27.88533], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101418], 
null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1992, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Toholampi Laitala 1992-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [63.78357, 63.82145], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 
2, 5, cljs.core.PersistentVector.EMPTY_NODE, [24.16296, 24.16361], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101689], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1992, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Pyhäjärvi Ojakylä 1992-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
[63.73595, 63.75038], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [25.70564, 25.71316], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101705], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1992, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Lappeenranta Konnunsuo 1992-", 
new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [61.03874, 61.03884], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [28.5639, 28.564], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101246], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1992, 
new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Parikkala Koitsanlahti 1992-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [61.44462, 61.44472], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [29.46103, 29.46113], null), new cljs.core.Keyword(null, 
"id", "id", -1388402092), 101254], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1992, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Parainen Fagerholm 1992-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [60.11158, 60.11168], null), new cljs.core.Keyword(null, "lon", "lon", 
522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [21.69934, 21.69944], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 100924], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1992, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Tampere Siilinkari 1992-", new cljs.core.Keyword(null, "lat", "lat", -580793929), 
new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [61.51752, 61.51762], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [23.75364, 23.75374], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101311], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1993, new cljs.core.Keyword(null, "end", "end", -268185958), 
1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Kuusamo Rukatunturi 1993-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [66.16564, 66.16724], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [29.14627, 29.15156], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101897], null), new cljs.core.PersistentArrayMap(null, 
6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1994, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Puolanka Kotila 1994-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [64.66594, 64.66715], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
[28.02918, 28.0465], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101830], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1995, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Lappeenranta Lepola 1995-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [61.05024, 
61.05759], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [28.19687, 28.20878], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101247], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1995, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Pietarsaari Kallan 1995-", 
new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [63.75019, 63.75151], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [22.52285, 22.52964], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101660], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 
1995, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Pelkosenniemi Pyhätunturi 1995-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [67.02199, 67.02209], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [27.21835, 27.21845], null), new cljs.core.Keyword(null, 
"id", "id", -1388402092), 101958], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1995, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Kittilä Levitunturi 1995-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [67.78467, 67.78477], null), new cljs.core.Keyword(null, "lon", "lon", 
522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [24.85314, 24.85324], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101981], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1995, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Inari Saariselkä Kaunispää 1995-", new cljs.core.Keyword(null, "lat", "lat", -580793929), 
new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [68.43263, 68.43273], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [27.44466, 27.44476], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 102006], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1996, new cljs.core.Keyword(null, "end", "end", -268185958), 
1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Alajärvi Möksy 1996-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [63.08354, 63.08906], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [24.26093, 24.26317], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101533], null), new cljs.core.PersistentArrayMap(null, 
6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1996, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Kokkola Tankar 1996-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [63.95021, 63.95092], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
[22.84434, 22.8463], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101661], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1996, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Pori Tahkoluoto 1996-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [61.63035, 61.63045], 
null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [21.37587, 21.37597], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101267], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1996, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Muonio Laukukero 1996-", new cljs.core.Keyword(null, 
"lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [68.06279, 68.06289], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [24.0333, 24.0334], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101982], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1996, new cljs.core.Keyword(null, 
"end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Muonio Sammaltunturi 1996-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [67.96711, 67.97337], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [24.11229, 24.11594], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 
101983], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1996, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Oulu Vihreäsaari 1996-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [65.00616, 65.00626], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 
2, 5, cljs.core.PersistentVector.EMPTY_NODE, [25.39313, 25.39323], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101794], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1997, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Pyhäjärvi Hiidenniemi 1997-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
[63.61, 63.61], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [25.47, 25.47], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101706], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1997, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Tampere Härmälä 1997-", 
new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [61.46567, 61.46577], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [23.74649, 23.74659], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101124], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 
1997, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Liperi Tuiskavanluoto 1997-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [62.54617, 62.54627], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [29.66845, 29.66855], null), new cljs.core.Keyword(null, 
"id", "id", -1388402092), 101628], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1997, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Maalahti Strömmingsbådan 1997-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [62.97844, 62.97854], null), new cljs.core.Keyword(null, "lon", 
"lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [20.73983, 20.73993], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101481], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1997, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Rantasalmi Rukkasluoto 1997-", new cljs.core.Keyword(null, "lat", "lat", -580793929), 
new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [62.06307, 62.06317], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [28.56594, 28.56604], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101436], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1997, new cljs.core.Keyword(null, "end", "end", -268185958), 
1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Kristiinankaupunki Majakka 1997-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [62.20343, 62.20353], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [21.16966, 21.16976], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101268], null), new cljs.core.PersistentArrayMap(null, 
6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1997, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Kuhmo Raiskio 1997-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [64.05567, 64.05577], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
[29.3138, 29.3139], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101771], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1997, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Raahe Nahkiainen 1997-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [64.61194, 64.61204], 
null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [23.89617, 23.89627], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101775], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1997, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Rovaniemi rautatieasema 1997-", 
new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [66.4984, 66.4985], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [25.70821, 25.70831], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101928], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 
1997, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Kuhmo Kalliojoki 1997-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [64.29781, 64.29791], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [30.16647, 30.16657], null), new cljs.core.Keyword(null, 
"id", "id", -1388402092), 101773], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1997, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Ruokolahti Kotaniemi Siitonen 1997-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [61.36693, 61.36847], null), new cljs.core.Keyword(null, 
"lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [28.66353, 28.68024], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101248], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1998, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Kankaanpää Niinisalo lentokenttä 1998-", new cljs.core.Keyword(null, 
"lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [61.83844, 61.84188], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [22.46314, 22.46379], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101291], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1998, new cljs.core.Keyword(null, 
"end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Kuusamo Teeriranta 1998-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [65.52007, 65.52017], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [29.52072, 29.52082], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 
101898], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1999, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Salla kk Myllytie 1999-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [66.83398, 66.83408], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 
2, 5, cljs.core.PersistentVector.EMPTY_NODE, [28.67422, 28.67432], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101959], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1999, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Pudasjärvi lentokenttä 1999-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
[65.40009, 65.40019], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [26.96306, 26.96316], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101805], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1999, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Ilomantsi Mekrijärvi 1999-", 
new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [62.76961, 62.76971], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [30.97528, 30.97538], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101651], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 
1999, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Salla Naruska 1999-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [67.16221, 67.16231], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [29.17761, 29.17771], null), new cljs.core.Keyword(null, 
"id", "id", -1388402092), 101966], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1999, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Kittilä lentoasema 1999-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [67.68377, 67.69607], null), new cljs.core.Keyword(null, "lon", "lon", 
522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [24.84572, 24.85821], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101986], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 1999, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Joroinen Varkauden lentoasema 1999-", new cljs.core.Keyword(null, "lat", "lat", -580793929), 
new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [62.17389, 62.17399], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [27.86033, 27.86043], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101420], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 2E3, new cljs.core.Keyword(null, "end", "end", -268185958), 
1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Ylivieska lentokenttä 2000-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [64.03666, 64.05023], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [24.71879, 24.72417], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101690], null), new cljs.core.PersistentArrayMap(null, 
6, [new cljs.core.Keyword(null, "start", "start", -355208981), 2E3, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Ylivieska Vähäkangas 2000-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [64.06666, 64.06676], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
[24.67351, 24.67361], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101691], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 2E3, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Kajaani Paltaniemi 2000-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [64.29149, 64.29159], 
null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [27.63676, 27.63686], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101742], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 2E3, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Kumlinge kirkonkylä 2000-", new cljs.core.Keyword(null, 
"lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [60.25807, 60.25817], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [20.74715, 20.74725], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 100928], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 2001, new cljs.core.Keyword(null, 
"end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Hämeenlinna Katinen 2001-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [60.99931, 60.99941], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [24.49139, 24.49149], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 
101150], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 2002, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Salo Kiikala lentokenttä 2002-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [60.46409, 60.46419], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 
2, 5, cljs.core.PersistentVector.EMPTY_NODE, [23.64976, 23.64986], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 100967], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 2002, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Taivalkoski kk Kauppatie 2002-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, 
cljs.core.PersistentVector.EMPTY_NODE, [65.57432, 65.57442], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [28.24436, 28.24446], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101885], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 2002, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", 
"title", 636505583), "Kittilä Kenttärova 2002-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [67.98723, 67.98733], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [24.24283, 24.24293], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101987], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, 
"start", "start", -355208981), 2002, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Tornio Aapajärvi 2002-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [66.06956, 66.06966], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [24.14416, 24.14426], 
null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101850], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 2003, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Turku Artukainen 2003-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [60.45449, 60.45459], null), new cljs.core.Keyword(null, 
"lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [22.1783, 22.1784], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 100949], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 2003, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Inari Rajajooseppi 2003-", new cljs.core.Keyword(null, "lat", "lat", 
-580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [68.47795, 68.47805], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [28.30118, 28.30128], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 102009], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 2003, new cljs.core.Keyword(null, "end", 
"end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Helsinki Helsingin majakka 2003-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [59.94844, 59.94854], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [24.9268, 24.9269], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 
101003], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 2003, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Inari kirkonkylä 2003-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [68.90582, 68.90592], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 
2, 5, cljs.core.PersistentVector.EMPTY_NODE, [27.01397, 27.01407], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 102046], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 2004, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Kittilä Alakylä 2004-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
[67.26245, 67.26255], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [24.96584, 24.96594], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101918], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 2005, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Espoo Sepänkylä 2005-", 
new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [60.20769, 60.20779], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [24.74117, 24.74127], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101005], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 
2005, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Kuopio Savilahti 2005-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [62.89255, 62.89265], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [27.6334, 27.6335], null), new cljs.core.Keyword(null, 
"id", "id", -1388402092), 101586], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 2005, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Hämeenlinna Lammi Evo 2005-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [61.21655, 61.21665], null), new cljs.core.Keyword(null, "lon", "lon", 
522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [25.13278, 25.13288], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101189], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 2006, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Helsinki Kumpula 2006-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 
2, 5, cljs.core.PersistentVector.EMPTY_NODE, [60.20277, 60.20312], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [24.96104, 24.96136], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101004], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 2006, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, 
"title", "title", 636505583), "Kemijärvi lentokenttä 2006-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [66.71551, 66.71561], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [27.15907, 27.15917], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101950], null), new cljs.core.PersistentArrayMap(null, 
6, [new cljs.core.Keyword(null, "start", "start", -355208981), 2006, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Porvoo Harabacka 2006-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [60.39153, 60.39163], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
[25.60818, 25.60828], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101028], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 2006, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Hattula Lepaa 2006-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [61.11473, 61.11483], 
null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [24.3244, 24.3245], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101151], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 2008, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Varkaus Kosulanniemi 2008-", new cljs.core.Keyword(null, 
"lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [62.32223, 62.32233], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [27.90782, 27.90792], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101421], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 2008, new cljs.core.Keyword(null, 
"end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Kokkola Hollihaka 2008-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [63.84439, 63.84449], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [23.12428, 23.12438], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 
101675], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 2008, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Oulu Oulunsalo Pellonpää 2008-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [64.93783, 64.93793], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 
2, 5, cljs.core.PersistentVector.EMPTY_NODE, [25.37176, 25.37186], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101799], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 2008, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Tornio Torppi 2008-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
[65.84701, 65.84711], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [24.17348, 24.17358], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101851], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 2008, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Inari Kaamanen 2008-", 
new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [69.14084, 69.14094], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [27.26562, 27.26572], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 102047], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 
2008, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Ranua lentokenttä 2008-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [65.97679, 65.97689], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [26.36749, 26.36759], null), new cljs.core.Keyword(null, 
"id", "id", -1388402092), 101873], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 2008, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Multia Karhila 2008-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [62.51039, 62.51049], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), 
new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [24.80759, 24.80769], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101536], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 2008, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Jämsä Halli Lentoasemantie 2008-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 
2, 5, cljs.core.PersistentVector.EMPTY_NODE, [61.85962, 61.85972], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [24.81492, 24.81502], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101338], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 2008, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, 
"title", "title", 636505583), "Kouvola Utti Lentoportintie 2008-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [60.89047, 60.89057], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [26.94125, 26.94135], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101219], null), new cljs.core.PersistentArrayMap(null, 
6, [new cljs.core.Keyword(null, "start", "start", -355208981), 2008, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Inari Angeli Lintupuoliselkä 2008-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [68.90291, 68.90301], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
[25.73641, 25.73651], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 102026], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 2008, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Pori rautatieasema 2008-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [61.47888, 
61.47898], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [21.78315, 21.78325], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101064], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 2008, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Kauhava kk Uunimaantie 2008-", 
new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [63.12018, 63.12028], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [23.04355, 23.04365], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101519], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 
2008, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Joensuu Linnunlahti 2008-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [62.6015, 62.6016], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [29.72375, 29.72385], null), new cljs.core.Keyword(null, 
"id", "id", -1388402092), 101632], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 2009, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Inari Kirakkajärvi 2009-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [69.58245, 69.58255], null), new cljs.core.Keyword(null, "lon", "lon", 
522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [28.89404, 28.89414], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 102055], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 2009, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Kemiönsaari Kemiö kk 2009-", new cljs.core.Keyword(null, "lat", "lat", -580793929), 
new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [60.17145, 60.17155], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [22.75752, 22.75762], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 100951], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 2009, new cljs.core.Keyword(null, "end", "end", -268185958), 
1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Puolanka Paljakka 2009-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [64.66399, 64.66409], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [28.05668, 28.05678], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101831], null), new cljs.core.PersistentArrayMap(null, 
6, [new cljs.core.Keyword(null, "start", "start", -355208981), 2009, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Helsinki Rautatientori 2009-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [60.17164, 60.17174], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
[24.94455, 24.94465], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101007], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 2009, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Kittilä kk 2009-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [67.65205, 67.65215], 
null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [24.90157, 24.90167], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101990], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 2009, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Lappeenranta Hiekkapakka 2009-", 
new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [61.19803, 61.19813], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [28.47269, 28.47279], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101252], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 
2010, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Kokemäki Tulkkila 2010-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [61.25289, 61.25299], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [22.34608, 22.34618], null), new cljs.core.Keyword(null, 
"id", "id", -1388402092), 101103], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 2010, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Vaasa Klemettilä 2010-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [63.0987, 63.0988], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), 
new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [21.63947, 21.63957], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101485], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 2010, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Utsjoki Kevo Kevojärvi 2010-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 
2, 5, cljs.core.PersistentVector.EMPTY_NODE, [69.75695, 69.75705], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [27.01195, 27.01205], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 126737], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 2010, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, 
"title", "title", 636505583), "Kittilä Matorova 2010-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [67.99993, 68.00003], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [24.23998, 24.24008], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101985], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, 
"start", "start", -355208981), 2010, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Kajaani Petäisenniska 2010-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [64.21662, 64.21672], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [27.75495, 27.75505], 
null), new cljs.core.Keyword(null, "id", "id", -1388402092), 126736], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 2011, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Inari Seitalaassa 2011-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [69.04827, 69.04837], null), new cljs.core.Keyword(null, 
"lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [27.75677, 27.75687], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 129963], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 2011, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Somero Salkola 2011-", new cljs.core.Keyword(null, "lat", "lat", -580793929), 
new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [60.6465, 60.6466], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [23.80584, 23.80594], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 101128], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 2011, new cljs.core.Keyword(null, "end", "end", -268185958), 
1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Vaala Pelso Puutteenperä 2011-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [64.51128, 64.51138], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [26.46051, 26.46061], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 134522], null), new cljs.core.PersistentArrayMap(null, 
6, [new cljs.core.Keyword(null, "start", "start", -355208981), 2012, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Puumala kk Urheilukenttä 2012-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [61.52237, 61.52247], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
[28.18486, 28.18496], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 150168], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 2013, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Helsinki Harmaja 2013-", new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [60.10011, 60.10493], 
null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [24.97541, 24.98023], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 100996], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "start", "start", -355208981), 2013, new cljs.core.Keyword(null, "end", "end", -268185958), 1E4, new cljs.core.Keyword(null, "title", "title", 636505583), "Tampere keskusta Satakunnankatu 2013-", 
new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [61.50118, 61.50128], null), new cljs.core.Keyword(null, "lon", "lon", 522068437), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [23.76463, 23.76473], null), new cljs.core.Keyword(null, "id", "id", -1388402092), 151049], null)], true);
observation_data.observation_points.name_to_record = cljs.core.apply.call(null, cljs.core.hash_map, cljs.core.flatten.call(null, cljs.core.map.call(null, function(el) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.Keyword(null, "title", "title", 636505583)).cljs$core$IFn$_invoke$arity$1(el), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "id", "id", -1388402092), (new cljs.core.Keyword(null, "id", "id", -1388402092)).cljs$core$IFn$_invoke$arity$1(el), new cljs.core.Keyword(null, "start", "start", -355208981), (new cljs.core.Keyword(null, "start", "start", -355208981)).cljs$core$IFn$_invoke$arity$1(el), 
  new cljs.core.Keyword(null, "end", "end", -268185958), (new cljs.core.Keyword(null, "end", "end", -268185958)).cljs$core$IFn$_invoke$arity$1(el)], null)], null);
}, observation_data.observation_points.metadata)));
observation_data.observation_points.name_to_id = function observation_data$observation_points$name_to_id(name) {
  return (new cljs.core.Keyword(null, "id", "id", -1388402092)).cljs$core$IFn$_invoke$arity$1(observation_data.observation_points.name_to_record.call(null, name));
};
goog.provide("weather_canvas.core");
goog.require("cljs.core");
goog.require("weather_canvas.templates");
goog.require("weather_canvas.weather");
goog.require("observation_data.observation_points");
goog.require("dommy.utils");
goog.require("hipo.core");
goog.require("goog.ui.ac");
goog.require("goog.string");
goog.require("goog.string.format");
goog.require("cljs.core.async");
goog.require("dommy.core");
goog.require("weather_canvas.canvas_buffer");
goog.require("weather_canvas.events");
weather_canvas.core.days_in_month = new cljs.core.PersistentVector(null, 12, 5, cljs.core.PersistentVector.EMPTY_NODE, [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], null);
weather_canvas.core.init_ui = function weather_canvas$core$init_ui() {
  var el = weather_canvas.templates.query_form.call(null, 1);
  var submit_form = dommy.utils.__GT_Array.call(null, dommy.core.append_BANG_.call(null, document.querySelector("body .form-wrapper"), el).getElementsByTagName("form"))[0];
  var submit_channel = weather_canvas.events.listen.call(null, submit_form, new cljs.core.Keyword(null, "submit", "submit", -49315317));
  var years_channel = weather_canvas.events.listen.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [submit_form, new cljs.core.Keyword(null, ".year", ".year", 1331310096)], null), new cljs.core.Keyword(null, "change", "change", -1163046502));
  var c__4636__auto___73161 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function() {
    var f__4637__auto__ = function() {
      var switch__4605__auto__ = function(state_73037) {
        var state_val_73038 = state_73037[1];
        if (state_val_73038 === 7) {
          var inst_72886 = state_73037[7];
          var inst_72877 = state_73037[8];
          var inst_72875 = state_73037[2];
          var inst_72876 = inst_72875.target;
          var inst_72877__$1 = weather_canvas.core.handle_form.call(null, inst_72876);
          var inst_72878 = inst_72877__$1.call(null, "year-start");
          var inst_72879 = inst_72878 | 0;
          var inst_72880 = inst_72877__$1.call(null, "year-end");
          var inst_72881 = inst_72880 | 0;
          var inst_72883 = cljs.core.PersistentVector.EMPTY_NODE;
          var inst_72884 = [new cljs.core.Keyword(null, "canvas#weather-canvas", "canvas#weather-canvas", 732044373)];
          var inst_72885 = new cljs.core.PersistentVector(null, 1, 5, inst_72883, inst_72884, null);
          var inst_72886__$1 = hipo.interpreter.create.call(null, inst_72885, null);
          var inst_72887 = hipo.core.set_hiccup_BANG_.call(null, inst_72886__$1, inst_72885);
          var inst_72888 = inst_72877__$1.call(null, "order");
          var inst_72889 = document.querySelector("body .headers-top");
          var inst_72890 = cljs.core.async.timeout.call(null, 100);
          var state_73037__$1 = function() {
            var statearr_73039 = state_73037;
            statearr_73039[9] = inst_72888;
            statearr_73039[7] = inst_72886__$1;
            statearr_73039[10] = inst_72881;
            statearr_73039[11] = inst_72879;
            statearr_73039[8] = inst_72877__$1;
            statearr_73039[12] = inst_72889;
            statearr_73039[13] = inst_72887;
            return statearr_73039;
          }();
          return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_73037__$1, 8, inst_72890);
        } else {
          if (state_val_73038 === 20) {
            var inst_72976 = state_73037[14];
            var inst_72975 = state_73037[15];
            var inst_72978 = inst_72976 < inst_72975;
            var inst_72979 = inst_72978;
            var state_73037__$1 = state_73037;
            if (cljs.core.truth_(inst_72979)) {
              var statearr_73040_73162 = state_73037__$1;
              statearr_73040_73162[1] = 22;
            } else {
              var statearr_73041_73163 = state_73037__$1;
              statearr_73041_73163[1] = 23;
            }
            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
          } else {
            if (state_val_73038 === 27) {
              var inst_73015 = state_73037[2];
              var state_73037__$1 = state_73037;
              var statearr_73042_73164 = state_73037__$1;
              statearr_73042_73164[2] = inst_73015;
              statearr_73042_73164[1] = 24;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_73038 === 1) {
                var state_73037__$1 = state_73037;
                var statearr_73043_73165 = state_73037__$1;
                statearr_73043_73165[2] = null;
                statearr_73043_73165[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_73038 === 24) {
                  var inst_73017 = state_73037[2];
                  var state_73037__$1 = state_73037;
                  var statearr_73044_73166 = state_73037__$1;
                  statearr_73044_73166[2] = inst_73017;
                  statearr_73044_73166[1] = 21;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_73038 === 4) {
                    var state_73037__$1 = state_73037;
                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_73037__$1, 7, submit_channel);
                  } else {
                    if (state_val_73038 === 15) {
                      var state_73037__$1 = state_73037;
                      var statearr_73045_73167 = state_73037__$1;
                      statearr_73045_73167[2] = null;
                      statearr_73045_73167[1] = 16;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_73038 === 21) {
                        var inst_72881 = state_73037[10];
                        var inst_72879 = state_73037[11];
                        var inst_73019 = state_73037[2];
                        var inst_73020 = inst_72881 < inst_72879;
                        var state_73037__$1 = function() {
                          var statearr_73046 = state_73037;
                          statearr_73046[16] = inst_73019;
                          return statearr_73046;
                        }();
                        if (cljs.core.truth_(inst_73020)) {
                          var statearr_73047_73168 = state_73037__$1;
                          statearr_73047_73168[1] = 31;
                        } else {
                          var statearr_73048_73169 = state_73037__$1;
                          statearr_73048_73169[1] = 32;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_73038 === 31) {
                          var inst_72879 = state_73037[11];
                          var state_73037__$1 = state_73037;
                          var statearr_73049_73170 = state_73037__$1;
                          statearr_73049_73170[2] = inst_72879;
                          statearr_73049_73170[1] = 33;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_73038 === 32) {
                            var inst_72881 = state_73037[10];
                            var state_73037__$1 = state_73037;
                            var statearr_73050_73171 = state_73037__$1;
                            statearr_73050_73171[2] = inst_72881;
                            statearr_73050_73171[1] = 33;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_73038 === 33) {
                              var inst_72888 = state_73037[9];
                              var inst_72886 = state_73037[7];
                              var inst_72879 = state_73037[11];
                              var inst_72877 = state_73037[8];
                              var inst_73024 = state_73037[2];
                              var inst_73025 = inst_72877.call(null, "location");
                              var inst_73026 = observation_data.observation_points.name_to_id.call(null, inst_73025);
                              var inst_73027 = inst_72877.call(null, "quantity");
                              var inst_73028 = cljs.core._EQ_.call(null, "value", inst_72888);
                              var inst_73029 = weather_canvas.weather.draw_async.call(null, inst_72886, inst_72879, inst_73024, inst_73026, inst_73027, inst_73028);
                              var state_73037__$1 = function() {
                                var statearr_73054 = state_73037;
                                statearr_73054[17] = inst_73029;
                                return statearr_73054;
                              }();
                              var statearr_73055_73172 = state_73037__$1;
                              statearr_73055_73172[2] = null;
                              statearr_73055_73172[1] = 2;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_73038 === 13) {
                                var inst_72951 = state_73037[2];
                                var state_73037__$1 = state_73037;
                                var statearr_73056_73173 = state_73037__$1;
                                statearr_73056_73173[2] = inst_72951;
                                statearr_73056_73173[1] = 10;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_73038 === 22) {
                                  var inst_72958 = state_73037[18];
                                  var inst_72973 = state_73037[19];
                                  var inst_72976 = state_73037[14];
                                  var inst_72974 = state_73037[20];
                                  var inst_72975 = state_73037[15];
                                  var inst_72981 = cljs.core._nth.call(null, inst_72974, inst_72976);
                                  var inst_72983 = cljs.core.PersistentVector.EMPTY_NODE;
                                  var inst_72984 = [new cljs.core.Keyword(null, "div.year", "div.year", 24092591), inst_72981];
                                  var inst_72985 = new cljs.core.PersistentVector(null, 2, 5, inst_72983, inst_72984, null);
                                  var inst_72986 = hipo.interpreter.create.call(null, inst_72985, null);
                                  var inst_72987 = hipo.core.set_hiccup_BANG_.call(null, inst_72986, inst_72985);
                                  var inst_72988 = dommy.core.append_BANG_.call(null, inst_72958, inst_72986);
                                  var inst_72989 = inst_72976 + 1;
                                  var tmp73051 = inst_72973;
                                  var tmp73052 = inst_72974;
                                  var tmp73053 = inst_72975;
                                  var inst_72973__$1 = tmp73051;
                                  var inst_72974__$1 = tmp73052;
                                  var inst_72975__$1 = tmp73053;
                                  var inst_72976__$1 = inst_72989;
                                  var state_73037__$1 = function() {
                                    var statearr_73057 = state_73037;
                                    statearr_73057[21] = inst_72987;
                                    statearr_73057[19] = inst_72973__$1;
                                    statearr_73057[22] = inst_72988;
                                    statearr_73057[14] = inst_72976__$1;
                                    statearr_73057[20] = inst_72974__$1;
                                    statearr_73057[15] = inst_72975__$1;
                                    return statearr_73057;
                                  }();
                                  var statearr_73058_73174 = state_73037__$1;
                                  statearr_73058_73174[2] = null;
                                  statearr_73058_73174[1] = 20;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_73038 === 29) {
                                    var inst_72992 = state_73037[23];
                                    var inst_72958 = state_73037[18];
                                    var inst_73001 = cljs.core.first.call(null, inst_72992);
                                    var inst_73003 = cljs.core.PersistentVector.EMPTY_NODE;
                                    var inst_73004 = [new cljs.core.Keyword(null, "div.year", "div.year", 24092591), inst_73001];
                                    var inst_73005 = new cljs.core.PersistentVector(null, 2, 5, inst_73003, inst_73004, null);
                                    var inst_73006 = hipo.interpreter.create.call(null, inst_73005, null);
                                    var inst_73007 = hipo.core.set_hiccup_BANG_.call(null, inst_73006, inst_73005);
                                    var inst_73008 = dommy.core.append_BANG_.call(null, inst_72958, inst_73006);
                                    var inst_73009 = cljs.core.next.call(null, inst_72992);
                                    var inst_72973 = inst_73009;
                                    var inst_72974 = null;
                                    var inst_72975 = 0;
                                    var inst_72976 = 0;
                                    var state_73037__$1 = function() {
                                      var statearr_73059 = state_73037;
                                      statearr_73059[24] = inst_73007;
                                      statearr_73059[19] = inst_72973;
                                      statearr_73059[25] = inst_73008;
                                      statearr_73059[14] = inst_72976;
                                      statearr_73059[20] = inst_72974;
                                      statearr_73059[15] = inst_72975;
                                      return statearr_73059;
                                    }();
                                    var statearr_73060_73175 = state_73037__$1;
                                    statearr_73060_73175[2] = null;
                                    statearr_73060_73175[1] = 20;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_73038 === 6) {
                                      var inst_73033 = state_73037[2];
                                      var state_73037__$1 = state_73037;
                                      var statearr_73061_73176 = state_73037__$1;
                                      statearr_73061_73176[2] = inst_73033;
                                      statearr_73061_73176[1] = 3;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_73038 === 28) {
                                        var inst_72992 = state_73037[23];
                                        var inst_72996 = cljs.core.chunk_first.call(null, inst_72992);
                                        var inst_72997 = cljs.core.chunk_rest.call(null, inst_72992);
                                        var inst_72998 = cljs.core.count.call(null, inst_72996);
                                        var inst_72973 = inst_72997;
                                        var inst_72974 = inst_72996;
                                        var inst_72975 = inst_72998;
                                        var inst_72976 = 0;
                                        var state_73037__$1 = function() {
                                          var statearr_73062 = state_73037;
                                          statearr_73062[19] = inst_72973;
                                          statearr_73062[14] = inst_72976;
                                          statearr_73062[20] = inst_72974;
                                          statearr_73062[15] = inst_72975;
                                          return statearr_73062;
                                        }();
                                        var statearr_73063_73177 = state_73037__$1;
                                        statearr_73063_73177[2] = null;
                                        statearr_73063_73177[1] = 20;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_73038 === 25) {
                                          var inst_72992 = state_73037[23];
                                          var inst_72994 = cljs.core.chunked_seq_QMARK_.call(null, inst_72992);
                                          var state_73037__$1 = state_73037;
                                          if (inst_72994) {
                                            var statearr_73064_73178 = state_73037__$1;
                                            statearr_73064_73178[1] = 28;
                                          } else {
                                            var statearr_73065_73179 = state_73037__$1;
                                            statearr_73065_73179[1] = 29;
                                          }
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_73038 === 17) {
                                            var inst_72924 = state_73037[26];
                                            var inst_72928 = cljs.core.chunk_first.call(null, inst_72924);
                                            var inst_72929 = cljs.core.chunk_rest.call(null, inst_72924);
                                            var inst_72930 = cljs.core.count.call(null, inst_72928);
                                            var inst_72903 = inst_72929;
                                            var inst_72904 = inst_72928;
                                            var inst_72905 = inst_72930;
                                            var inst_72906 = 0;
                                            var state_73037__$1 = function() {
                                              var statearr_73066 = state_73037;
                                              statearr_73066[27] = inst_72903;
                                              statearr_73066[28] = inst_72906;
                                              statearr_73066[29] = inst_72905;
                                              statearr_73066[30] = inst_72904;
                                              return statearr_73066;
                                            }();
                                            var statearr_73067_73180 = state_73037__$1;
                                            statearr_73067_73180[2] = null;
                                            statearr_73067_73180[1] = 9;
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_73038 === 3) {
                                              var inst_73035 = state_73037[2];
                                              var state_73037__$1 = state_73037;
                                              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_73037__$1, inst_73035);
                                            } else {
                                              if (state_val_73038 === 12) {
                                                var inst_72903 = state_73037[27];
                                                var inst_72924 = state_73037[26];
                                                var inst_72924__$1 = cljs.core.seq.call(null, inst_72903);
                                                var state_73037__$1 = function() {
                                                  var statearr_73068 = state_73037;
                                                  statearr_73068[26] = inst_72924__$1;
                                                  return statearr_73068;
                                                }();
                                                if (inst_72924__$1) {
                                                  var statearr_73069_73181 = state_73037__$1;
                                                  statearr_73069_73181[1] = 14;
                                                } else {
                                                  var statearr_73070_73182 = state_73037__$1;
                                                  statearr_73070_73182[1] = 15;
                                                }
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_73038 === 2) {
                                                  var state_73037__$1 = state_73037;
                                                  var statearr_73071_73183 = state_73037__$1;
                                                  statearr_73071_73183[1] = 4;
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_73038 === 23) {
                                                    var inst_72992 = state_73037[23];
                                                    var inst_72973 = state_73037[19];
                                                    var inst_72992__$1 = cljs.core.seq.call(null, inst_72973);
                                                    var state_73037__$1 = function() {
                                                      var statearr_73076 = state_73037;
                                                      statearr_73076[23] = inst_72992__$1;
                                                      return statearr_73076;
                                                    }();
                                                    if (inst_72992__$1) {
                                                      var statearr_73077_73184 = state_73037__$1;
                                                      statearr_73077_73184[1] = 25;
                                                    } else {
                                                      var statearr_73078_73185 = state_73037__$1;
                                                      statearr_73078_73185[1] = 26;
                                                    }
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_73038 === 19) {
                                                      var inst_72946 = state_73037[2];
                                                      var state_73037__$1 = state_73037;
                                                      var statearr_73079_73186 = state_73037__$1;
                                                      statearr_73079_73186[2] = inst_72946;
                                                      statearr_73079_73186[1] = 16;
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      if (state_val_73038 === 11) {
                                                        var inst_72903 = state_73037[27];
                                                        var inst_72906 = state_73037[28];
                                                        var inst_72905 = state_73037[29];
                                                        var inst_72904 = state_73037[30];
                                                        var inst_72914 = cljs.core._nth.call(null, inst_72904, inst_72906);
                                                        var inst_72915 = cljs.core.nth.call(null, inst_72914, 0, null);
                                                        var inst_72916 = cljs.core.nth.call(null, inst_72914, 1, null);
                                                        var inst_72917 = weather_canvas.canvas_buffer.size_x * inst_72916;
                                                        var inst_72918 = inst_72917 - 21;
                                                        var inst_72919 = goog.string.format("width: %spx;", inst_72918);
                                                        var inst_72920 = dommy.core.set_attr_BANG_.call(null, inst_72915, new cljs.core.Keyword(null, "style", "style", -496642736), inst_72919);
                                                        var inst_72921 = inst_72906 + 1;
                                                        var tmp73073 = inst_72903;
                                                        var tmp73074 = inst_72905;
                                                        var tmp73075 = inst_72904;
                                                        var inst_72903__$1 = tmp73073;
                                                        var inst_72904__$1 = tmp73075;
                                                        var inst_72905__$1 = tmp73074;
                                                        var inst_72906__$1 = inst_72921;
                                                        var state_73037__$1 = function() {
                                                          var statearr_73080 = state_73037;
                                                          statearr_73080[27] = inst_72903__$1;
                                                          statearr_73080[31] = inst_72920;
                                                          statearr_73080[28] = inst_72906__$1;
                                                          statearr_73080[29] = inst_72905__$1;
                                                          statearr_73080[30] = inst_72904__$1;
                                                          return statearr_73080;
                                                        }();
                                                        var statearr_73081_73187 = state_73037__$1;
                                                        statearr_73081_73187[2] = null;
                                                        statearr_73081_73187[1] = 9;
                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                      } else {
                                                        if (state_val_73038 === 9) {
                                                          var inst_72906 = state_73037[28];
                                                          var inst_72905 = state_73037[29];
                                                          var inst_72908 = inst_72906 < inst_72905;
                                                          var inst_72909 = inst_72908;
                                                          var state_73037__$1 = state_73037;
                                                          if (cljs.core.truth_(inst_72909)) {
                                                            var statearr_73082_73188 = state_73037__$1;
                                                            statearr_73082_73188[1] = 11;
                                                          } else {
                                                            var statearr_73083_73189 = state_73037__$1;
                                                            statearr_73083_73189[1] = 12;
                                                          }
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          if (state_val_73038 === 5) {
                                                            var state_73037__$1 = state_73037;
                                                            var statearr_73084_73190 = state_73037__$1;
                                                            statearr_73084_73190[2] = null;
                                                            statearr_73084_73190[1] = 6;
                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                          } else {
                                                            if (state_val_73038 === 14) {
                                                              var inst_72924 = state_73037[26];
                                                              var inst_72926 = cljs.core.chunked_seq_QMARK_.call(null, inst_72924);
                                                              var state_73037__$1 = state_73037;
                                                              if (inst_72926) {
                                                                var statearr_73085_73191 = state_73037__$1;
                                                                statearr_73085_73191[1] = 17;
                                                              } else {
                                                                var statearr_73086_73192 = state_73037__$1;
                                                                statearr_73086_73192[1] = 18;
                                                              }
                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                            } else {
                                                              if (state_val_73038 === 26) {
                                                                var state_73037__$1 = state_73037;
                                                                var statearr_73087_73193 = state_73037__$1;
                                                                statearr_73087_73193[2] = null;
                                                                statearr_73087_73193[1] = 27;
                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                              } else {
                                                                if (state_val_73038 === 16) {
                                                                  var inst_72949 = state_73037[2];
                                                                  var state_73037__$1 = state_73037;
                                                                  var statearr_73088_73194 = state_73037__$1;
                                                                  statearr_73088_73194[2] = inst_72949;
                                                                  statearr_73088_73194[1] = 13;
                                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                } else {
                                                                  if (state_val_73038 === 30) {
                                                                    var inst_73012 = state_73037[2];
                                                                    var state_73037__$1 = state_73037;
                                                                    var statearr_73089_73195 = state_73037__$1;
                                                                    statearr_73089_73195[2] = inst_73012;
                                                                    statearr_73089_73195[1] = 27;
                                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                  } else {
                                                                    if (state_val_73038 === 10) {
                                                                      var inst_72888 = state_73037[9];
                                                                      var inst_72881 = state_73037[10];
                                                                      var inst_72879 = state_73037[11];
                                                                      var inst_72958 = state_73037[18];
                                                                      var inst_72889 = state_73037[12];
                                                                      var inst_72953 = state_73037[2];
                                                                      var inst_72954 = cljs.core._EQ_.call(null, inst_72888, "value");
                                                                      var inst_72955 = dommy.core.toggle_class_BANG_.call(null, inst_72889, "hidden", inst_72954);
                                                                      var inst_72956 = document.getElementsByClassName("headers-right");
                                                                      var inst_72957 = dommy.utils.__GT_Array.call(null, inst_72956);
                                                                      var inst_72958__$1 = inst_72957[0];
                                                                      var inst_72960 = cljs.core.PersistentVector.EMPTY_NODE;
                                                                      var inst_72961 = [new cljs.core.Keyword(null, "div", "div", 1057191632)];
                                                                      var inst_72962 = new cljs.core.PersistentVector(null, 1, 5, inst_72960, inst_72961, null);
                                                                      var inst_72963 = hipo.interpreter.create.call(null, inst_72962, null);
                                                                      var inst_72964 = hipo.core.set_hiccup_BANG_.call(null, inst_72963, inst_72962);
                                                                      var inst_72965 = dommy.core.replace_contents_BANG_.call(null, inst_72958__$1, inst_72963);
                                                                      var inst_72970 = 1 + inst_72881;
                                                                      var inst_72971 = cljs.core.range.call(null, inst_72879, inst_72970);
                                                                      var inst_72972 = cljs.core.seq.call(null, inst_72971);
                                                                      var inst_72973 = inst_72972;
                                                                      var inst_72974 = null;
                                                                      var inst_72975 = 0;
                                                                      var inst_72976 = 0;
                                                                      var state_73037__$1 = function() {
                                                                        var statearr_73090 = state_73037;
                                                                        statearr_73090[32] = inst_72953;
                                                                        statearr_73090[33] = inst_72955;
                                                                        statearr_73090[34] = inst_72965;
                                                                        statearr_73090[18] = inst_72958__$1;
                                                                        statearr_73090[19] = inst_72973;
                                                                        statearr_73090[35] = inst_72964;
                                                                        statearr_73090[14] = inst_72976;
                                                                        statearr_73090[20] = inst_72974;
                                                                        statearr_73090[15] = inst_72975;
                                                                        return statearr_73090;
                                                                      }();
                                                                      var statearr_73091_73196 = state_73037__$1;
                                                                      statearr_73091_73196[2] = null;
                                                                      statearr_73091_73196[1] = 20;
                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                    } else {
                                                                      if (state_val_73038 === 18) {
                                                                        var inst_72924 = state_73037[26];
                                                                        var inst_72936 = cljs.core.first.call(null, inst_72924);
                                                                        var inst_72937 = cljs.core.nth.call(null, inst_72936, 0, null);
                                                                        var inst_72938 = cljs.core.nth.call(null, inst_72936, 1, null);
                                                                        var inst_72939 = weather_canvas.canvas_buffer.size_x * inst_72938;
                                                                        var inst_72940 = inst_72939 - 21;
                                                                        var inst_72941 = goog.string.format("width: %spx;", inst_72940);
                                                                        var inst_72942 = dommy.core.set_attr_BANG_.call(null, inst_72937, new cljs.core.Keyword(null, "style", "style", -496642736), inst_72941);
                                                                        var inst_72943 = cljs.core.next.call(null, inst_72924);
                                                                        var inst_72903 = inst_72943;
                                                                        var inst_72904 = null;
                                                                        var inst_72905 = 0;
                                                                        var inst_72906 = 0;
                                                                        var state_73037__$1 = function() {
                                                                          var statearr_73092 = state_73037;
                                                                          statearr_73092[27] = inst_72903;
                                                                          statearr_73092[36] = inst_72942;
                                                                          statearr_73092[28] = inst_72906;
                                                                          statearr_73092[29] = inst_72905;
                                                                          statearr_73092[30] = inst_72904;
                                                                          return statearr_73092;
                                                                        }();
                                                                        var statearr_73093_73197 = state_73037__$1;
                                                                        statearr_73093_73197[2] = null;
                                                                        statearr_73093_73197[1] = 9;
                                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                      } else {
                                                                        if (state_val_73038 === 8) {
                                                                          var inst_72886 = state_73037[7];
                                                                          var inst_72889 = state_73037[12];
                                                                          var inst_72892 = state_73037[2];
                                                                          var inst_72893 = document.querySelector("body .canvas-wrapper");
                                                                          var inst_72894 = dommy.core.replace_contents_BANG_.call(null, inst_72893, inst_72886);
                                                                          var inst_72899 = inst_72889.getElementsByClassName("month");
                                                                          var inst_72900 = dommy.utils.__GT_Array.call(null, inst_72899);
                                                                          var inst_72901 = cljs.core.map.call(null, cljs.core.list, inst_72900, weather_canvas.core.days_in_month);
                                                                          var inst_72902 = cljs.core.seq.call(null, inst_72901);
                                                                          var inst_72903 = inst_72902;
                                                                          var inst_72904 = null;
                                                                          var inst_72905 = 0;
                                                                          var inst_72906 = 0;
                                                                          var state_73037__$1 = function() {
                                                                            var statearr_73094 = state_73037;
                                                                            statearr_73094[27] = inst_72903;
                                                                            statearr_73094[37] = inst_72892;
                                                                            statearr_73094[28] = inst_72906;
                                                                            statearr_73094[29] = inst_72905;
                                                                            statearr_73094[30] = inst_72904;
                                                                            statearr_73094[38] = inst_72894;
                                                                            return statearr_73094;
                                                                          }();
                                                                          var statearr_73095_73198 = state_73037__$1;
                                                                          statearr_73095_73198[2] = null;
                                                                          statearr_73095_73198[1] = 9;
                                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                        } else {
                                                                          return null;
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      return function() {
        var weather_canvas$core$init_ui_$_state_machine__4606__auto__ = null;
        var weather_canvas$core$init_ui_$_state_machine__4606__auto____0 = function() {
          var statearr_73096 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
          statearr_73096[0] = weather_canvas$core$init_ui_$_state_machine__4606__auto__;
          statearr_73096[1] = 1;
          return statearr_73096;
        };
        var weather_canvas$core$init_ui_$_state_machine__4606__auto____1 = function(state_73037) {
          while (true) {
            var ret_value__4607__auto__ = function() {
              try {
                while (true) {
                  var result__4608__auto__ = switch__4605__auto__.call(null, state_73037);
                  if (cljs.core.keyword_identical_QMARK_.call(null, result__4608__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    continue;
                  } else {
                    return result__4608__auto__;
                  }
                  break;
                }
              } catch (e73097) {
                var ex__4609__auto__ = e73097;
                var statearr_73098_73199 = state_73037;
                statearr_73098_73199[2] = ex__4609__auto__;
                if (cljs.core.seq.call(null, state_73037[4])) {
                  var statearr_73099_73200 = state_73037;
                  statearr_73099_73200[1] = cljs.core.first.call(null, state_73037[4]);
                } else {
                  throw ex__4609__auto__;
                }
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              }
            }();
            if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__4607__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
              var G__73201 = state_73037;
              state_73037 = G__73201;
              continue;
            } else {
              return ret_value__4607__auto__;
            }
            break;
          }
        };
        weather_canvas$core$init_ui_$_state_machine__4606__auto__ = function(state_73037) {
          switch(arguments.length) {
            case 0:
              return weather_canvas$core$init_ui_$_state_machine__4606__auto____0.call(this);
            case 1:
              return weather_canvas$core$init_ui_$_state_machine__4606__auto____1.call(this, state_73037);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        weather_canvas$core$init_ui_$_state_machine__4606__auto__.cljs$core$IFn$_invoke$arity$0 = weather_canvas$core$init_ui_$_state_machine__4606__auto____0;
        weather_canvas$core$init_ui_$_state_machine__4606__auto__.cljs$core$IFn$_invoke$arity$1 = weather_canvas$core$init_ui_$_state_machine__4606__auto____1;
        return weather_canvas$core$init_ui_$_state_machine__4606__auto__;
      }();
    }();
    var state__4638__auto__ = function() {
      var statearr_73100 = f__4637__auto__.call(null);
      statearr_73100[6] = c__4636__auto___73161;
      return statearr_73100;
    }();
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__4638__auto__);
  });
  var c__4636__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function() {
    var f__4637__auto__ = function() {
      var switch__4605__auto__ = function(state_73141) {
        var state_val_73142 = state_73141[1];
        if (state_val_73142 === 7) {
          var inst_73119 = state_73141[7];
          var inst_73104 = state_73141[2];
          var inst_73105 = inst_73104.target;
          var inst_73106 = weather_canvas.core.handle_form.call(null, submit_form);
          var inst_73107 = dommy.core.attr.call(null, inst_73105, new cljs.core.Keyword(null, "data-bound", "data-bound", -845833043));
          var inst_73108 = inst_73106.call(null, "year-start");
          var inst_73109 = inst_73108 | 0;
          var inst_73110 = inst_73106.call(null, "year-end");
          var inst_73111 = inst_73110 | 0;
          var inst_73112 = function() {
            var ev = inst_73104;
            var target = inst_73105;
            var form_contents = inst_73106;
            var bound = inst_73107;
            var start = inst_73109;
            var end = inst_73111;
            return function(p1__72870_SHARP_) {
              return (new cljs.core.Keyword(null, "start", "start", -355208981)).cljs$core$IFn$_invoke$arity$1(p1__72870_SHARP_) <= start;
            };
          }();
          var inst_73113 = cljs.core.sort_by.call(null, new cljs.core.Keyword(null, "start", "start", -355208981), observation_data.observation_points.metadata);
          var inst_73114 = cljs.core.take_while.call(null, inst_73112, inst_73113);
          var inst_73115 = function() {
            var ev = inst_73104;
            var target = inst_73105;
            var form_contents = inst_73106;
            var bound = inst_73107;
            var start = inst_73109;
            var end = inst_73111;
            var subseq = inst_73114;
            return function(p1__72871_SHARP_) {
              return (new cljs.core.Keyword(null, "end", "end", -268185958)).cljs$core$IFn$_invoke$arity$1(p1__72871_SHARP_) < end;
            };
          }();
          var inst_73116 = cljs.core.sort_by.call(null, new cljs.core.Keyword(null, "end", "end", -268185958), inst_73114);
          var inst_73117 = cljs.core.drop_while.call(null, inst_73115, inst_73116);
          var inst_73118 = document.getElementById("query-form-1-location");
          var inst_73119__$1 = inst_73118.value;
          var inst_73120 = observation_data.observation_points.name_to_record.call(null, inst_73119__$1);
          var inst_73121 = (new cljs.core.Keyword(null, "start", "start", -355208981)).cljs$core$IFn$_invoke$arity$1(inst_73120);
          var inst_73122 = inst_73121 <= inst_73109;
          var inst_73123 = (new cljs.core.Keyword(null, "end", "end", -268185958)).cljs$core$IFn$_invoke$arity$1(inst_73120);
          var inst_73124 = inst_73123 >= inst_73111;
          var inst_73125 = inst_73122 && inst_73124;
          var state_73141__$1 = function() {
            var statearr_73143 = state_73141;
            statearr_73143[7] = inst_73119__$1;
            statearr_73143[8] = inst_73117;
            return statearr_73143;
          }();
          if (cljs.core.truth_(inst_73125)) {
            var statearr_73144_73202 = state_73141__$1;
            statearr_73144_73202[1] = 8;
          } else {
            var statearr_73145_73203 = state_73141__$1;
            statearr_73145_73203[1] = 9;
          }
          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
        } else {
          if (state_val_73142 === 1) {
            var state_73141__$1 = state_73141;
            var statearr_73146_73204 = state_73141__$1;
            statearr_73146_73204[2] = null;
            statearr_73146_73204[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
          } else {
            if (state_val_73142 === 4) {
              var state_73141__$1 = state_73141;
              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_73141__$1, 7, years_channel);
            } else {
              if (state_val_73142 === 6) {
                var inst_73137 = state_73141[2];
                var state_73141__$1 = state_73141;
                var statearr_73147_73205 = state_73141__$1;
                statearr_73147_73205[2] = inst_73137;
                statearr_73147_73205[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_73142 === 3) {
                  var inst_73139 = state_73141[2];
                  var state_73141__$1 = state_73141;
                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_73141__$1, inst_73139);
                } else {
                  if (state_val_73142 === 2) {
                    var state_73141__$1 = state_73141;
                    var statearr_73148_73206 = state_73141__$1;
                    statearr_73148_73206[1] = 4;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_73142 === 11) {
                      var inst_73133 = state_73141[2];
                      var state_73141__$1 = function() {
                        var statearr_73150 = state_73141;
                        statearr_73150[9] = inst_73133;
                        return statearr_73150;
                      }();
                      var statearr_73151_73207 = state_73141__$1;
                      statearr_73151_73207[2] = null;
                      statearr_73151_73207[1] = 2;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_73142 === 9) {
                        var state_73141__$1 = state_73141;
                        var statearr_73152_73208 = state_73141__$1;
                        statearr_73152_73208[2] = "";
                        statearr_73152_73208[1] = 10;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_73142 === 5) {
                          var state_73141__$1 = state_73141;
                          var statearr_73153_73209 = state_73141__$1;
                          statearr_73153_73209[2] = null;
                          statearr_73153_73209[1] = 6;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_73142 === 10) {
                            var inst_73117 = state_73141[8];
                            var inst_73129 = state_73141[2];
                            var inst_73130 = weather_canvas.core.init_location_autocomplete.call(null, inst_73117, inst_73129);
                            var inst_73131 = cljs.core.async.timeout.call(null, 100);
                            var state_73141__$1 = function() {
                              var statearr_73154 = state_73141;
                              statearr_73154[10] = inst_73130;
                              return statearr_73154;
                            }();
                            return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_73141__$1, 11, inst_73131);
                          } else {
                            if (state_val_73142 === 8) {
                              var inst_73119 = state_73141[7];
                              var state_73141__$1 = state_73141;
                              var statearr_73155_73210 = state_73141__$1;
                              statearr_73155_73210[2] = inst_73119;
                              statearr_73155_73210[1] = 10;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              return null;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      return function() {
        var weather_canvas$core$init_ui_$_state_machine__4606__auto__ = null;
        var weather_canvas$core$init_ui_$_state_machine__4606__auto____0 = function() {
          var statearr_73156 = [null, null, null, null, null, null, null, null, null, null, null];
          statearr_73156[0] = weather_canvas$core$init_ui_$_state_machine__4606__auto__;
          statearr_73156[1] = 1;
          return statearr_73156;
        };
        var weather_canvas$core$init_ui_$_state_machine__4606__auto____1 = function(state_73141) {
          while (true) {
            var ret_value__4607__auto__ = function() {
              try {
                while (true) {
                  var result__4608__auto__ = switch__4605__auto__.call(null, state_73141);
                  if (cljs.core.keyword_identical_QMARK_.call(null, result__4608__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    continue;
                  } else {
                    return result__4608__auto__;
                  }
                  break;
                }
              } catch (e73157) {
                var ex__4609__auto__ = e73157;
                var statearr_73158_73211 = state_73141;
                statearr_73158_73211[2] = ex__4609__auto__;
                if (cljs.core.seq.call(null, state_73141[4])) {
                  var statearr_73159_73212 = state_73141;
                  statearr_73159_73212[1] = cljs.core.first.call(null, state_73141[4]);
                } else {
                  throw ex__4609__auto__;
                }
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              }
            }();
            if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__4607__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
              var G__73213 = state_73141;
              state_73141 = G__73213;
              continue;
            } else {
              return ret_value__4607__auto__;
            }
            break;
          }
        };
        weather_canvas$core$init_ui_$_state_machine__4606__auto__ = function(state_73141) {
          switch(arguments.length) {
            case 0:
              return weather_canvas$core$init_ui_$_state_machine__4606__auto____0.call(this);
            case 1:
              return weather_canvas$core$init_ui_$_state_machine__4606__auto____1.call(this, state_73141);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        weather_canvas$core$init_ui_$_state_machine__4606__auto__.cljs$core$IFn$_invoke$arity$0 = weather_canvas$core$init_ui_$_state_machine__4606__auto____0;
        weather_canvas$core$init_ui_$_state_machine__4606__auto__.cljs$core$IFn$_invoke$arity$1 = weather_canvas$core$init_ui_$_state_machine__4606__auto____1;
        return weather_canvas$core$init_ui_$_state_machine__4606__auto__;
      }();
    }();
    var state__4638__auto__ = function() {
      var statearr_73160 = f__4637__auto__.call(null);
      statearr_73160[6] = c__4636__auto__;
      return statearr_73160;
    }();
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__4638__auto__);
  });
  return c__4636__auto__;
};
weather_canvas.core.indices = function weather_canvas$core$indices(pred, coll) {
  return cljs.core.keep_indexed.call(null, function(p1__73215_SHARP_, p2__73214_SHARP_) {
    if (cljs.core.truth_(pred.call(null, p2__73214_SHARP_))) {
      return p1__73215_SHARP_;
    } else {
      return null;
    }
  }, coll);
};
weather_canvas.core.init_location_autocomplete = function weather_canvas$core$init_location_autocomplete(points, default_value) {
  var a = cljs.core.apply.call(null, cljs.core.array, cljs.core.map.call(null, new cljs.core.Keyword(null, "title", "title", 636505583), points));
  dommy.core.replace_BANG_.call(null, document.getElementById("query-form-1-location"), function() {
    var v73216 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "input", "input", 556931961), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "id", "id", -1388402092), "query-form-1-location", new cljs.core.Keyword(null, "name", "name", 1843675177), "query-form-1-location", new cljs.core.Keyword(null, "autocomplete", "autocomplete", 1041133913), "off", new cljs.core.Keyword(null, "type", "type", 1174270348), "text", 
    new cljs.core.Keyword(null, "value", "value", 305978217), default_value], null)], null);
    var el__2842__auto__ = hipo.interpreter.create.call(null, v73216, null);
    hipo.core.set_hiccup_BANG_.call(null, el__2842__auto__, v73216);
    return el__2842__auto__;
  }());
  return goog.ui.ac.createSimpleAutoComplete(a, document.getElementById("query-form-1-location"), false);
};
weather_canvas.core.handle_form = function weather_canvas$core$handle_form(form) {
  var id_prefix = dommy.core.attr.call(null, form, new cljs.core.Keyword(null, "id", "id", -1388402092));
  var strip_prefix = weather_canvas.templates.id_stripper.call(null, id_prefix);
  return cljs.core.apply.call(null, cljs.core.hash_map, cljs.core.flatten.call(null, function() {
    var iter__4529__auto__ = function weather_canvas$core$handle_form_$_iter__73217(s__73218) {
      return new cljs.core.LazySeq(null, function() {
        var s__73218__$1 = s__73218;
        while (true) {
          var temp__5735__auto__ = cljs.core.seq.call(null, s__73218__$1);
          if (temp__5735__auto__) {
            var s__73218__$2 = temp__5735__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, s__73218__$2)) {
              var c__4527__auto__ = cljs.core.chunk_first.call(null, s__73218__$2);
              var size__4528__auto__ = cljs.core.count.call(null, c__4527__auto__);
              var b__73220 = cljs.core.chunk_buffer.call(null, size__4528__auto__);
              if (function() {
                var i__73219 = 0;
                while (true) {
                  if (i__73219 < size__4528__auto__) {
                    var el = cljs.core._nth.call(null, c__4527__auto__, i__73219);
                    var id = dommy.core.attr.call(null, el, new cljs.core.Keyword(null, "id", "id", -1388402092));
                    if (!(id == null)) {
                      cljs.core.chunk_append.call(null, b__73220, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [strip_prefix.call(null, id), dommy.core.value.call(null, el)], null));
                      var G__73221 = i__73219 + 1;
                      i__73219 = G__73221;
                      continue;
                    } else {
                      var G__73222 = i__73219 + 1;
                      i__73219 = G__73222;
                      continue;
                    }
                  } else {
                    return true;
                  }
                  break;
                }
              }()) {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__73220), weather_canvas$core$handle_form_$_iter__73217.call(null, cljs.core.chunk_rest.call(null, s__73218__$2)));
              } else {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__73220), null);
              }
            } else {
              var el = cljs.core.first.call(null, s__73218__$2);
              var id = dommy.core.attr.call(null, el, new cljs.core.Keyword(null, "id", "id", -1388402092));
              if (!(id == null)) {
                return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [strip_prefix.call(null, id), dommy.core.value.call(null, el)], null), weather_canvas$core$handle_form_$_iter__73217.call(null, cljs.core.rest.call(null, s__73218__$2)));
              } else {
                var G__73223 = cljs.core.rest.call(null, s__73218__$2);
                s__73218__$1 = G__73223;
                continue;
              }
            }
          } else {
            return null;
          }
          break;
        }
      }, null, null);
    };
    return iter__4529__auto__.call(null, dommy.utils.__GT_Array.call(null, form.querySelectorAll("input,select")));
  }()));
};
weather_canvas.core.init_ui.call(null);
